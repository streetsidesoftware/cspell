"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[42107],{48248:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"api/cspell/interfaces/RegExpPatternDefinition","title":"Interface: RegExpPatternDefinition","description":"Defined in1440","source":"@site/docs/api/cspell/interfaces/RegExpPatternDefinition.md","sourceDirName":"api/cspell/interfaces","slug":"/api/cspell/interfaces/RegExpPatternDefinition","permalink":"/docsV2/docs/api/cspell/interfaces/RegExpPatternDefinition","draft":false,"unlisted":false,"editUrl":"https://github.com/streetsidesoftware/cspell/tree/main/website/docs/docs/api/cspell/interfaces/RegExpPatternDefinition.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Interface: ProgressFileComplete","permalink":"/docsV2/docs/api/cspell/interfaces/ProgressFileComplete"},"next":{"title":"Interface: ReporterConfiguration","permalink":"/docsV2/docs/api/cspell/interfaces/ReporterConfiguration"}}');var s=t(86106),r=t(70128);const c={},o="Interface: RegExpPatternDefinition",d={},a=[{value:"Properties",id:"properties",level:2},{value:"description?",id:"description",level:3},{value:"name",id:"name",level:3},{value:"pattern",id:"pattern",level:3}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"interface-regexppatterndefinition",children:"Interface: RegExpPatternDefinition"})}),"\n",(0,s.jsx)(n.p,{children:"Defined in: cspell-types/dist/index.d.mts:1440"}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(n.h3,{id:"description",children:"description?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"description"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Defined in: cspell-types/dist/index.d.mts:1453"}),"\n",(0,s.jsx)(n.p,{children:"Description of the pattern."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"name",children:"name"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Defined in: cspell-types/dist/index.d.mts:1445"}),"\n",(0,s.jsx)(n.p,{children:"Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList.\nIt is possible to redefine one of the predefined patterns to override its value."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"pattern",children:"pattern"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"pattern"}),": ",(0,s.jsx)(n.a,{href:"/docsV2/docs/api/cspell/type-aliases/Pattern",children:(0,s.jsx)(n.code,{children:"Pattern"})})," | ",(0,s.jsx)(n.a,{href:"/docsV2/docs/api/cspell/type-aliases/Pattern",children:(0,s.jsx)(n.code,{children:"Pattern"})}),"[]"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Defined in: cspell-types/dist/index.d.mts:1449"}),"\n",(0,s.jsx)(n.p,{children:"RegExp pattern or array of RegExp patterns."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},70128:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var i=t(7378);const s={},r=i.createContext(s);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
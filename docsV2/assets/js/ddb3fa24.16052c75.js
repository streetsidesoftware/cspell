"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[69539],{36919:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"Configuration/imports","title":"Importing / Extending Configuration","description":"By default the spell checker searches the current directory and up the hierarchy for the following files:","source":"@site/docs/Configuration/imports.md","sourceDirName":"Configuration","slug":"/Configuration/imports","permalink":"/docsV2/docs/Configuration/imports","draft":false,"unlisted":false,"editUrl":"https://github.com/streetsidesoftware/cspell/tree/main/website/docs/docs/Configuration/imports.md","tags":[],"version":"current","frontMatter":{"layout":"default","title":"Importing / Extending Configuration","categories":"configuration","parent":"Configuration","nav_order":11},"sidebar":"tutorialSidebar","previous":{"title":"Document Settings","permalink":"/docsV2/docs/Configuration/document-settings"},"next":{"title":"Language Settings","permalink":"/docsV2/docs/Configuration/language-settings"}}');var r=i(86106),o=i(72300);const s={layout:"default",title:"Importing / Extending Configuration",categories:"configuration",parent:"Configuration",nav_order:11},t="Importing Configuration",c={},d=[{value:"Merging",id:"merging",level:2},{value:"Conditional Configuration",id:"conditional-configuration",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"importing-configuration",children:"Importing Configuration"})}),"\n",(0,r.jsx)(n.p,{children:"By default the spell checker searches the current directory and up the hierarchy for the following files:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"package.json"})," - looking for a ",(0,r.jsx)(n.code,{children:"cspell"})," field."]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:".cspell.json"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"cspell.json"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:".cSpell.json"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"cSpell.json"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"cspell.config.js"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"cspell.config.cjs"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"cspell.config.json"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"cspell.config.yaml"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"cspell.config.yml"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"cspell.yaml"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"cspell.yml"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The first configuration file found will be loaded, the others will be ignored. To leverage multiple CSpell configuration files, the spell checker supports an ",(0,r.jsx)(n.code,{children:"import"})," field. The ",(0,r.jsx)(n.code,{children:"import"})," field is used to list files to be imported in order."]}),"\n",(0,r.jsx)(n.p,{children:'The spell checker "merges" configuration to build the settings used to check a document.'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"import"})," - Each configuration file can ",(0,r.jsx)(n.code,{children:"import"})," more configuration files. The files listed in the import are merged from first to last with the parent (the one that did the import) merged at the end."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"merging",children:"Merging"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"cspell.yml"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"language: fr\nimport:\n  - cspell-a.yml\n  - cspell-b.yml\nwords:\n  - root\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"cspell-a.yml"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"dictionaries:\n  - aws # enable aws dictionary\n  - '!html' # Disable `html` dictionary\nwords:\n  - apple\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"cspell-b.yml"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"language: en\ndictionaries:\n  - '!softwareTerms' # Disable software-terms dictionary.\n  - html # enable html\nwords:\n  - banana\n"})}),"\n",(0,r.jsx)(n.p,{children:"Merged Result:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"language: fr\ndictionaries:\n  - aws\n  - '!html'\n  - '!softwareTerms'\n  - html\nwords:\n  - root\n  - apple\n  - banana\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Dictionary order does not matter. The number of ",(0,r.jsx)(n.code,{children:"!"}),"s is more important. In this case the ",(0,r.jsx)(n.code,{children:"html"})," and ",(0,r.jsx)(n.code,{children:"softwareTerms"})," dictionaries will NOT be used, nor will the English dictionary due to the ",(0,r.jsx)(n.code,{children:"language"})," being ",(0,r.jsx)(n.code,{children:"fr"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"conditional-configuration",children:"Conditional Configuration"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"overrides"})," - Overrides are used to apply settings based upon the file / path name of the file being checked matching the globs defined in ",(0,r.jsx)(n.code,{children:"filename"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"languageSettings"})," - Language settings are used to apply settings based upon matching the file type (",(0,r.jsx)(n.code,{children:"languageId"}),") or ",(0,r.jsx)(n.code,{children:"locale"}),". A ",(0,r.jsx)(n.code,{children:"languageId"})," or ",(0,r.jsx)(n.code,{children:"locale"})," of ",(0,r.jsx)(n.code,{children:"*"})," will match any file type or natural language respectively. ",(0,r.jsx)(n.code,{children:"languageId"})," is a bit confusing because it originally referred to programming language, but it is really just a file type like ",(0,r.jsx)(n.code,{children:"json"})," or ",(0,r.jsx)(n.code,{children:"python"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},72300:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>t});var l=i(7378);const r={},o=l.createContext(r);function s(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);
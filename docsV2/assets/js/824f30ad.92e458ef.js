"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[48969],{55636:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api/cspell-lib/interfaces/LanguageSetting","title":"Interface: LanguageSetting","description":"Extends","source":"@site/docs/api/cspell-lib/interfaces/LanguageSetting.md","sourceDirName":"api/cspell-lib/interfaces","slug":"/api/cspell-lib/interfaces/LanguageSetting","permalink":"/docsV2/docs/api/cspell-lib/interfaces/LanguageSetting","draft":false,"unlisted":false,"editUrl":"https://github.com/streetsidesoftware/cspell/tree/main/website/docs/docs/api/cspell-lib/interfaces/LanguageSetting.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Interface: Issue","permalink":"/docsV2/docs/api/cspell-lib/interfaces/Issue"},"next":{"title":"Interface: LanguageSettingFilterFields","permalink":"/docsV2/docs/api/cspell-lib/interfaces/LanguageSettingFilterFields"}}');var d=n(86106),l=n(72300);const r={},c="Interface: LanguageSetting",t={},o=[{value:"Extends",id:"extends",level:2},{value:"Properties",id:"properties",level:2},{value:"allowCompoundWords?",id:"allowcompoundwords",level:3},{value:"Default",id:"default",level:4},{value:"Inherited from",id:"inherited-from",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"caseSensitive?",id:"casesensitive",level:3},{value:"Default",id:"default-1",level:4},{value:"Inherited from",id:"inherited-from-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"description?",id:"description",level:3},{value:"Inherited from",id:"inherited-from-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"dictionaries?",id:"dictionaries",level:3},{value:"Inherited from",id:"inherited-from-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"dictionaryDefinitions?",id:"dictionarydefinitions",level:3},{value:"Inherited from",id:"inherited-from-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"enabled?",id:"enabled",level:3},{value:"Default",id:"default-2",level:4},{value:"Inherited from",id:"inherited-from-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"flagWords?",id:"flagwords",level:3},{value:"Inherited from",id:"inherited-from-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"id?",id:"id",level:3},{value:"Inherited from",id:"inherited-from-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"ignoreRegExpList?",id:"ignoreregexplist",level:3},{value:"Inherited from",id:"inherited-from-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"ignoreWords?",id:"ignorewords",level:3},{value:"Inherited from",id:"inherited-from-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"includeRegExpList?",id:"includeregexplist",level:3},{value:"Inherited from",id:"inherited-from-10",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"languageId",id:"languageid",level:3},{value:"Inherited from",id:"inherited-from-11",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"<del>local?</del>",id:"local",level:3},{value:"Deprecated",id:"deprecated",level:4},{value:"Deprecation Message",id:"deprecation-message",level:4},{value:"Inherited from",id:"inherited-from-12",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"locale?",id:"locale",level:3},{value:"Inherited from",id:"inherited-from-13",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"name?",id:"name",level:3},{value:"Inherited from",id:"inherited-from-14",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"noSuggestDictionaries?",id:"nosuggestdictionaries",level:3},{value:"Inherited from",id:"inherited-from-15",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"parser?",id:"parser",level:3},{value:"Since",id:"since",level:4},{value:"Inherited from",id:"inherited-from-16",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"patterns?",id:"patterns",level:3},{value:"Inherited from",id:"inherited-from-17",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"suggestWords?",id:"suggestwords",level:3},{value:"Inherited from",id:"inherited-from-18",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"words?",id:"words",level:3},{value:"Inherited from",id:"inherited-from-19",level:4},{value:"Defined in",id:"defined-in-19",level:4}];function a(e){const i={a:"a",blockquote:"blockquote",code:"code",del:"del",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(i.header,{children:(0,d.jsx)(i.h1,{id:"interface-languagesetting",children:"Interface: LanguageSetting"})}),"\n",(0,d.jsx)(i.h2,{id:"extends",children:"Extends"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/LanguageSettingFilterFields",children:(0,d.jsx)(i.code,{children:"LanguageSettingFilterFields"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})})]}),"\n"]}),"\n",(0,d.jsx)(i.h2,{id:"properties",children:"Properties"}),"\n",(0,d.jsx)(i.h3,{id:"allowcompoundwords",children:"allowCompoundWords?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"allowCompoundWords"}),": ",(0,d.jsx)(i.code,{children:"boolean"})]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"True to enable compound word checking."}),"\n",(0,d.jsx)(i.h4,{id:"default",children:"Default"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-ts",children:"false\n"})}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#allowcompoundwords",children:(0,d.jsx)(i.code,{children:"allowCompoundWords"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:414"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"casesensitive",children:"caseSensitive?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"caseSensitive"}),": ",(0,d.jsx)(i.code,{children:"boolean"})]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"Determines if words must match case and accent rules."}),"\n",(0,d.jsxs)(i.p,{children:["See ",(0,d.jsx)(i.a,{href:"https://cspell.org/docs/case-sensitive/",children:"Case Sensitivity"})," for more details."]}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"false"})," - Case is ignored and accents can be missing on the entire word.\nIncorrect accents or partially missing accents will be marked as incorrect."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"true"})," - Case and accents are enforced."]}),"\n"]}),"\n",(0,d.jsx)(i.h4,{id:"default-1",children:"Default"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-ts",children:"false\n"})}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-1",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#casesensitive",children:(0,d.jsx)(i.code,{children:"caseSensitive"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:426"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"description",children:"description?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"description"}),": ",(0,d.jsx)(i.code,{children:"string"})]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"Optional description of configuration."}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-2",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#description",children:(0,d.jsx)(i.code,{children:"description"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:403"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"dictionaries",children:"dictionaries?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"dictionaries"}),": ",(0,d.jsx)(i.code,{children:"string"}),"[]"]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"Optional list of dictionaries to use. Each entry should match the name of the dictionary."}),"\n",(0,d.jsxs)(i.p,{children:["To remove a dictionary from the list, add ",(0,d.jsx)(i.code,{children:"!"})," before the name."]}),"\n",(0,d.jsxs)(i.p,{children:["For example, ",(0,d.jsx)(i.code,{children:"!typescript"})," will turn off the dictionary with the name ",(0,d.jsx)(i.code,{children:"typescript"}),"."]}),"\n",(0,d.jsxs)(i.p,{children:["See the ",(0,d.jsx)(i.a,{href:"https://cspell.org/docs/dictionaries/",children:"Dictionaries"}),"\nand ",(0,d.jsx)(i.a,{href:"https://cspell.org/docs/dictionaries-custom/",children:"Custom Dictionaries"})," for more details."]}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-3",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#dictionaries",children:(0,d.jsx)(i.code,{children:"dictionaries"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:450"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"dictionarydefinitions",children:"dictionaryDefinitions?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"dictionaryDefinitions"}),": ",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/type-aliases/DictionaryDefinition",children:(0,d.jsx)(i.code,{children:"DictionaryDefinition"})}),"[]"]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"Define additional available dictionaries."}),"\n",(0,d.jsx)(i.p,{children:"For example, you can use the following to add a custom dictionary:"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-json",children:'"dictionaryDefinitions": [\n  { "name": "custom-words", "path": "./custom-words.txt"}\n],\n"dictionaries": ["custom-words"]\n'})}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-4",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#dictionarydefinitions",children:(0,d.jsx)(i.code,{children:"dictionaryDefinitions"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:439"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"enabled",children:"enabled?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"enabled"}),": ",(0,d.jsx)(i.code,{children:"boolean"})]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"Is the spell checker enabled."}),"\n",(0,d.jsx)(i.h4,{id:"default-2",children:"Default"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-ts",children:"true\n"})}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-5",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#enabled",children:(0,d.jsx)(i.code,{children:"enabled"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:408"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"flagwords",children:"flagWords?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"flagWords"}),": ",(0,d.jsx)(i.code,{children:"string"}),"[]"]}),"\n"]}),"\n",(0,d.jsxs)(i.p,{children:["List of words to always be considered incorrect. Words found in ",(0,d.jsx)(i.code,{children:"flagWords"})," override ",(0,d.jsx)(i.code,{children:"words"}),"."]}),"\n",(0,d.jsxs)(i.p,{children:["Format of ",(0,d.jsx)(i.code,{children:"flagWords"})]}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:["single word entry - ",(0,d.jsx)(i.code,{children:"word"})]}),"\n",(0,d.jsxs)(i.li,{children:["with suggestions - ",(0,d.jsx)(i.code,{children:"word:suggestion"})," or ",(0,d.jsx)(i.code,{children:"word->suggestion, suggestions"})]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"Example:"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-ts",children:'"flagWords": [\n  "color: colour",\n  "incase: in case, encase",\n  "canot->cannot",\n  "cancelled->canceled"\n]\n'})}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-6",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#flagwords",children:(0,d.jsx)(i.code,{children:"flagWords"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/InlineDictionary.d.ts:23"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"id",children:"id?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"id"}),": ",(0,d.jsx)(i.code,{children:"string"})]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"Optional identifier."}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-7",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#id",children:(0,d.jsx)(i.code,{children:"id"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:399"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"ignoreregexplist",children:"ignoreRegExpList?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"ignoreRegExpList"}),": ",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/type-aliases/RegExpPatternList",children:(0,d.jsx)(i.code,{children:"RegExpPatternList"})})]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"List of regular expression patterns or pattern names to exclude from spell checking."}),"\n",(0,d.jsxs)(i.p,{children:["Example: ",(0,d.jsx)(i.code,{children:'["href"]'})," - to exclude html href pattern."]}),"\n",(0,d.jsx)(i.p,{children:"Regular expressions use JavaScript regular expression syntax."}),"\n",(0,d.jsx)(i.p,{children:"Example: to ignore ALL-CAPS words"}),"\n",(0,d.jsx)(i.p,{children:"JSON"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-json",children:'"ignoreRegExpList": ["/\\\\b[A-Z]+\\\\b/g"]\n'})}),"\n",(0,d.jsx)(i.p,{children:"YAML"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-yaml",children:"ignoreRegExpList:\n  - >-\n   /\\b[A-Z]+\\b/g\n"})}),"\n",(0,d.jsxs)(i.p,{children:["By default, several patterns are excluded. See\n",(0,d.jsx)(i.a,{href:"https://cspell.org/configuration/patterns",children:"Configuration"})," for more details."]}),"\n",(0,d.jsxs)(i.p,{children:["While you can create your own patterns, you can also leverage several patterns that are\n",(0,d.jsx)(i.a,{href:"https://cspell.org/types/cspell-types/types/PredefinedPatterns.html",children:"built-in to CSpell"}),"."]}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-8",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#ignoreregexplist",children:(0,d.jsx)(i.code,{children:"ignoreRegExpList"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:488"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"ignorewords",children:"ignoreWords?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"ignoreWords"}),": ",(0,d.jsx)(i.code,{children:"string"}),"[]"]}),"\n"]}),"\n",(0,d.jsxs)(i.p,{children:["List of words to be ignored. An ignored word will not show up as an error, even if it is\nalso in the ",(0,d.jsx)(i.code,{children:"flagWords"}),"."]}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-9",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#ignorewords",children:(0,d.jsx)(i.code,{children:"ignoreWords"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/InlineDictionary.d.ts:28"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"includeregexplist",children:"includeRegExpList?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"includeRegExpList"}),": ",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/type-aliases/RegExpPatternList",children:(0,d.jsx)(i.code,{children:"RegExpPatternList"})})]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"List of regular expression patterns or defined pattern names to match for spell checking."}),"\n",(0,d.jsx)(i.p,{children:"If this property is defined, only text matching the included patterns will be checked."}),"\n",(0,d.jsxs)(i.p,{children:["While you can create your own patterns, you can also leverage several patterns that are\n",(0,d.jsx)(i.a,{href:"https://cspell.org/types/cspell-types/types/PredefinedPatterns.html",children:"built-in to CSpell"}),"."]}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-10",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#includeregexplist",children:(0,d.jsx)(i.code,{children:"includeRegExpList"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:497"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"languageid",children:"languageId"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.strong,{children:"languageId"}),": ",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/type-aliases/MatchingFileType",children:(0,d.jsx)(i.code,{children:"MatchingFileType"})})]}),"\n"]}),"\n",(0,d.jsxs)(i.p,{children:["The language id.  Ex: ",(0,d.jsx)(i.code,{children:"typescript"}),", ",(0,d.jsx)(i.code,{children:"html"}),", or ",(0,d.jsx)(i.code,{children:"php"}),".  ",(0,d.jsx)(i.code,{children:"*"})," -- will match all languages."]}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-11",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/LanguageSettingFilterFields",children:(0,d.jsx)(i.code,{children:"LanguageSettingFilterFields"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/LanguageSettingFilterFields#languageid",children:(0,d.jsx)(i.code,{children:"languageId"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:531"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"local",children:(0,d.jsx)(i.del,{children:"local?"})}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"local"}),": ",(0,d.jsx)(i.code,{children:"string"})," | ",(0,d.jsx)(i.code,{children:"string"}),"[]"]}),"\n"]}),"\n",(0,d.jsxs)(i.p,{children:["Deprecated - The locale filter, matches against the language. This can be a comma separated list. ",(0,d.jsx)(i.code,{children:"*"})," will match all locales."]}),"\n",(0,d.jsx)(i.h4,{id:"deprecated",children:"Deprecated"}),"\n",(0,d.jsx)(i.p,{children:"true"}),"\n",(0,d.jsx)(i.h4,{id:"deprecation-message",children:"Deprecation Message"}),"\n",(0,d.jsxs)(i.p,{children:["Use ",(0,d.jsx)(i.code,{children:"locale"})," instead."]}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-12",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/LanguageSettingFilterFields",children:(0,d.jsx)(i.code,{children:"LanguageSettingFilterFields"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/LanguageSettingFilterFields#local",children:(0,d.jsx)(i.code,{children:"local"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:543"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"locale",children:"locale?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"locale"}),": ",(0,d.jsx)(i.code,{children:"string"})," | ",(0,d.jsx)(i.code,{children:"string"}),"[]"]}),"\n"]}),"\n",(0,d.jsxs)(i.p,{children:["The locale filter, matches against the language. This can be a comma separated list. ",(0,d.jsx)(i.code,{children:"*"})," will match all locales."]}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-13",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/LanguageSettingFilterFields",children:(0,d.jsx)(i.code,{children:"LanguageSettingFilterFields"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/LanguageSettingFilterFields#locale",children:(0,d.jsx)(i.code,{children:"locale"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:533"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"name",children:"name?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"name"}),": ",(0,d.jsx)(i.code,{children:"string"})]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"Optional name of configuration."}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-14",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#name",children:(0,d.jsx)(i.code,{children:"name"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:401"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"nosuggestdictionaries",children:"noSuggestDictionaries?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"noSuggestDictionaries"}),": ",(0,d.jsx)(i.code,{children:"string"}),"[]"]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"Optional list of dictionaries that will not be used for suggestions.\nWords in these dictionaries are considered correct, but will not be\nused when making spell correction suggestions."}),"\n",(0,d.jsx)(i.p,{children:"Note: if a word is suggested by another dictionary, but found in\none of these dictionaries, it will be removed from the set of\npossible suggestions."}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-15",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#nosuggestdictionaries",children:(0,d.jsx)(i.code,{children:"noSuggestDictionaries"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:460"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"parser",children:"parser?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"parser"}),": ",(0,d.jsx)(i.code,{children:"string"})]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.strong,{children:(0,d.jsx)(i.code,{children:"Experimental"})})}),"\n",(0,d.jsx)(i.p,{children:"Parser to use for the file content"}),"\n",(0,d.jsx)(i.h4,{id:"since",children:"Since"}),"\n",(0,d.jsx)(i.p,{children:"6.2.0"}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-16",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#parser",children:(0,d.jsx)(i.code,{children:"parser"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:744"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"patterns",children:"patterns?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"patterns"}),": ",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/RegExpPatternDefinition",children:(0,d.jsx)(i.code,{children:"RegExpPatternDefinition"})}),"[]"]}),"\n"]}),"\n",(0,d.jsxs)(i.p,{children:["Defines a list of patterns that can be used with the ",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#ignoreregexplist",children:"ignoreRegExpList"})," and\n",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#includeregexplist",children:"includeRegExpList"})," options."]}),"\n",(0,d.jsx)(i.p,{children:"For example:"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-javascript",children:'"ignoreRegExpList": ["comments"],\n"patterns": [\n  {\n    "name": "comment-single-line",\n    "pattern": "/#.*\u200b/g"\n  },\n  {\n    "name": "comment-multi-line",\n    "pattern": "/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g"\n  },\n  // You can also combine multiple named patterns into one single named pattern\n  {\n    "name": "comments",\n    "pattern": ["comment-single-line", "comment-multi-line"]\n  }\n]\n'})}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-17",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#patterns",children:(0,d.jsx)(i.code,{children:"patterns"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-17",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/CSpellSettingsDef.d.ts:523"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"suggestwords",children:"suggestWords?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"suggestWords"}),": ",(0,d.jsx)(i.code,{children:"string"}),"[]"]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"A list of suggested replacements for words.\nSuggested words provide a way to make preferred suggestions on word replacements.\nTo hint at a preferred change, but not to require it."}),"\n",(0,d.jsxs)(i.p,{children:["Format of ",(0,d.jsx)(i.code,{children:"suggestWords"})]}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:["Single suggestion (possible auto fix)","\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:(0,d.jsx)(i.code,{children:"word: suggestion"})}),"\n",(0,d.jsx)(i.li,{children:(0,d.jsx)(i.code,{children:"word->suggestion"})}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["Multiple suggestions (not auto fixable)","\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:(0,d.jsx)(i.code,{children:"word: first, second, third"})}),"\n",(0,d.jsx)(i.li,{children:(0,d.jsx)(i.code,{children:"word->first, second, third"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-18",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#suggestwords",children:(0,d.jsx)(i.code,{children:"suggestWords"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-18",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/InlineDictionary.d.ts:42"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h3,{id:"words",children:"words?"}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"optional"})," ",(0,d.jsx)(i.strong,{children:"words"}),": ",(0,d.jsx)(i.code,{children:"string"}),"[]"]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"List of words to be considered correct."}),"\n",(0,d.jsx)(i.h4,{id:"inherited-from-19",children:"Inherited from"}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting",children:(0,d.jsx)(i.code,{children:"BaseSetting"})}),".",(0,d.jsx)(i.a,{href:"/docsV2/docs/api/cspell-lib/interfaces/BaseSetting#words",children:(0,d.jsx)(i.code,{children:"words"})})]}),"\n",(0,d.jsx)(i.h4,{id:"defined-in-19",children:"Defined in"}),"\n",(0,d.jsx)(i.p,{children:"packages/cspell-types/dist/InlineDictionary.d.ts:5"})]})}function h(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,d.jsx)(i,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},72300:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>c});var s=n(7378);const d={},l=s.createContext(d);function r(e){const i=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),s.createElement(l.Provider,{value:i},e.children)}}}]);
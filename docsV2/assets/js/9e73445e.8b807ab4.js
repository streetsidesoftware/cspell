"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[62981],{37144:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"api/cspell/index","title":"cspell","description":"Coverage Status","source":"@site/docs/api/cspell/index.md","sourceDirName":"api/cspell","slug":"/api/cspell/","permalink":"/docsV2/docs/api/cspell/","draft":false,"unlisted":false,"editUrl":"https://github.com/streetsidesoftware/cspell/tree/main/website/docs/docs/api/cspell/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Searching Dictionaries","permalink":"/docsV2/docs/dictionaries/searching-dictionaries"},"next":{"title":"Enumeration: IncludeExcludeFlag","permalink":"/docsV2/docs/api/cspell/enumerations/IncludeExcludeFlag"}}');var l=s(86106),r=s(72300),c=s(27859),o=s(25213);const t={},a="cspell",d={},h=[{value:"Support Future Development",id:"support-future-development",level:2},{value:"Features",id:"features",level:2},{value:"CSpell for Enterprise",id:"cspell-for-enterprise",level:2},{value:"Installation",id:"installation",level:2},{value:"Docker",id:"docker",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Command: <code>lint</code> -- Spell Checking",id:"command-lint----spell-checking",level:2},{value:"Help",id:"help",level:3},{value:"Options",id:"options",level:3},{value:"Command: <code>check</code> - Quick Visual Check",id:"command-check---quick-visual-check",level:2},{value:"Tip for use with <code>less</code>",id:"tip-for-use-with-less",level:3},{value:"Command: <code>trace</code> - See which dictionaries contain a word",id:"command-trace---see-which-dictionaries-contain-a-word",level:2},{value:"Help <code>cspell trace --help</code>",id:"help-cspell-trace---help",level:3},{value:"CI/CD Continuous Integration support",id:"cicd-continuous-integration-support",level:2},{value:"Mega-Linter",id:"mega-linter",level:3},{value:"Git commit-hooks",id:"git-commit-hooks",level:3},{value:"pre-commit",id:"pre-commit",level:4},{value:"Requirements",id:"requirements",level:2},{value:"How it works",id:"how-it-works",level:2},{value:"Special cases",id:"special-cases",level:3},{value:"Things to note",id:"things-to-note",level:3},{value:"In Document Settings",id:"in-document-settings",level:2},{value:"Enable / Disable checking sections of code",id:"enable--disable-checking-sections-of-code",level:3},{value:"Disable Checking",id:"disable-checking",level:4},{value:"Enable Checking",id:"enable-checking",level:4},{value:"Example",id:"example",level:4},{value:"Ignore",id:"ignore",level:3},{value:"Words",id:"words",level:3},{value:"Enable / Disable compound words",id:"enable--disable-compound-words",level:3},{value:"Excluding and Including Text to be checked.",id:"excluding-and-including-text-to-be-checked",level:3},{value:"Exclude Example",id:"exclude-example",level:4},{value:"Include Example",id:"include-example",level:4},{value:"Dictionaries",id:"dictionaries",level:3},{value:"Predefined RegExp expressions",id:"predefined-regexp-expressions",level:2},{value:"Exclude patterns",id:"exclude-patterns",level:3},{value:"Include Patterns",id:"include-patterns",level:3},{value:"Customization",id:"customization",level:2},{value:"<code>cspell.json</code>",id:"cspelljson",level:3},{value:"Example <code>cspell.json</code> file",id:"example-cspelljson-file",level:4},{value:"cspell.json sections",id:"cspelljson-sections",level:3},{value:"Dictionaries",id:"dictionaries-1",level:2},{value:"General Dictionaries",id:"general-dictionaries",level:3},{value:"Programming Language Dictionaries",id:"programming-language-dictionaries",level:3},{value:"Miscellaneous Dictionaries",id:"miscellaneous-dictionaries",level:3},{value:"Dictionary Definition",id:"dictionary-definition",level:3},{value:"Disabling a Dictionary",id:"disabling-a-dictionary",level:3},{value:"Disable Default cpp Dictionary",id:"disable-default-cpp-dictionary",level:4},{value:"LanguageSettings",id:"languagesettings",level:2},{value:"Overrides",id:"overrides",level:2}];function p(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"cspell",children:"cspell"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://github.com/streetsidesoftware/cspell/actions",children:(0,l.jsx)(n.img,{src:"https://github.com/streetsidesoftware/cspell/actions/workflows/test.yml/badge.svg?branch=main",alt:""})}),"\n",(0,l.jsx)(n.a,{href:"https://coveralls.io/github/streetsidesoftware/cspell?branch=main",children:(0,l.jsx)(n.img,{src:"https://coveralls.io/repos/github/streetsidesoftware/cspell/badge.svg?branch=main",alt:"Coverage Status"})}),"\n",(0,l.jsx)(n.a,{href:"https://codecov.io/gh/streetsidesoftware/cspell",children:(0,l.jsx)(n.img,{src:"https://codecov.io/gh/streetsidesoftware/cspell/branch/main/graph/badge.svg?token=Dr4fi2Sy08",alt:"codecov"})})]}),"\n",(0,l.jsx)(n.p,{children:"A Spell Checker for Code!"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"cspell"})," is a command line tool and library for spell checking code."]}),"\n",(0,l.jsx)(n.h2,{id:"support-future-development",children:"Support Future Development"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/sponsors/streetsidesoftware",children:(0,l.jsx)(n.img,{src:"https://img.shields.io/badge/-black?style=social&logo=githubsponsors&label=GitHub%20Sponsor%3A%20Street%20Side%20Software",alt:"GitHub Sponsors"})})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://patreon.com/streetsidesoftware",children:(0,l.jsx)(n.img,{src:"https://img.shields.io/badge/-black?style=social&logo=patreon&label=Patreon%3A%20Street%20Side%20Software",alt:"Patreon"})})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://www.paypal.com/donate/?hosted_button_id=26LNBP2Q6MKCY",children:(0,l.jsx)(n.img,{src:"https://img.shields.io/badge/-black?style=social&logo=paypal&label=PayPal%20Donate%3A%20Street%20Side%20Software",alt:"PayPal"})})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://opencollective.com/cspell",children:(0,l.jsx)(n.img,{src:"https://img.shields.io/badge/-black?style=social&logo=opencollective&label=Open%20Collective%3A%20CSpell",alt:"Open Collective"})})}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Spell Checks Code -- Able to spell check code by parsing it into words before checking against the dictionaries.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Supports CamelCase, snake_case, and compoundwords naming styles."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"Self contained -- does not depend upon OS libraries like Hunspell or aspell. Nor does it depend upon online services."}),"\n",(0,l.jsx)(n.li,{children:"Fast -- checks 1000's of lines of code in seconds."}),"\n",(0,l.jsxs)(n.li,{children:["Programming Language Specific Dictionaries -- Has dedicated support for:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"JavaScript, TypeScript, Python, PHP, C#, C++, LaTex, Go, HTML, CSS, etc."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"Customizable -- supports custom dictionaries and word lists."}),"\n",(0,l.jsx)(n.li,{children:"Continuous Integration Support -- Can easily be added as a linter to Travis-CI."}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["cspell was initially built as the spell checking service for the ",(0,l.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker",children:"spell checker extension"})," for\n",(0,l.jsx)(n.a,{href:"https://code.visualstudio.com/",children:"Visual Studio Code"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"cspell-for-enterprise",children:"CSpell for Enterprise"}),"\n",(0,l.jsx)(n.p,{children:"Available as part of the Tidelift Subscription."}),"\n",(0,l.jsxs)(n.p,{children:["The maintainers of cspell and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use. ",(0,l.jsx)(n.a,{href:"https://tidelift.com/subscription/pkg/npm-cspell?utm_source=npm-cspell&utm_medium=referral&utm_campaign=enterprise&utm_term=repo",children:"Learn more."})]}),"\n",(0,l.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,l.jsxs)(c.A,{children:[(0,l.jsx)(o.A,{value:"npm",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sh",children:"npm install -g cspell\n"})})}),(0,l.jsx)(o.A,{value:"yarn",label:"Yarn",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sh",children:"yarn global add cspell\n"})})}),(0,l.jsx)(o.A,{value:"pnpm",label:"pnpm",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sh",children:"pnpm add -g cspell\n"})})})]}),"\n",(0,l.jsx)(n.h3,{id:"docker",children:"Docker"}),"\n",(0,l.jsxs)(n.p,{children:["There is a docker image at ",(0,l.jsx)(n.a,{href:"https://github.com/streetsidesoftware/cspell-cli/pkgs/container/cspell",children:"Packages for cspell"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"cspell"})," commands below can be run by replacing"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"cspell\n"})}),"\n",(0,l.jsx)(n.p,{children:"with:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"docker run -it -v $PWD:/workdir ghcr.io/streetsidesoftware/cspell:latest\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sh",children:"docker run -it -v $PWD:/workdir ghcr.io/streetsidesoftware/cspell:latest lint --help\n"})}),"\n",(0,l.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,l.jsxs)(n.p,{children:["Example: recursively spell check all JavaScript files in ",(0,l.jsx)(n.code,{children:"src"})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"JavaScript files"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sh",children:'cspell "src/**/*.js"\n# or\ncspell lint "src/**/*.js"\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Check everything"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sh",children:'cspell "**"\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Git: Check Only Changed Files"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sh",children:" git diff --name-only | npx cspell --file-list stdin\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"command-lint----spell-checking",children:["Command: ",(0,l.jsx)(n.code,{children:"lint"})," -- Spell Checking"]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"lint"})," command is used for spell checking files."]}),"\n",(0,l.jsx)(n.h3,{id:"help",children:"Help"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sh",children:"cspell lint --help\n"})}),"\n",(0,l.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:'Usage: cspell lint [options] [globs...] [file://<path> ...] [stdin[://<path>]]\n\nPatterns:\n - [globs...]            Glob Patterns\n - [stdin]               Read from "stdin" assume text file.\n - [stdin://<path>]      Read from "stdin", use <path> for file type and config.\n - [file://<path>]       Check the file at <path>\n\nExamples:\n    cspell .                        Recursively check all files.\n    cspell lint .                   The same as "cspell ."\n    cspell "*.js"                   Check all .js files in the current directory\n    cspell "**/*.js"                Check all .js files recursively\n    cspell "src/**/*.js"            Only check .js under src\n    cspell "**/*.txt" "**/*.js"     Check both .js and .txt files.\n    cspell "**/*.{txt,js,md}"       Check .txt, .js, and .md files.\n    cat LICENSE | cspell stdin      Check stdin\n    cspell stdin://docs/doc.md      Check stdin as if it was "./docs/doc.md"\n\nCheck spelling\n\nOptions:\n  -c, --config <cspell.json>   Configuration file to use.  By default cspell\n                               looks for cspell.json in the current directory.\n  -v, --verbose                Display more information about the files being\n                               checked and the configuration.\n  --locale <locale>            Set language locales. i.e. "en,fr" for English\n                               and French, or "en-GB" for British English.\n  --language-id <file-type>    Force programming language for unknown\n                               extensions. i.e. "php" or "scala"\n  --words-only                 Only output the words not found in the\n                               dictionaries.\n  -u, --unique                 Only output the first instance of a word not\n                               found in the dictionaries.\n  -e, --exclude <glob>         Exclude files matching the glob pattern. This\n                               option can be used multiple times to add\n                               multiple globs.\n  --file-list <path or stdin>  Specify a list of files to be spell checked. The\n                               list is filtered against the glob file patterns.\n                               Note: the format is 1 file path per line.\n  --file [file...]             Specify files to spell check. They are filtered\n                               by the [globs...].\n  --no-issues                  Do not show the spelling errors.\n  --no-progress                Turn off progress messages\n  --no-summary                 Turn off summary message in console.\n  -s, --silent                 Silent mode, suppress error messages.\n  --no-exit-code               Do not return an exit code if issues are found.\n  --quiet                      Only show spelling issues or errors.\n  --fail-fast                  Exit after first file with an issue or error.\n  -r, --root <root folder>     Root directory, defaults to current directory.\n  --no-relative                Issues are displayed with absolute path instead\n                               of relative to the root.\n  --show-context               Show the surrounding text around an issue.\n  --show-suggestions           Show spelling suggestions.\n  --no-show-suggestions        Do not show spelling suggestions or fixes.\n  --no-must-find-files         Do not error if no files are found.\n  --cache                      Use cache to only check changed files.\n  --no-cache                   Do not use cache.\n  --cache-reset                Reset the cache file.\n  --cache-strategy <strategy>  Strategy to use for detecting changed files.\n                               (choices: "content", "metadata", default:\n                               "content")\n  --cache-location <path>      Path to the cache file or directory. (default:\n                               ".cspellcache")\n  --dot                        Include files and directories starting with `.`\n                               (period) when matching globs.\n  --gitignore                  Ignore files matching glob patterns found in\n                               .gitignore files.\n  --no-gitignore               Do NOT use .gitignore files.\n  --gitignore-root <path>      Prevent searching for .gitignore files past\n                               root.\n  --validate-directives        Validate in-document CSpell directives.\n  --color                      Force color.\n  --no-color                   Turn off color.\n  --no-default-configuration   Do not load the default configuration and\n                               dictionaries.\n  --debug                      Output information useful for debugging\n                               cspell.json files.\n  --reporter <module|path>     Specify one or more reporters to use.\n  --issue-template [template]  Use a custom issue template. See --help\n                               --issue-template for details.\n  -h, --help                   display help for command\n\nMore Examples:\n\n    cspell "**/*.js" --reporter @cspell/cspell-json-reporter\n        This will spell check all ".js" files recursively and use\n        "@cspell/cspell-json-reporter".\n\n    cspell . --reporter default\n        This will force the default reporter to be used overriding\n        any reporters defined in the configuration.\n\n    cspell . --reporter ./<path>/reporter.cjs\n        Use a custom reporter. See API for details.\n\n    cspell "*.md" --exclude CHANGELOG.md --files README.md CHANGELOG.md\n        Spell check only check "README.md" but NOT "CHANGELOG.md".\n\n    cspell "/*.md" --no-must-find-files --files $FILES\n        Only spell check the "/*.md" files in $FILES,\n        where $FILES is a shell variable that contains the list of files.\n\nReferences:\n    https://cspell.org\n    https://github.com/streetsidesoftware/cspell\n'})}),"\n",(0,l.jsxs)(n.h2,{id:"command-check---quick-visual-check",children:["Command: ",(0,l.jsx)(n.code,{children:"check"})," - Quick Visual Check"]}),"\n",(0,l.jsx)(n.p,{children:"Do a quick visual check of a file. This is a great way to see which text is included in the check."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sh",children:"cspell check <filename>\n"})}),"\n",(0,l.jsxs)(n.p,{children:["It will produce something like this:\n",(0,l.jsx)(n.img,{src:"https://user-images.githubusercontent.com/3740137/35588848-2a8f1bca-0602-11e8-9cda-fddee2742c35.png",alt:"image"})]}),"\n",(0,l.jsxs)(n.h3,{id:"tip-for-use-with-less",children:["Tip for use with ",(0,l.jsx)(n.code,{children:"less"})]}),"\n",(0,l.jsxs)(n.p,{children:["To get color in less, use ",(0,l.jsx)(n.code,{children:"--color"})," and ",(0,l.jsx)(n.code,{children:"less -r"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sh",children:"cspell check <filename> --color | less -r\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"command-trace---see-which-dictionaries-contain-a-word",children:["Command: ",(0,l.jsx)(n.code,{children:"trace"})," - See which dictionaries contain a word"]}),"\n",(0,l.jsxs)(n.p,{children:["Trace shows a the list of known dictionaries and a ",(0,l.jsx)(n.code,{children:"*"})," next to the ones that contain the word."]}),"\n",(0,l.jsxs)(n.p,{children:["A ",(0,l.jsx)(n.code,{children:"!"})," will appear next to the ones where the word is forbidden."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{src:"https://user-images.githubusercontent.com/3740137/129488961-b99dbd2f-7daa-4462-96cd-568e0d4c3c6e.png",alt:"image"})}),"\n",(0,l.jsxs)(n.h3,{id:"help-cspell-trace---help",children:["Help ",(0,l.jsx)(n.code,{children:"cspell trace --help"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:'Usage: cspell trace [options] [words...]\n\nTrace words -- Search for words in the configuration and dictionaries.\n\nOptions:\n  -c, --config <cspell.json>  Configuration file to use.  By default cspell\n                              looks for cspell.json in the current directory.\n  --locale <locale>           Set language locales. i.e. "en,fr" for English\n                              and French, or "en-GB" for British English.\n  --language-id <language>    Use programming language. i.e. "php" or "scala".\n  --allow-compound-words      Turn on allowCompoundWords\n  --no-allow-compound-words   Turn off allowCompoundWords\n  --ignore-case               Ignore case and accents when searching for words.\n  --no-ignore-case            Do not ignore case and accents when searching for\n                              words.\n  --dictionary-path <format>  Configure how to display the dictionary path.\n                              (choices: "hide", "short", "long", "full",\n                              default: Display most of the path.)\n  --stdin                     Read words from stdin.\n  --all                       Show all dictionaries.\n  --only-found                Show only dictionaries that have the words.\n  --color                     Force color.\n  --no-color                  Turn off color.\n  --no-default-configuration  Do not load the default configuration and\n                              dictionaries.\n  -h, --help                  display help for command\n'})}),"\n",(0,l.jsx)(n.h2,{id:"cicd-continuous-integration-support",children:"CI/CD Continuous Integration support"}),"\n",(0,l.jsx)(n.h3,{id:"mega-linter",children:"Mega-Linter"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://nvuillam.github.io/mega-linter/",children:"Mega-Linter"})," aggregates 70 linters ready to use out of the box, including ",(0,l.jsx)(n.a,{href:"https://nvuillam.github.io/mega-linter/descriptors/spell_cspell/",children:"cspell"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Can run as a GitHub Action, on other CI tools and locally"}),"\n",(0,l.jsxs)(n.li,{children:["Provides an updated ",(0,l.jsx)(n.code,{children:".cspell.json"})," file with new unknown words"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Setup"})}),"\n",(0,l.jsxs)(n.p,{children:["Quick setup following installation guide in ",(0,l.jsx)(n.a,{href:"https://nvuillam.github.io/mega-linter/",children:"Mega-Linter documentation"})]}),"\n",(0,l.jsx)(n.h3,{id:"git-commit-hooks",children:"Git commit-hooks"}),"\n",(0,l.jsx)(n.h4,{id:"pre-commit",children:"pre-commit"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Setup"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"npm install -SD cspell\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:".git/hooks/pre-commit"})})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"#!/bin/sh\n\nexec git diff --cached --name-only | npx cspell --no-summary --no-progress --no-must-find-files --file-list stdin\n"})}),"\n",(0,l.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,l.jsx)(n.p,{children:"cspell needs Node 14 and above."}),"\n",(0,l.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,l.jsx)(n.p,{children:"The concept is simple, split camelCase and snake_case words before checking them against a list of known words."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"camelCase"})," -> ",(0,l.jsx)(n.code,{children:"camel case"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"HTMLInput"})," -> ",(0,l.jsx)(n.code,{children:"html input"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"srcCode"})," -> ",(0,l.jsx)(n.code,{children:"src code"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"snake_case_words"})," -> ",(0,l.jsx)(n.code,{children:"snake case words"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"camel2snake"})," -> ",(0,l.jsx)(n.code,{children:"camel snake"})," -- (the 2 is ignored)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"function parseJson(text: string)"})," -> ",(0,l.jsx)(n.code,{children:"function parse json text string"})]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"special-cases",children:"Special cases"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Escape characters like ",(0,l.jsx)(n.code,{children:"\\n"}),", ",(0,l.jsx)(n.code,{children:"\\t"})," are removed if the word does not match:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"\\narrow"})," -> ",(0,l.jsx)(n.code,{children:"narrow"})," - because ",(0,l.jsx)(n.code,{children:"narrow"})," is a word"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"\\ncode"})," -> ",(0,l.jsx)(n.code,{children:"code"})," - because ",(0,l.jsx)(n.code,{children:"ncode"})," is not a word."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"\\network"})," -> ",(0,l.jsx)(n.code,{children:"network"})," - but it might be hiding a spelling error, if ",(0,l.jsx)(n.code,{children:"\\n"})," was an escape character."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"things-to-note",children:"Things to note"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["This spellchecker is case insensitive. It will not catch errors like ",(0,l.jsx)(n.code,{children:"english"})," which should be ",(0,l.jsx)(n.code,{children:"English"}),"."]}),"\n",(0,l.jsx)(n.li,{children:"The spellchecker uses dictionaries stored locally. It does not send anything outside your machine."}),"\n",(0,l.jsx)(n.li,{children:"The words in the dictionaries can and do contain errors."}),"\n",(0,l.jsx)(n.li,{children:"There are missing words."}),"\n",(0,l.jsx)(n.li,{children:'Only words longer than 3 characters are checked. "jsj" is ok, while "jsja" is not.'}),"\n",(0,l.jsx)(n.li,{children:"All symbols and punctuation are ignored."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"in-document-settings",children:"In Document Settings"}),"\n",(0,l.jsx)(n.p,{children:"It is possible to add spell check settings into your source code.\nThis is to help with file specific issues that may not be applicable to the entire project."}),"\n",(0,l.jsxs)(n.p,{children:["All settings are prefixed with ",(0,l.jsx)(n.code,{children:"cspell:"})," or ",(0,l.jsx)(n.code,{children:"spell-checker:"}),"."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"disable"})," -- turn off the spell checker for a section of code."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"enable"})," -- turn the spell checker back on after it has been turned off."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ignore"})," -- specify a list of words to be ignored."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"words"})," -- specify a list of words to be considered correct and will appear in the suggestions list."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ignoreRegExp"})," -- Any text matching the regular expression will NOT be checked for spelling."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"includeRegExp"})," -- Only text matching the collection of includeRegExp will be checked."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"enableCompoundWords"})," / ",(0,l.jsx)(n.code,{children:"disableCompoundWords"}),' -- Allow / disallow words like: "stringlength".']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dictionaries"})," -- specify a list of the names of the dictionaries to use."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"enable--disable-checking-sections-of-code",children:"Enable / Disable checking sections of code"}),"\n",(0,l.jsx)(n.p,{children:"It is possible to disable / enable the spell checker by adding comments to your code."}),"\n",(0,l.jsx)(n.h4,{id:"disable-checking",children:"Disable Checking"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"/* cspell:disable */"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"/* spell-checker: disable */"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"/* spellchecker: disable */"})}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"// cspell:disable-line"})," -- disables checking for the current line."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"/* cspell:disable-next-line */"})," -- disables checking till the end of the next line."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"enable-checking",children:"Enable Checking"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"/* cspell:enable */"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"/* spell-checker: enable */"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"/* spellchecker: enable */"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// cspell:disable\nconst wackyWord = ['zaallano', 'wooorrdd', 'zzooommmmmmmm'];\n/* cspell:enable */\n\nconst words = ['zaallano', 'wooorrdd', 'zzooommmmmmmm']; // cspell:disable-line disables this entire line\n\n// To disable the next line, use cspell:disable-next-line\nconst moreWords = ['ieeees', 'beees', 'treeees'];\n\n// Nesting disable / enable is not Supported\n\n// spell-checker:disable\n// It is now disabled.\n\nvar liep = 1;\n\n/* cspell:disable */\n// It is still disabled\n\n// cspell:enable\n// It is now enabled\n\nconst str = 'goededag'; // <- will be flagged as an error.\n\n// spell-checker:enable <- doesn't do anything\n\n// cSPELL:DISABLE <-- also works.\n\n// if there isn't an enable, spelling is disabled till the end of the file.\nconst str = 'goedemorgen'; // <- will NOT be flagged as an error.\n"})}),"\n",(0,l.jsx)(n.h3,{id:"ignore",children:"Ignore"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.em,{children:"Ignore"})," allows you the specify a list of words you want to ignore within the document."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// cspell:ignore zaallano, wooorrdd\n// cspell:ignore zzooommmmmmmm\nconst wackyWord = ['zaallano', 'wooorrdd', 'zzooommmmmmmm'];\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," words defined with ",(0,l.jsx)(n.code,{children:"ignore"})," will be ignored for the entire file."]}),"\n",(0,l.jsx)(n.h3,{id:"words",children:"Words"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.em,{children:"words"})," list allows you to add words that will be considered correct and will be used as suggestions."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// cspell:words woorxs sweeetbeat\nconst companyName = 'woorxs sweeetbeat';\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," words defined with ",(0,l.jsx)(n.code,{children:"words"})," will be used for the entire file."]}),"\n",(0,l.jsx)(n.h3,{id:"enable--disable-compound-words",children:"Enable / Disable compound words"}),"\n",(0,l.jsx)(n.p,{children:"In some programming language it is common to glue words together."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:"// cspell:enableCompoundWords\nchar * errormessage;  // Is ok with cspell:enableCompoundWords\nint    errornumber;   // Is also ok.\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," Compound word checking cannot be turned on / off in the same file.\nThe last setting in the file determines the value for the entire file."]}),"\n",(0,l.jsx)(n.h3,{id:"excluding-and-including-text-to-be-checked",children:"Excluding and Including Text to be checked."}),"\n",(0,l.jsxs)(n.p,{children:["By default, the entire document is checked for spelling.\n",(0,l.jsx)(n.code,{children:"cspell:disable"}),"/",(0,l.jsx)(n.code,{children:"cspell:enable"})," above allows you to block off sections of the document.\n",(0,l.jsx)(n.code,{children:"ignoreRegExp"})," and ",(0,l.jsx)(n.code,{children:"includeRegExp"})," give you the ability to ignore or include patterns of text.\nBy default the flags ",(0,l.jsx)(n.code,{children:"gim"})," are added if no flags are given."]}),"\n",(0,l.jsx)(n.p,{children:"The spell checker works in the following way:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["Find all text matching ",(0,l.jsx)(n.code,{children:"includeRegExp"})]}),"\n",(0,l.jsxs)(n.li,{children:["Remove any text matching ",(0,l.jsx)(n.code,{children:"ignoreRegExp"})]}),"\n",(0,l.jsx)(n.li,{children:"Check the remaining text."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"exclude-example",children:"Exclude Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// cspell:ignoreRegExp 0x[0-9a-f]+     -- will ignore c style hex numbers\n// cspell:ignoreRegExp /0x[0-9A-F]+/g  -- will ignore upper case c style hex numbers.\n// cspell:ignoreRegExp g{5} h{5}       -- will only match ggggg, but not hhhhh or 'ggggg hhhhh'\n// cspell:ignoreRegExp g{5}|h{5}       -- will match both ggggg and hhhhh\n// cspell:ignoreRegExp /g{5} h{5}/     -- will match 'ggggg hhhhh'\n/* cspell:ignoreRegExp /n{5}/          -- will NOT work as expected because of the ending comment -> */\n/*\n   cspell:ignoreRegExp /q{5}/          -- will match qqqqq just fine but NOT QQQQQ\n*/\n// cspell:ignoreRegExp /[^\\s]{40,}/    -- will ignore long strings with no spaces.\n// cspell:ignoreRegExp Email           -- this will ignore email like patterns -- see Predefined RegExp expressions\nvar encodedImage = 'HR+cPzr7XGAOJNurPL0G8I2kU0UhKcqFssoKvFTR7z0T3VJfK37vS025uKroHfJ9nA6WWbHZ/ASn...';\nvar email1 = 'emailaddress@myfancynewcompany.com';\nvar email2 = '<emailaddress@myfancynewcompany.com>';\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," ignoreRegExp and includeRegExp are applied to the entire file. They do not start and stop."]}),"\n",(0,l.jsx)(n.h4,{id:"include-example",children:"Include Example"}),"\n",(0,l.jsxs)(n.p,{children:["In general you should not need to use ",(0,l.jsx)(n.code,{children:"includeRegExp"}),". But if you are mixing languages then it could come in helpful."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-Python",children:'# cspell:includeRegExp #.*\n# cspell:includeRegExp ("""|\'\'\')[^\\1]*\\1\n# only comments and block strings will be checked for spelling.\ndef sum_it(self, seq):\n    """This is checked for spelling"""\n    variabele = 0\n    alinea = \'this is not checked\'\n    for num in seq:\n        # The local state of \'value\' will be retained between iterations\n        variabele += num\n        yield variabele\n'})}),"\n",(0,l.jsx)(n.h3,{id:"dictionaries",children:"Dictionaries"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.em,{children:"dictionaries"})," list allows you to specify dictionaries to use for the file."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// cspell:dictionaries lorem-ipsum\nconst companyName = 'Lorem ipsum dolor sit amet';\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," dictionaries specified with ",(0,l.jsx)(n.code,{children:"dictionaries"})," will be used for the entire file."]}),"\n",(0,l.jsx)(n.h2,{id:"predefined-regexp-expressions",children:"Predefined RegExp expressions"}),"\n",(0,l.jsx)(n.h3,{id:"exclude-patterns",children:"Exclude patterns"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Urls"}),(0,l.jsx)("sup",{children:"1"})," -- Matches urls"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"HexValues"})," -- Matches common hex format like ",(0,l.jsx)(n.code,{children:"#aaa"}),", ",(0,l.jsx)(n.code,{children:"0xfeef"}),", ",(0,l.jsx)(n.code,{children:"\\u0134"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Base64"}),(0,l.jsx)("sup",{children:"1"})," -- matches base64 blocks of text longer than 40 characters."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Email"})," -- matches most email addresses."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"include-patterns",children:"Include Patterns"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Everything"}),(0,l.jsx)("sup",{children:"1"})," -- By default we match an entire document and remove the excludes."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"string"})," -- This matches common string formats like '...', \"...\", and ",(0,l.jsx)(n.code,{children:"..."})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"CStyleComment"})," -- These are C Style comments /* */ and //"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"PhpHereDoc"})," -- This matches PHPHereDoc strings."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)("sup",{children:"1."})," These patterns are part of the default include/exclude list for every file."]}),"\n",(0,l.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.em,{children:"cspell"}),"'s behavior can be controlled through a config file. By default it looks for any of the following files:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:".cspell.json"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"cspell.json"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:".cSpell.json"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"cSpell.json"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"cspell.config.js"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"cspell.config.cjs"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"cspell.config.json"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"cspell.config.yaml"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"cspell.config.yml"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"cspell.yaml"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"cspell.yml"})}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Or you can specify a path to a config file with the ",(0,l.jsx)(n.code,{children:"--config <path>"})," argument on the command line."]}),"\n",(0,l.jsx)(n.h3,{id:"cspelljson",children:(0,l.jsx)(n.code,{children:"cspell.json"})}),"\n",(0,l.jsxs)(n.h4,{id:"example-cspelljson-file",children:["Example ",(0,l.jsx)(n.code,{children:"cspell.json"})," file"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'// cSpell Settings\n{\n    // Version of the setting file.  Always 0.2\n    "version": "0.2",\n    // language - current active spelling language\n    "language": "en",\n    // words - list of words to be always considered correct\n    "words": [\n        "mkdirp",\n        "tsmerge",\n        "githubusercontent",\n        "streetsidesoftware",\n        "vsmarketplacebadge",\n        "visualstudio"\n    ],\n    // flagWords - list of words to be always considered incorrect\n    // This is useful for offensive words and common spelling errors.\n    // For example "hte" should be "the"\n    "flagWords": [\n        "hte"\n    ]\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"cspelljson-sections",children:"cspell.json sections"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"version"})," - currently always 0.2 - controls how the settings in the configuration file behave."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"language"})," - this specifies the language locale to use in choosing the general dictionary.\nFor example: ",(0,l.jsx)(n.code,{children:'"language": "en-GB"'})," tells cspell to use British English instead of US English."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"words"})," - a list of words to be considered correct."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"flagWords"})," - a list of words to be always considered incorrect"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ignoreWords"})," - a list of words to be ignored (even if they are in the flagWords)."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ignorePaths"})," - a list of globs to specify which files are to be ignored."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'"ignorePaths": ["node_modules/**"]\n'})}),"\n",(0,l.jsxs)(n.p,{children:["will cause cspell to ignore anything in the ",(0,l.jsx)(n.code,{children:"node_modules"})," directory."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"maxNumberOfProblems"})," - defaults to ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.em,{children:"100"})})," per file."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"minWordLength"})," - defaults to ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.em,{children:"4"})})," - the minimum length of a word before it is checked."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"allowCompoundWords"})," - defaults to ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.em,{children:"false"})}),"; set to ",(0,l.jsx)(n.strong,{children:"true"})," to allow compound words by default."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"dictionaries"})," - list of the names of the dictionaries to use. See ",(0,l.jsx)(n.a,{href:"#Dictionaries",children:"Dictionaries"})," below."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"dictionaryDefinitions"})," - this list defines any custom dictionaries to use. This is how you can include other languages like Spanish."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'"language": "en",\n// Dictionaries "spanish", "ruby", and "corp-term" will always be checked.\n// Including "spanish" in the list of dictionaries means both Spanish and English\n// words will be considered correct.\n"dictionaries": ["spanish", "ruby", "corp-terms", "fonts"],\n// Define each dictionary.  Relative paths are relative to the config file.\n"dictionaryDefinitions": [\n    { "name": "spanish", "path": "./spanish-words.txt"},\n    { "name": "ruby", "path": "./ruby.txt"},\n    { "name": "company-terms", "path": "./corp-terms.txt"}\n],\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ignoreRegExpList"})," - list of patterns to be ignored"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"includeRegExpList"})," - ",(0,l.jsx)(n.em,{children:"(Advanced)"})," limits the text checked to be only that matching the expressions in the list."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"patterns"})," - this allows you to define named patterns to be used with\n",(0,l.jsx)(n.code,{children:"ignoreRegExpList"})," and ",(0,l.jsx)(n.code,{children:"includeRegExpList"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"languageSettings"})," - this allow for per programming language configuration settings. See ",(0,l.jsx)(n.a,{href:"#LanguageSettings",children:"LanguageSettings"})]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"dictionaries-1",children:"Dictionaries"}),"\n",(0,l.jsx)(n.p,{children:"The spell checker includes a set of default dictionaries."}),"\n",(0,l.jsx)(n.h3,{id:"general-dictionaries",children:"General Dictionaries"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"en_US"})," - Derived from Hunspell US English words."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"en-gb"})," - Derived from Hunspell GB English words."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"companies"})," - List of well known companies"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"softwareTerms"}),' - Software Terms and concepts like "coroutine", "debounce", "tree", etc.']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"misc"})," - Terms that do not belong in the other dictionaries."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"programming-language-dictionaries",children:"Programming Language Dictionaries"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"typescript"})," - keywords for TypeScript and JavaScript"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"node"})," - terms related to using nodejs."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"php"})," - ",(0,l.jsx)(n.em,{children:"php"})," keywords and library methods"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"go"})," - ",(0,l.jsx)(n.em,{children:"go"})," keywords and library methods"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"python"})," - ",(0,l.jsx)(n.em,{children:"python"})," keywords"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"powershell"})," - ",(0,l.jsx)(n.em,{children:"powershell"})," keywords"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"html"})," - ",(0,l.jsx)(n.em,{children:"html"})," related keywords"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"css"})," - ",(0,l.jsx)(n.em,{children:"css"}),", ",(0,l.jsx)(n.em,{children:"less"}),", and ",(0,l.jsx)(n.em,{children:"scss"})," related keywords"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"cpp"})," - ",(0,l.jsx)(n.em,{children:"C++"})," related keywords"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"csharp"})," - ",(0,l.jsx)(n.em,{children:"C#"})," related keywords"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"latex"})," - LaTex related words"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"bash"})," - Bash/shell script keywords"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"miscellaneous-dictionaries",children:"Miscellaneous Dictionaries"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"fonts"})," - long list of fonts - to assist with ",(0,l.jsx)(n.em,{children:"css"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"filetypes"})," - list of file types"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"npm"})," - list of top 500+ package names on npm."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"dictionary-definition",children:"Dictionary Definition"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"name"})," - The reference name of the dictionary, used with program language settings"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"description"})," - Optional description"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"path"})," - Path to the file, can be relative or absolute. Relative path is relative to the\ncurrent ",(0,l.jsx)(n.code,{children:"cspell.json"})," file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"repMap"})," - Optional replacement map use to replace character prior to searching the dictionary.\nExample:","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'    // Replace various tick marks with a single \'\n    "repMap": [["\'|`|\u2019", "\'"]]\n'})}),"\n","// Use Compounds"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"useCompounds"})," - allow compound words"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'// Define each dictionary.  Relative paths are relative to the config file.\n"dictionaryDefinitions": [\n    { "name": "spanish", "path": "./spanish-words.txt"},\n    { "name": "ruby", "path": "./ruby.txt"},\n    { "name": "company-terms", "path": "./corp-terms.txt"}\n],\n'})}),"\n",(0,l.jsx)(n.h3,{id:"disabling-a-dictionary",children:"Disabling a Dictionary"}),"\n",(0,l.jsx)(n.p,{children:"It is possible to prevent a dictionary from being loaded. This is useful if you want to use your own dictionary or just\nturn off an existing dictionary."}),"\n",(0,l.jsx)(n.h4,{id:"disable-default-cpp-dictionary",children:"Disable Default cpp Dictionary"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'"dictionaries": ["!cpp"],\n"overrides": [\n  {\n      "filename": "legacy/**/*.cpp",\n      "dictionaries": ["!!cpp"], // add it back for *.cpp files under the legacy folder\n  },\n]\n'})}),"\n",(0,l.jsxs)(n.p,{children:["The number of ",(0,l.jsx)(n.code,{children:"!"}),"s is important."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"!cpp"})," remove ",(0,l.jsx)(n.code,{children:"cpp"})," dictionary"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"!!cpp"})," add it back"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"!!!cpp"})," remove it again."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"languagesettings",children:"LanguageSettings"}),"\n",(0,l.jsxs)(n.p,{children:["The Language Settings allow configuration to be based upon the programming language and/or the locale.\nThere are two selector fields ",(0,l.jsx)(n.code,{children:"locale"})," and ",(0,l.jsx)(n.code,{children:"languageId"}),"."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"languageId"})," defines which programming languages to match against.\nA value of ",(0,l.jsx)(n.code,{children:'"python,javascript"'})," will match against ",(0,l.jsx)(n.em,{children:"python"})," and ",(0,l.jsx)(n.em,{children:"javascript"})," files. To match against ALL programming languages,\nuse ",(0,l.jsx)(n.code,{children:'"*"'}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"locale"})," defines which spoken languages to match against. A value of ",(0,l.jsx)(n.code,{children:'"en-GB,nl"'})," will match against British English or Dutch.\nA value of ",(0,l.jsx)(n.code,{children:'"*"'})," will match all spoken languages."]}),"\n",(0,l.jsxs)(n.li,{children:["Most configuration values allowed in a ",(0,l.jsx)(n.code,{children:"cspell.json"})," file can be define or redefine within the ",(0,l.jsx)(n.code,{children:"languageSettings"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'    "languageSettings": [\n        {\n            // VSCode languageId. i.e. typescript, java, go, cpp, javascript, markdown, latex\n            // * will match against any file type.\n            "languageId": "c,cpp",\n            // Language locale. i.e. en-US, de-AT, or ru. * will match all locales.\n            // Multiple locales can be specified like: "en, en-US" to match both English and English US.\n            "locale": "*",\n            // To exclude patterns, add them to "ignoreRegExpList"\n            "ignoreRegExpList": [\n                "/#include.*/"\n            ],\n            // List of dictionaries to enable by name in `dictionaryDefinitions`\n            "dictionaries": ["cpp"],\n            // Dictionary definitions can also be supplied here. They are only used iff "languageId" and "locale" match.\n            "dictionaryDefinitions": []\n        }\n    ]\n'})}),"\n",(0,l.jsx)(n.h2,{id:"overrides",children:"Overrides"}),"\n",(0,l.jsx)(n.p,{children:"Overrides are useful for forcing configuration on a per file basis."}),"\n",(0,l.jsx)(n.p,{children:"Example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'    "overrides": [\n        // Force `*.hrr` and `*.crr` files to be treated as `cpp` files:\n        {\n            "filename": "**/{*.hrr,*.crr}",\n            "languageId": "cpp"\n        },\n        // Force `*.txt` to use the Dutch dictionary (Dutch dictionary needs to be installed separately):\n        {\n            "language": "nl",\n            "filename": "**/dutch/**/*.txt"\n        }\n    ]\n'})}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)("p",{align:"center",children:["Brought to you by",(0,l.jsxs)("a",{href:"https://streetsidesoftware.com",title:"Street Side Software",children:[(0,l.jsx)("img",{width:"16",alt:"Street Side Software Logo",src:"https://i.imgur.com/CyduuVY.png"})," Street Side Software"]})]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(p,{...e})}):p(e)}},25213:(e,n,s)=>{s.d(n,{A:()=>c});s(7378);var i=s(23372);const l={tabItem:"tabItem_csb7"};var r=s(86106);function c(e){let{children:n,hidden:s,className:c}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.A)(l.tabItem,c),hidden:s,children:n})}},27859:(e,n,s)=>{s.d(n,{A:()=>y});var i=s(7378),l=s(23372),r=s(55534),c=s(30505),o=s(48330),t=s(52259),a=s(33280),d=s(21254);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:s}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:s,attributes:i,default:l}}=e;return{value:n,label:s,attributes:i,default:l}}))}(s);return function(e){const n=(0,a.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function u(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:s}=e;const l=(0,c.W6)(),r=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,t.aZ)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(l.location.search);n.set(r,e),l.replace({...l.location,search:n.toString()})}),[r,l])]}function x(e){const{defaultValue:n,queryString:s=!1,groupId:l}=e,r=p(e),[c,t]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=s.find((e=>e.default))??s[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r}))),[a,h]=g({queryString:s,groupId:l}),[x,j]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[l,r]=(0,d.Dv)(s);return[l,(0,i.useCallback)((e=>{s&&r.set(e)}),[s,r])]}({groupId:l}),m=(()=>{const e=a??x;return u({value:e,tabValues:r})?e:null})();(0,o.A)((()=>{m&&t(m)}),[m]);return{selectedValue:c,selectValue:(0,i.useCallback)((e=>{if(!u({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);t(e),h(e),j(e)}),[h,j,r]),tabValues:r}}var j=s(65346);const m={tabList:"tabList_MHtM",tabItem:"tabItem_j8q2"};var f=s(86106);function b(e){let{className:n,block:s,selectedValue:i,selectValue:c,tabValues:o}=e;const t=[],{blockElementScrollPositionUntilNextRender:a}=(0,r.a_)(),d=e=>{const n=e.currentTarget,s=t.indexOf(n),l=o[s].value;l!==i&&(a(n),c(l))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const s=t.indexOf(e.currentTarget)+1;n=t[s]??t[0];break}case"ArrowLeft":{const s=t.indexOf(e.currentTarget)-1;n=t[s]??t[t.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":s},n),children:o.map((e=>{let{value:n,label:s,attributes:r}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>t.push(e),onKeyDown:h,onClick:d,...r,className:(0,l.A)("tabs__item",m.tabItem,r?.className,{"tabs__item--active":i===n}),children:s??n},n)}))})}function w(e){let{lazy:n,children:s,selectedValue:r}=e;const c=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=c.find((e=>e.props.value===r));return e?(0,i.cloneElement)(e,{className:(0,l.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:c.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function v(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,l.A)("tabs-container",m.tabList),children:[(0,f.jsx)(b,{...n,...e}),(0,f.jsx)(w,{...n,...e})]})}function y(e){const n=(0,j.A)();return(0,f.jsx)(v,{...e,children:h(e.children)},String(n))}},72300:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var i=s(7378);const l={},r=i.createContext(l);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
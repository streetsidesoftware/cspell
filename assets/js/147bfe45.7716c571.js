"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[63813],{25351:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api/cspell-lib/interfaces/SuggestOptions","title":"Interface: SuggestOptions","description":"Defined in2","source":"@site/docs/api/cspell-lib/interfaces/SuggestOptions.md","sourceDirName":"api/cspell-lib/interfaces","slug":"/api/cspell-lib/interfaces/SuggestOptions","permalink":"/docs/api/cspell-lib/interfaces/SuggestOptions","draft":false,"unlisted":false,"editUrl":"https://github.com/streetsidesoftware/cspell/tree/main/website/docs/docs/api/cspell-lib/interfaces/SuggestOptions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Interface: SpellingDictionaryCollection","permalink":"/docs/api/cspell-lib/interfaces/SpellingDictionaryCollection"},"next":{"title":"Interface: SuggestedWord","permalink":"/docs/api/cspell-lib/interfaces/SuggestedWord"}}');var t=s(37557),o=s(46039);const l={},c="Interface: SuggestOptions",r={},d=[{value:"Properties",id:"properties",level:2},{value:"compoundMethod?",id:"compoundmethod",level:3},{value:"ignoreCase?",id:"ignorecase",level:3},{value:"includeTies?",id:"includeties",level:3},{value:"Default",id:"default",level:4},{value:"numChanges?",id:"numchanges",level:3},{value:"numSuggestions?",id:"numsuggestions",level:3},{value:"timeout?",id:"timeout",level:3}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"interface-suggestoptions",children:"Interface: SuggestOptions"})}),"\n",(0,t.jsx)(n.p,{children:"Defined in: packages/cspell-dictionary/dist/SpellingDictionary/SuggestOptions.d.ts:2"}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(n.h3,{id:"compoundmethod",children:"compoundMethod?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"compoundMethod"}),": ",(0,t.jsx)(n.a,{href:"/docs/api/cspell-lib/enumerations/CompoundWordsMethod",children:(0,t.jsx)(n.code,{children:"CompoundWordsMethod"})})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Defined in: packages/cspell-dictionary/dist/SpellingDictionary/SuggestOptions.d.ts:7"}),"\n",(0,t.jsxs)(n.p,{children:["Compounding Mode.\n",(0,t.jsx)(n.code,{children:"NONE"})," is the best option."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"ignorecase",children:"ignoreCase?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"ignoreCase"}),": ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Defined in: packages/cspell-dictionary/dist/SpellingDictionary/SuggestOptions.d.ts:20"}),"\n",(0,t.jsx)(n.p,{children:"Allow for case-ingestive checking."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"includeties",children:"includeTies?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"includeTies"}),": ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Defined in: packages/cspell-dictionary/dist/SpellingDictionary/SuggestOptions.d.ts:26"}),"\n",(0,t.jsxs)(n.p,{children:['If multiple suggestions have the same edit / change "cost", then included them even if\nit causes more than ',(0,t.jsx)(n.code,{children:"numSuggestions"})," to be returned."]}),"\n",(0,t.jsx)(n.h4,{id:"default",children:"Default"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"false\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"numchanges",children:"numChanges?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"numChanges"}),": ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Defined in: packages/cspell-dictionary/dist/SpellingDictionary/SuggestOptions.d.ts:16"}),"\n",(0,t.jsx)(n.p,{children:"Max number of changes / edits to the word to get to a suggestion matching suggestion."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"numsuggestions",children:"numSuggestions?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"numSuggestions"}),": ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Defined in: packages/cspell-dictionary/dist/SpellingDictionary/SuggestOptions.d.ts:12"}),"\n",(0,t.jsxs)(n.p,{children:["The limit on the number of suggestions to generate. If ",(0,t.jsx)(n.code,{children:"allowTies"})," is true, it is possible\nfor more suggestions to be generated."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"timeout",children:"timeout?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"timeout"}),": ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Defined in: packages/cspell-dictionary/dist/SpellingDictionary/SuggestOptions.d.ts:30"}),"\n",(0,t.jsx)(n.p,{children:"Maximum amount of time to allow for generating suggestions."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},46039:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var i=s(18225);const t={},o=i.createContext(t);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);
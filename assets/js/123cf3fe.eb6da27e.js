"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[88130],{46039:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>l});var n=t(18225);const a={},i=n.createContext(a);function o(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(i.Provider,{value:s},e.children)}},55230:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"api/cspell-types/type-aliases/SuggestionCostMapDef","title":"Type Alias: SuggestionCostMapDef","description":"SuggestionCostMapDef: CostMapDefReplace \\\\| CostMapDefInsDel \\\\| CostMapDefSwap","source":"@site/docs/api/cspell-types/type-aliases/SuggestionCostMapDef.md","sourceDirName":"api/cspell-types/type-aliases","slug":"/api/cspell-types/type-aliases/SuggestionCostMapDef","permalink":"/docs/api/cspell-types/type-aliases/SuggestionCostMapDef","draft":false,"unlisted":false,"editUrl":"https://github.com/streetsidesoftware/cspell/tree/main/website/docs/docs/api/cspell-types/type-aliases/SuggestionCostMapDef.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Type Alias: SpellingErrorEmitter()","permalink":"/docs/api/cspell-types/type-aliases/SpellingErrorEmitter"},"next":{"title":"Type Alias: SuggestionCostsDefs","permalink":"/docs/api/cspell-types/type-aliases/SuggestionCostsDefs"}}');var a=t(37557),i=t(46039);const o={},l="Type Alias: SuggestionCostMapDef",r={},p=[];function c(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"type-alias-suggestioncostmapdef",children:"Type Alias: SuggestionCostMapDef"})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"SuggestionCostMapDef"}),": ",(0,a.jsx)(s.code,{children:"CostMapDefReplace"})," | ",(0,a.jsx)(s.code,{children:"CostMapDefInsDel"})," | ",(0,a.jsx)(s.code,{children:"CostMapDefSwap"})]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["Defined in: ",(0,a.jsx)(s.a,{href:"https://github.com/streetsidesoftware/cspell/blob/2bb8888d824412e9ce2e05529fe72d713c0a4066/packages/cspell-types/src/suggestionCostsDef.ts#L24",children:"suggestionCostsDef.ts:24"})]}),"\n",(0,a.jsx)(s.p,{children:"A WeightedMapDef enables setting weights for edits between related characters and substrings."}),"\n",(0,a.jsxs)(s.p,{children:["Multiple groups can be defined using a ",(0,a.jsx)(s.code,{children:"|"}),".\nA multi-character substring is defined using ",(0,a.jsx)(s.code,{children:"()"}),"."]}),"\n",(0,a.jsx)(s.p,{children:"For example, in some languages, some letters sound alike."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-yaml",children:"  map: 'sc(sh)(sch)(ss)|t(tt)' # two groups.\n  replace: 50    # Make it 1/2 the cost of a normal edit to replace a `t` with `tt`.\n"})}),"\n",(0,a.jsx)(s.p,{children:"The following could be used to make inserting, removing, or replacing vowels cheaper."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-yaml",children:"  map: 'aeiouy'\n  insDel: 50     # Make it is cheaper to insert or delete a vowel.\n  replace: 45    # It is even cheaper to replace one with another.\n"})}),"\n",(0,a.jsx)(s.p,{children:"Note: the default edit distance is 100."})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);
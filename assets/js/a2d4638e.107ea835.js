"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3234],{33471:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>d});const c=JSON.parse('{"id":"api/cspell/interfaces/CacheSettings","title":"Interface: CacheSettings","description":"Defined in1111","source":"@site/docs/api/cspell/interfaces/CacheSettings.md","sourceDirName":"api/cspell/interfaces","slug":"/api/cspell/interfaces/CacheSettings","permalink":"/docs/api/cspell/interfaces/CacheSettings","draft":false,"unlisted":false,"editUrl":"https://github.com/streetsidesoftware/cspell/tree/main/website/docs/docs/api/cspell/interfaces/CacheSettings.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Interface: CSpellSettingsWithSourceTrace","permalink":"/docs/api/cspell/interfaces/CSpellSettingsWithSourceTrace"},"next":{"title":"Interface: CharacterSetCosts","permalink":"/docs/api/cspell/interfaces/CharacterSetCosts"}}');var s=t(37557),i=t(46039);const l={},a="Interface: CacheSettings",r={},d=[{value:"Properties",id:"properties",level:2},{value:"cacheFormat?",id:"cacheformat",level:3},{value:"Default",id:"default",level:4},{value:"cacheLocation?",id:"cachelocation",level:3},{value:"cacheStrategy?",id:"cachestrategy",level:3},{value:"Default",id:"default-1",level:4},{value:"useCache?",id:"usecache",level:3},{value:"Default",id:"default-2",level:4}];function o(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"interface-cachesettings",children:"Interface: CacheSettings"})}),"\n",(0,s.jsx)(n.p,{children:"Defined in: cspell-types/dist/index.d.mts:1111"}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(n.h3,{id:"cacheformat",children:"cacheFormat?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"cacheFormat"}),": ",(0,s.jsx)(n.a,{href:"/docs/api/cspell/type-aliases/CacheFormat",children:(0,s.jsx)(n.code,{children:"CacheFormat"})})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Defined in: cspell-types/dist/index.d.mts:1137"}),"\n",(0,s.jsx)(n.p,{children:"Format of the cache file."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"legacy"})," - use absolute paths in the cache file"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"universal"})," - use a sharable format."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"default",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"'universal'\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"cachelocation",children:"cacheLocation?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"cacheLocation"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Defined in: cspell-types/dist/index.d.mts:1125"}),"\n",(0,s.jsxs)(n.p,{children:["Path to the cache location. Can be a file or a directory.\nIf none specified ",(0,s.jsx)(n.code,{children:".cspellcache"})," will be used.\nRelative paths are relative to the config file in which it\nis defined."]}),"\n",(0,s.jsxs)(n.p,{children:["A prefix of ",(0,s.jsx)(n.code,{children:"${cwd}"})," is replaced with the current working directory."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"cachestrategy",children:"cacheStrategy?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"cacheStrategy"}),": ",(0,s.jsx)(n.a,{href:"/docs/api/cspell/type-aliases/CacheStrategy",children:(0,s.jsx)(n.code,{children:"CacheStrategy"})})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Defined in: cspell-types/dist/index.d.mts:1130"}),"\n",(0,s.jsx)(n.p,{children:"Strategy to use for detecting changed files, default: metadata"}),"\n",(0,s.jsx)(n.h4,{id:"default-1",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"'metadata'\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"usecache",children:"useCache?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"useCache"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Defined in: cspell-types/dist/index.d.mts:1116"}),"\n",(0,s.jsx)(n.p,{children:"Store the results of processed files in order to only operate on the changed ones."}),"\n",(0,s.jsx)(n.h4,{id:"default-2",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"false\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},46039:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var c=t(18225);const s={},i=c.createContext(s);function l(e){const n=c.useContext(i);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),c.createElement(i.Provider,{value:n},e.children)}}}]);
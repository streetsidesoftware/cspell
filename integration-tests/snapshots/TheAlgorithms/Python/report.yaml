---
Repository: TheAlgorithms/Python
Url: https://github.com/TheAlgorithms/Python.git
Args: '["**/*.{md,py}"]'
Summary:
  files: 1217
  filesWithIssues: 460
  issues: 3119
  errors: 0
Errors: []

issues:
  - "arithmetic_analysis/gaussian_elimination.py:34:47       dtype       U       np.zeros((rows, 1), dtype=float)"
  - "arithmetic_analysis/gaussian_elimination.py:70:35       astype      U       mat = augmented_mat.astype(\"float64\")"
  - "arithmetic_analysis/lu_decomposition.py:23:41       ndarray     U       decomposition(table: np.ndarray) -> tuple[np.ndarray"
  - "arithmetic_analysis/newton_forward_interpolation.py:8:5         ucal    U       def ucal(u: float, p: int) -"
  - "arithmetic_analysis/newton_forward_interpolation.py:49:5        summ    U       summ = y[0][0]"
  - "arithmetic_analysis/newton_raphson_new.py:1:23          Raphson         U       Implementing Newton Raphson method in Python"
  - "arithmetic_analysis/newton_raphson_new.py:5:55          functreal       U       proximation for the root of a functreal-valued ion"
  - "arithmetic_analysis/newton_raphson_new.py:10:6          sympy           U       from sympy import diff, lambdify"
  - "arithmetic_analysis/newton_raphson_new.py:10:25         lambdify        U       from sympy import diff, lambdify, symbols"
  - "arithmetic_analysis/newton_raphson_new.py:14:12         raphson         U       def newton_raphson("
  - "arithmetic_analysis/newton_raphson.py:2:11          Syed        U       # Author: Syed Haseeb Shah (github"
  - "arithmetic_analysis/newton_raphson.py:2:16          Haseeb      U       # Author: Syed Haseeb Shah (github.com/QuantumNovic"
  - "arithmetic_analysis/secant_method.py:3:9            dimgrichr       U       Author: dimgrichr"
  - "audio_filters/butterworth_filter.py:20:18       coeffs      U       >>> filter.a_coeffs + filter.b_coeffs"
  - "audio_filters/butterworth_filter.py:36:5        filt        U       filt = IIRFilter(2)"
  - "audio_filters/butterworth_filter.py:175:5       ppmc        U       ppmc = (big_a + 1) + (big"
  - "audio_filters/butterworth_filter.py:177:5       pmpc        U       pmpc = (big_a - 1) + (big"
  - "audio_filters/iir_filter.py:44:58       btype       U       btype='lowpass',"
  - "audio_filters/show_response.py:55:43        nyquist     U       log scale from 24 to nyquist frequency"
  - "audio_filters/show_response.py:56:9         xlim        U       plt.xlim(24, samplerate / 2"
  - "audio_filters/show_response.py:57:9         xlabel      U       plt.xlabel(\"Frequency (Hz)\")"
  - "audio_filters/show_response.py:58:9         xscale      U       plt.xscale(\"log\")"
  - "audio_filters/show_response.py:62:9         ylim        U       plt.ylim(max([-80, bounds[0]"
  - "audio_filters/show_response.py:63:9         ylabel      U       plt.ylabel(\"Gain (dB)\")"
  - "backtracking/coloring.py:11:5           neighbours      U       neighbours: list[int], colored"
  - "backtracking/coloring.py:14:14          neighbour       U       For each neighbour check if the coloring"
  - "backtracking/coloring.py:52:18          Uncolor         U       2.5. Uncolor given vertex"
  - "backtracking/knight_tour.py:82:22       Kight       U       ValueError: Open Kight Tour cannot be performed"
  - "backtracking/n_queens.py:3:6            nqueens     U       The nqueens problem is of placing"
  - "backtracking/sum_of_subsets.py:12:29        soln    U       generate_sum_of_subsets_soln(nums: list[int], max"
  - "backtracking/word_search.py:23:2        ABCCED      U       \"ABCCED\""
  - "backtracking/word_search.py:69:5        traverts    U       traverts_directions = [(0, 1"
  - "backtracking/word_search.py:97:79       ABCB        U       \"A\",\"D\",\"E\",\"E\"]], \"ABCB\")"
  - "bit_manipulation/count_1s_brian_kernighan_method.py:3:66        Kernighan's     U       integer using Brian Kernighan's way."
  - "bit_manipulation/count_number_of_one_bits.py:4:36           kernighans      U       bits_count_using_brian_kernighans_algorithm(number: int"
  - "bit_manipulation/is_even.py:4:52        deicmal     U       look at the following deicmal to binary conversions"
  - "blockchain/modular_division.py:12:55        modn    U       0≤x≤n−1, and b/a=x(modn) (that is, b=ax(modn"
  - "boolean_algebra/nand_gate.py:2:3            NAND    U       A NAND Gate is a logic gate"
  - "boolean_algebra/nand_gate.py:18:5           nand    U       def nand_gate(input_1: int, input"
  - "boolean_algebra/norgate.py:47:21        Akshaj          U       \"\"\"Code provided by Akshaj Vishwanathan\"\"\""
  - "boolean_algebra/norgate.py:47:28        Vishwanathan    U       Code provided by Akshaj Vishwanathan\"\"\""
  - "boolean_algebra/quine_mc_cluskey.py:84:45       implicants      U       list[list[int]], prime_implicants: list[str]) -> list"
  - "boolean_algebra/quine_mc_cluskey.py:131:11      implicant       U       def prime_implicant_chart("
  - "boolean_algebra/quine_mc_cluskey.py:159:18      Implicants      U       print(\"Prime Implicants are:\")"
  - "boolean_algebra/xnor_gate.py:2:3            XNOR    U       A XNOR Gate is a logic gate"
  - "boolean_algebra/xnor_gate.py:19:5           xnor    U       def xnor_gate(input_1: int, input"
  - "cellular_automata/game_of_life.py:1:41          Kumar       U       Life, Author Anurag Kumar(mailto:anuragkumarak"
  - "cellular_automata/game_of_life.py:122:5         cmap        U       cmap = ListedColormap([\"w"
  - "cellular_automata/nagel_schrekenberg.py:90:7        Beforce     U       # Beforce calculations, the highway"
  - "ciphers/a1z26.py:13:17          myname      U       >>> encode(\"myname\")"
  - "ciphers/affine_cipher.py:40:35          Mpyx    U       I}p~{HL}Gp{vp pFsH}pxMpyxIx JHL O}F{~pvuOvF{FuF"
  - "ciphers/atbash.py:5:5           atbash      U       def atbash_slow(sequence: str)"
  - "ciphers/atbash.py:8:6           ZYXWVUT     U       'ZYXWVUT'"
  - "ciphers/autokey.py:16:6         jsqqs       U       'jsqqs avvwo'"
  - "ciphers/autokey.py:16:12        avvwo       U       'jsqqs avvwo'"
  - "ciphers/autokey.py:18:6         vvjfpk      U       'vvjfpk wj ohvp su ddylsv'"
  - "ciphers/autokey.py:18:16        ohvp        U       'vvjfpk wj ohvp su ddylsv'"
  - "ciphers/autokey.py:18:24        ddylsv      U       'vvjfpk wj ohvp su ddylsv'"
  - "ciphers/baconian_cipher.py:8:11         AAAAB                           U       \"b\": \"AAAAB\","
  - "ciphers/baconian_cipher.py:9:11         AAABA                           U       \"c\": \"AAABA\","
  - "ciphers/baconian_cipher.py:10:11        AAABB                           U       \"d\": \"AAABB\","
  - "ciphers/baconian_cipher.py:11:11        AABAA                           U       \"e\": \"AABAA\","
  - "ciphers/baconian_cipher.py:12:11        AABAB                           U       \"f\": \"AABAB\","
  - "ciphers/baconian_cipher.py:13:11        AABBA                           U       \"g\": \"AABBA\","
  - "ciphers/baconian_cipher.py:14:11        AABBB                           U       \"h\": \"AABBB\","
  - "ciphers/baconian_cipher.py:15:11        ABAAA                           U       \"i\": \"ABAAA\","
  - "ciphers/baconian_cipher.py:16:11        BBBAA                           U       \"j\": \"BBBAA\","
  - "ciphers/baconian_cipher.py:17:11        ABAAB                           U       \"k\": \"ABAAB\","
  - "ciphers/baconian_cipher.py:18:11        ABABA                           U       \"l\": \"ABABA\","
  - "ciphers/baconian_cipher.py:19:11        ABABB                           U       \"m\": \"ABABB\","
  - "ciphers/baconian_cipher.py:20:11        ABBAA                           U       \"n\": \"ABBAA\","
  - "ciphers/baconian_cipher.py:21:11        ABBAB                           U       \"o\": \"ABBAB\","
  - "ciphers/baconian_cipher.py:22:11        ABBBA                           U       \"p\": \"ABBBA\","
  - "ciphers/baconian_cipher.py:23:11        ABBBB                           U       \"q\": \"ABBBB\","
  - "ciphers/baconian_cipher.py:24:11        BAAAA                           U       \"r\": \"BAAAA\","
  - "ciphers/baconian_cipher.py:25:11        BAAAB                           U       \"s\": \"BAAAB\","
  - "ciphers/baconian_cipher.py:26:11        BAABA                           U       \"t\": \"BAABA\","
  - "ciphers/baconian_cipher.py:27:11        BAABB                           U       \"u\": \"BAABB\","
  - "ciphers/baconian_cipher.py:28:11        BBBAB                           U       \"v\": \"BBBAB\","
  - "ciphers/baconian_cipher.py:29:11        BABAA                           U       \"w\": \"BABAA\","
  - "ciphers/baconian_cipher.py:30:11        BABAB                           U       \"x\": \"BABAB\","
  - "ciphers/baconian_cipher.py:31:11        BABBA                           U       \"y\": \"BABBA\","
  - "ciphers/baconian_cipher.py:32:11        BABBB                           U       \"z\": \"BABBB\","
  - "ciphers/baconian_cipher.py:45:6         AABBBAABAAABABAABABAABBAB       U       'AABBBAABAAABABAABABAABBAB'"
  - "ciphers/baconian_cipher.py:47:32        BABAAABBABBAAAAABABAAAABB       U       AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB'"
  - "ciphers/base32.py:8:7           JBSWY           U       b'JBSWY3DPEBLW64TMMQQQ===='"
  - "ciphers/base32.py:8:13          DPEBLW          U       b'JBSWY3DPEBLW64TMMQQQ===='"
  - "ciphers/base32.py:8:21          TMMQQQ          U       b'JBSWY3DPEBLW64TMMQQQ===='"
  - "ciphers/base32.py:10:7          GEZDGNBVGY      U       b'GEZDGNBVGY======'"
  - "ciphers/base32.py:12:7          ONXW            U       b'ONXW2ZJANRXW4ZZAMNXW24DMMV"
  - "ciphers/base32.py:12:12         ZJANRXW         U       b'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW"
  - "ciphers/base32.py:12:20         ZZAMNXW         U       b'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY="
  - "ciphers/base32.py:12:29         DMMV            U       ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY='"
  - "ciphers/base32.py:12:38         UOJUW           U       ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY='"
  - "ciphers/base64.py:17:53         Steganography       U       encoding can be used in Steganography to hide data in these"
  - "ciphers/beaufort_cipher.py:2:9          Mohit                   U       Author: Mohit Radadiya"
  - "ciphers/beaufort_cipher.py:2:15         Radadiya                U       Author: Mohit Radadiya"
  - "ciphers/beaufort_cipher.py:17:6         SECRETSECRETSECRE       U       'SECRETSECRETSECRE'"
  - "ciphers/beaufort_cipher.py:36:10        PAYUWL                  U       'BDC PAYUWL JPAIYI'"
  - "ciphers/beaufort_cipher.py:36:17        JPAIYI                  U       'BDC PAYUWL JPAIYI'"
  - "ciphers/bifid.py:58:53          qtltbdxrxlk     U       encode('testmessage') == 'qtltbdxrxlk'"
  - "ciphers/brute_force_caesar_cipher.py:6:18           TMDETUX     U       >>> decrypt('TMDETUX PMDVU')"
  - "ciphers/brute_force_caesar_cipher.py:6:26           PMDVU       U       >> decrypt('TMDETUX PMDVU')"
  - "ciphers/brute_force_caesar_cipher.py:8:30           SLCDSTW     U       Decryption using Key #1: SLCDSTW OLCUT"
  - "ciphers/brute_force_caesar_cipher.py:8:38           OLCUT       U       using Key #1: SLCDSTW OLCUT"
  - "ciphers/brute_force_caesar_cipher.py:9:30           RKBCRSV     U       Decryption using Key #2: RKBCRSV NKBTS"
  - "ciphers/brute_force_caesar_cipher.py:9:38           NKBTS       U       using Key #2: RKBCRSV NKBTS"
  - "ciphers/brute_force_caesar_cipher.py:10:30          QJABQRU     U       Decryption using Key #3: QJABQRU MJASR"
  - "ciphers/brute_force_caesar_cipher.py:10:38          MJASR       U       using Key #3: QJABQRU MJASR"
  - "ciphers/brute_force_caesar_cipher.py:11:30          PIZAPQT     U       Decryption using Key #4: PIZAPQT LIZRQ"
  - "ciphers/brute_force_caesar_cipher.py:11:38          LIZRQ       U       using Key #4: PIZAPQT LIZRQ"
  - "ciphers/brute_force_caesar_cipher.py:12:30          OHYZOPS     U       Decryption using Key #5: OHYZOPS KHYQP"
  - "ciphers/brute_force_caesar_cipher.py:12:38          KHYQP       U       using Key #5: OHYZOPS KHYQP"
  - "ciphers/brute_force_caesar_cipher.py:13:30          NGXYNOR     U       Decryption using Key #6: NGXYNOR JGXPO"
  - "ciphers/brute_force_caesar_cipher.py:13:38          JGXPO       U       using Key #6: NGXYNOR JGXPO"
  - "ciphers/brute_force_caesar_cipher.py:14:30          MFWXMNQ     U       Decryption using Key #7: MFWXMNQ IFWON"
  - "ciphers/brute_force_caesar_cipher.py:14:38          IFWON       U       using Key #7: MFWXMNQ IFWON"
  - "ciphers/brute_force_caesar_cipher.py:15:30          LEVWLMP     U       Decryption using Key #8: LEVWLMP HEVNM"
  - "ciphers/brute_force_caesar_cipher.py:15:38          HEVNM       U       using Key #8: LEVWLMP HEVNM"
  - "ciphers/brute_force_caesar_cipher.py:16:30          KDUVKLO     U       Decryption using Key #9: KDUVKLO GDUML"
  - "ciphers/brute_force_caesar_cipher.py:16:38          GDUML       U       using Key #9: KDUVKLO GDUML"
  - "ciphers/brute_force_caesar_cipher.py:17:31          JCTUJKN     U       Decryption using Key #10: JCTUJKN FCTLK"
  - "ciphers/brute_force_caesar_cipher.py:17:39          FCTLK       U       using Key #10: JCTUJKN FCTLK"
  - "ciphers/brute_force_caesar_cipher.py:18:31          IBSTIJM     U       Decryption using Key #11: IBSTIJM EBSKJ"
  - "ciphers/brute_force_caesar_cipher.py:18:39          EBSKJ       U       using Key #11: IBSTIJM EBSKJ"
  - "ciphers/brute_force_caesar_cipher.py:19:31          HARSHIL     U       Decryption using Key #12: HARSHIL DARJI"
  - "ciphers/brute_force_caesar_cipher.py:19:39          DARJI       U       using Key #12: HARSHIL DARJI"
  - "ciphers/brute_force_caesar_cipher.py:20:31          GZQRGHK     U       Decryption using Key #13: GZQRGHK CZQIH"
  - "ciphers/brute_force_caesar_cipher.py:20:39          CZQIH       U       using Key #13: GZQRGHK CZQIH"
  - "ciphers/brute_force_caesar_cipher.py:21:31          FYPQFGJ     U       Decryption using Key #14: FYPQFGJ BYPHG"
  - "ciphers/brute_force_caesar_cipher.py:21:39          BYPHG       U       using Key #14: FYPQFGJ BYPHG"
  - "ciphers/brute_force_caesar_cipher.py:22:31          EXOPEFI     U       Decryption using Key #15: EXOPEFI AXOGF"
  - "ciphers/brute_force_caesar_cipher.py:22:39          AXOGF       U       using Key #15: EXOPEFI AXOGF"
  - "ciphers/brute_force_caesar_cipher.py:23:31          DWNODEH     U       Decryption using Key #16: DWNODEH ZWNFE"
  - "ciphers/brute_force_caesar_cipher.py:23:39          ZWNFE       U       using Key #16: DWNODEH ZWNFE"
  - "ciphers/brute_force_caesar_cipher.py:24:31          CVMNCDG     U       Decryption using Key #17: CVMNCDG YVMED"
  - "ciphers/brute_force_caesar_cipher.py:24:39          YVMED       U       using Key #17: CVMNCDG YVMED"
  - "ciphers/brute_force_caesar_cipher.py:25:31          BULMBCF     U       Decryption using Key #18: BULMBCF XULDC"
  - "ciphers/brute_force_caesar_cipher.py:25:39          XULDC       U       using Key #18: BULMBCF XULDC"
  - "ciphers/brute_force_caesar_cipher.py:26:31          ATKLABE     U       Decryption using Key #19: ATKLABE WTKCB"
  - "ciphers/brute_force_caesar_cipher.py:26:39          WTKCB       U       using Key #19: ATKLABE WTKCB"
  - "ciphers/brute_force_caesar_cipher.py:27:31          ZSJKZAD     U       Decryption using Key #20: ZSJKZAD VSJBA"
  - "ciphers/brute_force_caesar_cipher.py:27:39          VSJBA       U       using Key #20: ZSJKZAD VSJBA"
  - "ciphers/brute_force_caesar_cipher.py:28:31          YRIJYZC     U       Decryption using Key #21: YRIJYZC URIAZ"
  - "ciphers/brute_force_caesar_cipher.py:28:39          URIAZ       U       using Key #21: YRIJYZC URIAZ"
  - "ciphers/brute_force_caesar_cipher.py:29:31          XQHIXYB     U       Decryption using Key #22: XQHIXYB TQHZY"
  - "ciphers/brute_force_caesar_cipher.py:29:39          TQHZY       U       using Key #22: XQHIXYB TQHZY"
  - "ciphers/brute_force_caesar_cipher.py:30:31          WPGHWXA     U       Decryption using Key #23: WPGHWXA SPGYX"
  - "ciphers/brute_force_caesar_cipher.py:30:39          SPGYX       U       using Key #23: WPGHWXA SPGYX"
  - "ciphers/brute_force_caesar_cipher.py:31:31          VOFGVWZ     U       Decryption using Key #24: VOFGVWZ ROFXW"
  - "ciphers/brute_force_caesar_cipher.py:31:39          ROFXW       U       using Key #24: VOFGVWZ ROFXW"
  - "ciphers/brute_force_caesar_cipher.py:32:31          UNEFUVY     U       Decryption using Key #25: UNEFUVY QNEWV"
  - "ciphers/brute_force_caesar_cipher.py:32:39          QNEWV       U       using Key #25: UNEFUVY QNEWV"
  - "ciphers/caesar_cipher.py:47:33          Jgnnq           U       final message would be \"Jgnnq, ecrvckp\""
  - "ciphers/caesar_cipher.py:47:40          ecrvckp         U       message would be \"Jgnnq, ecrvckp\""
  - "ciphers/caesar_cipher.py:56:11          Cqks            U       'bpm yCqks jzwEv nwF rCuxA wDmz"
  - "ciphers/caesar_cipher.py:62:8           qtbjwhfxj       U       'f qtbjwhfxj fqumfgjy'"
  - "ciphers/caesar_cipher.py:62:18          fqumfgjy        U       'f qtbjwhfxj fqumfgjy'"
  - "ciphers/caesar_cipher.py:188:30         IH'N            U       brute_force(\"jFyuMy xIH'N vLONy zILwy Gy!\")[2"
  - "ciphers/decrypt_caesar_with_chi_squared.py:56:18        ifmmp           U       Cipher text: ifmmp"
  - "ciphers/decrypt_caesar_with_chi_squared.py:112:24       jhlzhy          U       ... 'dof pz aol jhlzhy jpwoly zv wvwbshy? pa"
  - "ciphers/decrypt_caesar_with_chi_squared.py:112:31       jpwoly          U       'dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv"
  - "ciphers/decrypt_caesar_with_chi_squared.py:112:41       wvwbshy         U       aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr"
  - "ciphers/decrypt_caesar_with_chi_squared.py:112:60       lhzf            U       zv wvwbshy? pa pz avv lhzf av jyhjr!'"
  - "ciphers/decrypt_caesar_with_chi_squared.py:112:68       jyhjr           U       wvwbshy? pa pz avv lhzf av jyhjr!'"
  - "ciphers/decrypt_caesar_with_chi_squared.py:117:42       crybd           U       caesar_with_chi_squared('crybd cdbsxq')"
  - "ciphers/decrypt_caesar_with_chi_squared.py:117:48       cdbsxq          U       with_chi_squared('crybd cdbsxq')"
  - "ciphers/decrypt_caesar_with_chi_squared.py:120:42       Crybd           U       caesar_with_chi_squared('Crybd Cdbsxq', case_sensitive"
  - "ciphers/decrypt_caesar_with_chi_squared.py:120:48       Cdbsxq          U       with_chi_squared('Crybd Cdbsxq', case_sensitive=True"
  - "ciphers/decrypt_caesar_with_chi_squared.py:200:31       excepcted       U       # Get the excepcted amount of times the"
  - "ciphers/deterministic_miller_rabin.py:1:30          bizzfitch       U       Created by Nathan Damon, @bizzfitch on github"
  - "ciphers/diffie_hellman.py:1:22          hexlify     U       from binascii import hexlify"
  - "ciphers/diffie_hellman.py:3:16          urandom     U       from os import urandom"
  - "ciphers/diffie_hellman.py:5:40          MODP        U       Modular Exponential (MODP) Diffie-Hellman groups"
  - "ciphers/diffie_hellman.py:5:46          Diffie      U       Modular Exponential (MODP) Diffie-Hellman groups for"
  - "ciphers/elgamal_key_generator.py:61:21          elgamal     U       make_key_files(\"elgamal\", 2048)"
  - "ciphers/enigma_machine2.py:29:11        EGZWVONAHDCLFQMSIPJBYUKXTR      U       rotor1 = \"EGZWVONAHDCLFQMSIPJBYUKXTR\""
  - "ciphers/enigma_machine2.py:30:11        FOBHMDKEXQNRAULPGSJVTYICZW      U       rotor2 = \"FOBHMDKEXQNRAULPGSJVTYICZW\""
  - "ciphers/enigma_machine2.py:31:11        ZJXESIUQLHAVRMDOYGTNFWPBKC      U       rotor3 = \"ZJXESIUQLHAVRMDOYGTNFWPBKC\""
  - "ciphers/enigma_machine2.py:63:11        RMDJXFUWGISLHVTCQNKYPBEZOA      U       rotor4 = \"RMDJXFUWGISLHVTCQNKYPBEZOA\""
  - "ciphers/enigma_machine2.py:64:11        SGLCPQWZHKXAREONTFBVIYJUDM      U       rotor5 = \"SGLCPQWZHKXAREONTFBVIYJUDM\""
  - "ciphers/enigma_machine2.py:65:11        HVSICLTYKQUBXDWAJZOMFGPREN      U       rotor6 = \"HVSICLTYKQUBXDWAJZOMFGPREN\""
  - "ciphers/enigma_machine2.py:66:11        RZWQHFMVDBKICJLNTUXAGYPSOE      U       rotor7 = \"RZWQHFMVDBKICJLNTUXAGYPSOE\""
  - "ciphers/enigma_machine2.py:67:11        LFKIJODBEGAMQPXVUHYSTCZRWN      U       rotor8 = \"LFKIJODBEGAMQPXVUHYSTCZRWN\""
  - "ciphers/enigma_machine2.py:68:11        KOAEGVDHXPQZMLFTYWJNBRCIUS      U       rotor9 = \"KOAEGVDHXPQZMLFTYWJNBRCIUS\""
  - "ciphers/enigma_machine2.py:72:29        rotsel                          U       rotpos: RotorPositionT, rotsel: RotorSelectionT, pb"
  - "ciphers/enigma_machine2.py:82:26        positon (position, positron)    U       param rotpos: rotor_positon"
  - "ciphers/enigma_machine2.py:84:16        plugb                           U       :param pb: plugb -> validated and transformed"
  - "ciphers/enigma_machine2.py:106:5        pbdict                          U       pbdict = _plugboard(pb)"
  - "ciphers/enigma_machine2.py:111:16       pbstring                        U       def _plugboard(pbstring: str) -> dict[str, str"
  - "ciphers/enigma_machine2.py:142:5        tmppbl                          U       tmppbl = set()"
  - "ciphers/enigma_machine2.py:185:7        VKLEPDBGRNWTFCJOHQAMUZYIXS      U       | VKLEPDBGRNWTFCJOHQAMUZYIXS |"
  - "ciphers/enigma_machine2.py:193:7        ABCDEFGHIJKLM                   U       | ABCDEFGHIJKLM | e.g. E is paired to"
  - "ciphers/enigma_machine2.py:194:7        ZYXWVUTSRQPON                   U       | ZYXWVUTSRQPON | so when E goes in"
  - "ciphers/enigma_machine2.py:203:6        KORYH                           U       'KORYH JUHHI!'"
  - "ciphers/enigma_machine2.py:203:12       JUHHI                           U       'KORYH JUHHI!'"
  - "ciphers/enigma_machine2.py:204:24       juhhi                           U       >>> enigma('KORYH, juhhi!', (1, 2, 1), plugb"
  - "ciphers/enigma_machine2.py:207:6        FPNCZ                           U       'FPNCZ QWOBU!'"
  - "ciphers/enigma_machine2.py:207:12       QWOBU                           U       'FPNCZ QWOBU!'"
  - "ciphers/hill_cipher.py:63:21        vectorize               U       modulus = numpy.vectorize(lambda x: x % 36)"
  - "ciphers/hill_cipher.py:117:10       TESTINGHILLCIPHERR      U       'TESTINGHILLCIPHERR'"
  - "ciphers/hill_cipher.py:133:10       WHXYJOLM                U       'WHXYJOLM9C6XT085LL'"
  - "ciphers/mixed_keyword_cypher.py:24:6        XKJGUFMJST      U       'XKJGUFMJST'"
  - "ciphers/mono_alphabetic_ciphers.py:10:28        QWERTYUIOPASDFGHJKLZXCVBNM      U       translate_message(\"QWERTYUIOPASDFGHJKLZXCVBNM\",\"Hello World\",\"encrypt"
  - "ciphers/mono_alphabetic_ciphers.py:11:6         Pcssi                           U       'Pcssi Bidsm'"
  - "ciphers/mono_alphabetic_ciphers.py:11:12        Bidsm                           U       'Pcssi Bidsm'"
  - "ciphers/mono_alphabetic_ciphers.py:42:6         Itssg                           U       'Itssg Vgksr'"
  - "ciphers/mono_alphabetic_ciphers.py:42:12        Vgksr                           U       'Itssg Vgksr'"
  - "ciphers/playfair_cipher.py:6:5          chunker                         U       def chunker(seq: Iterable[str],"
  - "ciphers/playfair_cipher.py:44:17        ABCDEFGHIKLMNOPQRSTUVWXYZ       U       alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\""
  - "ciphers/porta_cipher.py:2:29        NOPQRSTUVWXYZ       U       (\"ABCDEFGHIJKLM\", \"NOPQRSTUVWXYZ\"),"
  - "ciphers/porta_cipher.py:4:29        ZNOPQRSTUVWXY       U       (\"ABCDEFGHIJKLM\", \"ZNOPQRSTUVWXY\"),"
  - "ciphers/porta_cipher.py:6:29        YZNOPQRSTUVWX       U       (\"ABCDEFGHIJKLM\", \"YZNOPQRSTUVWX\"),"
  - "ciphers/porta_cipher.py:8:29        XYZNOPQRSTUVW       U       (\"ABCDEFGHIJKLM\", \"XYZNOPQRSTUVW\"),"
  - "ciphers/porta_cipher.py:10:29       WXYZNOPQRSTUV       U       (\"ABCDEFGHIJKLM\", \"WXYZNOPQRSTUV\"),"
  - "ciphers/porta_cipher.py:12:29       VWXYZNOPQRSTU       U       (\"ABCDEFGHIJKLM\", \"VWXYZNOPQRSTU\"),"
  - "ciphers/porta_cipher.py:14:29       UVWXYZNOPQRST       U       (\"ABCDEFGHIJKLM\", \"UVWXYZNOPQRST\"),"
  - "ciphers/porta_cipher.py:16:29       TUVWXYZNOPQRS       U       (\"ABCDEFGHIJKLM\", \"TUVWXYZNOPQRS\"),"
  - "ciphers/porta_cipher.py:18:29       STUVWXYZNOPQR       U       (\"ABCDEFGHIJKLM\", \"STUVWXYZNOPQR\"),"
  - "ciphers/porta_cipher.py:20:29       RSTUVWXYZNOPQ       U       (\"ABCDEFGHIJKLM\", \"RSTUVWXYZNOPQ\"),"
  - "ciphers/porta_cipher.py:22:29       QRSTUVWXYZNOP       U       (\"ABCDEFGHIJKLM\", \"QRSTUVWXYZNOP\"),"
  - "ciphers/porta_cipher.py:24:29       PQRSTUVWXYZNO       U       (\"ABCDEFGHIJKLM\", \"PQRSTUVWXYZNO\"),"
  - "ciphers/porta_cipher.py:26:29       OPQRSTUVWXYZN       U       (\"ABCDEFGHIJKLM\", \"OPQRSTUVWXYZN\"),"
  - "ciphers/porta_cipher.py:44:6        QRACRWU             U       'QRACRWU'"
  - "ciphers/rabin_miller.py:1:3         Primality       U       # Primality Testing with the Rabin"
  - "ciphers/rail_fence_cipher.py:11:10          olordll     U       'HWe olordll'"
  - "ciphers/rot13.py:8:9            frperg      U       \"Zl frperg onax nppbhag ahzore"
  - "ciphers/rot13.py:8:16           onax        U       \"Zl frperg onax nppbhag ahzore vf 1"
  - "ciphers/rot13.py:8:21           nppbhag     U       \"Zl frperg onax nppbhag ahzore vf 173-52946"
  - "ciphers/rot13.py:8:29           ahzore      U       frperg onax nppbhag ahzore vf 173-52946 fb qba"
  - "ciphers/rot13.py:8:52           qba'g       U       ahzore vf 173-52946 fb qba'g gryy nalbar!!\""
  - "ciphers/rot13.py:8:58           gryy        U       vf 173-52946 fb qba'g gryy nalbar!!\""
  - "ciphers/rot13.py:8:63           nalbar      U       52946 fb qba'g gryy nalbar!!\""
  - "ciphers/rsa_factorization.py:16:5           rsafactor       U       def rsafactor(d: int, e: int, n: int"
  - "ciphers/shuffled_shift_cipher.py:66:10          rtype                           U       :rtype: list"
  - "ciphers/shuffled_shift_cipher.py:82:38          MLKJIHGF                        U       shuffled parts: [A,CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]"
  - "ciphers/shuffled_shift_cipher.py:82:47          RQPON                           U       parts: [A,CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]"
  - "ciphers/shuffled_shift_cipher.py:82:53          ZYXWVUTS                        U       CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]"
  - "ciphers/shuffled_shift_cipher.py:83:35          ACBEDMLKJIHGFRQPONZYXWVUTS      U       shuffled __key_list : ACBEDMLKJIHGFRQPONZYXWVUTS"
  - "ciphers/shuffled_shift_cipher.py:132:44         Xyqe                            U       ShuffledShiftCipher('4PYIXyqeQZr44')"
  - "ciphers/simple_keyword_cypher.py:11:12          dups        U       key_no_dups = \"\""
  - "ciphers/simple_keyword_cypher.py:50:6           CYJJM       U       'CYJJM VMQJB!!'"
  - "ciphers/simple_keyword_cypher.py:50:12          VMQJB       U       'CYJJM VMQJB!!'"
  - "ciphers/simple_substitution_cipher.py:9:12          LFWOAYUISVKMNXPBDCRJTQEGHZ      U       key = \"LFWOAYUISVKMNXPBDCRJTQEGHZ\""
  - "ciphers/simple_substitution_cipher.py:36:56         Harshil                         U       LFWOAYUISVKMNXPBDCRJTQEGHZ', 'Harshil Darji')"
  - "ciphers/simple_substitution_cipher.py:36:64         Darji                           U       SVKMNXPBDCRJTQEGHZ', 'Harshil Darji')"
  - "ciphers/simple_substitution_cipher.py:37:6          Ilcrism                         U       'Ilcrism Olcvs'"
  - "ciphers/simple_substitution_cipher.py:37:14         Olcvs                           U       'Ilcrism Olcvs'"
  - "ciphers/trafid_cipher.py:133:39         EPSDUCVWYM          U       encrypt_message(msg, \"EPSDUCVWYM.ZLKXNBTFGORIJHAQ\")"
  - "ciphers/trafid_cipher.py:133:50         ZLKXNBTFGORIJHAQ    U       message(msg, \"EPSDUCVWYM.ZLKXNBTFGORIJHAQ\")"
  - "ciphers/transposition_cipher.py:28:6        Hlia        U       'Hlia rDsahrij'"
  - "ciphers/transposition_cipher.py:28:12       Dsahrij     U       'Hlia rDsahrij'"
  - "ciphers/vigenere_cipher.py:22:63        Dharmaj     U       is Harshil Darji from Dharmaj.')"
  - "ciphers/vigenere_cipher.py:23:6         Akij        U       'Akij ra Odrjqqs Gaisq muod"
  - "ciphers/vigenere_cipher.py:23:14        Odrjqqs     U       'Akij ra Odrjqqs Gaisq muod Mphumrs."
  - "ciphers/vigenere_cipher.py:23:22        Gaisq       U       'Akij ra Odrjqqs Gaisq muod Mphumrs.'"
  - "ciphers/vigenere_cipher.py:23:28        muod        U       Akij ra Odrjqqs Gaisq muod Mphumrs.'"
  - "ciphers/vigenere_cipher.py:23:33        Mphumrs     U       ra Odrjqqs Gaisq muod Mphumrs.'"
  - "ciphers/xor_cipher.py:131:66        fout    U       encrypt.out\", \"w+\") as fout:"
  - "compression/burrows_wheeler.py:31:31        ANANA           U       BANANA|', 'BANANA|^', 'ANANA|^B', 'NANA|^BA', 'ANA"
  - "compression/burrows_wheeler.py:31:43        NANA            U       BANANA|^', 'ANANA|^B', 'NANA|^BA', 'ANA|^BAN', 'NA"
  - "compression/burrows_wheeler.py:31:71        BANA            U       BA', 'ANA|^BAN', 'NA|^BANA',"
  - "compression/burrows_wheeler.py:32:9         BANAN           U       'A|^BANAN', '|^BANANA']"
  - "compression/burrows_wheeler.py:34:32        casaa           U       asa_da_casa', '_asa_da_casaa', 'asa_da_casaa_',"
  - "compression/burrows_wheeler.py:36:40        asaa            U       , 'casaa_asa_da_', 'asaa_asa_da_c', 'saa_asa"
  - "compression/burrows_wheeler.py:39:39        namabananapa    U       namabanana', 'anamabananap', 'namabananapa', 'amabananapan',"
  - "compression/burrows_wheeler.py:40:22        abananapanam    U       'mabananapana', 'abananapanam', 'bananapanama', 'ananapanam"
  - "compression/burrows_wheeler.py:41:6         nanapanamaba    U       'nanapanamaba', 'anapanamaban', 'napanamaba"
  - "compression/burrows_wheeler.py:41:54        apanamabanan    U       apanamaban', 'napanamabana', 'apanamabanan']"
  - "compression/burrows_wheeler.py:65:21        aaaadss         U       {'bwt_string': 'aaaadss_c__aa', 'idx_original"
  - "compression/burrows_wheeler.py:67:21        mnpbnnaaaaaa    U       {'bwt_string': 'mnpbnnaaaaaa', 'idx_original_string"
  - "compression/lempel_ziv_decompress.py:2:43           Lempel      U       several implementations of Lempel–Ziv–Welch decompression"
  - "compression/lz77.py:5:53        LZSS                    U       variations including LZW, LZSS, LZMA and others"
  - "compression/lz77.py:22:2        cabracadabrarrarrad     U       \"cabracadabrarrarrad\" <-> [(0, 0, 'c'),"
  - "compression/lz77.py:24:2        ababcbababaa            U       \"ababcbababaa\" <-> [(0, 0, 'a'),"
  - "compression/lz77.py:25:2        aacaacabcabaaac         U       \"aacaacabcabaaac\" <-> [(0, 0, 'a'),"
  - "compression/lz77.py:35:21       Harcekova               U       __author__ = \"Lucia Harcekova\""
  - "compression/lz77.py:150:55      abrarrarrad             U       find_encoding_token(\"abrarrarrad\", \"abracad\").offset"
  - "compression/lz77.py:150:70      abracad                 U       token(\"abrarrarrad\", \"abracad\").offset"
  - "compression/lz77.py:152:55      adabrarrarrad           U       find_encoding_token(\"adabrarrarrad\", \"cabrac\").length"
  - "compression/lz77.py:152:72      cabrac                  U       token(\"adabrarrarrad\", \"cabrac\").length"
  - "compression/lz77.py:201:59      rarrad                  U       match_length_from_index(\"rarrad\", \"adabrar\", 0, 4)"
  - "compression/lz77.py:201:69      adabrar                 U       from_index(\"rarrad\", \"adabrar\", 0, 4)"
  - "compression/peak_signal_to_noise_ratio.py:2:30          PSNR        U       signal-to-noise ratio - PSNR"
  - "compression/peak_signal_to_noise_ratio.py:28:20         imread      U       original = cv2.imread(os.path.join(dir_path"
  - "compression/run_length_encoding.py:7:28         AAAABBBCCDAA                U       run_length_encode(\"AAAABBBCCDAA\")"
  - "compression/run_length_encoding.py:13:28        AAADDDDDDFFFCCCAAVVVV       U       run_length_encode(\"AAADDDDDDFFFCCCAAVVVV\")"
  - "computer_vision/cnn_classification.py:17:22         iamges          U       . The labels of the iamges will be extracted from"
  - "computer_vision/cnn_classification.py:26:17         Keras           U       # Importing the Keras libraries and packages"
  - "computer_vision/cnn_classification.py:28:17         keras           U       from tensorflow.keras import layers, models"
  - "computer_vision/cnn_classification.py:31:7          Initialising    U       # Initialising the CNN"
  - "computer_vision/cnn_classification.py:39:72         relu            U       64, 3), activation=\"relu\")"
  - "computer_vision/flip_augmentation.py:26:16          annos       U       img_paths, annos = get_dataset(LABEL"
  - "computer_vision/flip_augmentation.py:35:13          imwrite     U       cv2.imwrite(f\"/{file_root}.jpg\""
  - "computer_vision/flip_augmentation.py:35:54          IMWRITE     U       root}.jpg\", image, [cv2.IMWRITE_JPEG_QUALITY, 85])"
  - "computer_vision/flip_augmentation.py:86:32          narray      U       new_imgs_list <type: narray>: image after resize"
  - "computer_vision/harris_corner.py:14:23          neighbourhoods      U       window_size : neighbourhoods considered"
  - "computer_vision/horn_schunck.py:2:14        Schunck     U       The Horn-Schunck method estimates the"
  - "computer_vision/horn_schunck.py:15:12       ndimage     U       from scipy.ndimage import convolve"
  - "computer_vision/horn_schunck.py:45:24       arange      U       np.meshgrid(np.arange(0, image.shape[1]),"
  - "computer_vision/horn_schunck.py:61:10       schunck     U       def horn_schunck("
  - "computer_vision/mosaic_augmentation.py:11:3         Parrameters     U       # Parrameters"
  - "computer_vision/mosaic_augmentation.py:29:9         idxs            U       idxs = random.sample(range"
  - "computer_vision/mosaic_augmentation.py:110:5        divid           U       divid_point_x = int(scale"
  - "CONTRIBUTING.md:5:339       Gitter          U       ask the community in [Gitter](https://gitter.im/TheAlgorit"
  - "CONTRIBUTING.md:51:8        docstrings      U       * have docstrings with clear explanations"
  - "CONTRIBUTING.md:52:11       doctests        U       * contain doctests that test both valid"
  - "CONTRIBUTING.md:82:334      autopep         U       other code formatters (autopep8, yapf) but the __black"
  - "CONTRIBUTING.md:82:344      yapf            U       formatters (autopep8, yapf) but the __black__ formatter"
  - "CONTRIBUTING.md:136:33      pytest          U       doctests will be run by pytest as part of our automated"
  - "CONTRIBUTING.md:139:14      doctest         U       python3 -m doctest -v my_submission.py"
  - "CONTRIBUTING.md:156:171     mypy            U       automated testing will run [mypy](http://mypy-lang.org"
  - "CONTRIBUTING.md:187:10      poyea           U       Writer [@poyea](https://github.com"
  - "conversions/astronomical_length_scale_conversion.py:4:30        Gigametre       U       Kilometre, Megametre, Gigametre,"
  - "conversions/astronomical_length_scale_conversion.py:5:1         Terametre       U       Terametre, Petametre, Exametre"
  - "conversions/astronomical_length_scale_conversion.py:5:12        Petametre       U       Terametre, Petametre, Exametre, Zettametre"
  - "conversions/astronomical_length_scale_conversion.py:5:23        Exametre        U       Terametre, Petametre, Exametre, Zettametre, Yottametre"
  - "conversions/astronomical_length_scale_conversion.py:5:33        Zettametre      U       Petametre, Exametre, Zettametre, Yottametre"
  - "conversions/astronomical_length_scale_conversion.py:5:45        Yottametre      U       Exametre, Zettametre, Yottametre"
  - "conversions/astronomical_length_scale_conversion.py:25:6        gigametre       U       \"gigametre\": \"Gm\","
  - "conversions/astronomical_length_scale_conversion.py:26:6        terametre       U       \"terametre\": \"Tm\","
  - "conversions/astronomical_length_scale_conversion.py:27:6        petametre       U       \"petametre\": \"Pm\","
  - "conversions/astronomical_length_scale_conversion.py:28:6        exametre        U       \"exametre\": \"Em\","
  - "conversions/astronomical_length_scale_conversion.py:29:6        zettametre      U       \"zettametre\": \"Zm\","
  - "conversions/astronomical_length_scale_conversion.py:30:6        yottametre      U       \"yottametre\": \"Ym\","
  - "conversions/binary_to_hexadecimal.py:40:7           Sanitising      U       # Sanitising parameter"
  - "conversions/energy_conversions.py:5:64          nutr    U       newtonmeter, calorie_nutr,\\"
  - "conversions/length_conversion.py:35:6           inche       U       \"inche\": \"in\", # Trailing"
  - "conversions/molecular_chemistry.py:10:27        nfactor     U       molarity_to_normality(nfactor: int, moles: float,"
  - "conversions/prefix_conversions_string.py:2:21           Lullo       U       * Author: Manuel Di Lullo (https://github.com"
  - "conversions/prefix_conversions_string.py:5:67           pyles       U       repository by lance-pyles"
  - "conversions/prefix_conversions_string.py:22:5           yotta       U       yotta = 80"
  - "conversions/prefix_conversions_string.py:23:5           zetta       U       zetta = 70"
  - "conversions/prefix_conversions_string.py:25:5           peta        U       peta = 50"
  - "conversions/prefix_conversions_string.py:27:5           giga        U       giga = 30"
  - "conversions/prefix_conversions_string.py:42:5           hecto       U       hecto = 2"
  - "conversions/prefix_conversions_string.py:43:5           deca        U       deca = 1"
  - "conversions/prefix_conversions_string.py:44:5           deci        U       deci = -1"
  - "conversions/prefix_conversions_string.py:45:5           centi       U       centi = -2"
  - "conversions/prefix_conversions_string.py:46:5           milli       U       milli = -3"
  - "conversions/prefix_conversions_string.py:49:5           pico        U       pico = -12"
  - "conversions/prefix_conversions_string.py:50:5           femto       U       femto = -15"
  - "conversions/prefix_conversions_string.py:51:5           atto        U       atto = -18"
  - "conversions/prefix_conversions_string.py:52:5           zepto       U       zepto = -21"
  - "conversions/prefix_conversions_string.py:53:5           yocto       U       yocto = -24"
  - "conversions/roman_numerals.py:24:29         CLIV            U       tests = {\"III\": 3, \"CLIV\": 154, \"MIX\": 1009,"
  - "conversions/roman_numerals.py:24:68         MMMCMXCIX       U       1009, \"MMD\": 2500, \"MMMCMXCIX\": 3999}"
  - "conversions/temperature_conversions.py:4:43         ndigits     U       fahrenheit(celsius: float, ndigits: int = 2) -> float:"
  - "conversions/temperature_conversions.py:306:5        reaumur     U       def reaumur_to_kelvin(reaumur: float"
  - "conversions/weight_conversion.py:4:15           Anubhav     U       __author__ = \"Anubhav Solanki\""
  - "conversions/weight_conversion.py:4:23           Solanki     U       author__ = \"Anubhav Solanki\""
  - "data_structures/binary_tree/avl_tree.py:240:9       Ltree           U       class AVLtree:"
  - "data_structures/binary_tree/avl_tree.py:293:26      traversale      U       -> str: # a level traversale, gives a more intuitive"
  - "data_structures/binary_tree/binary_search_tree_recursive.py:233:9       inorder     U       def inorder_traversal(self) -> Iterator"
  - "data_structures/binary_tree/binary_search_tree_recursive.py:600:12      Inorder     U       print(\"Inorder traversal:\", inorder"
  - "data_structures/binary_tree/inorder_tree_traversal_2022.py:3:9          Gurneet     U       Author: Gurneet Singh"
  - "data_structures/binary_tree/lazy_segment_tree.py:128:5          segt    U       segt = SegmentTree(size)"
  - "data_structures/binary_tree/red_black_tree.py:710:5         pytests     U       def pytests() -> None:"
  - "data_structures/binary_tree/treap.py:8:5            Treap's     U       Treap's node"
  - "data_structures/binary_tree/treap.py:9:5            Treap       U       Treap is a binary tree by"
  - "data_structures/binary_tree/treap.py:124:14         treap       U       def interact_treap(root: Node | None, args"
  - "data_structures/binary_tree/wavelet_tree.py:18:14       maxx        U       self.maxx: int = -1"
  - "data_structures/binary_tree/wavelet_tree.py:120:5       quantile    U       def quantile(node: Node | None, index"
  - "data_structures/disjoint_set/alternate_disjoint_set.py:54:26        disj    U       def get_parent(self, disj_set: int) -> int:"
  - "data_structures/hashing/hash_map.py:7:32        Hettinger       U       Dictionaries by Raymond Hettinger"
  - "data_structures/hashing/tests/test_hash_map.py:56:52        upsize      U       range(5)], # guaranteed upsize"
  - "data_structures/heap/binomial_heap.py:52:64         logn            U       elements: Guaranteed logn, amoratized 1"
  - "data_structures/heap/binomial_heap.py:52:70         amoratized      U       elements: Guaranteed logn, amoratized 1"
  - "data_structures/heap/binomial_heap.py:53:56         logm            U       size m and n: O(logn + logm)"
  - "data_structures/heap/binomial_heap.py:177:19        Neighbouring    U       # Neighbouring Nodes"
  - "data_structures/heap/binomial_heap.py:325:11        Neighbour       U       # Neighbour nodes"
  - "data_structures/linked_list/deque_doubly.py:103:8       Equeu       U       # DEqueu Remove Operations (At"
  - "data_structures/linked_list/from_sequence.py:1:13           Prorgam     U       # Recursive Prorgam to create a Linked List"
  - "data_structures/linked_list/singly_linked_list.py:400:10        dlrow       U       \"dlrow olleH\","
  - "data_structures/linked_list/singly_linked_list.py:400:16        olle        U       \"dlrow olleH\","
  - "data_structures/linked_list/skip_list.py:371:17         doesnt (doesn't)    U       def test_delete_doesnt_leave_dead_nodes():"
  - "data_structures/queue/double_ended_queue.py:244:18      topop       U       @returns topop.val: the value of the"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:3:20        echoaj          U       GitHub: github.com/echoaj"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:39:5        dijkstras       U       def dijkstras_two_stack_algorithm"
  - "data_structures/trie/radix_tree.py:27:24        myprefix    U       >>> RadixNode(\"myprefix\").match(\"mystring\")"
  - "digital_image_processing/change_brightness.py:25:9          brigt       U       brigt_img = change_brightness"
  - "digital_image_processing/convert_to_negative.py:2:36        opencv      U       mplemented an algorithm using opencv to convert a colored"
  - "digital_image_processing/convert_to_negative.py:4:44        imshow      U       destroyAllWindows, imread, imshow, waitKey"
  - "digital_image_processing/edge_detection/canny.py:5:39           sobel       U       image_processing.filters.sobel_filter import sobel"
  - "digital_image_processing/edge_detection/canny.py:12:15          mgrid       U       x, y = np.mgrid[0 - center : k_size"
  - "digital_image_processing/filters/gabor_filter.py:1:25           Gaborfilter     U       Implementation of the Gaborfilter"
  - "digital_image_processing/filters/gabor_filter.py:7:5            gabor           U       def gabor_filter_kernel("
  - "digital_image_processing/filters/gabor_filter.py:8:5            ksize           U       ksize: int, sigma: int, theta"
  - "digital_image_processing/filters/gabor_filter.py:8:41           lambd           U       sigma: int, theta: int, lambd: int, gamma: int, psi"
  - "digital_image_processing/filters/gabor_filter.py:14:24          Gabor           U       of Gabor function."
  - "digital_image_processing/filters/local_binary_pattern.py:29:39          patternof       U       of the local binary patternof the pixel"
  - "digital_image_processing/filters/local_binary_pattern.py:66:61          IMREAD          U       data/lena.jpg\", cv2.IMREAD_GRAYSCALE"
  - "digital_image_processing/histogram_equalization/histogram_stretch.py:4:10           Binish      U       @author: Binish125"
  - "digital_image_processing/index_calculation.py:1:11          João            U       # Author: João Gustavo A. Amorim"
  - "digital_image_processing/index_calculation.py:1:27          Amorim          U       Author: João Gustavo A. Amorim"
  - "digital_image_processing/index_calculation.py:47:15         ARVI            U       #\"ARVI2\" -- red"
  - "digital_image_processing/index_calculation.py:48:15         CCCI            U       #\"CCCI\" -- red"
  - "digital_image_processing/index_calculation.py:51:15         NDVI            U       #\"NDVI\" -- red"
  - "digital_image_processing/index_calculation.py:52:15         BNDVI           U       #\"BNDVI\" -- blue"
  - "digital_image_processing/index_calculation.py:54:15         GNDVI           U       #\"GNDVI\" -- green"
  - "digital_image_processing/index_calculation.py:55:15         GBNDVI          U       #\"GBNDVI\" -- green"
  - "digital_image_processing/index_calculation.py:56:15         GRNDVI          U       #\"GRNDVI\" -- red,"
  - "digital_image_processing/index_calculation.py:57:15         RBNDVI          U       #\"RBNDVI\" -- red,"
  - "digital_image_processing/index_calculation.py:58:15         PNDVI           U       #\"PNDVI\" -- red"
  - "digital_image_processing/index_calculation.py:60:15         BWDRVI          U       #\"BWDRVI\" -- blue"
  - "digital_image_processing/index_calculation.py:64:15         CTVI            U       #\"CTVI\" -- red"
  - "digital_image_processing/index_calculation.py:65:15         GDVI            U       #\"GDVI\" -- green"
  - "digital_image_processing/index_calculation.py:67:15         GEMI            U       #\"GEMI\" -- red"
  - "digital_image_processing/index_calculation.py:68:15         GOSAVI          U       #\"GOSAVI\" -- green"
  - "digital_image_processing/index_calculation.py:69:15         GSAVI           U       #\"GSAVI\" -- green"
  - "digital_image_processing/index_calculation.py:72:15         IPVI            U       #\"IPVI\" -- red"
  - "digital_image_processing/index_calculation.py:75:15         MRVI            U       #\"MRVI\" -- red"
  - "digital_image_processing/index_calculation.py:76:15         MSAVI           U       #\"MSAVI\" -- red"
  - "digital_image_processing/index_calculation.py:80:15         NGRDI           U       #\"NGRDI\" -- red"
  - "digital_image_processing/index_calculation.py:86:15         NDRE            U       #\"NDRE\" -- redEdge"
  - "digital_image_processing/index_calculation.py:108:18        matricies       U       self.set_matricies(red=red, green=green"
  - "digital_image_processing/index_calculation.py:131:9         funcs           U       funcs = {"
  - "digital_image_processing/index_calculation.py:133:26        ccci            U       \"CCCI\": self.ccci,"
  - "digital_image_processing/index_calculation.py:136:26        ndvi            U       \"NDVI\": self.ndvi,"
  - "digital_image_processing/index_calculation.py:137:27        bndvi           U       \"BNDVI\": self.bndvi,"
  - "digital_image_processing/index_calculation.py:139:27        gndvi           U       \"GNDVI\": self.gndvi,"
  - "digital_image_processing/index_calculation.py:140:28        gbndvi          U       \"GBNDVI\": self.gbndvi,"
  - "digital_image_processing/index_calculation.py:141:28        grndvi          U       \"GRNDVI\": self.grndvi,"
  - "digital_image_processing/index_calculation.py:142:28        rbndvi          U       \"RBNDVI\": self.rbndvi,"
  - "digital_image_processing/index_calculation.py:143:27        pndvi           U       \"PNDVI\": self.pndvi,"
  - "digital_image_processing/index_calculation.py:145:28        bwdrvi          U       \"BWDRVI\": self.bwdrvi,"
  - "digital_image_processing/index_calculation.py:149:26        ctvi            U       \"CTVI\": self.ctvi,"
  - "digital_image_processing/index_calculation.py:150:26        gdvi            U       \"GDVI\": self.gdvi,"
  - "digital_image_processing/index_calculation.py:152:26        gemi            U       \"GEMI\": self.gemi,"
  - "digital_image_processing/index_calculation.py:153:28        gosavi          U       \"GOSAVI\": self.gosavi,"
  - "digital_image_processing/index_calculation.py:154:27        gsavi           U       \"GSAVI\": self.gsavi,"
  - "digital_image_processing/index_calculation.py:157:26        ipvi            U       \"IPVI\": self.ipvi,"
  - "digital_image_processing/index_calculation.py:160:26        mrvi            U       \"MRVI\": self.mrvi,"
  - "digital_image_processing/index_calculation.py:161:29        savi            U       \"MSAVI\": self.m_savi,"
  - "digital_image_processing/index_calculation.py:165:27        ngrdi           U       \"NGRDI\": self.ngrdi,"
  - "digital_image_processing/index_calculation.py:171:26        ndre            U       \"NDRE\": self.ndre,"
  - "digital_image_processing/index_calculation.py:220:34        CDVI            U       Index, Calibrated NDVI - CDVI"
  - "digital_image_processing/index_calculation.py:564:18        maxprec         U       floatmode='maxprec_equal'))"
  - "DIRECTORY.md:16:6           Butterworth             U       * [Butterworth Filter](audio_filters"
  - "DIRECTORY.md:29:6           Minmax                  U       * [Minmax](backtracking/minmax"
  - "DIRECTORY.md:40:19          Setbits                 U       * [Binary Count Setbits](bit_manipulation/binary"
  - "DIRECTORY.md:46:21          Kernighan               U       * [Count 1S Brian Kernighan Method](bit_manipulation"
  - "DIRECTORY.md:64:6           Nand                    U       * [Nand Gate](boolean_algebra"
  - "DIRECTORY.md:65:6           Norgate                 U       * [Norgate](boolean_algebra/norgate"
  - "DIRECTORY.md:68:15          Cluskey                 U       * [Quine Mc Cluskey](boolean_algebra/quine"
  - "DIRECTORY.md:69:6           Xnor                    U       * [Xnor Gate](boolean_algebra"
  - "DIRECTORY.md:73:6           Conways                 U       * [Conways Game Of Life](cellular"
  - "DIRECTORY.md:75:6           Nagel                   U       * [Nagel Schrekenberg](cellular"
  - "DIRECTORY.md:75:12          Schrekenberg            U       * [Nagel Schrekenberg](cellular_automata/nagel"
  - "DIRECTORY.md:81:6           Atbash                  U       * [Atbash](ciphers/atbash.py)"
  - "DIRECTORY.md:82:6           Autokey                 U       * [Autokey](ciphers/autokey.py"
  - "DIRECTORY.md:83:6           Baconian                U       * [Baconian Cipher](ciphers/baconian"
  - "DIRECTORY.md:92:6           Cryptomath              U       * [Cryptomath Module](ciphers/cryptomath"
  - "DIRECTORY.md:97:6           Elgamal                 U       * [Elgamal Key Generator](ciphers"
  - "DIRECTORY.md:100:20         Cypher                  U       * [Mixed Keyword Cypher](ciphers/mixed_keyword"
  - "DIRECTORY.md:103:6          Onepad                  U       * [Onepad Cipher](ciphers/onepad"
  - "DIRECTORY.md:104:6          Playfair                U       * [Playfair Cipher](ciphers/playfair"
  - "DIRECTORY.md:106:6          Porta                   U       * [Porta Cipher](ciphers/porta"
  - "DIRECTORY.md:116:6          Trafid                  U       * [Trafid Cipher](ciphers/trafid"
  - "DIRECTORY.md:119:6          Vigenere                U       * [Vigenere Cipher](ciphers/vigenere"
  - "DIRECTORY.md:183:8          Fenwick                 U       * [Fenwick Tree](data_structures"
  - "DIRECTORY.md:221:8          Deque                   U       * [Deque Doubly](data_structures"
  - "DIRECTORY.md:244:8          Dijkstras               U       * [Dijkstras Two Stack Algorithm"
  - "DIRECTORY.md:274:8          Sobel                   U       * [Sobel Filter](digital_image"
  - "DIRECTORY.md:296:10         Subarray                U       * [Max Subarray](divide_and_conquer"
  - "DIRECTORY.md:297:6          Mergesort               U       * [Mergesort](divide_and_conquer"
  - "DIRECTORY.md:300:6          Strassen                U       * [Strassen Matrix Multiplication"
  - "DIRECTORY.md:305:6          Bitmask                 U       * [Bitmask](dynamic_programming"
  - "DIRECTORY.md:314:12         Warshall                U       * [Floyd Warshall](dynamic_programming"
  - "DIRECTORY.md:316:24         Submasks                U       [Iterating Through Submasks](dynamic_programming"
  - "DIRECTORY.md:322:39         Nlogn                   U       Increasing Subsequence O(Nlogn)](dynamic_programming"
  - "DIRECTORY.md:341:6          Viterbi                 U       * [Viterbi](dynamic_programming"
  - "DIRECTORY.md:388:6          Bezier                  U       * [Bezier Curve](graphics/bezier"
  - "DIRECTORY.md:399:6          Boruvka                 U       * [Boruvka](graphs/boruvka.py)"
  - "DIRECTORY.md:416:6          Dinic                   U       * [Dinic](graphs/dinic.py)"
  - "DIRECTORY.md:418:6          Edmonds                 U       * [Edmonds Karp Multiple Source"
  - "DIRECTORY.md:418:14         Karp                    U       * [Edmonds Karp Multiple Source And"
  - "DIRECTORY.md:419:6          Eulerian                U       * [Eulerian Path And Circuit For"
  - "DIRECTORY.md:424:11         Shapley                 U       * [Gale Shapley Bigraph](graphs/gale"
  - "DIRECTORY.md:424:19         Bigraph                 U       * [Gale Shapley Bigraph](graphs/gale_shapley"
  - "DIRECTORY.md:431:6          Kahns                   U       * [Kahns Algorithm Long](graphs"
  - "DIRECTORY.md:432:22         Topo                    U       * [Kahns Algorithm Topo](graphs/kahns_algorithm"
  - "DIRECTORY.md:433:6          Karger                  U       * [Karger](graphs/karger.py)"
  - "DIRECTORY.md:438:28         Kruskal                 U       Minimum Spanning Tree Kruskal](graphs/minimum_spanning"
  - "DIRECTORY.md:442:22         Astar                   U       * [Multi Heuristic Astar](graphs/multi_heuristic"
  - "DIRECTORY.md:446:10         Kosaraju                U       * [Scc Kosaraju](graphs/scc_kosaraju"
  - "DIRECTORY.md:448:6          Tarjans                 U       * [Tarjans Scc](graphs/tarjans"
  - "DIRECTORY.md:466:6          Luhn                    U       * [Luhn](hashes/luhn.py)"
  - "DIRECTORY.md:468:6          Sdbm                    U       * [Sdbm](hashes/sdbm.py)"
  - "DIRECTORY.md:484:8          Polynom                 U       * [Polynom For Points](linear_algebra"
  - "DIRECTORY.md:488:8          Schur                   U       * [Schur Complement](linear_algebra"
  - "DIRECTORY.md:503:14         Clust                   U       * [K Means Clust](machine_learning/k"
  - "DIRECTORY.md:504:16         Neighbours              U       * [K Nearest Neighbours](machine_learning/k"
  - "DIRECTORY.md:505:10         Sklearn                 U       * [Knn Sklearn](machine_learning/knn"
  - "DIRECTORY.md:511:5          Lstm                    U       * Lstm"
  - "DIRECTORY.md:514:6          Polymonial              U       * [Polymonial Regression](machine"
  - "DIRECTORY.md:521:6          Xgboost                 U       * [Xgboost Classifier](machine"
  - "DIRECTORY.md:534:6          Automorphic             U       * [Automorphic Number](maths/automorphic"
  - "DIRECTORY.md:539:13         Borwein                 U       * [Bailey Borwein Plouffe](maths/bailey"
  - "DIRECTORY.md:539:21         Plouffe                 U       * [Bailey Borwein Plouffe](maths/bailey_borwein"
  - "DIRECTORY.md:552:6          Chudnovsky              U       * [Chudnovsky Algorithm](maths/chudnovsky"
  - "DIRECTORY.md:553:6          Collatz                 U       * [Collatz Sequence](maths/collatz"
  - "DIRECTORY.md:566:6          Eulers                  U       * [Eulers Totient](maths/eulers"
  - "DIRECTORY.md:566:13         Totient                 U       * [Eulers Totient](maths/eulers_totient"
  - "DIRECTORY.md:585:12         Ramanujanalgo           U       * [Hardy Ramanujanalgo](maths/hardy_ramanujanalgo"
  - "DIRECTORY.md:591:6          Jaccard                 U       * [Jaccard Similarity](maths/jaccard"
  - "DIRECTORY.md:593:6          Karatsuba               U       * [Karatsuba](maths/karatsuba.py"
  - "DIRECTORY.md:594:6          Krishnamurthy           U       * [Krishnamurthy Number](maths/krishnamurthy"
  - "DIRECTORY.md:599:6          Liouville               U       * [Liouville Lambda](maths/liouville"
  - "DIRECTORY.md:600:12         Lehmer                  U       * [Lucas Lehmer Primality Test](maths"
  - "DIRECTORY.md:602:6          Maclaurin               U       * [Maclaurin Series](maths/maclaurin"
  - "DIRECTORY.md:608:6          Mobius                  U       * [Mobius Function](maths/mobius"
  - "DIRECTORY.md:612:6          Nevilles                U       * [Nevilles Method](maths/nevilles"
  - "DIRECTORY.md:633:6          Primelib                U       * [Primelib](maths/primelib.py)"
  - "DIRECTORY.md:635:6          Pronic                  U       * [Pronic Number](maths/pronic"
  - "DIRECTORY.md:636:6          Proth                   U       * [Proth Number](maths/proth"
  - "DIRECTORY.md:642:6          Relu                    U       * [Relu](maths/relu.py)"
  - "DIRECTORY.md:644:6          Runge                   U       * [Runge Kutta](maths/runge_kutta"
  - "DIRECTORY.md:644:12         Kutta                   U       * [Runge Kutta](maths/runge_kutta.py"
  - "DIRECTORY.md:657:6          Signum                  U       * [Signum](maths/signum.py)"
  - "DIRECTORY.md:662:6          Softmax                 U       * [Softmax](maths/softmax.py)"
  - "DIRECTORY.md:668:6          Sumset                  U       * [Sumset](maths/sumset.py)"
  - "DIRECTORY.md:680:6          Zellers                 U       * [Zellers Congruence](maths/zellers"
  - "DIRECTORY.md:687:6          Cramers                 U       * [Cramers Rule 2X2](matrix/cramers"
  - "DIRECTORY.md:703:11         Fulkerson               U       * [Ford Fulkerson](networking_flow/ford"
  - "DIRECTORY.md:719:6          Davisb                  U       * [Davisb Putnamb Logemannb Loveland"
  - "DIRECTORY.md:719:13         Putnamb                 U       * [Davisb Putnamb Logemannb Loveland]"
  - "DIRECTORY.md:719:21         Logemannb               U       * [Davisb Putnamb Logemannb Loveland](other/davisb"
  - "DIRECTORY.md:719:31         Loveland                U       Davisb Putnamb Logemannb Loveland](other/davisb_putnamb"
  - "DIRECTORY.md:730:13         Congruential            U       * [Linear Congruential Generator](other/linear"
  - "DIRECTORY.md:732:6          Magicdiamondpattern     U       * [Magicdiamondpattern](other/magicdiamondpattern"
  - "DIRECTORY.md:739:6          Sdes                    U       * [Sdes](other/sdes.py)"
  - "DIRECTORY.md:744:6          Casimir                 U       * [Casimir Effect](physics/casimir"
  - "DIRECTORY.md:752:6          Malus                   U       * [Malus Law](physics/malus_law"
  - "DIRECTORY.md:1059:6         Deutsch                 U       * [Deutsch Jozsa](quantum/deutsch"
  - "DIRECTORY.md:1059:14        Jozsa                   U       * [Deutsch Jozsa](quantum/deutsch_jozsa"
  - "DIRECTORY.md:1068:13        Qubit                   U       * [Single Qubit Measure](quantum/single"
  - "DIRECTORY.md:1100:6         Bitonic                 U       * [Bitonic Sort](sorts/bitonic"
  - "DIRECTORY.md:1101:6         Bogo                    U       * [Bogo Sort](sorts/bogo_sort"
  - "DIRECTORY.md:1141:6         Slowsort                U       * [Slowsort](sorts/slowsort.py)"
  - "DIRECTORY.md:1151:10        Corasick                U       * [Aho Corasick](strings/aho_corasick"
  - "DIRECTORY.md:1167:9         Isogram                 U       * [Is Isogram](strings/is_isogram"
  - "DIRECTORY.md:1170:9         Srilankan               U       * [Is Srilankan Phone Number](strings"
  - "DIRECTORY.md:1171:6         Jaro                    U       * [Jaro Winkler](strings/jaro"
  - "DIRECTORY.md:1171:11        Winkler                 U       * [Jaro Winkler](strings/jaro_winkler"
  - "DIRECTORY.md:1176:6         Manacher                U       * [Manacher](strings/manacher.py"
  - "DIRECTORY.md:1179:6         Ngram                   U       * [Ngram](strings/ngram.py)"
  - "DIRECTORY.md:1217:10        Imdb                    U       * [Get Imdb Top 250 Movies Csv]"
  - "DIRECTORY.md:1218:10        Imdbtop                 U       * [Get Imdbtop](web_programming/get"
  - "DIRECTORY.md:1221:6         Giphy                   U       * [Giphy](web_programming/giphy"
  - "DIRECTORY.md:1228:6         Recaptcha               U       * [Recaptcha Verification](web_programming"
  - "divide_and_conquer/closest_pair_of_points.py:5:36           ords        U       sorted based on Xco-ords and"
  - "divide_and_conquer/closest_pair_of_points.py:112:44         Xcoords     U       contains the points, whose Xcoords are at a"
  - "divide_and_conquer/closest_pair_of_points.py:113:45         Xcoord      U       pair_dis) from mid's Xcoord"
  - "divide_and_conquer/convex_hull.py:409:17        melkman     U       def convex_hull_melkman(points: list[Point]"
  - "divide_and_conquer/inversions.py:8:25           nlogn       U       algorithm which runs in nlogn and the brute-force"
  - "divide_and_conquer/strassen_matrix_multiplication.py:74:12          strassen    U       def actual_strassen(matrix_a: list, matrix"
  - "dynamic_programming/all_construct.py:15:34          purp                U       construct(\"purple\",[\"purp\",\"p\",\"ur\",\"le\",\"purpl"
  - "dynamic_programming/all_construct.py:15:55          purpl               U       purp\",\"p\",\"ur\",\"le\",\"purpl\"])"
  - "dynamic_programming/all_construct.py:51:26          jwajalapa           U       print(all_construct(\"jwajalapa\", [\"jwa\", \"j\", \"w\","
  - "dynamic_programming/all_construct.py:51:68          lapa                U       j\", \"w\", \"a\", \"la\", \"lapa\"]))"
  - "dynamic_programming/all_construct.py:55:14          hexagonosaurus      U       \"hexagonosaurus\","
  - "dynamic_programming/all_construct.py:56:52          auru                U       \"ag\", \"ago\", \"ru\", \"auru\", \"rus\", \"go\", \"no\""
  - "dynamic_programming/catalan_numbers.py:7:20         Dyck    U       * - The number of Dyck words of length 2n"
  - "dynamic_programming/climbing_stairs.py:6:9          Cdoe    U       LeetCdoe No.70: Climbing Stairs"
  - "dynamic_programming/edit_distance.py:2:11           Turfa           U       Author : Turfa Auliarachman"
  - "dynamic_programming/edit_distance.py:2:17           Auliarachman    U       Author : Turfa Auliarachman"
  - "dynamic_programming/iterating_through_submasks.py:2:15          Faizan      U       Author : Syed Faizan (3rd Year Student IIIT"
  - "dynamic_programming/iterating_through_submasks.py:2:40          IIIT        U       Faizan (3rd Year Student IIIT Pune)"
  - "dynamic_programming/iterating_through_submasks.py:3:10          faizan      U       github : faizan2700"
  - "dynamic_programming/k_means_clustering_tensorflow.py:7:33           noofclusters        U       means_cluster(vectors, noofclusters):"
  - "dynamic_programming/k_means_clustering_tensorflow.py:36:9           sess                U       sess = tf.Session()"
  - "dynamic_programming/k_means_clustering_tensorflow.py:97:9           noofiterations      U       noofiterations = 100"
  - "dynamic_programming/k_means_clustering_tensorflow.py:104:17         vect                U       vect = vectors[vector_n]"
  - "dynamic_programming/k_means_clustering_tensorflow.py:129:26         vects               U       assigned_vects = ["
  - "dynamic_programming/longest_common_subsequence.py:68:10         AGGTAB      U       a = \"AGGTAB\""
  - "dynamic_programming/longest_common_subsequence.py:69:10         GXTXAYB     U       b = \"GXTXAYB\""
  - "dynamic_programming/longest_common_subsequence.py:71:24         GTAB        U       expected_subseq = \"GTAB\""
  - "dynamic_programming/longest_common_substring.py:5:24        xabded          U       Example: \"abcdef\" and \"xabded\" have two longest common"
  - "dynamic_programming/longest_common_substring.py:27:35       abcdxyz         U       longest_common_substring(\"abcdxyz\", \"xyzabcd\")"
  - "dynamic_programming/longest_common_substring.py:27:46       xyzabcd         U       substring(\"abcdxyz\", \"xyzabcd\")"
  - "dynamic_programming/longest_common_substring.py:29:35       zxabcdezy       U       longest_common_substring(\"zxabcdezy\", \"yzabcdezx\")"
  - "dynamic_programming/longest_common_substring.py:29:48       yzabcdezx       U       substring(\"zxabcdezy\", \"yzabcdezx\")"
  - "dynamic_programming/longest_common_substring.py:30:6        abcdez          U       'abcdez'"
  - "dynamic_programming/longest_increasing_subsequence_o(nlogn).py:2:11         Aravind     U       # Author: Aravind Kashyap"
  - "dynamic_programming/longest_increasing_subsequence_o(nlogn).py:2:19         Kashyap     U       # Author: Aravind Kashyap"
  - "dynamic_programming/longest_increasing_subsequence.py:2:11          Mehdi       U       Author : Mehdi ALAOUI"
  - "dynamic_programming/matrix_chain_order.py:32:11         optiomal    U       def print_optiomal_solution(optimal_solution"
  - "dynamic_programming/max_subarray_sum.py:7:1         Kadane's    U       Kadane's algorithm is a simple"
  - "dynamic_programming/min_distance_up_bottom.py:25:33         zooicoarchaeologist     U       distance_up_bottom(\"zooicoarchaeologist\", \"zoologist\")"
  - "dynamic_programming/optimal_binary_search_tree.py:72:22         CLRS        U       Implemented from CLRS (Introduction to Algorithms"
  - "dynamic_programming/optimal_binary_search_tree.py:100:5         freqs       U       freqs = [nodes[i].freq for"
  - "dynamic_programming/subset_generation.py:44:35          Ambuj       U       code is contributed by Ambuj sahu"
  - "dynamic_programming/subset_generation.py:44:41          sahu        U       contributed by Ambuj sahu"
  - "dynamic_programming/viterbi.py:4:5          viterbi     U       def viterbi("
  - "dynamic_programming/viterbi.py:15:5         sdafads     U       sdafads"
  - "electronics/circular_convolution.py:7:69        DTFT        U       time Fourier transform (DTFT)."
  - "electronics/circular_convolution.py:9:20        DTFTs       U       convolution of the DTFTs of the individual sequences"
  - "electronics/coulombs_law.py:8:5         couloumbs           U       def couloumbs_law("
  - "electronics/coulombs_law.py:23:29       mémoire             U       Coulomb (1785) \"Premier mémoire sur l’électricité et"
  - "electronics/coulombs_law.py:23:41       l’électricité       U       Premier mémoire sur l’électricité et le magnétisme,\""
  - "electronics/coulombs_law.py:23:61       magnétisme          U       l’électricité et le magnétisme,\""
  - "electronics/coulombs_law.py:24:5        Histoire            U       Histoire de l’Académie Royale"
  - "electronics/coulombs_law.py:24:17       l’Académie          U       Histoire de l’Académie Royale des Sciences"
  - "electronics/resonant_frequency.py:19:43         capacitnace     U       value of inductance and capacitnace."
  - "file_transfer/send_file.py:1:32         mytext      U       file(filename: str = \"mytext.txt\", testing: bool"
  - "file_transfer/tests/test_send_file.py:18:13         ensurance       U       # ===== ensurance ====="
  - "fractals/julia_sets.py:1:24         Zotti           U       Author Alexandre De Zotti"
  - "fractals/julia_sets.py:14:33        ambiantly       U       exponential map Julia set, ambiantly homeomorphic to the"
  - "fractals/julia_sets.py:14:43        homeomorphic    U       Julia set, ambiantly homeomorphic to the examples in"
  - "fractals/sierpinski_triangle.py:2:55        anuragkumarak       U       uragkumarak95@gmail.com | git/anuragkumarak95"
  - "fractals/sierpinski_triangle.py:6:13        Sierpiński          U       What is the Sierpiński Triangle?"
  - "fractals/sierpinski_triangle.py:13:38       Wacław              U       Polish mathematician Wacław Sierpiński, but appeared"
  - "fuzzy_logic/fuzzy_operations.py:2:18        Jigyasa     U       README, Author - Jigyasa Gandhi(mailto:jigsgandhi"
  - "fuzzy_logic/fuzzy_operations.py:11:8        skfuzzy     U       import skfuzzy as fuzz"
  - "fuzzy_logic/fuzzy_operations.py:18:8        trapmf      U       # (trapmf(), gbellmf(), gaussmf"
  - "fuzzy_logic/fuzzy_operations.py:18:18       gbellmf     U       # (trapmf(), gbellmf(), gaussmf(), etc)."
  - "fuzzy_logic/fuzzy_operations.py:18:29       gaussmf     U       trapmf(), gbellmf(), gaussmf(), etc)."
  - "fuzzy_logic/fuzzy_operations.py:21:29       trimf       U       young = fuzz.membership.trimf(X, abc1)"
  - "fuzzy_logic/fuzzy_operations.py:102:25      hspace      U       plt.subplots_adjust(hspace=0.5)"
  - "genetic_algorithm/basic_string.py:5:11          rkia                U       Author: D4rkia"
  - "genetic_algorithm/basic_string.py:28:19         Helxo               U       >>> evaluate(\"Helxo Worlx\", \"Hello World"
  - "genetic_algorithm/basic_string.py:28:25         Worlx               U       >>> evaluate(\"Helxo Worlx\", \"Hello World\")"
  - "genetic_algorithm/basic_string.py:177:37        abcdefghijklm       U       ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm\""
  - "genetic_algorithm/basic_string.py:178:10        nopqrstuvwxyz       U       \"nopqrstuvwxyz.,;!?+-*#@^'èéòà€ù=)"
  - "genetic_algorithm/basic_string.py:178:35        èéòà                U       nopqrstuvwxyz.,;!?+-*#@^'èéòà€ù=)(&%$£/\\\\\""
  - "geodesy/lamberts_ellipsoidal_distance.py:68:39          Pcos            U       sin(sigma)) * sin^2Pcos^2Q / cos^2(sigma/2)"
  - "geodesy/lamberts_ellipsoidal_distance.py:70:7           demonimator     U       x_demonimator = cos(sigma / 2) **"
  - "geodesy/lamberts_ellipsoidal_distance.py:74:39          Psin            U       sin(sigma)) * cos^2Psin^2Q / sin^2(sigma/2)"
  - "graphics/bezier_curve.py:49:9           bezier      U       def bezier_curve_function(self"
  - "graphics/vector3_for_2d_rendering.py:10:15          xcodz           U       __author__ = \"xcodz-dot, cclaus, dhruvmanila"
  - "graphics/vector3_for_2d_rendering.py:10:26          cclaus          U       author__ = \"xcodz-dot, cclaus, dhruvmanila\""
  - "graphics/vector3_for_2d_rendering.py:10:34          dhruvmanila     U       \"xcodz-dot, cclaus, dhruvmanila\""
  - "graphs/basic_graphs.py:130:5        dijk            U       def dijk(g, s):"
  - "graphs/basic_graphs.py:157:5        topo            U       def topo(g, ind=None, q=None"
  - "graphs/basic_graphs.py:187:5        adjm            U       def adjm():"
  - "graphs/basic_graphs.py:208:5        floy            U       def floy(a_and_n):"
  - "graphs/basic_graphs.py:262:5        edglist         U       def edglist():"
  - "graphs/basic_graphs.py:272:5        Kruskal's       U       Kruskal's MST Algorithm"
  - "graphs/basic_graphs.py:280:5        krusk           U       def krusk(e_and_n):"
  - "graphs/bi_directional_dijkstra.py:11:11         Swayam      U       # Author: Swayam Singh (https://github"
  - "graphs/bidirectional_a_star.py:79:9         astar       U       >>> astar = AStar((0, 0), (len"
  - "graphs/bidirectional_a_star.py:256:5        bidir       U       bidir_astar = BidirectionalAStar"
  - "graphs/boruvka.py:1:4           Borůvka's       U       \"\"\"Borůvka's algorithm."
  - "graphs/boruvka.py:82:9          boruvka         U       def boruvka(self) -> None:"
  - "graphs/breadth_first_search.py:3:13         OMKAR       U       \"\"\" Author: OMKAR PATHAK \"\"\""
  - "graphs/breadth_first_search.py:3:19         PATHAK      U       \"\"\" Author: OMKAR PATHAK \"\"\""
  - "graphs/breadth_first_search.py:15:49        graaph      U       list representation of graaph"
  - "graphs/connected_components.py:24:15        verts       U       connected_verts = []"
  - "graphs/dijkstra_2.py:11:14          mdist       U       def min_dist(mdist, vset, v):"
  - "graphs/dijkstra_2.py:11:21          vset        U       def min_dist(mdist, vset, v):"
  - "graphs/dijkstra_2.py:57:5           gsrc        U       gsrc = int(input(\"\\nEnter"
  - "graphs/dijkstra_algorithm.py:2:11           Shubham     U       # Author: Shubham Malik"
  - "graphs/dijkstra_algorithm.py:2:19           Malik       U       # Author: Shubham Malik"
  - "graphs/dijkstra_algorithm.py:73:33          atmost      U       assuming the new_d is atmost old_d"
  - "graphs/dinic.py:17:33       rcap        U       edge(self, a, b, c, rcap=0):"
  - "graphs/dinic.py:87:20       verices     U       Finally we add the verices near the sink to the"
  - "graphs/edmonds_karp_multiple_source_and_sink.py:63:14       verticies       U       self.verticies_count = flow_network"
  - "graphs/g_topological_sort.py:1:11           Phyllipe    U       # Author: Phyllipe Bezerra (https://github"
  - "graphs/g_topological_sort.py:1:20           Bezerra     U       # Author: Phyllipe Bezerra (https://github.com"
  - "graphs/gale_shapley_bigraph.py:10:5         oegan           U       oegan donors and recipients"
  - "graphs/gale_shapley_bigraph.py:16:56        Numberphile     U       v=Qcv1IqHWAzg&t=13s (Numberphile YouTube)."
  - "graphs/graph_adjacency_list.py:3:9          Vikram          U       Author: Vikram Nithyanandam"
  - "graphs/graph_adjacency_list.py:3:16         Nithyanandam    U       Author: Vikram Nithyanandam"
  - "graphs/graph_adjacency_list.py:44:11        Falsey          U       # Falsey checks"
  - "graphs/graph_list.py:3:25           Nwachukwu       U       Author: OMKAR PATHAK, Nwachukwu Chidiebere"
  - "graphs/graph_list.py:3:35           Chidiebere      U       OMKAR PATHAK, Nwachukwu Chidiebere"
  - "graphs/greedy_min_vertex_cover.py:3:16          Approximization     U       * Description: Approximization algorithm for minimum"
  - "graphs/kahns_algorithm_long.py:3:5          indegree    U       indegree = [0] * len(graph)"
  - "graphs/karger.py:2:22           Karger's    U       An implementation of Karger's Algorithm for partitioning"
  - "graphs/karger.py:34:40          adacency    U       dictionary containing adacency lists for the graph"
  - "graphs/minimum_spanning_tree_boruvka.py:37:13       Boruvks's       U       For Boruvks's algorithm the weights"
  - "graphs/minimum_spanning_tree_boruvka.py:70:9        Returna         U       Returna all edges in the graph"
  - "graphs/minimum_spanning_tree_boruvka.py:103:41      Boruvka's       U       set Union and Find for Boruvka's algorithm"
  - "graphs/minimum_spanning_tree_kruskal.py:1:5         kruskal     U       def kruskal("
  - "graphs/minimum_spanning_tree_kruskal2.py:51:49          neighbouring    U       from the node to the neighbouring nodes (with weights"
  - "graphs/minimum_spanning_tree_prims2.py:2:23         Jarník's    U       Prim's (also known as Jarník's) algorithm is a greedy"
  - "graphs/multi_heuristic_astar.py:47:17       prito       U       for prito, yyy in temp:"
  - "graphs/multi_heuristic_astar.py:137:16      inad        U       close_list_inad,"
  - "graphs/multi_heuristic_astar.py:141:9       itera       U       for itera in range(n_heuristic"
  - "graphs/scc_kosaraju.py:24:5         kosaraju    U       def kosaraju():"
  - "graphs/strongly_connected_components.py:41:36       strongliy       U       first search to find strongliy connected"
  - "graphs/tarjans_scc.py:16:42         equireachable       U       we save it and it's equireachable vertices as a strongly"
  - "graphs/tests/test_min_spanning_tree_prim.py:25:5        adjancency      U       adjancency = defaultdict(list)"
  - "hashes/chaos_machine.py:45:7        PRNG            U       # PRNG (Xorshift by George"
  - "hashes/chaos_machine.py:45:32       Marsaglia       U       (Xorshift by George Marsaglia)"
  - "hashes/hamming_code.py:1:44         Kunz        U       A. Amorim & Gabriel Kunz"
  - "hashes/hamming_code.py:24:67        Pari        U       many parity bits (sizePari)"
  - "hashes/hamming_code.py:270:5        Receiv      U       dataReceiv, ack = receptorConverter"
  - "hashes/luhn.py:5:8          luhn    U       def is_luhn(string: str) -> bool"
  - "hashes/md5.py:30:38         abcdfghijklmnopqrstuvw      U       little_endian(b'1234567890abcdfghijklmnopqrstuvw')"
  - "hashes/md5.py:31:7          pqrstuvwhijklmno            U       b'pqrstuvwhijklmno90abcdfg12345678'"
  - "hashes/md5.py:31:25         abcdfg                      U       b'pqrstuvwhijklmno90abcdfg12345678'"
  - "hashes/md5.py:318:54        Üñîçø                       U       letters.encode(\"utf-8\"), \"Üñîçø∂é\".encode(\"utf-8\"),"
  - "hashes/md5.py:327:11        consts                      U       added_consts = [int(2**32 * abs(sin"
  - "hashes/README.md:7:113          Rivest          U       algorithm made by Ray Rivest that is known to suffer"
  - "hashes/README.md:14:159         cleartext       U       size of the plaintext/cleartext. Other algorithms in"
  - "hashes/README.md:17:200         IMEI            U       credit card numbers, IMEI numbers, and Canadian"
  - "hashes/README.md:17:297         LUHN            U       mathematicians developed the LUHN formula in the late"
  - "hashes/sdbm.py:2:36         sdbm                U       algorithm was created for sdbm (a public-domain reimplementa"
  - "hashes/sdbm.py:2:58         reimplementation    U       sdbm (a public-domain reimplementation of ndbm)"
  - "hashes/sha1.py:40:9         Inititates      U       Inititates the variables data and"
  - "hashes/sha256.py:1:14           Yathurshan      U       # Author: M. Yathurshan"
  - "knapsack/README.md:13:190       Dantzig         U       mathematician Tobias Dantzig (1884–1956), and refers"
  - "knapsack/README.md:20:72        CLASSNAME       U       vector)`, and `help(CLASSNAME.METHODNAME)`."
  - "knapsack/README.md:20:82        METHODNAME      U       and `help(CLASSNAME.METHODNAME)`."
  - "knapsack/tests/test_knapsack.py:4:21        Schröder    U       @author: Dr. Tobias Schröder"
  - "linear_algebra/README.md:20:40          eulidean    U       length() : returns the eulidean length of the vector"
  - "linear_algebra/README.md:31:12          axpy        U       - function axpy(scalar, vector1, vector"
  - "linear_algebra/src/conjugate_gradient.py:39:27          eignevectors    U       Get eigenvalues and eignevectors for a symmetric matrix"
  - "linear_algebra/src/conjugate_gradient.py:40:5           eigen           U       eigen_values, _ = np.linalg"
  - "linear_algebra/src/conjugate_gradient.py:40:33          eigh            U       values, _ = np.linalg.eigh(matrix)"
  - "linear_algebra/src/conjugate_gradient.py:63:31          randn           U       random_matrix = np.random.randn(dimension, dimension"
  - "linear_algebra/src/conjugate_gradient.py:129:25         Krylov          U       # Calculate new Krylov subspace scale."
  - "linear_algebra/src/conjugate_gradient.py:131:27         conjuage        U       # Calculate new A conjuage search direction."
  - "linear_algebra/src/lib.py:254:9         cofactor    U       cofactor(x: int, y: int): returns"
  - "linear_algebra/src/polynom_for_points.py:69:9           zahlen      U       zahlen = 0"
  - "linear_algebra/src/power_iteration.py:45:15         iscomplexobj    U       assert np.iscomplexobj(input_matrix) == np"
  - "linear_algebra/src/power_iteration.py:91:22         triu            U       imag_matrix = np.triu(1j * complex_input_matrix"
  - "linear_algebra/src/schur_complement.py:20:45        Vandenberghe    U       Optimization – Boyd and Vandenberghe, A.5.5"
  - "linear_algebra/src/test_linear_algebra.py:147:9         cofactors       U       cofactors = [[-3, 14, -10], ["
  - "linear_programming/simplex.py:40:48         minimised       U       artificial variables to be minimised"
  - "linear_programming/simplex.py:125:29        nans            U       # Array filled with nans"
  - "linear_programming/simplex.py:128:54        zeron           U       column is greater than zeron_stages, return"
  - "linear_programming/simplex.py:156:18        coeff           U       for idx, coeff in enumerate(tableau"
  - "linear_programming/simplex.py:233:25        minimisation    U       # Non standard: minimisation and equalities"
  - "linear_programming/simplex.py:292:21        rowidx          U       nonzero_rowidx = nonzero[0][0]"
  - "machine_learning/astar.py:60:13         neigbours       U       def get_neigbours(self, cell):"
  - "machine_learning/astar.py:64:9          neughbour       U       neughbour_cord = ["
  - "machine_learning/decision_tree.py:39:19         ndim        U       if labels.ndim != 1:"
  - "machine_learning/decision_tree.py:181:32        squarred    U       doctest.testmod(name=\"mean_squarred_error\", verbose=True"
  - "machine_learning/dimensionality_reduction.py:1:29           Gasco               U       Copyright (c) 2023 Diego Gasco (diego.gasco99@gmail"
  - "machine_learning/dimensionality_reduction.py:1:62           Diegomangasco       U       gasco99@gmail.com), Diegomangasco on GitHub"
  - "machine_learning/forecasting/run.py:22:44       mtch    U       train_usr: list, train_mtch: list, test_dt: list"
  - "machine_learning/forecasting/run.py:43:45       exog    U       data (total_user, with exog data = total_event)"
  - "machine_learning/forecasting/run.py:53:27       disp    U       model_fit = model.fit(disp=False, maxiter=600,"
  - "machine_learning/gradient_descent.py:122:13         rtol    U       rtol=relative_error_limit"
  - "machine_learning/k_means_clust.py:14:57         hetrogeneity    U       will be filled with hetrogeneity values if passed"
  - "machine_learning/k_means_clust.py:15:8          kmeans          U       to kmeans func."
  - "machine_learning/k_means_clust.py:52:16         CLUST           U       TAG = \"K-MEANS-CLUST/ \""
  - "machine_learning/k_means_clust.py:232:17        fillna          U       df = df.fillna(value=fill_missing_report"
  - "machine_learning/k_means_clust.py:234:30        dtypes          U       numeric_cols = df.select_dtypes(np.number).columns"
  - "machine_learning/k_means_clust.py:281:21        iloc            U       clustersize.iloc[:, 2:].values"
  - "machine_learning/k_means_clust.py:312:29        clustert        U       concat report with clustert size and nan values"
  - "machine_learning/k_means_clust.py:313:41        isin            U       report[\"Features\"].isin(clustering_variables"
  - "machine_learning/linear_regression.py:7:56          CSGO    U       particular code, I had used a CSGO dataset (ADR vs"
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:7:6         XᵀWX        U       β = (XᵀWX)⁻¹(XᵀWy),"
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:7:14        XᵀWy        U       β = (XᵀWX)⁻¹(XᵀWy),"
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:151:10      preds       U       def plot_preds("
  - "machine_learning/logistic_regression.py:83:5        probs       U       probs = predict_prob(grid"
  - "machine_learning/multilayer_perceptron_classifier.py:8:13           lbfgs       U       solver=\"lbfgs\", alpha=1e-5, hidden"
  - "machine_learning/polymonial_regression.py:30:9          polymonial      U       def viz_polymonial():"
  - "machine_learning/scoring_functions.py:4:21          RMSLE           U       MAE, MSE, RMSE, RMSLE are included."
  - "machine_learning/scoring_functions.py:84:5          rmsle           U       def rmsle(predict, actual):"
  - "machine_learning/scoring_functions.py:133:5         denumerator     U       denumerator = np.sum(actual) / len"
  - "machine_learning/sequential_minimum_optimization.py:46:30       wdbc            U       breast-cancer-wisconsin/wdbc.data\""
  - "machine_learning/sequential_minimum_optimization.py:226:9       locis           U       locis = yield from self._choose"
  - "machine_learning/sequential_minimum_optimization.py:236:16      voilate         U       voilate kkt condition."
  - "machine_learning/sequential_minimum_optimization.py:378:7       Normalise       U       # Normalise data using min_max way"
  - "machine_learning/sequential_minimum_optimization.py:459:62      MSIE            U       Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)\"},"
  - "machine_learning/sequential_minimum_optimization.py:470:17      dropna          U       data = data.dropna(axis=0)"
  - "machine_learning/sequential_minimum_optimization.py:479:5       mykernel        U       mykernel = Kernel(kernel=\"rbf"
  - "machine_learning/sequential_minimum_optimization.py:483:5       mysvm           U       mysvm = SmoSVM("
  - "machine_learning/sequential_minimum_optimization.py:533:21      hstack          U       train_data = np.hstack((train_y.reshape(50"
  - "machine_learning/sequential_minimum_optimization.py:571:78      desity          U       distributed points with high desity and"
  - "machine_learning/sequential_minimum_optimization.py:580:5       yrange          U       yrange = np.linspace(train"
  - "machine_learning/support_vector_machines.py:74:15       sklear      U       # sklear: def_gamma = 1/(n_features"
  - "machine_learning/xgboost_classifier.py:7:6          xgboost     U       from xgboost import XGBClassifier"
  - "machine_learning/xgboost_classifier.py:27:44        gbtree      U       score=0.5, booster='gbtree', callbacks=None,"
  - "machine_learning/xgboost_classifier.py:28:29        bylevel     U       colsample_bylevel=1, colsample_bynode"
  - "machine_learning/xgboost_classifier.py:28:50        bynode      U       bylevel=1, colsample_bynode=1, colsample_bytree"
  - "machine_learning/xgboost_classifier.py:28:70        bytree      U       bynode=1, colsample_bytree=1,"
  - "maths/addition_without_arithmetic.py:3:9            suraj       U       Author: suraj Kumar"
  - "maths/area.py:583:13        Reqular     U       print(f\"Reqular Pentagon: {area_reg"
  - "maths/automorphic_number.py:10:12       Akshay      U       # Author : Akshay Dubey (https://github"
  - "maths/automorphic_number.py:10:19       Dubey       U       # Author : Akshay Dubey (https://github.com"
  - "maths/bailey_borwein_plouffe.py:1:12        borwein     U       def bailey_borwein_plouffe(digit_position"
  - "maths/bailey_borwein_plouffe.py:1:20        plouffe     U       def bailey_borwein_plouffe(digit_position: int"
  - "maths/binary_exponentiation_2.py:9:11           chinmoy     U       * @author chinmoy159"
  - "maths/binary_exponentiation.py:3:12         Junth       U       # Author : Junth Basnet"
  - "maths/check_polygon.py:26:17        Monogons    U       ValueError: Monogons and Digons are not polygons"
  - "maths/check_polygon.py:26:30        Digons      U       ValueError: Monogons and Digons are not polygons in"
  - "maths/chudnovsky_algorithm.py:12:28         multinomial     U       = constant_term / ((multinomial_term * linear_term)"
  - "maths/chudnovsky_algorithm.py:44:18         prec            U       getcontext().prec = precision"
  - "maths/collatz_sequence.py:8:62          Ulam            U       3n + 1 problem, the Ulam conjecture, Kakutani"
  - "maths/collatz_sequence.py:8:79          Kakutani's      U       the Ulam conjecture, Kakutani's"
  - "maths/collatz_sequence.py:9:14          Thwaites        U       problem, the Thwaites conjecture, Hasse's"
  - "maths/collatz_sequence.py:20:5          collatz         U       def collatz_sequence(n: int) ->"
  - "maths/dual_number_automatic_differentiation.py:58:20        jtem    U       for j, jtem in enumerate(other.duals"
  - "maths/entropy.py:27:27          telescreen          U       . \"from the telescreen was still \""
  - "maths/entropy.py:28:35          overfulfilment      U       \"babbling and the overfulfilment\")"
  - "maths/euclidean_gcd.py:20:26        euclicedan      U       Recursive method for euclicedan gcd algorithm"
  - "maths/eulers_totient.py:2:5         totient     U       def totient(n: int) -> list:"
  - "maths/eulers_totient.py:19:5        totients    U       totients = [i - 1 for i in range"
  - "maths/extended_euclidean_algorithm.py:5:41          Bezout's    U       bn = gcd(m, n) (a.k.a Bezout's Identity)"
  - "maths/extended_euclidean_algorithm.py:10:15         Sharma      U       # @Author: S. Sharma <silentcat>"
  - "maths/extended_euclidean_algorithm.py:13:24         pikulet     U       Last modified by: pikulet"
  - "maths/factors.py:16:5           facs    U       facs: list[int] = []"
  - "maths/fibonacci.py:7:42         Binet           U       function because the Binet formula function uses"
  - "maths/fibonacci.py:16:5         binet           U       fib_binet runtime: 0.0174 ms"
  - "maths/fibonacci.py:147:29       recursuive      U       Cache must be outside recursuive function"
  - "maths/gaussian_error_linear_unit.py:6:29        GELU    U       Gaussian Error Linear Unit (GELU) is a high-performing"
  - "maths/gaussian_error_linear_unit.py:37:9        gelu    U       gelu_vec (np.array): The"
  - "maths/gcd_of_n_numbers.py:100:5         mult    U       mult = 1"
  - "maths/integration_by_simpson_approx.py:29:19        fxdx    U       1. integration of fxdx with limit a to b is"
  - "maths/jaccard_similarity.py:8:38        MMDS        U       of Massive Datasets [MMDS 2nd Edition, Chapter"
  - "maths/jaccard_similarity.py:17:5        jaccard     U       def jaccard_similarity(set_a, set"
  - "maths/krishnamurthy_number.py:26:5          krishnamurthy       U       def krishnamurthy(number: int) -> bool"
  - "maths/krishnamurthy_number.py:45:51         Krisnamurthy        U       whether a number is a Krisnamurthy Number or not.\")"
  - "maths/largest_of_very_large_numbers.py:1:11         Abhijeeth       U       # Author: Abhijeeth S"
  - "maths/liouville_lambda.py:14:5          liouville       U       def liouville_lambda(number: int)"
  - "maths/lucas_lehmer_primality_test.py:2:58           primality       U       Lehmer test (LLT) is a primality test for Mersenne"
  - "maths/lucas_lehmer_primality_test.py:2:77           Mersenne        U       a primality test for Mersenne"
  - "maths/lucas_lehmer_primality_test.py:16:11          lehmer          U       def lucas_lehmer_test(p: int) -> bool"
  - "maths/maclaurin_series.py:7:5           maclaurin       U       def maclaurin_sin(theta: float, accuracy"
  - "maths/manhattan_distance.py:3:5         Expectts    U       Expectts two list of numbers"
  - "maths/mobius_function.py:12:5           mobius      U       def mobius(n: int) -> int:"
  - "maths/monte_carlo.py:2:10           Matteo      U       @author: MatteoRaso"
  - "maths/monte_carlo.py:2:16           Raso        U       @author: MatteoRaso"
  - "maths/primelib.py:83:14         erathostenes    U       sieve of erathostenes."
  - "maths/primelib.py:520:74        Divisiors       U       Error in function getDivisiors(...)\""
  - "maths/pronic_number.py:3:28         Proic       U       number n is said to be a Proic number if"
  - "maths/pronic_number.py:13:8         pronic      U       def is_pronic(number: int) -> bool"
  - "maths/proth_number.py:10:5          proth       U       def proth(number: int) -> int"
  - "maths/qr_decomposition.py:21:18         BLAS    U       version from BLAS should be used."
  - "maths/radix2_fft.py:5:8         mpmath      U       import mpmath # for roots of unity"
  - "maths/radix2_fft.py:88:14       ncol        U       next_ncol = self.c_max_length"
  - "maths/radix2_fft.py:114:9       inverce     U       inverce_c = [[dft_a[i] * dft"
  - "maths/runge_kutta.py:4:5            runge       U       def runge_kutta(f, y0, x0, h,"
  - "maths/runge_kutta.py:4:11           kutta       U       def runge_kutta(f, y0, x0, h, x_end"
  - "maths/sieve_of_eratosthenes.py:10:25        Simas       U       doctest provider: Bruno Simas Hadlich (https://github"
  - "maths/sieve_of_eratosthenes.py:10:31        Hadlich     U       provider: Bruno Simas Hadlich (https://github.com"
  - "maths/sieve_of_eratosthenes.py:11:16        Dmitry      U       Also thanks to Dmitry (https://github.com"
  - "maths/signum.py:6:5         signum      U       def signum(num: float) -> int:"
  - "maths/softmax.py:6:8            exponentials    U       to the exponentials of the input numbers"
  - "maths/square_root.py:25:20          aproximated     U       Square root is aproximated using Newtons method"
  - "maths/two_sum.py:36:9           compl       U       compl = target - val"
  - "maths/zellers_congruence.py:5:5         zeller      U       def zeller(date_input: str) ->"
  - "matrix/inverse_of_matrix.py:91:57       Sarrus      U       of the matrix using Sarrus rule"
  - "matrix/largest_square_area_in_matrix.py:46:44       approch     U       area_in_matrix_top_down_approch("
  - "matrix/matrix_class.py:39:23        Cofactors       U       Identity, Minors, Cofactors and Adjugate are returned"
  - "matrix/matrix_class.py:39:37        Adjugate        U       Minors, Cofactors and Adjugate are returned as Matrices"
  - "matrix/matrix_class.py:54:22        adjugate        U       >>> print(matrix.adjugate())"
  - "matrix/pascal_triangle.py:3:13          havingva    U       The element havingva row index of r and column"
  - "matrix/sherman_morrison.py:57:18        indicies    U       def validate_indicies(self, loc: tuple[int"
  - "matrix/sherman_morrison.py:213:13       ainv        U       >>> ainv = Matrix(3, 3, 0)"
  - "matrix/spiral_print.py:56:11        horizotal       U       # horizotal printing increasing"
  - "matrix/tests/test_matrix_operation.py:18:40         matop       U       matrix_operation as matop"
  - "matrix/tests/test_matrix_operation.py:46:9          theo        U       theo = matop.add(mat1, mat"
  - "networking_flow/ford_fulkerson.py:27:10         fulkerson       U       def ford_fulkerson(graph, source, sink"
  - "neural_network/2_hidden_layers_neural_network.py:101:9          Updation    U       Updation is done using derivative"
  - "neural_network/2_hidden_layers_neural_network.py:101:46         sogmoid     U       using derivative of sogmoid activation function"
  - "neural_network/back_propagation_neural_network.py:53:26         asmatrix    U       self.weight = np.asmatrix(np.random.normal(0,"
  - "neural_network/back_propagation_neural_network.py:67:35         xdata       U       forward_propagation(self, xdata):"
  - "neural_network/back_propagation_neural_network.py:97:7          BPNN        U       class BPNN:"
  - "neural_network/back_propagation_neural_network.py:124:28        ydata       U       def train(self, xdata, ydata, train_round, accuracy"
  - "neural_network/back_propagation_neural_network.py:128:22        hlines      U       self.ax_loss.hlines(self.accuracy, 0, self"
  - "neural_network/convolution_neural_network.py:42:19          thre            U       self.rate_thre = rate_t"
  - "neural_network/convolution_neural_network.py:107:31         convs           U       convolute(self, data, convs, w_convs, thre_convs"
  - "neural_network/convolution_neural_network.py:211:25         datas           U       self, patterns, datas_train, datas_teach,"
  - "neural_network/convolution_neural_network.py:227:35         conved          U       data_focus1, data_conved1 = self.convolute("
  - "neural_network/convolution_neural_network.py:297:13         yplot           U       yplot = [error_accuracy for"
  - "neural_network/convolution_neural_network.py:305:43         Complished      U       -----------Training Complished--------------------"
  - "neural_network/input_data.py:28:40          gfile       U       python.platform import gfile"
  - "neural_network/input_data.py:33:3           CVDF        U       # CVDF mirror of http://yann"
  - "neural_network/input_data.py:95:26          bystream    U       ValueError: If the bystream doesn't start with"
  - "neural_network/input_data.py:142:29         inages      U       fake_data: Ignore inages and labels, use fake"
  - "other/davisb_putnamb_logemannb_loveland.py:4:33         DPLL                U       Putnam–Logemann–Loveland (DPLL) algorithm is a complete"
  - "other/davisb_putnamb_logemannb_loveland.py:5:35         satisfiability      U       algorithm for deciding the satisfiability of propositional logic"
  - "other/davisb_putnamb_logemannb_loveland.py:6:73         Tisfiability        U       Conjunctive Normal Form SATisfiability"
  - "other/davisb_putnamb_logemannb_loveland.py:153:21       uncomplemented      U       A symbol is the uncomplemented form of a literal."
  - "other/davisb_putnamb_logemannb_loveland.py:276:5        dpll                U       def dpll_algorithm("
  - "other/dijkstra_bankers_algorithm.py:4:13        Biney       U       # \"Author: \"Biney Kingsley (bluedistro"
  - "other/dijkstra_bankers_algorithm.py:80:27       alloc       U       max_claim[i][j] - alloc_table[i][j] <= avail"
  - "other/doomsday.py:42:5          centurian       U       centurian = year % 100"
  - "other/gauss_easter.py:24:5          metonic     U       metonic_cycle = year % 19"
  - "other/graham_scan.py:28:55          miny        U       int, int], minx: int, miny: int) -> float:"
  - "other/graham_scan.py:119:5          minidx      U       minidx = 0"
  - "other/graham_scan.py:167:54         straigh     U       previous points on those straigh line is not convex hull"
  - "other/greedy.py:45:18       Sambhar     U       ... \"Sambhar\", \"Chicken\", \"Fries"
  - "other/linear_congruential_generator.py:13:13        accptable       U       # it is accptable because `LinearCongruentialGe"
  - "other/password.py:47:19         generalised     U       # random is a generalised function for letters"
  - "other/password.py:71:29         Hwea            U       is_strong_password('Hwea7$2!')"
  - "other/password.py:77:38         udfhiaf         U       strong_password('Hello1238udfhiaf038fajdvjjf!jaiuFhkqi"
  - "other/password.py:77:48         fajdvjjf        U       'Hello1238udfhiaf038fajdvjjf!jaiuFhkqi1')"
  - "other/password.py:77:57         jaiu            U       8udfhiaf038fajdvjjf!jaiuFhkqi1')"
  - "other/password.py:77:61         Fhkqi           U       udfhiaf038fajdvjjf!jaiuFhkqi1')"
  - "other/scoring_algorithm.py:2:15         markmelnic      U       developed by: markmelnic"
  - "other/scoring_algorithm.py:5:34         percentual      U       using a range based percentual proximity algorithm"
  - "other/scoring_algorithm.py:49:9         dlist           U       for dlist, weight in zip(data"
  - "other/scoring_algorithm.py:51:9         maxd            U       maxd = max(dlist)"
  - "other/scoring_algorithm.py:89:9         slist           U       for slist in score_lists:"
  - "other/scoring_algorithm.py:96:5         procentual      U       def procentual_proximity("
  - "other/sdes.py:36:11         sbox            U       def apply_sbox(s, data):"
  - "other/sdes.py:96:29         decypting       U       print(\"Plain text after decypting is:\", PT)"
  - "physics/casimir_effect.py:16:17         Hendrik     U       Dutch physicist Hendrik B. G. Casimir first"
  - "physics/casimir_effect.py:35:18         Waals       U       London-van der Waals Forces\", Physical Review"
  - "physics/casimir_effect.py:49:5          casimir     U       def casimir_force(force: float,"
  - "physics/grahams_law.py:24:22        Effustion       U       effusion_rate_1: Effustion rate of first gas (m"
  - "physics/grahams_law.py:26:58        kmol            U       first gas (g/mol, kg/kmol, etc.)"
  - "physics/hubble_parameter.py:6:42        directily       U       becausethe redshift is directily mensure"
  - "physics/hubble_parameter.py:40:29       constante       U       hubble_constant: Hubble constante is the expansion rate"
  - "physics/hubble_parameter.py:98:12       LCDM            U       # demo LCDM approximation"
  - "physics/ideal_gas_law.py:5:45           Benoît      U       was first stated by Benoît Paul Émile Clapeyron"
  - "physics/ideal_gas_law.py:5:57           Émile       U       stated by Benoît Paul Émile Clapeyron"
  - "physics/ideal_gas_law.py:7:25           Lussac's    U       Avogadro's law, and Gay-Lussac's law.[1] The ideal gas"
  - "physics/lorentz_transformation_four_vector.py:7:41          Minkowski       U       y, z] described by Minkowski space. Note that t"
  - "physics/malus_law.py:7:49           Étienne     U       which is named after Étienne-Louis Malus,"
  - "physics/malus_law.py:34:39          Glan        U       Polaroid to about 1:106 for Glan–Taylor prism polarizers"
  - "physics/malus_law.py:40:5           malus       U       def malus_law(initial_intensity"
  - "physics/n_body_simulation.py:250:41         blit    U       interval=INTERVAL, blit=True"
  - "physics/newtons_law_of_gravitation.py:19:18         Philosophiæ     U       - Newton (1687) \"Philosophiæ Naturalis Principia"
  - "physics/newtons_law_of_gravitation.py:19:30         Naturalis       U       (1687) \"Philosophiæ Naturalis Principia Mathematica"
  - "physics/newtons_law_of_gravitation.py:19:40         Principia       U       Philosophiæ Naturalis Principia Mathematica\""
  - "physics/newtons_law_of_gravitation.py:19:50         Mathematica     U       Naturalis Principia Mathematica\""
  - "physics/newtons_second_law_of_motion.py:14:14       Fnet    U       Formulation: Fnet = m • a"
  - "physics/rms_speed_of_molecule.py:5:4            Vrms    U       | Vrms = √3RT/M |"
  - "physics/rms_speed_of_molecule.py:51:5           vrms    U       vrms = rms_speed_of_molecule"
  - "physics/speed_of_sound.py:32:36         moduls      U       -> Water 20°C: bulk_moduls= 2.15MPa, density=9"
  - "physics/speed_of_sound.py:33:19         Murcery     U       Example 2 --> Murcery 20°: bulk_moduls= 2"
  - "project_euler/problem_001/sol4.py:27:5          xmulti      U       xmulti = []"
  - "project_euler/problem_001/sol4.py:28:5          zmulti      U       zmulti = []"
  - "project_euler/problem_005/sol1.py:57:9          nfound      U       nfound = 0"
  - "project_euler/problem_011/sol1.py:43:13         horz    U       horz_product = grid[i][j"
  - "project_euler/problem_014/sol2.py:30:1          COLLATZ     U       COLLATZ_SEQUENCE_LENGTHS ="
  - "project_euler/problem_020/sol1.py:48:5          nfact       U       nfact = factorial(num)"
  - "project_euler/problem_023/sol1.py:38:5          abundants       U       abundants = set()"
  - "project_euler/problem_035/sol1.py:14:27         Seive       U       1 million using the Seive of Eratosthenes. Then"
  - "project_euler/problem_035/sol1.py:20:1          seive       U       seive = [True] * 1000001"
  - "project_euler/problem_037/sol1.py:2:1           Truncatable     U       Truncatable primes"
  - "project_euler/problem_037/sol1.py:9:54          truncatable     U       primes that are both truncatable from left to right"
  - "project_euler/problem_038/sol1.py:21:61         concactenation      U       the solution will be a concactenation of"
  - "project_euler/problem_039/sol1.py:8:57          maximised       U       number of solutions maximised?"
  - "project_euler/problem_047/sol1.py:2:1           Combinatoric    U       Combinatoric selections"
  - "project_euler/problem_050/sol1.py:23:14         Erotosthenes    U       Sieve of Erotosthenes"
  - "project_euler/problem_050/sol1.py:55:42         celing          U       biggest prime, below the celing, that can be written"
  - "project_euler/problem_054/sol1.py:114:50        ueen        U       9, T(en), J(ack), Q(ueen), K(ing), A(ce)"
  - "project_euler/problem_054/sol1.py:117:11        pades       U       S(pades), H(earts), D(iamonds"
  - "project_euler/problem_054/sol1.py:117:21        earts       U       S(pades), H(earts), D(iamonds), C(lubs"
  - "project_euler/problem_054/sol1.py:117:31        iamonds     U       pades), H(earts), D(iamonds), C(lubs)"
  - "project_euler/problem_054/sol1.py:117:43        lubs        U       earts), D(iamonds), C(lubs)"
  - "project_euler/problem_054/sol1.py:147:53        Stright     U       2H 3H 4H 5H 6H\") # Stright flush"
  - "project_euler/problem_054/test_poker_hand.py:140:11         oppo    U       play, oppo = randrange(len(SORTED"
  - "project_euler/problem_055/sol1.py:2:1           Lychrel     U       Lychrel numbers"
  - "project_euler/problem_055/sol1.py:58:30         lychrel     U       Returns the count of all lychrel numbers below limit"
  - "project_euler/problem_059/sol1.py:92:30         asfla       U       filter_common_word(['asfla adf', 'I am here',"
  - "project_euler/problem_059/sol1.py:94:30         athla       U       filter_common_word(['athla amf', 'I am here',"
  - "project_euler/problem_065/sol1.py:14:21         convergents     U       Let us consider the convergents for sqrt(2)."
  - "project_euler/problem_087/sol1.py:42:17         tetr    U       tetr = prime3 * prime3 *"
  - "project_euler/problem_089/sol1.py:13:1          VVIIIIII    U       VVIIIIII"
  - "project_euler/problem_089/sol1.py:15:1          VVVI        U       VVVI"
  - "project_euler/problem_091/sol1.py:5:43          ΔOPQ    U       origin, O(0,0), to form ΔOPQ."
  - "project_euler/problem_104/sol1.py:47:32         pandigitality       U       check last 9 numbers for pandigitality"
  - "project_euler/problem_104/sol1.py:119:32        optimisation        U       m=1e9, done for fast optimisation"
  - "project_euler/problem_104/sol1.py:120:5         tocheck             U       tocheck = [0] * 1000000"
  - "project_euler/problem_107/sol1.py:16:28         optimise    U       However, it is possible to optimise the network by removing"
  - "project_euler/problem_107/sol1.py:110:5         adjaceny    U       adjaceny_matrix = [line.split"
  - "project_euler/problem_135/sol1.py:45:52         divisble    U       difference % 4: # d must be divisble by 4"
  - "project_euler/problem_145/sol1.py:3:9           Vineet      U       Author: Vineet Rao, Maxim Smolskiy"
  - "project_euler/problem_145/sol1.py:3:27          Smolskiy    U       Author: Vineet Rao, Maxim Smolskiy"
  - "project_euler/problem_180/sol1.py:40:75         uniquq      U       <= 0. We use a set \"uniquq_s\""
  - "project_euler/problem_188/sol1.py:23:6          modexpt         U       def _modexpt(base: int, exponent"
  - "project_euler/problem_188/sol1.py:58:39         assiciative     U       base↑↑height by right-assiciative repeated modular"
  - "project_euler/problem_191/sol1.py:15:6          OOOA        U       OOOO OOOA OOOL OOAO OOAA OOAL"
  - "project_euler/problem_191/sol1.py:15:11         OOOL        U       OOOO OOOA OOOL OOAO OOAA OOAL OOLO"
  - "project_euler/problem_191/sol1.py:15:16         OOAO        U       OOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA"
  - "project_euler/problem_191/sol1.py:15:21         OOAA        U       OOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO"
  - "project_euler/problem_191/sol1.py:15:26         OOAL        U       OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:15:31         OOLO        U       OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:15:36         OOLA        U       OOAO OOAA OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:15:41         OAOO        U       OOAA OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:15:46         OAOA        U       OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:16:1          OAOL        U       OAOL OAAO OAAL OALO OALA"
  - "project_euler/problem_191/sol1.py:16:6          OAAO        U       OAOL OAAO OAAL OALO OALA OLOO"
  - "project_euler/problem_191/sol1.py:16:11         OAAL        U       OAOL OAAO OAAL OALO OALA OLOO OLOA"
  - "project_euler/problem_191/sol1.py:16:16         OALO        U       OAOL OAAO OAAL OALO OALA OLOO OLOA OLAO"
  - "project_euler/problem_191/sol1.py:16:21         OALA        U       OAOL OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA"
  - "project_euler/problem_191/sol1.py:16:26         OLOO        U       OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:16:31         OLOA        U       OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:16:36         OLAO        U       OALO OALA OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:16:41         OLAA        U       OALA OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:16:46         AOOO        U       OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:17:1          AOOA        U       AOOA AOOL AOAO AOAA AOAL"
  - "project_euler/problem_191/sol1.py:17:6          AOOL        U       AOOA AOOL AOAO AOAA AOAL AOLO"
  - "project_euler/problem_191/sol1.py:17:11         AOAO        U       AOOA AOOL AOAO AOAA AOAL AOLO AOLA"
  - "project_euler/problem_191/sol1.py:17:16         AOAA        U       AOOA AOOL AOAO AOAA AOAL AOLO AOLA AAOO"
  - "project_euler/problem_191/sol1.py:17:21         AOAL        U       AOOA AOOL AOAO AOAA AOAL AOLO AOLA AAOO AAOA"
  - "project_euler/problem_191/sol1.py:17:26         AOLO        U       AOOL AOAO AOAA AOAL AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:17:31         AOLA        U       AOAO AOAA AOAL AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:17:36         AAOO        U       AOAA AOAL AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:17:41         AAOA        U       AOAL AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:17:46         AAOL        U       AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:18:1          AALO        U       AALO AALA ALOO ALOA ALAO"
  - "project_euler/problem_191/sol1.py:18:6          AALA        U       AALO AALA ALOO ALOA ALAO ALAA"
  - "project_euler/problem_191/sol1.py:18:11         ALOO        U       AALO AALA ALOO ALOA ALAO ALAA LOOO"
  - "project_euler/problem_191/sol1.py:18:16         ALOA        U       AALO AALA ALOO ALOA ALAO ALAA LOOO LOOA"
  - "project_euler/problem_191/sol1.py:18:21         ALAO        U       AALO AALA ALOO ALOA ALAO ALAA LOOO LOOA LOAO"
  - "project_euler/problem_191/sol1.py:18:26         ALAA        U       AALA ALOO ALOA ALAO ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:18:31         LOOO        U       ALOO ALOA ALAO ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:18:36         LOOA        U       ALOA ALAO ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:18:41         LOAO        U       ALAO ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:18:46         LOAA        U       ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:19:1          LAOO        U       LAOO LAOA LAAO"
  - "project_euler/problem_191/sol1.py:19:6          LAOA        U       LAOO LAOA LAAO"
  - "project_euler/problem_191/sol1.py:19:11         LAAO        U       LAOO LAOA LAAO"
  - "project_euler/problem_191/sol1.py:82:11         ontime      U       state_ontime = _calculate(days -"
  - "project_euler/problem_493/sol1.py:6:62          bcdefghij       U       the decimal point (a.bcdefghij)."
  - "project_euler/problem_493/sol1.py:12:51         cominations     U       of possible picking cominations"
  - "project_euler/problem_493/sol1.py:13:18         binom           U       [combinations := binom_coeff(70, 20)]"
  - "project_euler/problem_551/sol1.py:35:20         calulcated      U       Term are calulcated until c > 10^k or the"
  - "project_euler/README.md:66:4        Stackoverflow       U       - [Stackoverflow link]"
  - "project_euler/README.md:81:6        Doctest             U       [Doctest]"
  - "quantum/bb84.py:7:7         qubits      U       using qubits instead of classical"
  - "quantum/bb84.py:11:68       qubit       U       encodes the basis for each qubit:"
  - "quantum/bb84.py:50:8        qiskit      U       import qiskit"
  - "quantum/deutsch_jozsa.py:40:62          CNOTs       U       that tells us which CNOTs to"
  - "quantum/deutsch_jozsa.py:100:13         jozsa       U       def deutsch_jozsa(case: str, num_qubits"
  - "quantum/deutsch_jozsa.py:109:11         Aer's       U       # Use Aer's simulator"
  - "quantum/half_adder.py:38:11         cnots       U       # use cnots to write XOR of the"
  - "quantum/half_adder.py:42:17         toffoli     U       # use ccx / toffoli gate to write AND of"
  - "quantum/half_adder.py:50:34         qasm        U       Execute the circuit on the qasm simulator"
  - "quantum/not_gate.py:6:1         Qiskit      U       Qiskit Docs: https://qiskit"
  - "quantum/not_gate.py:27:29       Qubits      U       Apply X (NOT) Gate to Qubits 0 & 1"
  - "quantum/q_fourier_transform.py:6:5          Shor's      U       the Shor's algorithm in quantum"
  - "quantum/q_full_adder.py:106:65      qbits       U       measure the last two qbits"
  - "quantum/quantum_entanglement.py:42:22       CNOT    U       # Adding CX (CNOT) gate"
  - "quantum/quantum_random.py:3:8           projectq        U       import projectq"
  - "quantum/quantum_random.py:7:48          cengines        U       quantum_engine: projectq.cengines._main.MainEngine) -"
  - "quantum/quantum_random.py:21:7          initialises     U       # initialises a new quantum backend"
  - "quantum/README.md:8:3           Rigetti     U       * Rigetti: https://rigetti.com"
  - "quantum/README.md:18:11         Cirq        U       ## Google Cirq"
  - "quantum/README.md:19:52         cirq        U       python -m pip install cirq`, refer the [docs](https"
  - "scheduling/highest_response_ratio_next.py:2:30          HRRN    U       response ratio next (HRRN) scheduling is a non"
  - "scheduling/multi_level_feedback_queue.py:15:7           MLFQ        U       class MLFQ:"
  - "scheduling/multi_level_feedback_queue.py:32:27          mlfq's      U       # total number of mlfq's queues"
  - "scheduling/multi_level_feedback_queue.py:50:13          mlfq        U       >>> mlfq = MLFQ(3, [17, 25],"
  - "scheduling/multi_level_feedback_queue.py:152:9          FCFS        U       FCFS(First Come, First Served"
  - "scheduling/multi_level_feedback_queue.py:153:33         MLFQ's      U       FCFS will be applied to MLFQ's last queue"
  - "scheduling/shortest_job_first.py:32:5           minm        U       minm = 999999999"
  - "scheduling/shortest_job_first.py:62:13          finar       U       finar = finish_time - arrival"
  - "scheduling/shortest_job_first.py:137:5          fcfs        U       fcfs = pd.DataFrame("
  - "scripts/build_directory_md.py:13:59         ipynb       U       filename)[1] in (\".py\", \".ipynb\"):"
  - "scripts/validate_filenames.py:27:1          nodir       U       nodir_files = [file for file"
  - "searches/fibonacci_search.py:109:13         fibb    U       fibb_k = i"
  - "sorts/bitonic_sort.py:40:5          bitonic     U       def bitonic_merge(array: list[int"
  - "sorts/bogo_sort.py:2:45         bogosort    U       implementation of the bogosort algorithm,"
  - "sorts/bogo_sort.py:4:1          Bogosort    U       Bogosort generates random permutations"
  - "sorts/bogo_sort.py:9:22         bogo        U       python -m doctest -v bogo_sort.py"
  - "sorts/comb_sort.py:3:75         Wlodzimierz     U       originally designed by Wlodzimierz"
  - "sorts/comb_sort.py:4:1          Dobosiewicz     U       Dobosiewicz in 1980. It was rediscovered"
  - "sorts/counting_sort.py:62:6         eghhiiinrsssttt     U       'eghhiiinrsssttt'"
  - "sorts/external_sort.py:85:9         unshift     U       def unshift(self, index):"
  - "sorts/gnome_sort.py:34:8        Gadeimnoprstu       U       ' !Gadeimnoprstu'"
  - "sorts/iterative_merge_sort.py:3:9           Aman    U       Author: Aman Gupta"
  - "sorts/iterative_merge_sort.py:49:42         trai    U       sort(['dep', 'dang', 'trai'])"
  - "sorts/natural_sort.py:27:9          alphanum    U       def alphanum_key(key):"
  - "sorts/normal_distribution_quick_sort.md:13:12       numpy           U       >>> import numpy as np"
  - "sorts/normal_distribution_quick_sort.md:14:10       tempfile        U       >>> from tempfile import TemporaryFile"
  - "sorts/normal_distribution_quick_sort.md:15:5        outfile         U       >>> outfile = TemporaryFile()"
  - "sorts/normal_distribution_quick_sort.md:33:97       linewidth       U       / (2 * sigma**2) ),linewidth=2, color='r')"
  - "sorts/normal_distribution_quick_sort.md:47:12       matplotlib      U       >>> import matplotlib.pyplot as plt"
  - "sorts/normal_distribution_quick_sort.md:47:23       pyplot          U       > import matplotlib.pyplot as plt"
  - "sorts/quick_sort_3_partition.py:21:16       lomuto      U       def quick_sort_lomuto_partition(sorting: list"
  - "sorts/quick_sort_3_partition.py:24:10       Lomuto      U       with Lomuto partition scheme:"
  - "sorts/README.md:4:102       optimised       U       searching can be highly optimised."
  - "sorts/shell_sort.py:19:7        Marcin      U       # Marcin Ciura's gap sequence"
  - "sorts/shell_sort.py:19:14       Ciura's     U       # Marcin Ciura's gap sequence"
  - "sorts/slowsort.py:5:53          Stolfi          U       Andrei Broder and Jorge Stolfi"
  - "sorts/slowsort.py:6:40          Simplexity      U       Pessimal Algorithms and Simplexity Analysis"
  - "strings/aho_corasick.py:8:14        adlist      U       self.adlist: list[dict] = []"
  - "strings/alternative_string_arrange.py:8:6           AXBYCD      U       'AXBYCD'"
  - "strings/alternative_string_arrange.py:10:6          XAYBCD      U       'XAYBCD'"
  - "strings/alternative_string_arrange.py:12:6          AXBYZ       U       'AXBYZ'"
  - "strings/anagrams.py:11:6        estt            U       'estt'"
  - "strings/anagrams.py:13:9        aehiisssttt     U       ' aehiisssttt'"
  - "strings/anagrams.py:15:6        aefilnstt       U       'aefilnstt'"
  - "strings/barcode_validator.py:48:18          dwefgiweuf      U       >>> is_valid(dwefgiweuf)"
  - "strings/can_string_be_rearranged_as_palindrome.py:1:14          susmith     U       # Created by susmith98"
  - "strings/can_string_be_rearranged_as_palindrome.py:17:57         Momo        U       palindrome_counter(\"Momo\")"
  - "strings/detecting_english_programmatically.py:37:21         llold       U       >>> is_english('llold HorWd')"
  - "strings/dna.py:9:14         GCTA    U       >>> dna(\"GCTA\")"
  - "strings/dna.py:10:6         CGAT    U       'CGAT'"
  - "strings/dna.py:11:14        ATGC    U       >>> dna(\"ATGC\")"
  - "strings/dna.py:12:6         TACG    U       'TACG'"
  - "strings/dna.py:13:14        CTGA    U       >>> dna(\"CTGA\")"
  - "strings/dna.py:14:6         GACT    U       'GACT'"
  - "strings/dna.py:15:14        GFGG    U       >>> dna(\"GFGG\")"
  - "strings/dna.py:21:25        ATCG    U       if len(re.findall(\"[ATCG]\", dna)) != len(dna"
  - "strings/dna.py:24:49        TAGC    U       dna.maketrans(\"ATCG\", \"TAGC\"))"
  - "strings/frequency_finder.py:34:1        ETAOIN                          U       ETAOIN = \"ETAOINSHRDLCUMWFGYPBVKJXQZ"
  - "strings/frequency_finder.py:34:11       ETAOINSHRDLCUMWFGYPBVKJXQZ      U       ETAOIN = \"ETAOINSHRDLCUMWFGYPBVKJXQZ\""
  - "strings/hamming_distance.py:16:38       kathrin     U       distance(\"karolin\", \"kathrin\")"
  - "strings/hamming_distance.py:20:38       kath        U       distance(\"karolin\", \"kath\")"
  - "strings/is_isogram.py:9:30          uncopyrightable     U       Examples of isograms are uncopyrightable and ambidextrously."
  - "strings/is_isogram.py:10:21         Uncopyrightable     U       >>> is_isogram('Uncopyrightable')"
  - "strings/is_spain_national_id.py:2:19        TRWAGMYFPDXBNJZSQVHLCKE     U       LOOKUP_LETTERS = \"TRWAGMYFPDXBNJZSQVHLCKE\""
  - "strings/jaro_winkler.py:4:5         jaro        U       def jaro_winkler(str1: str, str"
  - "strings/jaro_winkler.py:4:10        winkler     U       def jaro_winkler(str1: str, str2: str"
  - "strings/jaro_winkler.py:10:33       marhta      U       jaro_winkler(\"martha\", \"marhta\")"
  - "strings/jaro_winkler.py:14:31       dbdbdbdb    U       jaro_winkler(\"test\", \"dbdbdbdb\")"
  - "strings/knuth_morris_pratt.py:62:14         alskfjaldsabc               U       text1 = \"alskfjaldsabc1abc1abc12k23adsfabcabc"
  - "strings/knuth_morris_pratt.py:62:40         adsfabcabc                  U       alskfjaldsabc1abc1abc12k23adsfabcabc\""
  - "strings/knuth_morris_pratt.py:63:14         alskfjaldsk                 U       text2 = \"alskfjaldsk23adsfabcabc\""
  - "strings/knuth_morris_pratt.py:67:16         ABABX                       U       pattern = \"ABABX\""
  - "strings/knuth_morris_pratt.py:68:13         ABABZABABYABABX             U       text = \"ABABZABABYABABX\""
  - "strings/knuth_morris_pratt.py:72:16         AAAB                        U       pattern = \"AAAB\""
  - "strings/knuth_morris_pratt.py:73:13         ABAAAAAB                    U       text = \"ABAAAAAB\""
  - "strings/knuth_morris_pratt.py:77:16         abcdabcy                    U       pattern = \"abcdabcy\""
  - "strings/knuth_morris_pratt.py:78:13         abcxabcdabxabcdabcdabcy     U       text = \"abcxabcdabxabcdabcdabcy\""
  - "strings/knuth_morris_pratt.py:82:16         aabaabaaa                   U       pattern = \"aabaabaaa\""
  - "strings/lower.py:8:6            hellzo      U       'hellzo'"
  - "strings/manacher.py:4:6         abbba       U       'abbba'"
  - "strings/manacher.py:5:29        ababa       U       palindromic_string('ababa')"
  - "strings/naive_string_search.py:14:31        ABAAABCDBBABCDDEBCABC       U       naive_pattern_search(\"ABAAABCDBBABCDDEBCABC\", \"ABC\")"
  - "strings/naive_string_search.py:22:31        ABCDEGFTEST                 U       naive_pattern_search(\"ABCDEGFTEST\", \"TEST\")"
  - "strings/ngram.py:6:12           ngram       U       def create_ngram(sentence: str, ngram"
  - "strings/ngram.py:8:12           ngrams      U       Create ngrams from a sentence"
  - "strings/prefix_function.py:22:26        aabcdaabc       U       >> prefix_function(\"aabcdaabc\")"
  - "strings/prefix_function.py:24:26        asdasdad        U       >> prefix_function(\"asdasdad\")"
  - "strings/prefix_function.py:53:25        abcab           U       >>> longest_prefix(\"abcab\")"
  - "strings/rabin_karp.py:7:11          karp        U       def rabin_karp(pattern: str, text:"
  - "strings/rabin_karp.py:82:13         Lüsai       U       text = \"Lüsai\""
  - "strings/reverse_letters.py:7:10         kciuq       U       'ehT kciuq nworb xof depmuj revo"
  - "strings/reverse_letters.py:7:16         nworb       U       'ehT kciuq nworb xof depmuj revo eht"
  - "strings/reverse_letters.py:7:26         depmuj      U       ehT kciuq nworb xof depmuj revo eht yzal .god'"
  - "strings/reverse_letters.py:7:33         revo        U       kciuq nworb xof depmuj revo eht yzal .god'"
  - "strings/reverse_letters.py:7:42         yzal        U       xof depmuj revo eht yzal .god'"
  - "strings/reverse_letters.py:9:9          siht        U       'sI siht ?eurt'"
  - "strings/reverse_letters.py:9:15         eurt        U       'sI siht ?eurt'"
  - "strings/reverse_letters.py:11:8         evol        U       'I evol nohtyP'"
  - "strings/reverse_letters.py:11:13        nohty       U       'I evol nohtyP'"
  - "strings/reverse_long_words.py:5:33          wollef      U       reverse_long_words(\"Hey wollef sroirraw\")"
  - "strings/reverse_long_words.py:5:40          sroirraw    U       long_words(\"Hey wollef sroirraw\")"
  - "strings/wildcard_pattern_matching.py:37:24          dabc    U       >>> match_pattern(\"dabc\", \"*abc\")"
  - "strings/wildcard_pattern_matching.py:43:24          aaab    U       >>> match_pattern(\"aaab\", \"aa*\")"
  - "strings/word_occurrence.py:1:14         sarathkaul                  U       # Created by sarathkaul on 17/11/19"
  - "strings/word_occurrence.py:2:15         Arkadip                     U       # Modified by Arkadip Bhattacharya(@darkmatter"
  - "strings/word_occurrence.py:2:23         Bhattacharya                U       Modified by Arkadip Bhattacharya(@darkmatter18) on 2"
  - "strings/word_occurrence.py:10:9         occurence (occurrence)      U       >>> occurence_dict = word_occurrence"
  - "strings/z_function.py:27:21         zxxzxxz     U       >>> z_function(\"zxxzxxz\")"
  - "web_programming/covid_stats_via_xpath.py:2:51           worldometers    U       info fetching from worldometers site using lxml"
  - "web_programming/covid_stats_via_xpath.py:2:75           lxml            U       worldometers site using lxml"
  - "web_programming/currency_converter.py:46:11         Rican               U       CRC Costa Rican Colon"
  - "web_programming/currency_converter.py:48:10         Verdean             U       CVE Cape Verdean Escudo"
  - "web_programming/currency_converter.py:50:5          Djiboutian          U       DJF Djiboutian Franc"
  - "web_programming/currency_converter.py:82:5          Kyrgystani          U       KGS Kyrgystani Som"
  - "web_programming/currency_converter.py:98:14         Ariary              U       MGA Malagasy Ariary"
  - "web_programming/currency_converter.py:100:5         Myanma              U       MMK Myanma Kyat"
  - "web_programming/currency_converter.py:118:14        Nuevo               U       PEN Peruvian Nuevo Sol"
  - "web_programming/currency_converter.py:131:5         Seychellois         U       SCR Seychellois Rupee"
  - "web_programming/currency_converter.py:136:12        Leonean             U       SLL Sierra Leonean Leone"
  - "web_programming/currency_converter.py:144:16        Somoni              U       TJS Tajikistan Somoni"
  - "web_programming/currency_converter.py:145:5         Turkmenistani       U       TMT Turkmenistani Manat"
  - "web_programming/currency_converter.py:147:11        Paanga              U       TOP Tonga Paanga"
  - "web_programming/current_weather.py:12:32        Kolkata     U       weather_forecast(q: str = \"Kolkata, India\", appid: str"
  - "web_programming/download_images_from_google_query.py:12:8           KHTML       U       \" (KHTML, like Gecko) Chrome"
  - "web_programming/download_images_from_google_query.py:37:17          isch        U       \"tbm\": \"isch\","
  - "web_programming/download_images_from_google_query.py:59:43          gstatic     U       \\/\\/encrypted-tbn0\\.gstatic\\.com\\/images\\?.*?)\\"
  - "web_programming/emails_from_url.py:4:24         Umer        U       author__ = \"Muhammad Umer Farooq\""
  - "web_programming/emails_from_url.py:4:29         Farooq      U       author__ = \"Muhammad Umer Farooq\""
  - "web_programming/fetch_github_info.py:4:12           lawric      U       Updated by lawric1 on 24/11/20"
  - "web_programming/fetch_well_rx_price.py:35:40        eliquis     U       pharmacy_and_price_list(\"eliquis\", None)"
  - "web_programming/get_imdb_top_250_movies_csv.py:9:9          imdb    U       def get_imdb_top_250_movies(url:"
  - "web_programming/get_imdbtop.py:15:61        IMDB    U       highly rated movies from IMDB and"
  - "web_programming/get_user_tweets.py:3:8          tweepy      U       import tweepy"
  - "web_programming/giphy.py:4:1            giphy       U       giphy_api_key = \"YOUR API"
  - "web_programming/giphy.py:8:9            gifs        U       def get_gifs(query: str, api_key"
  - "web_programming/instagram_video.py:13:30        IGTV    U       input(\"Enter Video/IGTV url: \").strip()"
  - "web_programming/nasa_data.py:6:9            apod    U       def get_apod_data(api_key: str, download"
  - "web_programming/nasa_data.py:8:13           APOD    U       Get the APOD(Astronomical Picture"
  - "web_programming/reddit.py:12:16         pwls    U       name permalink pwls quarantine saved score"
  - "web_programming/search_books_by_isbn.py:15:29       olids       U       This code must work for olids with or without a leading"
  - "web_programming/search_books_by_isbn.py:21:22       Brisku      U       {'name': 'Adrian Brisku', 'created': {'type"

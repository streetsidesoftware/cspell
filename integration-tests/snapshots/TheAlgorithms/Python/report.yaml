---
Repository: TheAlgorithms/Python
Url: https://github.com/TheAlgorithms/Python.git
Args: ["**/*.{md,py}"]
Summary:
  files: 783
  filesWithIssues: 395
  issues: 2537
  errors: 0
Errors: []

issues: 
  - "arithmetic_analysis/gaussian_elimination.py:10:64   	ndarray 	U   	np.matrix, vector: np.ndarray) -> np.ndarray:"
  - "arithmetic_analysis/gaussian_elimination.py:30:29   	dtype   	U   	np.zeros((rows, 1), dtype=float)"
  - "arithmetic_analysis/gaussian_elimination.py:64:35   	astype  	U   	mat = augmented_mat.astype(\"float64\")"
  - "arithmetic_analysis/newton_forward_interpolation.py:8:5     	ucal	U   	def ucal(u: float, p: int) -"
  - "arithmetic_analysis/newton_forward_interpolation.py:49:5    	summ	U   	summ = y[0][0]"
  - "arithmetic_analysis/newton_raphson.py:1:23      	Raphson 	U   	Implementing Newton Raphson method in Python"
  - "arithmetic_analysis/newton_raphson.py:2:11      	Syed    	U   	# Author: Syed Haseeb Shah (github"
  - "arithmetic_analysis/newton_raphson.py:2:16      	Haseeb  	U   	# Author: Syed Haseeb Shah (github.com/QuantumNovic"
  - "arithmetic_analysis/newton_raphson.py:10:6      	sympy   	U   	from sympy import diff"
  - "arithmetic_analysis/newton_raphson.py:13:12     	raphson 	U   	def newton_raphson("
  - "arithmetic_analysis/secant_method.py:3:9        	dimgrichr   	U   	Author: dimgrichr"
  - "backtracking/coloring.py:11:5       	neighbours  	U   	neighbours: list[int], colored"
  - "backtracking/coloring.py:14:14      	neighbour   	U   	For each neighbour check if coloring constraint"
  - "backtracking/coloring.py:47:8       	Itterates   	U   	2. Itterates over each color:"
  - "backtracking/coloring.py:52:18      	Uncolor     	U   	2.5. Uncolor given vertex"
  - "backtracking/hamiltonian_cycle.py:12:44     	curr	U   	int]], next_ver: int, curr_ind: int, path: list"
  - "backtracking/knight_tour.py:82:22   	Kight   	U   	ValueError: Open Kight Tour cannot be performed"
  - "backtracking/n_queens.py:3:6        	nqueens 	U   	The nqueens problem is of placing"
  - "backtracking/sum_of_subsets.py:12:29    	soln	U   	generate_sum_of_subsets_soln(nums: list[int], max"
  - "backtracking/sum_of_subsets.py:12:34    	nums	U   	sum_of_subsets_soln(nums: list[int], max_sum"
  - "blockchain/modular_division.py:12:55    	modn	U   	0≤x≤n−1, and b/a=x(modn) (that is, b=ax(modn"
  - "boolean_algebra/quine_mc_cluskey.py:85:45   	implicants  	U   	list[list[int]], prime_implicants: list[str]) -> list"
  - "boolean_algebra/quine_mc_cluskey.py:132:11  	implicant   	U   	def prime_implicant_chart("
  - "boolean_algebra/quine_mc_cluskey.py:160:18  	Implicants  	U   	print(\"Prime Implicants are:\")"
  - "cellular_automata/game_of_life.py:1:41      	Kumar   	U   	Life, Author Anurag Kumar(mailto:anuragkumarak"
  - "cellular_automata/game_of_life.py:34:24     	pyplot  	U   	from matplotlib import pyplot as plt"
  - "cellular_automata/game_of_life.py:76:19     	tolist  	U   	return canvas.tolist()"
  - "cellular_automata/game_of_life.py:122:5     	cmap    	U   	cmap = ListedColormap([\"w"
  - "ciphers/a1z26.py:13:17      	myname  	U   	>>> encode(\"myname\")"
  - "ciphers/affine_cipher.py:7:42       	ABCDEFGHIJKLMNOPQRSTUVWXYZ  	U   	-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`\"\"\""
  - "ciphers/affine_cipher.py:8:9        	abcdefghijklmnopqrstuvwxyz  	U   	r\"\"\"abcdefghijklmnopqrstuvwxyz{|}~\"\"\""
  - "ciphers/affine_cipher.py:40:35      	Mpyx                        	U   	I}p~{HL}Gp{vp pFsH}pxMpyxIx JHL O}F{~pvuOvF{FuF"
  - "ciphers/atbash.py:5:5       	atbash  	U   	def atbash_slow(sequence: str)"
  - "ciphers/atbash.py:8:6       	ZYXWVUT 	U   	'ZYXWVUT'"
  - "ciphers/atbash.py:42:10     	timeit  	U   	from timeit import timeit"
  - "ciphers/base64_encoding.py:17:53    	Steganography   	U   	encoding can be used in Steganography to hide data in these"
  - "ciphers/beaufort_cipher.py:2:9      	Mohit               	U   	Author: Mohit Radadiya"
  - "ciphers/beaufort_cipher.py:2:15     	Radadiya            	U   	Author: Mohit Radadiya"
  - "ciphers/beaufort_cipher.py:17:6     	SECRETSECRETSECRE   	U   	'SECRETSECRETSECRE'"
  - "ciphers/beaufort_cipher.py:36:10    	PAYUWL              	U   	'BDC PAYUWL JPAIYI'"
  - "ciphers/beaufort_cipher.py:36:17    	JPAIYI              	U   	'BDC PAYUWL JPAIYI'"
  - "ciphers/brute_force_caesar_cipher.py:3:18       	TMDETUX 	U   	>>> decrypt('TMDETUX PMDVU')"
  - "ciphers/brute_force_caesar_cipher.py:3:26       	PMDVU   	U   	>> decrypt('TMDETUX PMDVU')"
  - "ciphers/brute_force_caesar_cipher.py:5:30       	SLCDSTW 	U   	Decryption using Key #1: SLCDSTW OLCUT"
  - "ciphers/brute_force_caesar_cipher.py:5:38       	OLCUT   	U   	using Key #1: SLCDSTW OLCUT"
  - "ciphers/brute_force_caesar_cipher.py:6:30       	RKBCRSV 	U   	Decryption using Key #2: RKBCRSV NKBTS"
  - "ciphers/brute_force_caesar_cipher.py:6:38       	NKBTS   	U   	using Key #2: RKBCRSV NKBTS"
  - "ciphers/brute_force_caesar_cipher.py:7:30       	QJABQRU 	U   	Decryption using Key #3: QJABQRU MJASR"
  - "ciphers/brute_force_caesar_cipher.py:7:38       	MJASR   	U   	using Key #3: QJABQRU MJASR"
  - "ciphers/brute_force_caesar_cipher.py:8:30       	PIZAPQT 	U   	Decryption using Key #4: PIZAPQT LIZRQ"
  - "ciphers/brute_force_caesar_cipher.py:8:38       	LIZRQ   	U   	using Key #4: PIZAPQT LIZRQ"
  - "ciphers/brute_force_caesar_cipher.py:9:30       	OHYZOPS 	U   	Decryption using Key #5: OHYZOPS KHYQP"
  - "ciphers/brute_force_caesar_cipher.py:9:38       	KHYQP   	U   	using Key #5: OHYZOPS KHYQP"
  - "ciphers/brute_force_caesar_cipher.py:10:30      	NGXYNOR 	U   	Decryption using Key #6: NGXYNOR JGXPO"
  - "ciphers/brute_force_caesar_cipher.py:10:38      	JGXPO   	U   	using Key #6: NGXYNOR JGXPO"
  - "ciphers/brute_force_caesar_cipher.py:11:30      	MFWXMNQ 	U   	Decryption using Key #7: MFWXMNQ IFWON"
  - "ciphers/brute_force_caesar_cipher.py:11:38      	IFWON   	U   	using Key #7: MFWXMNQ IFWON"
  - "ciphers/brute_force_caesar_cipher.py:12:30      	LEVWLMP 	U   	Decryption using Key #8: LEVWLMP HEVNM"
  - "ciphers/brute_force_caesar_cipher.py:12:38      	HEVNM   	U   	using Key #8: LEVWLMP HEVNM"
  - "ciphers/brute_force_caesar_cipher.py:13:30      	KDUVKLO 	U   	Decryption using Key #9: KDUVKLO GDUML"
  - "ciphers/brute_force_caesar_cipher.py:13:38      	GDUML   	U   	using Key #9: KDUVKLO GDUML"
  - "ciphers/brute_force_caesar_cipher.py:14:31      	JCTUJKN 	U   	Decryption using Key #10: JCTUJKN FCTLK"
  - "ciphers/brute_force_caesar_cipher.py:14:39      	FCTLK   	U   	using Key #10: JCTUJKN FCTLK"
  - "ciphers/brute_force_caesar_cipher.py:15:31      	IBSTIJM 	U   	Decryption using Key #11: IBSTIJM EBSKJ"
  - "ciphers/brute_force_caesar_cipher.py:15:39      	EBSKJ   	U   	using Key #11: IBSTIJM EBSKJ"
  - "ciphers/brute_force_caesar_cipher.py:16:31      	HARSHIL 	U   	Decryption using Key #12: HARSHIL DARJI"
  - "ciphers/brute_force_caesar_cipher.py:16:39      	DARJI   	U   	using Key #12: HARSHIL DARJI"
  - "ciphers/brute_force_caesar_cipher.py:17:31      	GZQRGHK 	U   	Decryption using Key #13: GZQRGHK CZQIH"
  - "ciphers/brute_force_caesar_cipher.py:17:39      	CZQIH   	U   	using Key #13: GZQRGHK CZQIH"
  - "ciphers/brute_force_caesar_cipher.py:18:31      	FYPQFGJ 	U   	Decryption using Key #14: FYPQFGJ BYPHG"
  - "ciphers/brute_force_caesar_cipher.py:18:39      	BYPHG   	U   	using Key #14: FYPQFGJ BYPHG"
  - "ciphers/brute_force_caesar_cipher.py:19:31      	EXOPEFI 	U   	Decryption using Key #15: EXOPEFI AXOGF"
  - "ciphers/brute_force_caesar_cipher.py:19:39      	AXOGF   	U   	using Key #15: EXOPEFI AXOGF"
  - "ciphers/brute_force_caesar_cipher.py:20:31      	DWNODEH 	U   	Decryption using Key #16: DWNODEH ZWNFE"
  - "ciphers/brute_force_caesar_cipher.py:20:39      	ZWNFE   	U   	using Key #16: DWNODEH ZWNFE"
  - "ciphers/brute_force_caesar_cipher.py:21:31      	CVMNCDG 	U   	Decryption using Key #17: CVMNCDG YVMED"
  - "ciphers/brute_force_caesar_cipher.py:21:39      	YVMED   	U   	using Key #17: CVMNCDG YVMED"
  - "ciphers/brute_force_caesar_cipher.py:22:31      	BULMBCF 	U   	Decryption using Key #18: BULMBCF XULDC"
  - "ciphers/brute_force_caesar_cipher.py:22:39      	XULDC   	U   	using Key #18: BULMBCF XULDC"
  - "ciphers/brute_force_caesar_cipher.py:23:31      	ATKLABE 	U   	Decryption using Key #19: ATKLABE WTKCB"
  - "ciphers/brute_force_caesar_cipher.py:23:39      	WTKCB   	U   	using Key #19: ATKLABE WTKCB"
  - "ciphers/brute_force_caesar_cipher.py:24:31      	ZSJKZAD 	U   	Decryption using Key #20: ZSJKZAD VSJBA"
  - "ciphers/brute_force_caesar_cipher.py:24:39      	VSJBA   	U   	using Key #20: ZSJKZAD VSJBA"
  - "ciphers/brute_force_caesar_cipher.py:25:31      	YRIJYZC 	U   	Decryption using Key #21: YRIJYZC URIAZ"
  - "ciphers/brute_force_caesar_cipher.py:25:39      	URIAZ   	U   	using Key #21: YRIJYZC URIAZ"
  - "ciphers/brute_force_caesar_cipher.py:26:31      	XQHIXYB 	U   	Decryption using Key #22: XQHIXYB TQHZY"
  - "ciphers/brute_force_caesar_cipher.py:26:39      	TQHZY   	U   	using Key #22: XQHIXYB TQHZY"
  - "ciphers/brute_force_caesar_cipher.py:27:31      	WPGHWXA 	U   	Decryption using Key #23: WPGHWXA SPGYX"
  - "ciphers/brute_force_caesar_cipher.py:27:39      	SPGYX   	U   	using Key #23: WPGHWXA SPGYX"
  - "ciphers/brute_force_caesar_cipher.py:28:31      	VOFGVWZ 	U   	Decryption using Key #24: VOFGVWZ ROFXW"
  - "ciphers/brute_force_caesar_cipher.py:28:39      	ROFXW   	U   	using Key #24: VOFGVWZ ROFXW"
  - "ciphers/brute_force_caesar_cipher.py:29:31      	UNEFUVY 	U   	Decryption using Key #25: UNEFUVY QNEWV"
  - "ciphers/brute_force_caesar_cipher.py:29:39      	QNEWV   	U   	using Key #25: UNEFUVY QNEWV"
  - "ciphers/caesar_cipher.py:47:33      	Jgnnq       	U   	final message would be \"Jgnnq, ecrvckp\""
  - "ciphers/caesar_cipher.py:47:40      	ecrvckp     	U   	message would be \"Jgnnq, ecrvckp\""
  - "ciphers/caesar_cipher.py:56:11      	Cqks        	U   	'bpm yCqks jzwEv nwF rCuxA wDmz"
  - "ciphers/caesar_cipher.py:62:8       	qtbjwhfxj   	U   	'f qtbjwhfxj fqumfgjy'"
  - "ciphers/caesar_cipher.py:62:18      	fqumfgjy    	U   	'f qtbjwhfxj fqumfgjy'"
  - "ciphers/caesar_cipher.py:188:30     	IH'N        	U   	brute_force(\"jFyuMy xIH'N vLONy zILwy Gy!\")[2"
  - "ciphers/decrypt_caesar_with_chi_squared.py:9:10     	sensetive   	U   	case_sensetive: bool = False,"
  - "ciphers/decrypt_caesar_with_chi_squared.py:56:18    	ifmmp       	U   	Cipher text: ifmmp"
  - "ciphers/decrypt_caesar_with_chi_squared.py:112:24   	jhlzhy      	U   	... 'dof pz aol jhlzhy jpwoly zv wvwbshy? pa"
  - "ciphers/decrypt_caesar_with_chi_squared.py:112:31   	jpwoly      	U   	'dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv"
  - "ciphers/decrypt_caesar_with_chi_squared.py:112:41   	wvwbshy     	U   	aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr"
  - "ciphers/decrypt_caesar_with_chi_squared.py:112:60   	lhzf        	U   	zv wvwbshy? pa pz avv lhzf av jyhjr!'"
  - "ciphers/decrypt_caesar_with_chi_squared.py:112:68   	jyhjr       	U   	wvwbshy? pa pz avv lhzf av jyhjr!'"
  - "ciphers/decrypt_caesar_with_chi_squared.py:117:42   	crybd       	U   	caesar_with_chi_squared('crybd cdbsxq')"
  - "ciphers/decrypt_caesar_with_chi_squared.py:117:48   	cdbsxq      	U   	with_chi_squared('crybd cdbsxq')"
  - "ciphers/decrypt_caesar_with_chi_squared.py:192:31   	excepcted   	U   	# Get the excepcted amount of times the"
  - "ciphers/deterministic_miller_rabin.py:1:30      	bizzfitch   	U   	Created by Nathan Damon, @bizzfitch on github"
  - "ciphers/diffie_hellman.py:1:22      	hexlify 	U   	from binascii import hexlify"
  - "ciphers/diffie_hellman.py:3:16      	urandom 	U   	from os import urandom"
  - "ciphers/diffie_hellman.py:5:40      	MODP    	U   	Modular Exponential (MODP) Diffie-Hellman groups"
  - "ciphers/diffie_hellman.py:5:46      	Diffie  	U   	Modular Exponential (MODP) Diffie-Hellman groups for"
  - "ciphers/elgamal_key_generator.py:66:21      	elgamal 	U   	make_key_files(\"elgamal\", 2048)"
  - "ciphers/enigma_machine2.py:11:5     	randnomly                   	U   	- 9 randnomly generated rotors"
  - "ciphers/enigma_machine2.py:29:11    	EGZWVONAHDCLFQMSIPJBYUKXTR  	U   	rotor1 = \"EGZWVONAHDCLFQMSIPJBYUKXTR\""
  - "ciphers/enigma_machine2.py:30:11    	FOBHMDKEXQNRAULPGSJVTYICZW  	U   	rotor2 = \"FOBHMDKEXQNRAULPGSJVTYICZW\""
  - "ciphers/enigma_machine2.py:31:11    	ZJXESIUQLHAVRMDOYGTNFWPBKC  	U   	rotor3 = \"ZJXESIUQLHAVRMDOYGTNFWPBKC\""
  - "ciphers/enigma_machine2.py:63:11    	RMDJXFUWGISLHVTCQNKYPBEZOA  	U   	rotor4 = \"RMDJXFUWGISLHVTCQNKYPBEZOA\""
  - "ciphers/enigma_machine2.py:64:11    	SGLCPQWZHKXAREONTFBVIYJUDM  	U   	rotor5 = \"SGLCPQWZHKXAREONTFBVIYJUDM\""
  - "ciphers/enigma_machine2.py:65:11    	HVSICLTYKQUBXDWAJZOMFGPREN  	U   	rotor6 = \"HVSICLTYKQUBXDWAJZOMFGPREN\""
  - "ciphers/enigma_machine2.py:66:11    	RZWQHFMVDBKICJLNTUXAGYPSOE  	U   	rotor7 = \"RZWQHFMVDBKICJLNTUXAGYPSOE\""
  - "ciphers/enigma_machine2.py:67:11    	LFKIJODBEGAMQPXVUHYSTCZRWN  	U   	rotor8 = \"LFKIJODBEGAMQPXVUHYSTCZRWN\""
  - "ciphers/enigma_machine2.py:68:11    	KOAEGVDHXPQZMLFTYWJNBRCIUS  	U   	rotor9 = \"KOAEGVDHXPQZMLFTYWJNBRCIUS\""
  - "ciphers/enigma_machine2.py:72:29    	rotsel                      	U   	rotpos: RotorPositionT, rotsel: RotorSelectionT, pb"
  - "ciphers/enigma_machine2.py:82:26    	positon                     	U   	param rotpos: rotor_positon"
  - "ciphers/enigma_machine2.py:84:16    	plugb                       	U   	:param pb: plugb -> validated and transformed"
  - "ciphers/enigma_machine2.py:109:5    	pbdict                      	U   	pbdict = _plugboard(pb)"
  - "ciphers/enigma_machine2.py:114:16   	pbstring                    	U   	def _plugboard(pbstring: str) -> dict[str, str"
  - "ciphers/enigma_machine2.py:143:5    	tmppbl                      	U   	tmppbl = set()"
  - "ciphers/enigma_machine2.py:184:7    	VKLEPDBGRNWTFCJOHQAMUZYIXS  	U   	| VKLEPDBGRNWTFCJOHQAMUZYIXS |"
  - "ciphers/enigma_machine2.py:192:7    	ABCDEFGHIJKLM               	U   	| ABCDEFGHIJKLM | e.g. E is paired to"
  - "ciphers/enigma_machine2.py:193:7    	ZYXWVUTSRQPON               	U   	| ZYXWVUTSRQPON | so when E goes in"
  - "ciphers/enigma_machine2.py:202:6    	KORYH                       	U   	'KORYH JUHHI!'"
  - "ciphers/enigma_machine2.py:202:12   	JUHHI                       	U   	'KORYH JUHHI!'"
  - "ciphers/enigma_machine2.py:203:24   	juhhi                       	U   	>>> enigma('KORYH, juhhi!', (1, 2, 1), plugb"
  - "ciphers/enigma_machine2.py:206:6    	FPNCZ                       	U   	'FPNCZ QWOBU!'"
  - "ciphers/enigma_machine2.py:206:12   	QWOBU                       	U   	'FPNCZ QWOBU!'"
  - "ciphers/hill_cipher.py:63:21    	vectorize           	U   	modulus = numpy.vectorize(lambda x: x % 36)"
  - "ciphers/hill_cipher.py:116:10   	TESTINGHILLCIPHERR  	U   	'TESTINGHILLCIPHERR'"
  - "ciphers/hill_cipher.py:132:10   	WHXYJOLM            	U   	'WHXYJOLM9C6XT085LL'"
  - "ciphers/mixed_keyword_cypher.py:20:6    	XKJGUFMJST  	U   	'XKJGUFMJST'"
  - "ciphers/mono_alphabetic_ciphers.py:10:28    	QWERTYUIOPASDFGHJKLZXCVBNM  	U   	translate_message(\"QWERTYUIOPASDFGHJKLZXCVBNM\",\"Hello World\",\"encrypt"
  - "ciphers/mono_alphabetic_ciphers.py:11:6     	Pcssi                       	U   	'Pcssi Bidsm'"
  - "ciphers/mono_alphabetic_ciphers.py:11:12    	Bidsm                       	U   	'Pcssi Bidsm'"
  - "ciphers/mono_alphabetic_ciphers.py:42:6     	Itssg                       	U   	'Itssg Vgksr'"
  - "ciphers/mono_alphabetic_ciphers.py:42:12    	Vgksr                       	U   	'Itssg Vgksr'"
  - "ciphers/playfair_cipher.py:6:5      	chunker                     	U   	def chunker(seq: Iterable[str],"
  - "ciphers/playfair_cipher.py:45:17    	ABCDEFGHIKLMNOPQRSTUVWXYZ   	U   	alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\""
  - "ciphers/porta_cipher.py:2:29    	NOPQRSTUVWXYZ   	U   	(\"ABCDEFGHIJKLM\", \"NOPQRSTUVWXYZ\"),"
  - "ciphers/porta_cipher.py:4:29    	ZNOPQRSTUVWXY   	U   	(\"ABCDEFGHIJKLM\", \"ZNOPQRSTUVWXY\"),"
  - "ciphers/porta_cipher.py:6:29    	YZNOPQRSTUVWX   	U   	(\"ABCDEFGHIJKLM\", \"YZNOPQRSTUVWX\"),"
  - "ciphers/porta_cipher.py:8:29    	XYZNOPQRSTUVW   	U   	(\"ABCDEFGHIJKLM\", \"XYZNOPQRSTUVW\"),"
  - "ciphers/porta_cipher.py:10:29   	WXYZNOPQRSTUV   	U   	(\"ABCDEFGHIJKLM\", \"WXYZNOPQRSTUV\"),"
  - "ciphers/porta_cipher.py:12:29   	VWXYZNOPQRSTU   	U   	(\"ABCDEFGHIJKLM\", \"VWXYZNOPQRSTU\"),"
  - "ciphers/porta_cipher.py:14:29   	UVWXYZNOPQRST   	U   	(\"ABCDEFGHIJKLM\", \"UVWXYZNOPQRST\"),"
  - "ciphers/porta_cipher.py:16:29   	TUVWXYZNOPQRS   	U   	(\"ABCDEFGHIJKLM\", \"TUVWXYZNOPQRS\"),"
  - "ciphers/porta_cipher.py:18:29   	STUVWXYZNOPQR   	U   	(\"ABCDEFGHIJKLM\", \"STUVWXYZNOPQR\"),"
  - "ciphers/porta_cipher.py:20:29   	RSTUVWXYZNOPQ   	U   	(\"ABCDEFGHIJKLM\", \"RSTUVWXYZNOPQ\"),"
  - "ciphers/porta_cipher.py:22:29   	QRSTUVWXYZNOP   	U   	(\"ABCDEFGHIJKLM\", \"QRSTUVWXYZNOP\"),"
  - "ciphers/porta_cipher.py:24:29   	PQRSTUVWXYZNO   	U   	(\"ABCDEFGHIJKLM\", \"PQRSTUVWXYZNO\"),"
  - "ciphers/porta_cipher.py:26:29   	OPQRSTUVWXYZN   	U   	(\"ABCDEFGHIJKLM\", \"OPQRSTUVWXYZN\"),"
  - "ciphers/porta_cipher.py:44:6    	QRACRWU         	U   	'QRACRWU'"
  - "ciphers/rabin_miller.py:1:3     	Primality   	U   	# Primality Testing with the Rabin"
  - "ciphers/rail_fence_cipher.py:11:10      	olordll 	U   	'HWe olordll'"
  - "ciphers/rot13.py:8:9        	frperg  	U   	\"Zl frperg onax nppbhag ahzore"
  - "ciphers/rot13.py:8:16       	onax    	U   	\"Zl frperg onax nppbhag ahzore vf 1"
  - "ciphers/rot13.py:8:21       	nppbhag 	U   	\"Zl frperg onax nppbhag ahzore vf 173-52946"
  - "ciphers/rot13.py:8:29       	ahzore  	U   	frperg onax nppbhag ahzore vf 173-52946 fb qba"
  - "ciphers/rot13.py:8:52       	qba'g   	U   	ahzore vf 173-52946 fb qba'g gryy nalbar!!\""
  - "ciphers/rot13.py:8:58       	gryy    	U   	vf 173-52946 fb qba'g gryy nalbar!!\""
  - "ciphers/rot13.py:8:63       	nalbar  	U   	52946 fb qba'g gryy nalbar!!\""
  - "ciphers/rsa_cipher.py:15:11     	ints	U   	block_ints = []"
  - "ciphers/rsa_factorization.py:16:5       	rsafactor   	U   	def rsafactor(d: int, e: int, N: int"
  - "ciphers/shuffled_shift_cipher.py:66:10      	rtype                       	U   	:rtype: list"
  - "ciphers/shuffled_shift_cipher.py:82:38      	MLKJIHGF                    	U   	shuffled parts: [A,CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]"
  - "ciphers/shuffled_shift_cipher.py:82:47      	RQPON                       	U   	parts: [A,CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]"
  - "ciphers/shuffled_shift_cipher.py:82:53      	ZYXWVUTS                    	U   	CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]"
  - "ciphers/shuffled_shift_cipher.py:83:35      	ACBEDMLKJIHGFRQPONZYXWVUTS  	U   	shuffled __key_list : ACBEDMLKJIHGFRQPONZYXWVUTS"
  - "ciphers/shuffled_shift_cipher.py:132:44     	Xyqe                        	U   	ShuffledShiftCipher('4PYIXyqeQZr44')"
  - "ciphers/simple_keyword_cypher.py:8:6        	Helo    	U   	'Helo Wrd'"
  - "ciphers/simple_keyword_cypher.py:11:12      	dups    	U   	key_no_dups = \"\""
  - "ciphers/simple_keyword_cypher.py:50:6       	CYJJM   	U   	'CYJJM VMQJB!!'"
  - "ciphers/simple_keyword_cypher.py:50:12      	VMQJB   	U   	'CYJJM VMQJB!!'"
  - "ciphers/simple_substitution_cipher.py:9:12      	LFWOAYUISVKMNXPBDCRJTQEGHZ  	U   	key = \"LFWOAYUISVKMNXPBDCRJTQEGHZ\""
  - "ciphers/simple_substitution_cipher.py:36:55     	Harshil                     	U   	LFWOAYUISVKMNXPBDCRJTQEGHZ', 'Harshil Darji')"
  - "ciphers/simple_substitution_cipher.py:36:63     	Darji                       	U   	SVKMNXPBDCRJTQEGHZ', 'Harshil Darji')"
  - "ciphers/simple_substitution_cipher.py:37:6      	Ilcrism                     	U   	'Ilcrism Olcvs'"
  - "ciphers/simple_substitution_cipher.py:37:14     	Olcvs                       	U   	'Ilcrism Olcvs'"
  - "ciphers/trafid_cipher.py:127:38     	EPSDUCVWYM      	U   	encryptMessage(msg, \"EPSDUCVWYM.ZLKXNBTFGORIJHAQ\")"
  - "ciphers/trafid_cipher.py:127:49     	ZLKXNBTFGORIJHAQ	U   	cryptMessage(msg, \"EPSDUCVWYM.ZLKXNBTFGORIJHAQ\")"
  - "ciphers/transposition_cipher.py:28:6    	Hlia    	U   	'Hlia rDsahrij'"
  - "ciphers/transposition_cipher.py:28:12   	Dsahrij 	U   	'Hlia rDsahrij'"
  - "ciphers/vigenere_cipher.py:22:62    	Dharmaj 	U   	is Harshil Darji from Dharmaj.')"
  - "ciphers/vigenere_cipher.py:23:6     	Akij    	U   	'Akij ra Odrjqqs Gaisq muod"
  - "ciphers/vigenere_cipher.py:23:14    	Odrjqqs 	U   	'Akij ra Odrjqqs Gaisq muod Mphumrs."
  - "ciphers/vigenere_cipher.py:23:22    	Gaisq   	U   	'Akij ra Odrjqqs Gaisq muod Mphumrs.'"
  - "ciphers/vigenere_cipher.py:23:28    	muod    	U   	Akij ra Odrjqqs Gaisq muod Mphumrs.'"
  - "ciphers/vigenere_cipher.py:23:33    	Mphumrs 	U   	ra Odrjqqs Gaisq muod Mphumrs.'"
  - "ciphers/xor_cipher.py:132:51    	fout	U   	encrypt.out\", \"w+\") as fout:"
  - "compression/burrows_wheeler.py:24:31    	ANANA       	U   	BANANA|', 'BANANA|^', 'ANANA|^B', 'NANA|^BA', 'ANA"
  - "compression/burrows_wheeler.py:24:43    	NANA        	U   	BANANA|^', 'ANANA|^B', 'NANA|^BA', 'ANA|^BAN', 'NA"
  - "compression/burrows_wheeler.py:24:71    	BANA        	U   	BA', 'ANA|^BAN', 'NA|^BANA',"
  - "compression/burrows_wheeler.py:25:9     	BANAN       	U   	'A|^BANAN', '|^BANANA']"
  - "compression/burrows_wheeler.py:27:32    	casaa       	U   	asa_da_casa', '_asa_da_casaa', 'asa_da_casaa_',"
  - "compression/burrows_wheeler.py:29:40    	asaa        	U   	, 'casaa_asa_da_', 'asaa_asa_da_c', 'saa_asa"
  - "compression/burrows_wheeler.py:32:39    	namabananapa	U   	namabanana', 'anamabananap', 'namabananapa', 'amabananapan',"
  - "compression/burrows_wheeler.py:33:22    	abananapanam	U   	'mabananapana', 'abananapanam', 'bananapanama', 'ananapanam"
  - "compression/burrows_wheeler.py:34:6     	nanapanamaba	U   	'nanapanamaba', 'anapanamaban', 'napanamaba"
  - "compression/burrows_wheeler.py:34:54    	apanamabanan	U   	apanamaban', 'napanamabana', 'apanamabanan']"
  - "compression/burrows_wheeler.py:58:21    	aaaadss     	U   	{'bwt_string': 'aaaadss_c__aa', 'idx_original"
  - "compression/burrows_wheeler.py:60:21    	mnpbnnaaaaaa	U   	{'bwt_string': 'mnpbnnaaaaaa', 'idx_original_string"
  - "compression/lempel_ziv_decompress.py:2:43       	Lempel  	U   	several implementations of Lempel–Ziv–Welch decompression"
  - "compression/peak_signal_to_noise_ratio.py:2:30      	PSNR    	U   	signal-to-noise ratio - PSNR"
  - "compression/peak_signal_to_noise_ratio.py:15:5      	psnr    	U   	def psnr(original, contrast)"
  - "compression/peak_signal_to_noise_ratio.py:27:20     	imread  	U   	original = cv2.imread(os.path.join(dir_path"
  - "computer_vision/cnn_classification.py:2:1       	Convolutional   	U   	Convolutional Neural Network"
  - "computer_vision/cnn_classification.py:17:22     	iamges          	U   	. The labels of the iamges will be extracted from"
  - "computer_vision/cnn_classification.py:26:17     	Keras           	U   	# Importing the Keras libraries and packages"
  - "computer_vision/cnn_classification.py:28:17     	keras           	U   	from tensorflow.keras import layers, models"
  - "computer_vision/cnn_classification.py:32:7      	Initialising    	U   	# Initialising the CNN"
  - "computer_vision/cnn_classification.py:37:16     	Conv            	U   	layers.Conv2D(32, (3, 3), input"
  - "computer_vision/cnn_classification.py:37:72     	relu            	U   	64, 3), activation=\"relu\")"
  - "computer_vision/cnn_classification.py:43:23     	convolutional   	U   	# Adding a second convolutional layer"
  - "computer_vision/harris_corner.py:15:23      	neighbourhoods  	U   	window_size : neighbourhoods considered"
  - "computer_vision/harris_corner.py:75:9       	imwrite         	U   	cv2.imwrite(\"detect.png\", color"
  - "CONTRIBUTING.md:5:339   	Gitter          	U   	ask the community in [Gitter](https://gitter.im/TheAlgorit"
  - "CONTRIBUTING.md:46:8    	docstrings      	U   	* have docstrings with clear explanations"
  - "CONTRIBUTING.md:47:11   	doctests        	U   	* contain doctests that test both valid"
  - "CONTRIBUTING.md:77:334  	autopep         	U   	other code formatters (autopep8, yapf) but the __black"
  - "CONTRIBUTING.md:77:344  	yapf            	U   	formatters (autopep8, yapf) but the __black__ formatter"
  - "CONTRIBUTING.md:131:33  	pytest          	U   	doctests will be run by pytest as part of our automated"
  - "CONTRIBUTING.md:134:14  	doctest         	U   	python3 -m doctest -v my_submission.py"
  - "CONTRIBUTING.md:142:11  	eval            	U   	input = eval(input(\"Enter your input"
  - "CONTRIBUTING.md:151:171 	mypy            	U   	automated testing will run [mypy](http://mypy-lang.org"
  - "CONTRIBUTING.md:173:79  	autogenerated   	U   	will be periodically autogenerated by our Travis CI processes"
  - "CONTRIBUTING.md:182:10  	poyea           	U   	Writer [@poyea](https://github.com"
  - "conversions/molecular_chemistry.py:10:27    	nfactor 	U   	molarity_to_normality(nfactor: int, moles: float,"
  - "conversions/prefix_conversions.py:10:5      	yotta   	U   	yotta = 24"
  - "conversions/prefix_conversions.py:11:5      	zetta   	U   	zetta = 21"
  - "conversions/prefix_conversions.py:13:5      	peta    	U   	peta = 15"
  - "conversions/prefix_conversions.py:14:5      	tera    	U   	tera = 12"
  - "conversions/prefix_conversions.py:15:5      	giga    	U   	giga = 9"
  - "conversions/prefix_conversions.py:18:5      	hecto   	U   	hecto = 2"
  - "conversions/prefix_conversions.py:19:5      	deca    	U   	deca = 1"
  - "conversions/prefix_conversions.py:20:5      	deci    	U   	deci = -1"
  - "conversions/prefix_conversions.py:21:5      	centi   	U   	centi = -2"
  - "conversions/prefix_conversions.py:22:5      	milli   	U   	milli = -3"
  - "conversions/prefix_conversions.py:25:5      	pico    	U   	pico = -12"
  - "conversions/prefix_conversions.py:26:5      	femto   	U   	femto = -15"
  - "conversions/prefix_conversions.py:27:5      	atto    	U   	atto = -18"
  - "conversions/prefix_conversions.py:28:5      	zepto   	U   	zepto = -21"
  - "conversions/prefix_conversions.py:29:5      	yocto   	U   	yocto = -24"
  - "conversions/roman_numerals.py:7:29      	CLIV        	U   	tests = {\"III\": 3, \"CLIV\": 154, \"MIX\": 1009,"
  - "conversions/roman_numerals.py:7:68      	MMMCMXCIX   	U   	1009, \"MMD\": 2500, \"MMMCMXCIX\": 3999}"
  - "conversions/roman_numerals.py:11:5      	vals        	U   	vals = {\"I\": 1, \"V\": 5,"
  - "conversions/temperature_conversions.py:4:43     	ndigits 	U   	fahrenheit(celsius: float, ndigits: int = 2) -> float:"
  - "conversions/temperature_conversions.py:306:5    	reaumur 	U   	def reaumur_to_kelvin(reaumur: float"
  - "conversions/weight_conversion.py:4:15       	Anubhav 	U   	__author__ = \"Anubhav Solanki\""
  - "conversions/weight_conversion.py:4:23       	Solanki 	U   	author__ = \"Anubhav Solanki\""
  - "data_structures/binary_tree/avl_tree.py:244:9   	Ltree       	U   	class AVLtree:"
  - "data_structures/binary_tree/avl_tree.py:297:26  	traversale  	U   	-> str: # a level traversale, gives a more intuitive"
  - "data_structures/binary_tree/binary_search_tree_recursive.py:231:9   	inorder 	U   	def inorder_traversal(self) -> Iterator"
  - "data_structures/binary_tree/binary_search_tree_recursive.py:598:12  	Inorder 	U   	print(\"Inorder traversal:\", inorder"
  - "data_structures/binary_tree/binary_search_tree.py:14:28     	pformat 	U   	from pprint import pformat"
  - "data_structures/binary_tree/lazy_segment_tree.py:128:5      	segt	U   	segt = SegmentTree(size)"
  - "data_structures/binary_tree/lowest_common_ancestor.py:75:13     	qsize   	U   	while q.qsize() != 0:"
  - "data_structures/binary_tree/red_black_tree.py:687:5     	pytests 	U   	def pytests() -> None:"
  - "data_structures/binary_tree/treap.py:8:5        	Treap's 	U   	Treap's node"
  - "data_structures/binary_tree/treap.py:9:5        	Treap   	U   	Treap is a binary tree by"
  - "data_structures/binary_tree/treap.py:127:31     	treap   	U   	value to add value into treap"
  - "data_structures/binary_tree/wavelet_tree.py:18:14   	maxx    	U   	self.maxx: int = -1"
  - "data_structures/binary_tree/wavelet_tree.py:117:5   	quantile	U   	def quantile(node: Node, index: int"
  - "data_structures/binary_tree/wavelet_tree.py:161:27  	elememts	U   	Returns the number of elememts in range [start_num"
  - "data_structures/disjoint_set/alternate_disjoint_set.py:54:26    	disj	U   	def get_parent(self, disj_set: int) -> int:"
  - "data_structures/hashing/hash_table_with_linked_list.py:1:25     	deque   	U   	from collections import deque"
  - "data_structures/heap/binomial_heap.py:54:64     	logn        	U   	elements: Guaranteed logn, amoratized 1"
  - "data_structures/heap/binomial_heap.py:54:70     	amoratized  	U   	elements: Guaranteed logn, amoratized 1"
  - "data_structures/heap/binomial_heap.py:55:56     	logm        	U   	size m and n: O(logn + logm)"
  - "data_structures/heap/binomial_heap.py:120:38    	inplace     	U   	merged heap; (merge is inplace)"
  - "data_structures/heap/binomial_heap.py:178:19    	Neighbouring	U   	# Neighbouring Nodes"
  - "data_structures/heap/binomial_heap.py:327:11    	Neighbour   	U   	# Neighbour nodes"
  - "data_structures/heap/heap_generic.py:62:10      	heapify 	U   	def _heapify_up(self, index):"
  - "data_structures/heap/skew_heap.py:54:5      	Visualisation   	U   	Visualisation: https://www.cs.usfca"
  - "data_structures/linked_list/deque_doubly.py:2:14    	Deque   	U   	Implementing Deque using DoublyLinkedList"
  - "data_structures/linked_list/deque_doubly.py:103:8   	Equeu   	U   	# DEqueu Remove Operations (At"
  - "data_structures/linked_list/from_sequence.py:1:13       	Prorgam 	U   	# Recursive Prorgam to create a Linked List"
  - "data_structures/linked_list/skip_list.py:371:17     	doesnt  	U   	def test_delete_doesnt_leave_dead_nodes():"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:3:20    	echoaj      	U   	GitHub: github.com/echoaj"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:39:5    	dijkstras   	U   	def dijkstras_two_stack_algorithm"
  - "digital_image_processing/change_brightness.py:25:9      	brigt   	U   	brigt_img = change_brightness"
  - "digital_image_processing/convert_to_negative.py:2:36    	opencv  	U   	mplemented an algorithm using opencv to convert a colored"
  - "digital_image_processing/convert_to_negative.py:4:44    	imshow  	U   	destroyAllWindows, imread, imshow, waitKey"
  - "digital_image_processing/edge_detection/canny.py:5:39       	sobel   	U   	image_processing.filters.sobel_filter import sobel"
  - "digital_image_processing/edge_detection/canny.py:12:15      	mgrid   	U   	x, y = np.mgrid[0 - center : k_size"
  - "digital_image_processing/filters/convolve.py:30:63      	vstack  	U   	pixels into a row and np.vstack all rows"
  - "digital_image_processing/histogram_equalization/histogram_stretch.py:4:10       	Binish  	U   	@author: Binish125"
  - "digital_image_processing/index_calculation.py:1:11      	João    	U   	# Author: João Gustavo A. Amorim"
  - "digital_image_processing/index_calculation.py:1:27      	Amorim  	U   	Author: João Gustavo A. Amorim"
  - "digital_image_processing/index_calculation.py:47:15     	ARVI    	U   	#\"ARVI2\" -- red"
  - "digital_image_processing/index_calculation.py:48:15     	CCCI    	U   	#\"CCCI\" -- red"
  - "digital_image_processing/index_calculation.py:51:15     	NDVI    	U   	#\"NDVI\" -- red"
  - "digital_image_processing/index_calculation.py:52:15     	BNDVI   	U   	#\"BNDVI\" -- blue"
  - "digital_image_processing/index_calculation.py:54:15     	GNDVI   	U   	#\"GNDVI\" -- green"
  - "digital_image_processing/index_calculation.py:55:15     	GBNDVI  	U   	#\"GBNDVI\" -- green"
  - "digital_image_processing/index_calculation.py:56:15     	GRNDVI  	U   	#\"GRNDVI\" -- red,"
  - "digital_image_processing/index_calculation.py:57:15     	RBNDVI  	U   	#\"RBNDVI\" -- red,"
  - "digital_image_processing/index_calculation.py:58:15     	PNDVI   	U   	#\"PNDVI\" -- red"
  - "digital_image_processing/index_calculation.py:60:15     	BWDRVI  	U   	#\"BWDRVI\" -- blue"
  - "digital_image_processing/index_calculation.py:64:15     	CTVI    	U   	#\"CTVI\" -- red"
  - "digital_image_processing/index_calculation.py:65:15     	GDVI    	U   	#\"GDVI\" -- green"
  - "digital_image_processing/index_calculation.py:67:15     	GEMI    	U   	#\"GEMI\" -- red"
  - "digital_image_processing/index_calculation.py:68:15     	GOSAVI  	U   	#\"GOSAVI\" -- green"
  - "digital_image_processing/index_calculation.py:69:15     	GSAVI   	U   	#\"GSAVI\" -- green"
  - "digital_image_processing/index_calculation.py:72:15     	IPVI    	U   	#\"IPVI\" -- red"
  - "digital_image_processing/index_calculation.py:75:15     	MRVI    	U   	#\"MRVI\" -- red"
  - "digital_image_processing/index_calculation.py:76:15     	MSAVI   	U   	#\"MSAVI\" -- red"
  - "digital_image_processing/index_calculation.py:80:15     	NGRDI   	U   	#\"NGRDI\" -- red"
  - "digital_image_processing/index_calculation.py:86:15     	NDRE    	U   	#\"NDRE\" -- redEdge"
  - "digital_image_processing/index_calculation.py:132:9     	funcs   	U   	funcs = {"
  - "digital_image_processing/index_calculation.py:221:34    	CDVI    	U   	Index, Calibrated NDVI - CDVI"
  - "digital_image_processing/index_calculation.py:339:9     	ndvi    	U   	ndvi = self.NDVI()"
  - "digital_image_processing/index_calculation.py:565:18    	maxprec 	U   	floatmode='maxprec_equal'))"
  - "digital_image_processing/test_digital_image_processing.py:13:58     	conv	U   	filters import convolve as conv"
  - "DIRECTORY.md:29:19      	Setbits             	U   	* [Binary Count Setbits](https://github.com"
  - "DIRECTORY.md:45:15      	Cluskey             	U   	* [Quine Mc Cluskey](https://github.com"
  - "DIRECTORY.md:48:6       	Conways             	U   	* [Conways Game Of Life](https"
  - "DIRECTORY.md:55:6       	Atbash              	U   	* [Atbash](https://github.com"
  - "DIRECTORY.md:63:6       	Cryptomath          	U   	* [Cryptomath Module](https://github"
  - "DIRECTORY.md:68:6       	Elgamal             	U   	* [Elgamal Key Generator](https"
  - "DIRECTORY.md:74:6       	Onepad              	U   	* [Onepad Cipher](https://github"
  - "DIRECTORY.md:75:6       	Playfair            	U   	* [Playfair Cipher](https://github"
  - "DIRECTORY.md:76:6       	Porta               	U   	* [Porta Cipher](https://github"
  - "DIRECTORY.md:86:6       	Trafid              	U   	* [Trafid Cipher](https://github"
  - "DIRECTORY.md:89:6       	Vigenere            	U   	* [Vigenere Cipher](https://github"
  - "DIRECTORY.md:130:8      	Fenwick             	U   	* [Fenwick Tree](https://github"
  - "DIRECTORY.md:182:8      	Dijkstras           	U   	* [Dijkstras Two Stack Algorithm"
  - "DIRECTORY.md:209:8      	Sobel               	U   	* [Sobel Filter](https://github"
  - "DIRECTORY.md:228:10     	Subarray            	U   	* [Max Subarray Sum](https://github"
  - "DIRECTORY.md:229:6      	Mergesort           	U   	* [Mergesort](https://github.com"
  - "DIRECTORY.md:232:6      	Strassen            	U   	* [Strassen Matrix Multiplication"
  - "DIRECTORY.md:236:6      	Bitmask             	U   	* [Bitmask](https://github.com"
  - "DIRECTORY.md:243:12     	Warshall            	U   	* [Floyd Warshall](https://github.com"
  - "DIRECTORY.md:247:24     	Submasks            	U   	[Iterating Through Submasks](https://github.com"
  - "DIRECTORY.md:251:39     	Nlogn               	U   	Increasing Subsequence O(Nlogn)](https://github.com"
  - "DIRECTORY.md:292:6      	Bezier              	U   	* [Bezier Curve](https://github"
  - "DIRECTORY.md:304:6      	Boruvka             	U   	* [Boruvka](https://github.com"
  - "DIRECTORY.md:316:6      	Dinic               	U   	* [Dinic](https://github.com"
  - "DIRECTORY.md:318:6      	Edmonds             	U   	* [Edmonds Karp Multiple Source"
  - "DIRECTORY.md:318:14     	Karp                	U   	* [Edmonds Karp Multiple Source And"
  - "DIRECTORY.md:319:6      	Eulerian            	U   	* [Eulerian Path And Circuit For"
  - "DIRECTORY.md:324:11     	Shapley             	U   	* [Gale Shapley Bigraph](https://github"
  - "DIRECTORY.md:324:19     	Bigraph             	U   	* [Gale Shapley Bigraph](https://github.com"
  - "DIRECTORY.md:329:6      	Kahns               	U   	* [Kahns Algorithm Long](https"
  - "DIRECTORY.md:330:22     	Topo                	U   	* [Kahns Algorithm Topo](https://github.com"
  - "DIRECTORY.md:331:6      	Karger              	U   	* [Karger](https://github.com"
  - "DIRECTORY.md:334:28     	Kruskal             	U   	Minimum Spanning Tree Kruskal](https://github.com"
  - "DIRECTORY.md:338:22     	Astar               	U   	* [Multi Heuristic Astar](https://github.com"
  - "DIRECTORY.md:341:10     	Kosaraju            	U   	* [Scc Kosaraju](https://github.com"
  - "DIRECTORY.md:343:6      	Tarjans             	U   	* [Tarjans Scc](https://github"
  - "DIRECTORY.md:354:6      	Luhn                	U   	* [Luhn](https://github.com"
  - "DIRECTORY.md:356:6      	Sdbm                	U   	* [Sdbm](https://github.com"
  - "DIRECTORY.md:370:8      	Polynom             	U   	* [Polynom For Points](https:/"
  - "DIRECTORY.md:385:14     	Clust               	U   	* [K Means Clust](https://github.com"
  - "DIRECTORY.md:386:16     	Neighbours          	U   	* [K Nearest Neighbours](https://github.com"
  - "DIRECTORY.md:387:10     	Sklearn             	U   	* [Knn Sklearn](https://github.com"
  - "DIRECTORY.md:391:5      	Lstm                	U   	* Lstm"
  - "DIRECTORY.md:393:17     	Perceptron          	U   	* [Multilayer Perceptron Classifier](https:/"
  - "DIRECTORY.md:394:6      	Polymonial          	U   	* [Polymonial Regression](https:/"
  - "DIRECTORY.md:417:13     	Borwein             	U   	* [Bailey Borwein Plouffe](https://github"
  - "DIRECTORY.md:417:21     	Plouffe             	U   	* [Bailey Borwein Plouffe](https://github.com"
  - "DIRECTORY.md:427:6      	Chudnovsky          	U   	* [Chudnovsky Algorithm](https://github"
  - "DIRECTORY.md:428:6      	Collatz             	U   	* [Collatz Sequence](https://github"
  - "DIRECTORY.md:436:6      	Eulers              	U   	* [Eulers Totient](https://github"
  - "DIRECTORY.md:436:13     	Totient             	U   	* [Eulers Totient](https://github.com"
  - "DIRECTORY.md:455:12     	Ramanujanalgo       	U   	* [Hardy Ramanujanalgo](https://github.com"
  - "DIRECTORY.md:459:6      	Jaccard             	U   	* [Jaccard Similarity](https:/"
  - "DIRECTORY.md:460:6      	Kadanes             	U   	* [Kadanes](https://github.com"
  - "DIRECTORY.md:461:6      	Karatsuba           	U   	* [Karatsuba](https://github.com"
  - "DIRECTORY.md:462:6      	Krishnamurthy       	U   	* [Krishnamurthy Number](https://github"
  - "DIRECTORY.md:468:12     	Lehmer              	U   	* [Lucas Lehmer Primality Test](https"
  - "DIRECTORY.md:474:6      	Mobius              	U   	* [Mobius Function](https://github"
  - "DIRECTORY.md:491:6      	Primelib            	U   	* [Primelib](https://github.com"
  - "DIRECTORY.md:497:6      	Relu                	U   	* [Relu](https://github.com"
  - "DIRECTORY.md:498:6      	Runge               	U   	* [Runge Kutta](https://github"
  - "DIRECTORY.md:498:12     	Kutta               	U   	* [Runge Kutta](https://github.com"
  - "DIRECTORY.md:509:6      	Softmax             	U   	* [Softmax](https://github.com"
  - "DIRECTORY.md:521:6      	Zellers             	U   	* [Zellers Congruence](https:/"
  - "DIRECTORY.md:537:11     	Fulkerson           	U   	* [Ford Fulkerson](https://github.com"
  - "DIRECTORY.md:549:6      	Davisb              	U   	* [Davisb Putnamb Logemannb Loveland"
  - "DIRECTORY.md:549:13     	Putnamb             	U   	* [Davisb Putnamb Logemannb Loveland]"
  - "DIRECTORY.md:549:21     	Logemannb           	U   	* [Davisb Putnamb Logemannb Loveland](https://github"
  - "DIRECTORY.md:549:31     	Loveland            	U   	Davisb Putnamb Logemannb Loveland](https://github.com"
  - "DIRECTORY.md:558:13     	Congruential        	U   	* [Linear Congruential Generator](https://github"
  - "DIRECTORY.md:560:6      	Magicdiamondpattern 	U   	* [Magicdiamondpattern](https://github.com"
  - "DIRECTORY.md:564:6      	Sdes                	U   	* [Sdes](https://github.com"
  - "DIRECTORY.md:824:6      	Deutsch             	U   	* [Deutsch Jozsa](https://github"
  - "DIRECTORY.md:824:14     	Jozsa               	U   	* [Deutsch Jozsa](https://github.com"
  - "DIRECTORY.md:829:13     	Qubit               	U   	* [Single Qubit Measure](https://github"
  - "DIRECTORY.md:855:6      	Bitonic             	U   	* [Bitonic Sort](https://github"
  - "DIRECTORY.md:856:6      	Bogo                	U   	* [Bogo Sort](https://github"
  - "DIRECTORY.md:894:6      	Slowsort            	U   	* [Slowsort](https://github.com"
  - "DIRECTORY.md:904:10     	Corasick            	U   	* [Aho Corasick](https://github.com"
  - "DIRECTORY.md:912:12     	Pangram             	U   	* [Check Pangram](https://github.com"
  - "DIRECTORY.md:917:6      	Jaro                	U   	* [Jaro Winkler](https://github"
  - "DIRECTORY.md:917:11     	Winkler             	U   	* [Jaro Winkler](https://github.com"
  - "DIRECTORY.md:921:6      	Manacher            	U   	* [Manacher](https://github.com"
  - "DIRECTORY.md:950:10     	Imdb                	U   	* [Get Imdb Top 250 Movies Csv]"
  - "DIRECTORY.md:951:10     	Imdbtop             	U   	* [Get Imdbtop](https://github.com"
  - "DIRECTORY.md:956:6      	Recaptcha           	U   	* [Recaptcha Verification](https"
  - "divide_and_conquer/closest_pair_of_points.py:5:36       	ords    	U   	sorted based on Xco-ords and"
  - "divide_and_conquer/closest_pair_of_points.py:112:44     	Xcoords 	U   	contains the points, whose Xcoords are at a"
  - "divide_and_conquer/closest_pair_of_points.py:113:45     	Xcoord  	U   	pair_dis) from mid's Xcoord"
  - "divide_and_conquer/convex_hull.py:409:17    	melkman 	U   	def convex_hull_melkman(points: list[Point]"
  - "divide_and_conquer/inversions.py:9:25       	nlogn   	U   	algorithm which runs in nlogn and the brute-force"
  - "divide_and_conquer/strassen_matrix_multiplication.py:75:12      	strassen	U   	def actual_strassen(matrix_a: list, matrix"
  - "dynamic_programming/catalan_numbers.py:7:20     	Dyck	U   	* - The number of Dyck words of length 2n"
  - "dynamic_programming/climbing_stairs.py:6:9      	Cdoe	U   	LeetCdoe No.70: Climbing Stairs"
  - "dynamic_programming/edit_distance.py:2:11       	Turfa       	U   	Author : Turfa Auliarachman"
  - "dynamic_programming/edit_distance.py:2:17       	Auliarachman	U   	Author : Turfa Auliarachman"
  - "dynamic_programming/iterating_through_submasks.py:2:15      	Faizan  	U   	Author : Syed Faizan (3rd Year Student IIIT"
  - "dynamic_programming/iterating_through_submasks.py:2:40      	IIIT    	U   	Faizan (3rd Year Student IIIT Pune)"
  - "dynamic_programming/iterating_through_submasks.py:3:10      	faizan  	U   	github : faizan2700"
  - "dynamic_programming/longest_common_subsequence.py:74:10     	AGGTAB  	U   	a = \"AGGTAB\""
  - "dynamic_programming/longest_common_subsequence.py:75:10     	GXTXAYB 	U   	b = \"GXTXAYB\""
  - "dynamic_programming/longest_common_subsequence.py:77:24     	GTAB    	U   	expected_subseq = \"GTAB\""
  - "dynamic_programming/longest_increasing_subsequence_o%28nlogn%29.py:2:11     	Aravind 	U   	# Author: Aravind Kashyap"
  - "dynamic_programming/longest_increasing_subsequence_o%28nlogn%29.py:2:19     	Kashyap 	U   	# Author: Aravind Kashyap"
  - "dynamic_programming/longest_increasing_subsequence.py:2:11      	Mehdi   	U   	Author : Mehdi ALAOUI"
  - "dynamic_programming/max_sub_array.py:2:10       	Mayank  	U   	author : Mayank Kumar Jha (mk9440)"
  - "dynamic_programming/max_sub_array.py:84:9       	strt    	U   	strt = time.time()"
  - "dynamic_programming/max_sub_array.py:92:9       	xlabel  	U   	plt.xlabel(\"Number of Inputs\")"
  - "dynamic_programming/max_sub_array.py:93:9       	ylabel  	U   	plt.ylabel(\"Time taken in seconds"
  - "dynamic_programming/optimal_binary_search_tree.py:72:22     	CLRS    	U   	Implemented from CLRS (Introduction to Algorithms"
  - "dynamic_programming/optimal_binary_search_tree.py:100:5     	freqs   	U   	freqs = [nodes[i].freq for"
  - "dynamic_programming/subset_generation.py:43:31      	Ambuj   	U   	code is contributed by Ambuj sahu"
  - "dynamic_programming/subset_generation.py:43:37      	sahu    	U   	contributed by Ambuj sahu"
  - "electronics/electric_power.py:28:38     	modulei 	U   	stdin>\", line 23, in <modulei"
  - "file_transfer/send_file.py:1:32     	mytext  	U   	file(filename: str = \"mytext.txt\", testing: bool"
  - "file_transfer/tests/test_send_file.py:18:13     	ensurance   	U   	# ===== ensurance ====="
  - "fractals/mandelbrot.py:19:8     	colorsys	U   	import colorsys"
  - "fractals/sierpinski_triangle.py:3:58    	anuragkumarak   	U   	uragkumarak95@gmail.com | git/anuragkumarak95"
  - "fractals/sierpinski_triangle.py:14:15   	Wacław          	U   	mathematician Wacław Sierpinski, but appeared"
  - "fuzzy_logic/fuzzy_operations.py:1:21    	Jigyasa 	U   	\"\"\"README, Author - Jigyasa Gandhi(mailto:jigsgandhi"
  - "fuzzy_logic/fuzzy_operations.py:10:8    	skfuzzy 	U   	import skfuzzy as fuzz"
  - "fuzzy_logic/fuzzy_operations.py:17:8    	trapmf  	U   	# (trapmf(), gbellmf(), gaussmf"
  - "fuzzy_logic/fuzzy_operations.py:17:18   	gbellmf 	U   	# (trapmf(), gbellmf(), gaussmf(), etc)."
  - "fuzzy_logic/fuzzy_operations.py:17:29   	gaussmf 	U   	trapmf(), gbellmf(), gaussmf(), etc)."
  - "fuzzy_logic/fuzzy_operations.py:20:29   	trimf   	U   	young = fuzz.membership.trimf(X, abc1)"
  - "fuzzy_logic/fuzzy_operations.py:101:25  	hspace  	U   	plt.subplots_adjust(hspace=0.5)"
  - "genetic_algorithm/basic_string.py:5:11      	rkia                        	U   	Author: D4rkia"
  - "genetic_algorithm/basic_string.py:77:27     	Helxo                       	U   	>>> evaluate(\"Helxo Worlx\", Hello World"
  - "genetic_algorithm/basic_string.py:77:33     	Worlx                       	U   	>>> evaluate(\"Helxo Worlx\", Hello World)"
  - "genetic_algorithm/basic_string.py:169:11    	ABCDEFGHIJKLMNOPQRSTUVWXY   	U   	\" ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm\""
  - "genetic_algorithm/basic_string.py:169:36    	Zabcdefghijklm              	U   	ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm\""
  - "genetic_algorithm/basic_string.py:170:10    	nopqrstuvwxyz               	U   	\"nopqrstuvwxyz.,;!?+-*#@^'èéòà€ù=)"
  - "genetic_algorithm/basic_string.py:170:35    	èéòà                        	U   	nopqrstuvwxyz.,;!?+-*#@^'èéòà€ù=)(&%$£/\\\\\""
  - "geodesy/lamberts_ellipsoidal_distance.py:69:39      	Pcos        	U   	sin(sigma)) * sin^2Pcos^2Q / cos^2(sigma/2)"
  - "geodesy/lamberts_ellipsoidal_distance.py:71:7       	demonimator 	U   	X_demonimator = cos(sigma / 2) **"
  - "geodesy/lamberts_ellipsoidal_distance.py:75:39      	Psin        	U   	sin(sigma)) * cos^2Psin^2Q / sin^2(sigma/2)"
  - "graphics/bezier_curve.py:5:6        	scipy   	U   	from scipy.special import comb"
  - "graphics/bezier_curve.py:49:9       	bezier  	U   	def bezier_curve_function(self"
  - "graphics/vector3_for_2d_rendering.py:10:15      	xcodz       	U   	__author__ = \"xcodz-dot, cclaus, dhruvmanila"
  - "graphics/vector3_for_2d_rendering.py:10:26      	cclaus      	U   	author__ = \"xcodz-dot, cclaus, dhruvmanila\""
  - "graphics/vector3_for_2d_rendering.py:10:34      	dhruvmanila 	U   	\"xcodz-dot, cclaus, dhruvmanila\""
  - "graphs/basic_graphs.py:130:5    	dijk        	U   	def dijk(G, s):"
  - "graphs/basic_graphs.py:158:5    	topo        	U   	def topo(G, ind=None, Q=None"
  - "graphs/basic_graphs.py:188:5    	adjm        	U   	def adjm():"
  - "graphs/basic_graphs.py:209:5    	floy        	U   	def floy(A_and_n):"
  - "graphs/basic_graphs.py:264:5    	edglist     	U   	def edglist():"
  - "graphs/basic_graphs.py:274:5    	Kruskal's   	U   	Kruskal's MST Algorithm"
  - "graphs/basic_graphs.py:282:5    	krusk       	U   	def krusk(E_and_n):"
  - "graphs/bidirectional_a_star.py:79:9     	astar   	U   	>>> astar = AStar((0, 0), (len"
  - "graphs/bidirectional_a_star.py:256:5    	bidir   	U   	bidir_astar = BidirectionalAStar"
  - "graphs/boruvka.py:1:4       	Borůvka's   	U   	\"\"\"Borůvka's algorithm."
  - "graphs/boruvka.py:79:9      	boruvka     	U   	def boruvka(self) -> None:"
  - "graphs/breadth_first_search.py:3:13     	OMKAR   	U   	\"\"\" Author: OMKAR PATHAK \"\"\""
  - "graphs/breadth_first_search.py:3:19     	PATHAK  	U   	\"\"\" Author: OMKAR PATHAK \"\"\""
  - "graphs/breadth_first_search.py:13:49    	graaph  	U   	list representation of graaph"
  - "graphs/connected_components.py:24:15    	verts   	U   	connected_verts = []"
  - "graphs/dijkstra_2.py:11:13      	mdist   	U   	def minDist(mdist, vset, V):"
  - "graphs/dijkstra_2.py:11:20      	vset    	U   	def minDist(mdist, vset, V):"
  - "graphs/dijkstra_2.py:57:5       	gsrc    	U   	gsrc = int(input(\"\\nEnter"
  - "graphs/dijkstra_algorithm.py:2:11       	Shubham 	U   	# Author: Shubham Malik"
  - "graphs/dijkstra_algorithm.py:2:19       	Malik   	U   	# Author: Shubham Malik"
  - "graphs/dijkstra_algorithm.py:73:33      	atmost  	U   	assuming the new_d is atmost old_d"
  - "graphs/dijkstra.py:27:41    	heapq   	U   	that happens because heapq.heappop will always"
  - "graphs/dinic.py:17:33   	rcap    	U   	edge(self, a, b, c, rcap=0):"
  - "graphs/dinic.py:87:20   	verices 	U   	Finally we add the verices near the sink to the"
  - "graphs/g_topological_sort.py:1:11       	Phyllipe	U   	# Author: Phyllipe Bezerra (https://github"
  - "graphs/g_topological_sort.py:1:20       	Bezerra 	U   	# Author: Phyllipe Bezerra (https://github.com"
  - "graphs/gale_shapley_bigraph.py:10:5     	oegan       	U   	oegan donors and recipients"
  - "graphs/gale_shapley_bigraph.py:16:56    	Numberphile 	U   	v=Qcv1IqHWAzg&t=13s (Numberphile YouTube)."
  - "graphs/graph_list.py:3:25       	Nwachukwu   	U   	Author: OMKAR PATHAK, Nwachukwu Chidiebere"
  - "graphs/graph_list.py:3:35       	Chidiebere  	U   	OMKAR PATHAK, Nwachukwu Chidiebere"
  - "graphs/kahns_algorithm_long.py:3:5      	indegree	U   	indegree = [0] * len(graph)"
  - "graphs/karger.py:2:22       	Karger's	U   	An implementation of Karger's Algorithm for partitioning"
  - "graphs/karger.py:34:40      	adacency	U   	dictionary containing adacency lists for the graph"
  - "graphs/minimum_spanning_tree_boruvka.py:38:13   	Boruvks's   	U   	For Boruvks's algorithm the weights"
  - "graphs/minimum_spanning_tree_boruvka.py:71:9    	Returna     	U   	Returna all edges in the graph"
  - "graphs/minimum_spanning_tree_boruvka.py:104:41  	Boruvka's   	U   	set Union and Find for Boruvka's algorithm"
  - "graphs/minimum_spanning_tree_kruskal.py:1:5     	kruskal 	U   	def kruskal("
  - "graphs/minimum_spanning_tree_kruskal2.py:51:49      	neighbouring	U   	from the node to the neighbouring nodes (with weights"
  - "graphs/minimum_spanning_tree_prims2.py:2:23     	Jarník's	U   	Prim's (also known as Jarník's) algorithm is a greedy"
  - "graphs/minimum_spanning_tree_prims2.py:221:11   	algo    	U   	def prims_algo("
  - "graphs/multi_heuristic_astar.py:46:18   	prito   	U   	for (prito, yyy) in temp:"
  - "graphs/multi_heuristic_astar.py:136:16  	inad    	U   	close_list_inad,"
  - "graphs/multi_heuristic_astar.py:140:9   	itera   	U   	for itera in range(n_heuristic"
  - "graphs/scc_kosaraju.py:24:5     	kosaraju	U   	def kosaraju():"
  - "graphs/strongly_connected_components.py:41:36   	strongliy   	U   	first search to find strongliy connected"
  - "graphs/tarjans_scc.py:16:42     	equireachable   	U   	we save it and it's equireachable vertices as a strongly"
  - "graphs/tests/test_min_spanning_tree_prim.py:25:5    	adjancency  	U   	adjancency = defaultdict(list)"
  - "hashes/chaos_machine.py:45:7    	PRNG        	U   	# PRNG (Xorshift by George"
  - "hashes/chaos_machine.py:45:32   	Marsaglia   	U   	(Xorshift by George Marsaglia)"
  - "hashes/hamming_code.py:1:44     	Kunz    	U   	A. Amorim & Gabriel Kunz"
  - "hashes/hamming_code.py:24:67    	Pari    	U   	many parity bits (sizePari)"
  - "hashes/hamming_code.py:272:5    	Receiv  	U   	dataReceiv, ack = receptorConverter"
  - "hashes/luhn.py:5:8      	luhn	U   	def is_luhn(string: str) -> bool"
  - "hashes/md5.py:16:30     	abcdfghijklmnopqrstuvw  	U   	rearrange('1234567890abcdfghijklmnopqrstuvw')"
  - "hashes/md5.py:17:6      	pqrstuvwhijklmno        	U   	'pqrstuvwhijklmno90abcdfg12345678'"
  - "hashes/md5.py:17:24     	abcdfg                  	U   	'pqrstuvwhijklmno90abcdfg12345678'"
  - "hashes/md5.py:117:5     	tvals                   	U   	tvals = [int(2 ** 32 * abs"
  - "hashes/md5.py:211:13    	dtemp                   	U   	dtemp = D"
  - "hashes/sdbm.py:2:36     	sdbm            	U   	algorithm was created for sdbm (a public-domain reimplementa"
  - "hashes/sdbm.py:2:58     	reimplementation	U   	sdbm (a public-domain reimplementation of ndbm)"
  - "hashes/sdbm.py:2:78     	ndbm            	U   	reimplementation of ndbm)"
  - "hashes/sha1.py:28:8     	struct      	U   	import struct"
  - "hashes/sha1.py:41:9     	Inititates  	U   	Inititates the variables data and"
  - "knapsack/README.md:13:190   	Dantzig     	U   	mathematician Tobias Dantzig (1884–1956), and refers"
  - "knapsack/README.md:20:70    	CLASSNAME   	U   	unitBasisVector)`, and `help(CLASSNAME.METHODNAME)`."
  - "knapsack/README.md:20:80    	METHODNAME  	U   	and `help(CLASSNAME.METHODNAME)`."
  - "knapsack/tests/test_knapsack.py:4:21    	Schröder	U   	@author: Dr. Tobias Schröder"
  - "linear_algebra/README.md:20:36      	eulidean	U   	euclidLength() : returns the eulidean length of the vector"
  - "linear_algebra/README.md:31:12      	axpy    	U   	- function axpy(scalar,vector1,vector"
  - "linear_algebra/README.md:69:48      	bytecode	U   	directly use the Python bytecode file `lib.pyc`."
  - "linear_algebra/src/conjugate_gradient.py:39:27      	eignevectors	U   	Get eigenvalues and eignevectors for a symmetric matrix"
  - "linear_algebra/src/conjugate_gradient.py:40:5       	eigen       	U   	eigen_values, _ = np.linalg"
  - "linear_algebra/src/conjugate_gradient.py:40:33      	eigh        	U   	values, _ = np.linalg.eigh(matrix)"
  - "linear_algebra/src/conjugate_gradient.py:63:31      	randn       	U   	random_matrix = np.random.randn(dimension, dimension"
  - "linear_algebra/src/conjugate_gradient.py:130:25     	Krylov      	U   	# Calculate new Krylov subspace scale."
  - "linear_algebra/src/conjugate_gradient.py:132:27     	conjuage    	U   	# Calculate new A conjuage search direction."
  - "linear_algebra/src/lib.py:95:9      	summe   	U   	summe: float = 0"
  - "linear_algebra/src/polynom_for_points.py:77:13      	zahlen  	U   	zahlen = 0"
  - "linear_algebra/src/power_iteration.py:12:22     	eignevalue  	U   	Find the largest eignevalue and corresponding eigenvector"
  - "linear_algebra/src/power_iteration.py:49:5      	lamda       	U   	lamda_previous = 0"
  - "machine_learning/astar.py:19:52     	tupleof     	U   	the represented by tupleof x and y"
  - "machine_learning/astar.py:63:13     	neigbours   	U   	def get_neigbours(self, cell):"
  - "machine_learning/astar.py:67:9      	neughbour   	U   	neughbour_cord = ["
  - "machine_learning/data_transformations.py:26:30      	stdev   	U   	statistics import mean, stdev"
  - "machine_learning/decision_tree.py:39:19     	ndim    	U   	if labels.ndim != 1:"
  - "machine_learning/decision_tree.py:162:12    	arange  	U   	X = np.arange(-1.0, 1.0, 0.005)"
  - "machine_learning/decision_tree.py:181:32    	squarred	U   	doctest.testmod(name=\"mean_squarred_error\", verbose=True"
  - "machine_learning/forecasting/run.py:16:6    	sklearn     	U   	from sklearn.preprocessing import"
  - "machine_learning/forecasting/run.py:22:44   	mtch        	U   	train_usr: list, train_mtch: list, test_dt: list"
  - "machine_learning/forecasting/run.py:43:45   	exog        	U   	data (total_user, with exog data = total_event)"
  - "machine_learning/forecasting/run.py:53:27   	disp        	U   	model_fit = model.fit(disp=False, maxiter=600,"
  - "machine_learning/forecasting/run.py:137:14  	reression   	U   	# for linear reression & sarimax"
  - "machine_learning/gradient_boosting_regressor.py:29:19   	iloc	U   	X = df_boston.iloc[:, :-1]"
  - "machine_learning/gradient_descent.py:119:13     	atol	U   	atol=absolute_error_limit"
  - "machine_learning/gradient_descent.py:120:13     	rtol	U   	rtol=relative_error_limit"
  - "machine_learning/k_means_clust.py:14:57     	hetrogeneity	U   	will be filled with hetrogeneity values if passed"
  - "machine_learning/k_means_clust.py:15:8      	kmeans      	U   	to kmeans func."
  - "machine_learning/k_means_clust.py:52:16     	CLUST       	U   	TAG = \"K-MEANS-CLUST/ \""
  - "machine_learning/k_means_clust.py:237:12    	fillna      	U   	df.fillna(value=FillMissingReport"
  - "machine_learning/k_means_clust.py:239:30    	dtypes      	U   	numeric_cols = df.select_dtypes(np.number).columns"
  - "machine_learning/k_means_clust.py:317:29    	clustert    	U   	concat report with clustert size and nan values"
  - "machine_learning/k_means_clust.py:318:41    	isin        	U   	report[\"Features\"].isin(ClusteringVariables"
  - "machine_learning/linear_regression.py:7:56      	CSGO	U   	particular code, I had used a CSGO dataset (ADR vs"
  - "machine_learning/logistic_regression.py:14:1    	Coursera	U   	Coursera ML course"
  - "machine_learning/logistic_regression.py:21:7    	ipython 	U   	# get_ipython().run_line_magic('matplotlib"
  - "machine_learning/logistic_regression.py:83:5    	probs   	U   	probs = predict_prob(grid"
  - "machine_learning/lstm/lstm_prediction.py:2:38       	LSTM	U   	Long Short Term Memory (LSTM) network model"
  - "machine_learning/multilayer_perceptron_classifier.py:8:13       	lbfgs   	U   	solver=\"lbfgs\", alpha=1e-5, hidden"
  - "machine_learning/polymonial_regression.py:30:9      	polymonial  	U   	def viz_polymonial():"
  - "machine_learning/scoring_functions.py:4:15      	RMSE        	U   	MAE, MSE, RMSE, RMSLE are included"
  - "machine_learning/scoring_functions.py:4:21      	RMSLE       	U   	MAE, MSE, RMSE, RMSLE are included."
  - "machine_learning/scoring_functions.py:62:5      	rmse        	U   	def rmse(predict, actual):"
  - "machine_learning/scoring_functions.py:84:5      	rmsle       	U   	def rmsle(predict, actual):"
  - "machine_learning/scoring_functions.py:133:5     	denumerator 	U   	denumerator = np.sum(actual) / len"
  - "machine_learning/sequential_minimum_optimization.py:21:51   	coef        	U   	kernel='poly', degree=3., coef0=1., gamma=0.5)"
  - "machine_learning/sequential_minimum_optimization.py:47:30   	wdbc        	U   	breast-cancer-wisconsin/wdbc.data\""
  - "machine_learning/sequential_minimum_optimization.py:229:9   	locis       	U   	locis = yield from self._choose"
  - "machine_learning/sequential_minimum_optimization.py:239:16  	voilate     	U   	voilate kkt condition."
  - "machine_learning/sequential_minimum_optimization.py:382:7   	Normalise   	U   	# Normalise data using min_max way"
  - "machine_learning/sequential_minimum_optimization.py:470:62  	MSIE        	U   	Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)\"},"
  - "machine_learning/sequential_minimum_optimization.py:481:17  	dropna      	U   	data = data.dropna(axis=0)"
  - "machine_learning/sequential_minimum_optimization.py:490:5   	mykernel    	U   	mykernel = Kernel(kernel=\"rbf"
  - "machine_learning/sequential_minimum_optimization.py:494:5   	mysvm       	U   	mysvm = SmoSVM("
  - "machine_learning/sequential_minimum_optimization.py:544:21  	hstack      	U   	train_data = np.hstack((train_y.reshape(50"
  - "machine_learning/sequential_minimum_optimization.py:582:78  	desity      	U   	distributed points with high desity and"
  - "machine_learning/sequential_minimum_optimization.py:591:5   	yrange      	U   	yrange = np.linspace(train"
  - "machine_learning/support_vector_machines.py:6:55    	SVM's       	U   	plementing different types of SVM's"
  - "machine_learning/support_vector_machines.py:13:5    	Linearsvc   	U   	def Linearsvc(train_x, train_y):"
  - "machine_learning/support_vector_machines.py:36:6    	virginica   	U   	'virginica'"
  - "maths/bailey_borwein_plouffe.py:1:12    	borwein 	U   	def bailey_borwein_plouffe(digit_position"
  - "maths/bailey_borwein_plouffe.py:1:20    	plouffe 	U   	def bailey_borwein_plouffe(digit_position: int"
  - "maths/binary_exponentiation_2.py:9:11       	chinmoy 	U   	* @author chinmoy159"
  - "maths/binary_exponentiation.py:3:12     	Junth   	U   	# Author : Junth Basnet"
  - "maths/chudnovsky_algorithm.py:12:28     	multinomial 	U   	= constant_term / ((multinomial_term * linear_term)"
  - "maths/chudnovsky_algorithm.py:44:18     	prec        	U   	getcontext().prec = precision"
  - "maths/collatz_sequence.py:4:5       	collatz 	U   	def collatz_sequence(n: int) ->"
  - "maths/entropy.py:27:27      	telescreen      	U   	. \"from the telescreen was still \""
  - "maths/entropy.py:28:35      	overfulfilment  	U   	\"babbling and the overfulfilment\")"
  - "maths/euclidean_distance.py:24:31   	asarray 	U   	return np.sqrt(np.sum((np.asarray(vector_1) - np.asarray"
  - "maths/euclidean_gcd.py:20:26    	euclicedan  	U   	Recursive method for euclicedan gcd algorithm"
  - "maths/eulers_totient.py:2:5     	totient 	U   	def totient(n: int) -> list:"
  - "maths/eulers_totient.py:4:5     	totients	U   	totients = [i - 1 for i in range"
  - "maths/extended_euclidean_algorithm.py:5:41      	Bezout's	U   	bn = gcd(m, n) (a.k.a Bezout's Identity)"
  - "maths/extended_euclidean_algorithm.py:10:15     	Sharma  	U   	# @Author: S. Sharma <silentcat>"
  - "maths/extended_euclidean_algorithm.py:13:24     	pikulet 	U   	Last modified by: pikulet"
  - "maths/extended_euclidean_algorithm.py:56:9      	coeff   	U   	old_coeff_a, coeff_a = 1, 0"
  - "maths/fibonacci_sequence_recursion.py:4:11      	fibo	U   	def recur_fibo(n: int) -> int:"
  - "maths/fibonacci.py:6:12     	Phin	U   	an = [ Phin - (phi)n ]/Sqrt[5]"
  - "maths/integration_by_simpson_approx.py:29:19    	fxdx        	U   	1. integration of fxdx with limit a to b is"
  - "maths/integration_by_simpson_approx.py:43:28    	integraion  	U   	b : upper limit of integraion"
  - "maths/is_square_free.py:18:26   	repition	U   	it simply checks for repition in the numbers."
  - "maths/jaccard_similarity.py:8:38    	MMDS        	U   	of Massive Datasets [MMDS 2nd Edition, Chapter"
  - "maths/jaccard_similarity.py:17:5    	jaccard     	U   	def jaccard_similariy(setA, setB"
  - "maths/jaccard_similarity.py:17:13   	similariy   	U   	def jaccard_similariy(setA, setB, alternativeUnion"
  - "maths/kadanes.py:2:1        	Kadane's    	U   	Kadane's algorithm to get maximum"
  - "maths/kadanes.py:26:5       	kadanes     	U   	def kadanes(arr: list) -> int:"
  - "maths/kadanes.py:61:37      	sepatated   	U   	Enter integer values sepatated by spaces\")"
  - "maths/krishnamurthy_number.py:26:5      	krishnamurthy   	U   	def krishnamurthy(number: int) -> bool"
  - "maths/krishnamurthy_number.py:45:51     	Krisnamurthy    	U   	whether a number is a Krisnamurthy Number or not.\")"
  - "maths/largest_of_very_large_numbers.py:1:11     	Abhijeeth   	U   	# Author: Abhijeeth S"
  - "maths/least_common_multiple.py:17:12    	mult	U   	common_mult = max_num"
  - "maths/lucas_lehmer_primality_test.py:2:58       	primality   	U   	Lehmer test (LLT) is a primality test for Mersenne"
  - "maths/lucas_lehmer_primality_test.py:2:77       	Mersenne    	U   	a primality test for Mersenne"
  - "maths/lucas_lehmer_primality_test.py:16:11      	lehmer      	U   	def lucas_lehmer_test(p: int) -> bool"
  - "maths/mobius_function.py:12:5       	mobius  	U   	def mobius(n: int) -> int:"
  - "maths/monte_carlo.py:2:10       	Matteo  	U   	@author: MatteoRaso"
  - "maths/monte_carlo.py:2:16       	Raso    	U   	@author: MatteoRaso"
  - "maths/primelib.py:84:14     	erathostenes	U   	sieve of erathostenes."
  - "maths/primelib.py:540:74    	Divisiors   	U   	Error in function getDivisiors(...)\""
  - "maths/qr_decomposition.py:21:18     	BLAS	U   	version from BLAS should be used."
  - "maths/qr_decomposition.py:37:24     	triu	U   	>>> np.allclose(np.triu(R), R)"
  - "maths/quadratic_equations_complex_numbers.py:3:6        	cmath   	U   	from cmath import sqrt"
  - "maths/quadratic_equations_complex_numbers.py:27:35      	imag    	U   	.real if not root_1.imag else root_1,"
  - "maths/radix2_fft.py:5:8     	mpmath  	U   	import mpmath # for roots of unity"
  - "maths/radix2_fft.py:91:14   	ncol    	U   	next_ncol = self.C_max_length"
  - "maths/runge_kutta.py:4:5        	runge   	U   	def runge_kutta(f, y0, x0, h,"
  - "maths/runge_kutta.py:4:11       	kutta   	U   	def runge_kutta(f, y0, x0, h, x_end"
  - "maths/sieve_of_eratosthenes.py:10:25    	Simas   	U   	doctest provider: Bruno Simas Hadlich (https://github"
  - "maths/sieve_of_eratosthenes.py:10:31    	Hadlich 	U   	provider: Bruno Simas Hadlich (https://github.com"
  - "maths/sieve_of_eratosthenes.py:11:16    	Dmitry  	U   	Also thanks to Dmitry (https://github.com"
  - "maths/softmax.py:6:8        	exponentials	U   	to the exponentials of the input numbers"
  - "maths/square_root.py:25:20      	aproximated 	U   	Square root is aproximated using Newtons method"
  - "maths/two_sum.py:36:9       	compl   	U   	compl = target - val"
  - "maths/zellers_congruence.py:5:5     	zeller  	U   	def zeller(date_input: str) ->"
  - "matrix/matrix_class.py:37:23    	Cofactors   	U   	Identity, Minors, Cofactors and Adjugate are returned"
  - "matrix/matrix_class.py:37:37    	Adjugate    	U   	Minors, Cofactors and Adjugate are returned as Matrices"
  - "matrix/matrix_class.py:47:22    	cofactors   	U   	>>> print(matrix.cofactors())"
  - "matrix/matrix_class.py:51:55    	cofactor    	U   	to the nature of the cofactor matrix"
  - "matrix/matrix_class.py:52:22    	adjugate    	U   	>>> print(matrix.adjugate())"
  - "matrix/sherman_morrison.py:216:13   	ainv	U   	>>> ainv = Matrix(3, 3, 0)"
  - "matrix/spiral_print.py:42:11    	horizotal   	U   	# horizotal printing increasing"
  - "matrix/tests/test_matrix_operation.py:18:40     	matop   	U   	matrix_operation as matop"
  - "matrix/tests/test_matrix_operation.py:46:9      	theo    	U   	theo = matop.add(mat1, mat"
  - "neural_network/2_hidden_layers_neural_network.py:101:9      	Updation	U   	Updation is done using derivative"
  - "neural_network/2_hidden_layers_neural_network.py:101:46     	sogmoid 	U   	using derivative of sogmoid activation function"
  - "neural_network/back_propagation_neural_network.py:53:26     	asmatrix	U   	self.weight = np.asmatrix(np.random.normal(0,"
  - "neural_network/back_propagation_neural_network.py:67:35     	xdata   	U   	forward_propagation(self, xdata):"
  - "neural_network/back_propagation_neural_network.py:97:7      	BPNN    	U   	class BPNN:"
  - "neural_network/back_propagation_neural_network.py:124:28    	ydata   	U   	def train(self, xdata, ydata, train_round, accuracy"
  - "neural_network/back_propagation_neural_network.py:128:22    	hlines  	U   	self.ax_loss.hlines(self.accuracy, 0, self"
  - "neural_network/convolution_neural_network.py:42:19      	thre        	U   	self.rate_thre = rate_t"
  - "neural_network/convolution_neural_network.py:107:31     	convs       	U   	convolute(self, data, convs, w_convs, thre_convs"
  - "neural_network/convolution_neural_network.py:211:25     	datas       	U   	self, patterns, datas_train, datas_teach,"
  - "neural_network/convolution_neural_network.py:227:35     	conved      	U   	data_focus1, data_conved1 = self.convolute("
  - "neural_network/convolution_neural_network.py:297:13     	yplot       	U   	yplot = [error_accuracy for"
  - "neural_network/convolution_neural_network.py:305:43     	Complished  	U   	-----------Training Complished--------------------"
  - "other/davisb_putnamb_logemannb_loveland.py:4:33     	DPLL            	U   	Putnam–Logemann–Loveland (DPLL) algorithm is a complete"
  - "other/davisb_putnamb_logemannb_loveland.py:5:35     	satisfiability  	U   	algorithm for deciding the satisfiability of propositional logic"
  - "other/davisb_putnamb_logemannb_loveland.py:6:73     	Tisfiability    	U   	Conjunctive Normal Form SATisfiability"
  - "other/davisb_putnamb_logemannb_loveland.py:152:21   	uncomplemented  	U   	A symbol is the uncomplemented form of a literal."
  - "other/davisb_putnamb_logemannb_loveland.py:257:13   	Fcount          	U   	Fcount, Ncount = 0, 0"
  - "other/davisb_putnamb_logemannb_loveland.py:257:21   	Ncount          	U   	Fcount, Ncount = 0, 0"
  - "other/davisb_putnamb_logemannb_loveland.py:275:5    	dpll            	U   	def dpll_algorithm("
  - "other/dijkstra_bankers_algorithm.py:4:13    	Biney   	U   	# \"Author: \"Biney Kingsley (bluedistro"
  - "other/dijkstra_bankers_algorithm.py:80:27   	alloc   	U   	max_claim[i][j] - alloc_table[i][j] <= avail"
  - "other/doomsday.py:42:5      	centurian   	U   	centurian = year % 100"
  - "other/gauss_easter.py:24:5      	metonic 	U   	metonic_cycle = year % 19"
  - "other/graham_scan.py:43:5       	minidx      	U   	minidx = 0"
  - "other/graham_scan.py:44:5       	miny        	U   	miny, minx = maxsize, maxsize"
  - "other/graham_scan.py:86:22      	insteadly   	U   	# and you should insteadly add (minx, miny) into"
  - "other/graham_scan.py:166:54     	straigh     	U   	previous points on those straigh line is not convex hull"
  - "other/greedy.py:45:18   	Sambhar 	U   	... \"Sambhar\", \"Chicken\", \"Fries"
  - "other/linear_congruential_generator.py:13:27    	accptable   	U   	in this case, it is accptable because `LinearCongruentialGe"
  - "other/password_generator.py:24:3    	ctbi        	U   	# ctbi= characters that must"
  - "other/password_generator.py:45:19   	generalised 	U   	# random is a generalised function for letters"
  - "other/scoring_algorithm.py:2:15     	markmelnic  	U   	developed by: markmelnic"
  - "other/scoring_algorithm.py:5:34     	percentual  	U   	using a range based percentual proximity algorithm"
  - "other/scoring_algorithm.py:24:5     	procentual  	U   	>>> procentual_proximity([[20, 60,"
  - "other/scoring_algorithm.py:51:9     	dlist       	U   	for dlist, weight in zip(data"
  - "other/scoring_algorithm.py:53:9     	maxd        	U   	maxd = max(dlist)"
  - "other/scoring_algorithm.py:81:12    	slist       	U   	for i, slist in enumerate(score_lists"
  - "other/sdes.py:36:11     	sbox        	U   	def apply_sbox(s, data):"
  - "other/sdes.py:97:29     	decypting   	U   	print(\"Plain text after decypting is:\", PT)"
  - "physics/n_body_simulation.py:229:9      	xlim	U   	xlim=(x_start, x_end), ylim"
  - "physics/n_body_simulation.py:229:32     	ylim	U   	xlim=(x_start, x_end), ylim=(y_start, y_end)"
  - "physics/n_body_simulation.py:248:41     	blit	U   	interval=INTERVAL, blit=True"
  - "project_euler/problem_001/sol4.py:27:5      	xmulti  	U   	xmulti = []"
  - "project_euler/problem_001/sol4.py:28:5      	zmulti  	U   	zmulti = []"
  - "project_euler/problem_001/sol5.py:16:23     	pythonic	U   	A straightforward pythonic solution using list"
  - "project_euler/problem_005/sol1.py:57:9      	nfound  	U   	nfound = 0"
  - "project_euler/problem_011/sol1.py:43:13     	horz	U   	horzProduct = grid[i][j]"
  - "project_euler/problem_020/sol1.py:48:5      	nfact   	U   	nfact = factorial(num)"
  - "project_euler/problem_023/sol1.py:31:8      	Divs        	U   	sumDivs = [1] * (limit + 1)"
  - "project_euler/problem_023/sol1.py:38:5      	abundants   	U   	abundants = set()"
  - "project_euler/problem_035/sol1.py:14:27     	Seive   	U   	1 million using the Seive of Eratosthenes. Then"
  - "project_euler/problem_035/sol1.py:20:1      	seive   	U   	seive = [True] * 1000001"
  - "project_euler/problem_037/sol1.py:6:54      	truncatable 	U   	primes that are both truncatable from left to right"
  - "project_euler/problem_038/sol1.py:21:61     	concactenation  	U   	the solution will be a concactenation of"
  - "project_euler/problem_039/sol1.py:8:57      	maximised   	U   	number of solutions maximised?"
  - "project_euler/problem_043/sol1.py:46:5      	divisiility 	U   	divisiility tests."
  - "project_euler/problem_044/sol1.py:11:37     	minimised   	U   	and D = |Pk − Pj| is minimised; what is the value of"
  - "project_euler/problem_045/sol1.py:11:5      	trinagle    	U   	All trinagle numbers are hexagonal"
  - "project_euler/problem_045/sol1.py:46:38     	traingular  	U   	next number which is traingular, pentagonal and hexagonal"
  - "project_euler/problem_047/sol1.py:2:1       	Combinatoric	U   	Combinatoric selections"
  - "project_euler/problem_050/sol1.py:23:14     	Erotosthenes	U   	Sieve of Erotosthenes"
  - "project_euler/problem_050/sol1.py:55:42     	celing      	U   	biggest prime, below the celing, that can be written"
  - "project_euler/problem_054/sol1.py:114:50    	ueen    	U   	9, T(en), J(ack), Q(ueen), K(ing), A(ce)"
  - "project_euler/problem_054/sol1.py:117:11    	pades   	U   	S(pades), H(earts), D(iamonds"
  - "project_euler/problem_054/sol1.py:117:21    	earts   	U   	S(pades), H(earts), D(iamonds), C(lubs"
  - "project_euler/problem_054/sol1.py:117:31    	iamonds 	U   	pades), H(earts), D(iamonds), C(lubs)"
  - "project_euler/problem_054/sol1.py:117:43    	lubs    	U   	earts), D(iamonds), C(lubs)"
  - "project_euler/problem_054/sol1.py:145:53    	Stright 	U   	2H 3H 4H 5H 6H\") # Stright flush"
  - "project_euler/problem_054/test_poker_hand.py:140:11     	oppo	U   	play, oppo = randrange(len(SORTED"
  - "project_euler/problem_055/sol1.py:2:1       	Lychrel 	U   	Lychrel numbers"
  - "project_euler/problem_055/sol1.py:58:30     	lychrel 	U   	Returns the count of all lychrel numbers below limit"
  - "project_euler/problem_059/sol1.py:37:11     	INTS    	U   	LOWERCASE_INTS: list[int] = [ord(letter"
  - "project_euler/problem_059/sol1.py:92:30     	asfla   	U   	filter_common_word(['asfla adf', 'I am here',"
  - "project_euler/problem_059/sol1.py:94:30     	athla   	U   	filter_common_word(['athla amf', 'I am here',"
  - "project_euler/problem_065/sol1.py:14:21     	convergents 	U   	Let us consider the convergents for sqrt(2)."
  - "project_euler/problem_087/sol1.py:42:17     	tetr	U   	tetr = prime3 * prime3 *"
  - "project_euler/problem_089/sol1.py:13:1      	VVIIIIII	U   	VVIIIIII"
  - "project_euler/problem_089/sol1.py:15:1      	VVVI    	U   	VVVI"
  - "project_euler/problem_091/sol1.py:5:43      	ΔOPQ	U   	origin, O(0,0), to form ΔOPQ."
  - "project_euler/problem_101/sol1.py:132:5     	coeffs  	U   	coeffs: Matrix"
  - "project_euler/problem_107/sol1.py:111:5     	adjaceny	U   	adjaceny_matrix = [line.split"
  - "project_euler/problem_113/sol1.py:50:16     	upto        	U   	def non_bouncy_upto(n: int) -> int:"
  - "project_euler/problem_113/sol1.py:65:5      	Caclulate   	U   	Caclulate the number of non-bouncy"
  - "project_euler/problem_135/sol1.py:45:52     	divisble	U   	difference % 4: # d must be divisble by 4"
  - "project_euler/problem_180/sol1.py:40:75     	uniquq  	U   	<= 0. We use a set \"uniquq_s\""
  - "project_euler/problem_188/sol1.py:23:6      	modexpt     	U   	def _modexpt(base: int, exponent"
  - "project_euler/problem_188/sol1.py:58:39     	assiciative 	U   	base↑↑height by right-assiciative repeated modular"
  - "project_euler/problem_191/sol1.py:15:6      	OOOA    	U   	OOOO OOOA OOOL OOAO OOAA OOAL"
  - "project_euler/problem_191/sol1.py:15:11     	OOOL    	U   	OOOO OOOA OOOL OOAO OOAA OOAL OOLO"
  - "project_euler/problem_191/sol1.py:15:16     	OOAO    	U   	OOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA"
  - "project_euler/problem_191/sol1.py:15:21     	OOAA    	U   	OOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO"
  - "project_euler/problem_191/sol1.py:15:26     	OOAL    	U   	OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:15:31     	OOLO    	U   	OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:15:36     	OOLA    	U   	OOAO OOAA OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:15:41     	OAOO    	U   	OOAA OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:15:46     	OAOA    	U   	OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:16:1      	OAOL    	U   	OAOL OAAO OAAL OALO OALA"
  - "project_euler/problem_191/sol1.py:16:6      	OAAO    	U   	OAOL OAAO OAAL OALO OALA OLOO"
  - "project_euler/problem_191/sol1.py:16:11     	OAAL    	U   	OAOL OAAO OAAL OALO OALA OLOO OLOA"
  - "project_euler/problem_191/sol1.py:16:16     	OALO    	U   	OAOL OAAO OAAL OALO OALA OLOO OLOA OLAO"
  - "project_euler/problem_191/sol1.py:16:21     	OALA    	U   	OAOL OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA"
  - "project_euler/problem_191/sol1.py:16:26     	OLOO    	U   	OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:16:31     	OLOA    	U   	OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:16:36     	OLAO    	U   	OALO OALA OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:16:41     	OLAA    	U   	OALA OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:16:46     	AOOO    	U   	OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:17:1      	AOOA    	U   	AOOA AOOL AOAO AOAA AOAL"
  - "project_euler/problem_191/sol1.py:17:6      	AOOL    	U   	AOOA AOOL AOAO AOAA AOAL AOLO"
  - "project_euler/problem_191/sol1.py:17:11     	AOAO    	U   	AOOA AOOL AOAO AOAA AOAL AOLO AOLA"
  - "project_euler/problem_191/sol1.py:17:16     	AOAA    	U   	AOOA AOOL AOAO AOAA AOAL AOLO AOLA AAOO"
  - "project_euler/problem_191/sol1.py:17:21     	AOAL    	U   	AOOA AOOL AOAO AOAA AOAL AOLO AOLA AAOO AAOA"
  - "project_euler/problem_191/sol1.py:17:26     	AOLO    	U   	AOOL AOAO AOAA AOAL AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:17:31     	AOLA    	U   	AOAO AOAA AOAL AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:17:36     	AAOO    	U   	AOAA AOAL AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:17:41     	AAOA    	U   	AOAL AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:17:46     	AAOL    	U   	AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:18:1      	AALO    	U   	AALO AALA ALOO ALOA ALAO"
  - "project_euler/problem_191/sol1.py:18:6      	AALA    	U   	AALO AALA ALOO ALOA ALAO ALAA"
  - "project_euler/problem_191/sol1.py:18:11     	ALOO    	U   	AALO AALA ALOO ALOA ALAO ALAA LOOO"
  - "project_euler/problem_191/sol1.py:18:16     	ALOA    	U   	AALO AALA ALOO ALOA ALAO ALAA LOOO LOOA"
  - "project_euler/problem_191/sol1.py:18:21     	ALAO    	U   	AALO AALA ALOO ALOA ALAO ALAA LOOO LOOA LOAO"
  - "project_euler/problem_191/sol1.py:18:26     	ALAA    	U   	AALA ALOO ALOA ALAO ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:18:31     	LOOO    	U   	ALOO ALOA ALAO ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:18:36     	LOOA    	U   	ALOA ALAO ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:18:41     	LOAO    	U   	ALAO ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:18:46     	LOAA    	U   	ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:19:1      	LAOO    	U   	LAOO LAOA LAAO"
  - "project_euler/problem_191/sol1.py:19:6      	LAOA    	U   	LAOO LAOA LAAO"
  - "project_euler/problem_191/sol1.py:19:11     	LAAO    	U   	LAOO LAOA LAAO"
  - "project_euler/problem_191/sol1.py:82:11     	ontime  	U   	state_ontime = _calculate(days -"
  - "project_euler/problem_551/sol1.py:34:20     	calulcated  	U   	Term are calulcated until c > 10^k or the"
  - "project_euler/README.md:66:4    	Stackoverflow   	U   	- [Stackoverflow link]"
  - "project_euler/README.md:81:6    	Doctest         	U   	[Doctest]"
  - "quantum/deutsch_jozsa.py:3:9        	Josza       	U   	Deutsch-Josza Algorithm is one of"
  - "quantum/deutsch_jozsa.py:25:8       	qiskit      	U   	import qiskit as q"
  - "quantum/deutsch_jozsa.py:28:30      	qubits      	U   	oracle(case: str, num_qubits: int) -> q.QuantumCircuit"
  - "quantum/deutsch_jozsa.py:35:23      	qubit       	U   	# plus one output qubit"
  - "quantum/deutsch_jozsa.py:40:62      	CNOTs       	U   	that tells us which CNOTs to"
  - "quantum/deutsch_jozsa.py:46:11      	correspopnds	U   	# correspopnds to a qubit, if the digit"
  - "quantum/deutsch_jozsa.py:75:26      	Deustch     	U   	Returns the complete Deustch-Jozsa Quantum Circuit"
  - "quantum/deutsch_jozsa.py:76:41      	Hadamard    	U   	Output registers and Hadamard & Measurement Gates"
  - "quantum/deutsch_jozsa.py:98:13      	jozsa       	U   	def deutsch_jozsa(case: str, num_qubits"
  - "quantum/deutsch_jozsa.py:107:11     	Aer's       	U   	# Use Aer's qasm_simulator"
  - "quantum/deutsch_jozsa.py:107:17     	qasm        	U   	# Use Aer's qasm_simulator"
  - "quantum/half_adder.py:38:11     	cnots   	U   	# use cnots to write XOR of the"
  - "quantum/half_adder.py:42:17     	toffoli 	U   	# use ccx / toffoli gate to write AND of"
  - "quantum/not_gate.py:6:1     	Qiskit  	U   	Qiskit Docs: https://qiskit"
  - "quantum/not_gate.py:25:29   	Qubits  	U   	Apply X (NOT) Gate to Qubits 0 & 1"
  - "quantum/quantum_entanglement.py:42:22   	CNOT	U   	# Adding CX (CNOT) gate"
  - "quantum/README.md:8:3       	Rigetti 	U   	* Rigetti: https://rigetti.com"
  - "quantum/ripple_adder_classic.py:72:50   	hadamard'd  	U   	from doing this with hadamard'd bits :)"
  - "README.md:2:4       	Gitpod  	U   	[![Gitpod Ready-to-Code](https"
  - "scheduling/shortest_job_first.py:32:5       	minm    	U   	minm = 999999999"
  - "scheduling/shortest_job_first.py:63:13      	finar   	U   	finar = finish_time - arrival"
  - "scheduling/shortest_job_first.py:126:43     	brust   	U   	the arrival time and brust time for process:--"
  - "scheduling/shortest_job_first.py:138:5      	fcfs    	U   	fcfs = pd.DataFrame("
  - "scripts/build_directory_md.py:15:59     	ipynb   	U   	filename)[1] in (\".py\", \".ipynb\"):"
  - "scripts/validate_filenames.py:27:1      	nodir   	U   	nodir_files = [file for file"
  - "searches/fibonacci_search.py:109:13     	fibb	U   	fibb_k = i"
  - "sorts/bead_sort.py:2:39     	nonegative  	U   	works for sequences of nonegative integers."
  - "sorts/bitonic_sort.py:40:5      	bitonic 	U   	def bitonic_merge(array: list[int"
  - "sorts/bogo_sort.py:2:45     	bogosort	U   	implementation of the bogosort algorithm,"
  - "sorts/bogo_sort.py:4:1      	Bogosort	U   	Bogosort generates random permutations"
  - "sorts/bogo_sort.py:9:22     	bogo    	U   	python -m doctest -v bogo_sort.py"
  - "sorts/comb_sort.py:3:75     	Wlodzimierz 	U   	originally designed by Wlodzimierz"
  - "sorts/comb_sort.py:4:1      	Dobosiewicz 	U   	Dobosiewicz in 1980. It was rediscovered"
  - "sorts/counting_sort.py:62:6     	eghhiiinrsssttt 	U   	'eghhiiinrsssttt'"
  - "sorts/external_sort.py:85:9     	unshift 	U   	def unshift(self, index):"
  - "sorts/gnome_sort.py:34:8    	Gadeimnoprstu   	U   	' !Gadeimnoprstu'"
  - "sorts/iterative_merge_sort.py:3:9       	Aman	U   	Author: Aman Gupta"
  - "sorts/msd_radix_sort.py:79:5    	Inplace 	U   	Inplace implementation of the"
  - "sorts/natural_sort.py:27:9      	alphanum	U   	def alphanum_key(key):"
  - "sorts/normal_distribution_quick_sort.md:16:12   	numpy       	U   	>>> import numpy as np"
  - "sorts/normal_distribution_quick_sort.md:17:10   	tempfile    	U   	>>> from tempfile import TemporaryFile"
  - "sorts/normal_distribution_quick_sort.md:18:5    	outfile     	U   	>>> outfile = TemporaryFile()"
  - "sorts/normal_distribution_quick_sort.md:36:97   	linewidth   	U   	/ (2 * sigma**2) ),linewidth=2, color='r')"
  - "sorts/normal_distribution_quick_sort.md:58:11   	matplotlib  	U   	>>>import matplotlib.pyplot as plt"
  - "sorts/normal_distribution_quick_sort.md:61:14   	Disrtibution	U   	# Normal Disrtibution QuickSort is red"
  - "sorts/odd_even_transposition_single_threaded.py:4:55    	transpostiion   	U   	implementation of odd-even transpostiion sort."
  - "sorts/quick_sort_3_partition.py:21:16   	lomuto  	U   	def quick_sort_lomuto_partition(sorting: list"
  - "sorts/quick_sort_3_partition.py:24:10   	Lomuto  	U   	with Lomuto partition scheme:"
  - "sorts/shell_sort.py:19:7    	Marcin  	U   	# Marcin Ciura's gap sequence"
  - "sorts/shell_sort.py:19:14   	Ciura's 	U   	# Marcin Ciura's gap sequence"
  - "sorts/slowsort.py:5:53      	Stolfi      	U   	Andrei Broder and Jorge Stolfi"
  - "sorts/slowsort.py:6:40      	Simplexity  	U   	Pessimal Algorithms and Simplexity Analysis"
  - "sorts/topological_sort.py:13:16     	topolical   	U   	\"\"\"Perform topolical sort on a directed acyclic"
  - "strings/aho_corasick.py:8:14    	adlist  	U   	self.adlist: list[dict] = list("
  - "strings/alternative_string_arrange.py:8:6       	AXBYCD  	U   	'AXBYCD'"
  - "strings/alternative_string_arrange.py:10:6      	XAYBCD  	U   	'XAYBCD'"
  - "strings/alternative_string_arrange.py:12:6      	AXBYZ   	U   	'AXBYZ'"
  - "strings/anagrams.py:17:6    	bysig   	U   	word_bysig = collections.defaultdict"
  - "strings/can_string_be_rearranged_as_palindrome.py:1:14      	susmith 	U   	# Created by susmith98"
  - "strings/can_string_be_rearranged_as_palindrome.py:17:57     	Momo    	U   	palindrome_counter(\"Momo\")"
  - "strings/detecting_english_programmatically.py:48:20     	llold   	U   	>>> isEnglish('llold HorWd')"
  - "strings/frequency_finder.py:32:1    	ETAOIN                      	U   	ETAOIN = \"ETAOINSHRDLCUMWFGYPBVKJXQZ"
  - "strings/frequency_finder.py:32:11   	ETAOINSHRDLCUMWFGYPBVKJXQZ  	U   	ETAOIN = \"ETAOINSHRDLCUMWFGYPBVKJXQZ\""
  - "strings/jaro_winkler.py:4:5     	jaro    	U   	def jaro_winkler(str1: str, str"
  - "strings/jaro_winkler.py:4:10    	winkler 	U   	def jaro_winkler(str1: str, str2: str"
  - "strings/jaro_winkler.py:10:33   	marhta  	U   	jaro_winkler(\"martha\", \"marhta\")"
  - "strings/jaro_winkler.py:14:31   	dbdbdbdb	U   	jaro_winkler(\"test\", \"dbdbdbdb\")"
  - "strings/knuth_morris_pratt.py:62:14     	alskfjaldsabc           	U   	text1 = \"alskfjaldsabc1abc1abc12k23adsfabcabc"
  - "strings/knuth_morris_pratt.py:62:40     	adsfabcabc              	U   	alskfjaldsabc1abc1abc12k23adsfabcabc\""
  - "strings/knuth_morris_pratt.py:63:14     	alskfjaldsk             	U   	text2 = \"alskfjaldsk23adsfabcabc\""
  - "strings/knuth_morris_pratt.py:67:16     	ABABX                   	U   	pattern = \"ABABX\""
  - "strings/knuth_morris_pratt.py:68:13     	ABABZABABYABABX         	U   	text = \"ABABZABABYABABX\""
  - "strings/knuth_morris_pratt.py:72:16     	AAAB                    	U   	pattern = \"AAAB\""
  - "strings/knuth_morris_pratt.py:73:13     	ABAAAAAB                	U   	text = \"ABAAAAAB\""
  - "strings/knuth_morris_pratt.py:77:16     	abcdabcy                	U   	pattern = \"abcdabcy\""
  - "strings/knuth_morris_pratt.py:78:13     	abcxabcdabxabcdabcdabcy 	U   	text = \"abcxabcdabxabcdabcdabcy\""
  - "strings/knuth_morris_pratt.py:82:16     	aabaabaaa               	U   	pattern = \"aabaabaaa\""
  - "strings/lower.py:8:6        	hellzo  	U   	'hellzo'"
  - "strings/manacher.py:4:6     	abbba   	U   	'abbba'"
  - "strings/manacher.py:5:29    	ababa   	U   	palindromic_string('ababa')"
  - "strings/naive_string_search.py:14:31    	ABAAABCDBBABCDDEBCABC   	U   	naive_pattern_search(\"ABAAABCDBBABCDDEBCABC\", \"ABC\")"
  - "strings/naive_string_search.py:22:31    	ABCDEGFTEST             	U   	naive_pattern_search(\"ABCDEGFTEST\", \"TEST\")"
  - "strings/prefix_function.py:17:60    	sufix       	U   	coincidence of prefix and sufix"
  - "strings/prefix_function.py:22:26    	aabcdaabc   	U   	>> prefix_function(\"aabcdaabc\")"
  - "strings/prefix_function.py:24:26    	asdasdad    	U   	>> prefix_function(\"asdasdad\")"
  - "strings/prefix_function.py:54:25    	abcab       	U   	>>> longest_prefix(\"abcab\")"
  - "strings/rabin_karp.py:7:11      	karp    	U   	def rabin_karp(pattern: str, text:"
  - "strings/rabin_karp.py:82:13     	Lüsai   	U   	text = \"Lüsai\""
  - "strings/reverse_letters.py:7:10     	kciuq   	U   	'ehT kciuq nworb xof depmuj revo"
  - "strings/reverse_letters.py:7:16     	nworb   	U   	'ehT kciuq nworb xof depmuj revo eht"
  - "strings/reverse_letters.py:7:26     	depmuj  	U   	ehT kciuq nworb xof depmuj revo eht yzal .god'"
  - "strings/reverse_letters.py:7:33     	revo    	U   	kciuq nworb xof depmuj revo eht yzal .god'"
  - "strings/reverse_letters.py:7:42     	yzal    	U   	xof depmuj revo eht yzal .god'"
  - "strings/reverse_letters.py:9:9      	siht    	U   	'sI siht ?eurt'"
  - "strings/reverse_letters.py:9:15     	eurt    	U   	'sI siht ?eurt'"
  - "strings/reverse_letters.py:11:8     	evol    	U   	'I evol nohtyP'"
  - "strings/reverse_letters.py:11:13    	nohty   	U   	'I evol nohtyP'"
  - "strings/swap_case.py:10:38      	mayur   	U   	sentence: github.com/mayur200"
  - "strings/swap_case.py:11:14      	MAYUR   	U   	GITHUB.COM/MAYUR200"
  - "strings/word_occurrence.py:1:14     	sarathkaul  	U   	# Created by sarathkaul on 17/11/19"
  - "strings/word_occurrence.py:2:15     	Arkadip     	U   	# Modified by Arkadip Bhattacharya(@darkmatter"
  - "strings/word_occurrence.py:2:23     	Bhattacharya	U   	Modified by Arkadip Bhattacharya(@darkmatter18) on 2"
  - "strings/word_occurrence.py:6:10     	occurence   	U   	def word_occurence(sentence: str) -> dict"
  - "strings/z_function.py:27:21     	zxxzxxz 	U   	>>> z_function(\"zxxzxxz\")"
  - "web_programming/covid_stats_via_xpath.py:2:51       	worldometers	U   	info fetching from worldometers site using lxml"
  - "web_programming/covid_stats_via_xpath.py:2:75       	lxml        	U   	worldometers site using lxml"
  - "web_programming/currency_converter.py:27:5      	Aruban          	U   	AWG Aruban Florin"
  - "web_programming/currency_converter.py:50:11     	Rican           	U   	CRC Costa Rican Colon"
  - "web_programming/currency_converter.py:52:10     	Verdean         	U   	CVE Cape Verdean Escudo"
  - "web_programming/currency_converter.py:54:5      	Djiboutian      	U   	DJF Djiboutian Franc"
  - "web_programming/currency_converter.py:86:5      	Kyrgystani      	U   	KGS Kyrgystani Som"
  - "web_programming/currency_converter.py:102:14    	Ariary          	U   	MGA Malagasy Ariary"
  - "web_programming/currency_converter.py:104:5     	Myanma          	U   	MMK Myanma Kyat"
  - "web_programming/currency_converter.py:122:14    	Nuevo           	U   	PEN Peruvian Nuevo Sol"
  - "web_programming/currency_converter.py:135:5     	Seychellois     	U   	SCR Seychellois Rupee"
  - "web_programming/currency_converter.py:140:12    	Leonean         	U   	SLL Sierra Leonean Leone"
  - "web_programming/currency_converter.py:148:16    	Somoni          	U   	TJS Tajikistan Somoni"
  - "web_programming/currency_converter.py:149:5     	Turkmenistani   	U   	TMT Turkmenistani Manat"
  - "web_programming/currency_converter.py:151:11    	Paanga          	U   	TOP Tonga Paanga"
  - "web_programming/current_weather.py:12:32    	Kolkata 	U   	weather_forecast(q: str = \"Kolkata, India\", appid: str"
  - "web_programming/emails_from_url.py:4:24     	Umer    	U   	author__ = \"Muhammad Umer Farooq\""
  - "web_programming/emails_from_url.py:4:29     	Farooq  	U   	author__ = \"Muhammad Umer Farooq\""
  - "web_programming/fetch_github_info.py:4:12       	lawric  	U   	Updated by lawric1 on 24/11/20"
  - "web_programming/get_imdb_top_250_movies_csv.py:9:9      	imdb	U   	def get_imdb_top_250_movies(url:"
  - "web_programming/instagram_video.py:13:30    	IGTV	U   	input(\"Enter Video/IGTV url: \").strip()"


Repository: TheAlgorithms/Python
Url: "https://github.com/TheAlgorithms/Python.git"
Args: ["**/*.{md,py}"]
Lines:
 CSpell: Files checked: 1224, Issues found: 3119 in 467 files
 exit code: 1
./CONTRIBUTING.md:138:33    - Unknown word (pytest)     -- doctests will be run by pytest as part of our automated
./CONTRIBUTING.md:141:14    - Unknown word (doctest)    -- python3 -m doctest -v my_submission.py
./CONTRIBUTING.md:158:171   - Unknown word (mypy)       -- automated testing will run [mypy](http://mypy-lang.org
./CONTRIBUTING.md:189:10    - Unknown word (poyea)      -- Writer [@poyea](https://github.com
./CONTRIBUTING.md:53:8      - Unknown word (docstrings) -- * have docstrings with clear explanations
./CONTRIBUTING.md:54:11     - Unknown word (doctests)   -- * contain doctests that test both valid
./CONTRIBUTING.md:5:339     - Unknown word (Gitter)     -- ask the community in [Gitter](https://gitter.im/TheAlgorit
./CONTRIBUTING.md:84:334    - Unknown word (autopep)    -- other code formatters (autopep8, yapf) but the __black
./CONTRIBUTING.md:84:344    - Unknown word (yapf)       -- formatters (autopep8, yapf) but the __black__ formatter
./DIRECTORY.md:102:20    - Unknown word (Cypher)       -- * [Mixed Keyword Cypher](ciphers/mixed_keyword
./DIRECTORY.md:105:6     - Unknown word (Onepad)       -- * [Onepad Cipher](ciphers/onepad
./DIRECTORY.md:1066:14   - Unknown word (Jozsa)               -- * [Deutsch Jozsa](quantum/deutsch_jozsa
./DIRECTORY.md:1066:6    - Unknown word (Deutsch)             -- * [Deutsch Jozsa](quantum/deutsch
./DIRECTORY.md:106:6     - Unknown word (Playfair)     -- * [Playfair Cipher](ciphers/playfair
./DIRECTORY.md:1074:13   - Unknown word (Qubit)               -- * [Single Qubit Measure](quantum/single
./DIRECTORY.md:108:6     - Unknown word (Porta)        -- * [Porta Cipher](ciphers/porta
./DIRECTORY.md:1106:6    - Unknown word (Bitonic)             -- * [Bitonic Sort](sorts/bitonic
./DIRECTORY.md:1107:6    - Unknown word (Bogo)                -- * [Bogo Sort](sorts/bogo_sort
./DIRECTORY.md:1147:6    - Unknown word (Slowsort)            -- * [Slowsort](sorts/slowsort.py)
./DIRECTORY.md:1157:10   - Unknown word (Corasick)            -- * [Aho Corasick](strings/aho_corasick
./DIRECTORY.md:1173:9    - Unknown word (Isogram)             -- * [Is Isogram](strings/is_isogram
./DIRECTORY.md:1176:9    - Unknown word (Srilankan)           -- * [Is Srilankan Phone Number](strings
./DIRECTORY.md:1178:11   - Unknown word (Winkler)             -- * [Jaro Winkler](strings/jaro_winkler
./DIRECTORY.md:1178:6    - Unknown word (Jaro)                -- * [Jaro Winkler](strings/jaro
./DIRECTORY.md:1183:6    - Unknown word (Manacher)            -- * [Manacher](strings/manacher.py
./DIRECTORY.md:1186:6    - Unknown word (Ngram)               -- * [Ngram](strings/ngram.py)
./DIRECTORY.md:118:6     - Unknown word (Trafid)       -- * [Trafid Cipher](ciphers/trafid
./DIRECTORY.md:121:6     - Unknown word (Vigenere)     -- * [Vigenere Cipher](ciphers/vigenere
./DIRECTORY.md:1224:10   - Unknown word (Imdb)                -- * [Get Imdb Top 250 Movies Csv]
./DIRECTORY.md:1225:10   - Unknown word (Imdbtop)             -- * [Get Imdbtop](web_programming/get
./DIRECTORY.md:1229:6    - Unknown word (Giphy)               -- * [Giphy](web_programming/giphy
./DIRECTORY.md:1236:6    - Unknown word (Recaptcha)           -- * [Recaptcha Verification](web_programming
./DIRECTORY.md:16:6      - Unknown word (Butterworth) -- * [Butterworth Filter](audio_filters
./DIRECTORY.md:186:8     - Unknown word (Fenwick)      -- * [Fenwick Tree](data_structures
./DIRECTORY.md:224:8     - Unknown word (Deque)        -- * [Deque Doubly](data_structures
./DIRECTORY.md:247:8     - Unknown word (Dijkstras)    -- * [Dijkstras Two Stack Algorithm
./DIRECTORY.md:277:8     - Unknown word (Sobel)        -- * [Sobel Filter](digital_image
./DIRECTORY.md:299:10    - Unknown word (Subarray)     -- * [Max Subarray](divide_and_conquer
./DIRECTORY.md:29:6      - Unknown word (Minmax)      -- * [Minmax](backtracking/minmax
./DIRECTORY.md:300:6     - Unknown word (Mergesort)    -- * [Mergesort](divide_and_conquer
./DIRECTORY.md:303:6     - Unknown word (Strassen)     -- * [Strassen Matrix Multiplication
./DIRECTORY.md:308:6     - Unknown word (Bitmask)      -- * [Bitmask](dynamic_programming
./DIRECTORY.md:317:12    - Unknown word (Warshall)     -- * [Floyd Warshall](dynamic_programming
./DIRECTORY.md:319:24    - Unknown word (Submasks)     -- [Iterating Through Submasks](dynamic_programming
./DIRECTORY.md:325:39    - Unknown word (Nlogn)        -- Increasing Subsequence O(Nlogn)](dynamic_programming
./DIRECTORY.md:345:6     - Unknown word (Tribonacci)   -- * [Tribonacci](dynamic_programming
./DIRECTORY.md:346:6     - Unknown word (Viterbi)      -- * [Viterbi](dynamic_programming
./DIRECTORY.md:393:6     - Unknown word (Bezier)       -- * [Bezier Curve](graphics/bezier
./DIRECTORY.md:404:6     - Unknown word (Boruvka)      -- * [Boruvka](graphs/boruvka.py)
./DIRECTORY.md:40:19     - Unknown word (Setbits)     -- * [Binary Count Setbits](bit_manipulation/binary
./DIRECTORY.md:421:6     - Unknown word (Dinic)        -- * [Dinic](graphs/dinic.py)
./DIRECTORY.md:423:14    - Unknown word (Karp)         -- * [Edmonds Karp Multiple Source And
./DIRECTORY.md:423:6     - Unknown word (Edmonds)      -- * [Edmonds Karp Multiple Source
./DIRECTORY.md:424:6     - Unknown word (Eulerian)     -- * [Eulerian Path And Circuit For
./DIRECTORY.md:429:11    - Unknown word (Shapley)      -- * [Gale Shapley Bigraph](graphs/gale
./DIRECTORY.md:429:19    - Unknown word (Bigraph)      -- * [Gale Shapley Bigraph](graphs/gale_shapley
./DIRECTORY.md:436:6     - Unknown word (Kahns)        -- * [Kahns Algorithm Long](graphs
./DIRECTORY.md:437:22    - Unknown word (Topo)         -- * [Kahns Algorithm Topo](graphs/kahns_algorithm
./DIRECTORY.md:438:6     - Unknown word (Karger)       -- * [Karger](graphs/karger.py)
./DIRECTORY.md:443:28    - Unknown word (Kruskal)      -- Minimum Spanning Tree Kruskal](graphs/minimum_spanning
./DIRECTORY.md:447:22    - Unknown word (Astar)        -- * [Multi Heuristic Astar](graphs/multi_heuristic
./DIRECTORY.md:451:10    - Unknown word (Kosaraju)     -- * [Scc Kosaraju](graphs/scc_kosaraju
./DIRECTORY.md:453:6     - Unknown word (Tarjans)      -- * [Tarjans Scc](graphs/tarjans
./DIRECTORY.md:46:21     - Unknown word (Kernighan)   -- * [Count 1S Brian Kernighan Method](bit_manipulation
./DIRECTORY.md:471:6     - Unknown word (Luhn)         -- * [Luhn](hashes/luhn.py)
./DIRECTORY.md:473:6     - Unknown word (Sdbm)         -- * [Sdbm](hashes/sdbm.py)
./DIRECTORY.md:489:8     - Unknown word (Polynom)      -- * [Polynom For Points](linear_algebra
./DIRECTORY.md:493:8     - Unknown word (Schur)        -- * [Schur Complement](linear_algebra
./DIRECTORY.md:508:14    - Unknown word (Clust)        -- * [K Means Clust](machine_learning/k
./DIRECTORY.md:509:16    - Unknown word (Neighbours)   -- * [K Nearest Neighbours](machine_learning/k
./DIRECTORY.md:510:10    - Unknown word (Sklearn)      -- * [Knn Sklearn](machine_learning/knn
./DIRECTORY.md:516:5     - Unknown word (Lstm)         -- * Lstm
./DIRECTORY.md:526:6     - Unknown word (Xgboost)      -- * [Xgboost Classifier](machine
./DIRECTORY.md:539:6     - Unknown word (Automorphic)  -- * [Automorphic Number](maths/automorphic
./DIRECTORY.md:544:13    - Unknown word (Borwein)      -- * [Bailey Borwein Plouffe](maths/bailey
./DIRECTORY.md:544:21    - Unknown word (Plouffe)      -- * [Bailey Borwein Plouffe](maths/bailey_borwein
./DIRECTORY.md:557:6     - Unknown word (Chudnovsky)   -- * [Chudnovsky Algorithm](maths/chudnovsky
./DIRECTORY.md:558:6     - Unknown word (Collatz)      -- * [Collatz Sequence](maths/collatz
./DIRECTORY.md:572:13    - Unknown word (Totient)      -- * [Eulers Totient](maths/eulers_totient
./DIRECTORY.md:572:6     - Unknown word (Eulers)       -- * [Eulers Totient](maths/eulers
./DIRECTORY.md:589:12    - Unknown word (Ramanujanalgo) -- * [Hardy Ramanujanalgo](maths/hardy_ramanujanalgo
./DIRECTORY.md:592:6     - Unknown word (Interquartile) -- * [Interquartile Range](maths/interquartile
./DIRECTORY.md:596:6     - Unknown word (Jaccard)       -- * [Jaccard Similarity](maths/jaccard
./DIRECTORY.md:598:6     - Unknown word (Karatsuba)     -- * [Karatsuba](maths/karatsuba.py
./DIRECTORY.md:599:6     - Unknown word (Krishnamurthy) -- * [Krishnamurthy Number](maths/krishnamurthy
./DIRECTORY.md:604:6     - Unknown word (Liouville)     -- * [Liouville Lambda](maths/liouville
./DIRECTORY.md:605:12    - Unknown word (Lehmer)        -- * [Lucas Lehmer Primality Test](maths
./DIRECTORY.md:607:6     - Unknown word (Maclaurin)     -- * [Maclaurin Series](maths/maclaurin
./DIRECTORY.md:613:6     - Unknown word (Mobius)        -- * [Mobius Function](maths/mobius
./DIRECTORY.md:617:6     - Unknown word (Nevilles)      -- * [Nevilles Method](maths/nevilles
./DIRECTORY.md:638:6     - Unknown word (Primelib)      -- * [Primelib](maths/primelib.py)
./DIRECTORY.md:640:6     - Unknown word (Pronic)        -- * [Pronic Number](maths/pronic
./DIRECTORY.md:641:6     - Unknown word (Proth)         -- * [Proth Number](maths/proth
./DIRECTORY.md:647:6     - Unknown word (Relu)          -- * [Relu](maths/relu.py)
./DIRECTORY.md:649:12    - Unknown word (Kutta)         -- * [Runge Kutta](maths/runge_kutta.py
./DIRECTORY.md:649:6     - Unknown word (Runge)         -- * [Runge Kutta](maths/runge_kutta
./DIRECTORY.md:64:6      - Unknown word (Nand)        -- * [Nand Gate](boolean_algebra
./DIRECTORY.md:662:6     - Unknown word (Signum)        -- * [Signum](maths/signum.py)
./DIRECTORY.md:667:6     - Unknown word (Softmax)       -- * [Softmax](maths/softmax.py)
./DIRECTORY.md:673:6     - Unknown word (Sumset)        -- * [Sumset](maths/sumset.py)
./DIRECTORY.md:685:6     - Unknown word (Zellers)       -- * [Zellers Congruence](maths/zellers
./DIRECTORY.md:68:15     - Unknown word (Cluskey)     -- * [Quine Mc Cluskey](boolean_algebra/quine
./DIRECTORY.md:692:6     - Unknown word (Cramers)       -- * [Cramers Rule 2X2](matrix/cramers
./DIRECTORY.md:69:6      - Unknown word (Xnor)        -- * [Xnor Gate](boolean_algebra
./DIRECTORY.md:708:11    - Unknown word (Fulkerson)     -- * [Ford Fulkerson](networking_flow/ford
./DIRECTORY.md:724:13    - Unknown word (Putnamb)       -- * [Davisb Putnamb Logemannb Loveland]
./DIRECTORY.md:724:21    - Unknown word (Logemannb)     -- * [Davisb Putnamb Logemannb Loveland](other/davisb
./DIRECTORY.md:724:31    - Unknown word (Loveland)      -- Davisb Putnamb Logemannb Loveland](other/davisb_putnamb
./DIRECTORY.md:724:6     - Unknown word (Davisb)        -- * [Davisb Putnamb Logemannb Loveland
./DIRECTORY.md:735:13    - Unknown word (Congruential)  -- * [Linear Congruential Generator](other/linear
./DIRECTORY.md:737:6     - Unknown word (Magicdiamondpattern) -- * [Magicdiamondpattern](other/magicdiamondpattern
./DIRECTORY.md:73:6      - Unknown word (Conways)     -- * [Conways Game Of Life](cellular
./DIRECTORY.md:744:6     - Unknown word (Sdes)                -- * [Sdes](other/sdes.py)
./DIRECTORY.md:751:6     - Unknown word (Casimir)             -- * [Casimir Effect](physics/casimir
./DIRECTORY.md:759:6     - Unknown word (Malus)               -- * [Malus Law](physics/malus_law
./DIRECTORY.md:75:6      - Unknown word (Langtons)    -- * [Langtons Ant](cellular_automata
./DIRECTORY.md:76:12     - Unknown word (Schrekenberg) -- * [Nagel Schrekenberg](cellular_automata/nagel
./DIRECTORY.md:76:6      - Unknown word (Nagel)       -- * [Nagel Schrekenberg](cellular
./DIRECTORY.md:83:6      - Unknown word (Atbash)       -- * [Atbash](ciphers/atbash.py)
./DIRECTORY.md:84:6      - Unknown word (Autokey)      -- * [Autokey](ciphers/autokey.py
./DIRECTORY.md:85:6      - Unknown word (Baconian)     -- * [Baconian Cipher](ciphers/baconian
./DIRECTORY.md:94:6      - Unknown word (Cryptomath)   -- * [Cryptomath Module](ciphers/cryptomath
./DIRECTORY.md:99:6      - Unknown word (Elgamal)      -- * [Elgamal Key Generator](ciphers
./arithmetic_analysis/gaussian_elimination.py:34:47     - Unknown word (dtype)      -- np.zeros((rows, 1), dtype=float)
./arithmetic_analysis/gaussian_elimination.py:67:35     - Unknown word (astype)     -- mat = augmented_mat.astype("float64")
./arithmetic_analysis/lu_decomposition.py:23:41     - Unknown word (ndarray)    -- decomposition(table: np.ndarray) -> tuple[np.ndarray
./arithmetic_analysis/newton_forward_interpolation.py:49:5      - Unknown word (summ)       -- summ = y[0][0]
./arithmetic_analysis/newton_forward_interpolation.py:8:5       - Unknown word (ucal)       -- def ucal(u: float, p: int) -
./arithmetic_analysis/newton_raphson.py:2:11      - Unknown word (Syed)       -- # Author: Syed Haseeb Shah (github
./arithmetic_analysis/newton_raphson.py:2:16      - Unknown word (Haseeb)     -- # Author: Syed Haseeb Shah (github.com/QuantumNovic
./arithmetic_analysis/newton_raphson_new.py:10:25     - Unknown word (lambdify)   -- from sympy import diff, lambdify, symbols
./arithmetic_analysis/newton_raphson_new.py:10:6      - Unknown word (sympy)      -- from sympy import diff, lambdify
./arithmetic_analysis/newton_raphson_new.py:14:12     - Unknown word (raphson)    -- def newton_raphson(
./arithmetic_analysis/newton_raphson_new.py:1:23      - Unknown word (Raphson)    -- Implementing Newton Raphson method in Python
./arithmetic_analysis/newton_raphson_new.py:5:55      - Unknown word (functreal)  -- proximation for the root of a functreal-valued ion
./arithmetic_analysis/secant_method.py:3:9       - Unknown word (dimgrichr)  -- Author: dimgrichr
./audio_filters/butterworth_filter.py:175:5     - Unknown word (ppmc)       -- ppmc = (big_a + 1) + (big
./audio_filters/butterworth_filter.py:177:5     - Unknown word (pmpc)       -- pmpc = (big_a - 1) + (big
./audio_filters/butterworth_filter.py:20:18     - Unknown word (coeffs)     -- >>> filter.a_coeffs + filter.b_coeffs
./audio_filters/butterworth_filter.py:36:5      - Unknown word (filt)       -- filt = IIRFilter(2)
./audio_filters/iir_filter.py:44:58     - Unknown word (btype)      -- btype='lowpass',
./audio_filters/show_response.py:55:43     - Unknown word (nyquist)    -- log scale from 24 to nyquist frequency
./audio_filters/show_response.py:56:9      - Unknown word (xlim)       -- plt.xlim(24, samplerate / 2
./audio_filters/show_response.py:57:9      - Unknown word (xlabel)     -- plt.xlabel("Frequency (Hz)")
./audio_filters/show_response.py:58:9      - Unknown word (xscale)     -- plt.xscale("log")
./audio_filters/show_response.py:62:9      - Unknown word (ylim)       -- plt.ylim(max([-80, bounds[0]
./audio_filters/show_response.py:63:9      - Unknown word (ylabel)     -- plt.ylabel("Gain (dB)")
./backtracking/coloring.py:11:5      - Unknown word (neighbours) -- neighbours: list[int], colored
./backtracking/coloring.py:14:14     - Unknown word (neighbour)  -- For each neighbour check if the coloring
./backtracking/coloring.py:52:18     - Unknown word (Uncolor)    -- 2.5. Uncolor given vertex
./backtracking/knight_tour.py:82:22     - Unknown word (Kight)      -- ValueError: Open Kight Tour cannot be performed
./backtracking/n_queens.py:3:6       - Unknown word (nqueens)    -- The nqueens problem is of placing
./backtracking/sum_of_subsets.py:12:29     - Unknown word (soln)       -- generate_sum_of_subsets_soln(nums: list[int], max
./backtracking/word_search.py:23:2      - Unknown word (ABCCED)     -- "ABCCED"
./backtracking/word_search.py:69:5      - Unknown word (traverts)   -- traverts_directions = [(0, 1
./backtracking/word_search.py:97:79     - Unknown word (ABCB)       -- "A","D","E","E"]], "ABCB")
./bit_manipulation/count_1s_brian_kernighan_method.py:3:66      - Unknown word (Kernighan's) -- integer using Brian Kernighan's way.
./bit_manipulation/count_number_of_one_bits.py:4:36      - Unknown word (kernighans) -- bits_count_using_brian_kernighans_algorithm(number: int
./bit_manipulation/is_even.py:4:52      - Unknown word (deicmal)    -- look at the following deicmal to binary conversions
./blockchain/modular_division.py:12:55     - Unknown word (modn)       -- 0≤x≤n−1, and  b/a=x(modn) (that is, b=ax(modn
./boolean_algebra/nand_gate.py:18:5      - Unknown word (nand)       -- def nand_gate(input_1: int, input
./boolean_algebra/nand_gate.py:2:3       - Unknown word (NAND)       -- A NAND Gate is a logic gate
./boolean_algebra/nor_gate.py:47:21     - Unknown word (Akshaj)     -- """Code provided by Akshaj Vishwanathan"""
./boolean_algebra/nor_gate.py:47:28     - Unknown word (Vishwanathan) -- Code provided by Akshaj Vishwanathan"""
./boolean_algebra/quine_mc_cluskey.py:122:11    - Unknown word (implicant)  -- def prime_implicant_chart(
./boolean_algebra/quine_mc_cluskey.py:150:18    - Unknown word (Implicants) -- print("Prime Implicants are:")
./boolean_algebra/quine_mc_cluskey.py:81:45     - Unknown word (implicants) -- list[list[int]], prime_implicants: list[str]) -> list
./boolean_algebra/xnor_gate.py:19:5      - Unknown word (xnor)       -- def xnor_gate(input_1: int, input
./boolean_algebra/xnor_gate.py:2:3       - Unknown word (XNOR)       -- A XNOR Gate is a logic gate
./cellular_automata/game_of_life.py:120:5     - Unknown word (cmap)       -- cmap = ListedColormap(["w
./cellular_automata/game_of_life.py:1:41      - Unknown word (Kumar)      -- Life, Author Anurag Kumar(mailto:anuragkumarak
./cellular_automata/langtons_ant.py:19:25     - Unknown word (Langons)    -- Represents the main LangonsAnt algorithm.
./cellular_automata/langtons_ant.py:82:22     - Unknown word (xaxis)      -- axes.get_xaxis().set_ticks([])
./cellular_automata/langtons_ant.py:83:22     - Unknown word (yaxis)      -- axes.get_yaxis().set_ticks([])
./cellular_automata/langtons_ant.py:84:18     - Unknown word (imshow)     -- axes.imshow(self.board, cmap="gray
./cellular_automata/nagel_schrekenberg.py:90:7      - Unknown word (Beforce)    -- # Beforce calculations, the highway
./cellular_automata/wa_tor.py:261:43    - Unknown word (neighbouring) -- move to an unoccupied neighbouring square
./cellular_automata/wa_tor.py:301:13    - Unknown word (reproducable) -- >>> reproducable_entity = Entity(False
./cellular_automata/wa_tor.py:477:19    - Unknown word (visualisation) -- # visualisation in a terminal or a graph
./cellular_automata/wa_tor.py:481:5     - Unknown word (visualise)     -- def visualise(wt: WaTor, iter_number
./cellular_automata/wa_tor.py:9:27      - Unknown word (utilise)    -- the Wa-Tor planet, and utilise fully random methods
./ciphers/a1z26.py:13:17     - Unknown word (myname)     -- >>> encode("myname")
./ciphers/affine_cipher.py:40:35     - Unknown word (Mpyx)       -- I}p~{HL}Gp{vp pFsH}pxMpyxIx JHL O}F{~pvuOvF{FuF
./ciphers/atbash.py:5:5       - Unknown word (atbash)     -- def atbash_slow(sequence: str)
./ciphers/atbash.py:8:6       - Unknown word (ZYXWVUT)    -- 'ZYXWVUT'
./ciphers/autokey.py:16:12     - Unknown word (avvwo)      -- 'jsqqs avvwo'
./ciphers/autokey.py:16:6      - Unknown word (jsqqs)      -- 'jsqqs avvwo'
./ciphers/autokey.py:18:16     - Unknown word (ohvp)       -- 'vvjfpk wj ohvp su ddylsv'
./ciphers/autokey.py:18:24     - Unknown word (ddylsv)     -- 'vvjfpk wj ohvp su ddylsv'
./ciphers/autokey.py:18:6      - Unknown word (vvjfpk)     -- 'vvjfpk wj ohvp su ddylsv'
./ciphers/baconian_cipher.py:10:11     - Unknown word (AAABB)      -- "d": "AAABB",
./ciphers/baconian_cipher.py:11:11     - Unknown word (AABAA)      -- "e": "AABAA",
./ciphers/baconian_cipher.py:12:11     - Unknown word (AABAB)      -- "f": "AABAB",
./ciphers/baconian_cipher.py:13:11     - Unknown word (AABBA)      -- "g": "AABBA",
./ciphers/baconian_cipher.py:14:11     - Unknown word (AABBB)      -- "h": "AABBB",
./ciphers/baconian_cipher.py:15:11     - Unknown word (ABAAA)      -- "i": "ABAAA",
./ciphers/baconian_cipher.py:16:11     - Unknown word (BBBAA)      -- "j": "BBBAA",
./ciphers/baconian_cipher.py:17:11     - Unknown word (ABAAB)      -- "k": "ABAAB",
./ciphers/baconian_cipher.py:18:11     - Unknown word (ABABA)      -- "l": "ABABA",
./ciphers/baconian_cipher.py:19:11     - Unknown word (ABABB)      -- "m": "ABABB",
./ciphers/baconian_cipher.py:20:11     - Unknown word (ABBAA)      -- "n": "ABBAA",
./ciphers/baconian_cipher.py:21:11     - Unknown word (ABBAB)      -- "o": "ABBAB",
./ciphers/baconian_cipher.py:22:11     - Unknown word (ABBBA)      -- "p": "ABBBA",
./ciphers/baconian_cipher.py:23:11     - Unknown word (ABBBB)      -- "q": "ABBBB",
./ciphers/baconian_cipher.py:24:11     - Unknown word (BAAAA)      -- "r": "BAAAA",
./ciphers/baconian_cipher.py:25:11     - Unknown word (BAAAB)      -- "s": "BAAAB",
./ciphers/baconian_cipher.py:26:11     - Unknown word (BAABA)      -- "t": "BAABA",
./ciphers/baconian_cipher.py:27:11     - Unknown word (BAABB)      -- "u": "BAABB",
./ciphers/baconian_cipher.py:28:11     - Unknown word (BBBAB)      -- "v": "BBBAB",
./ciphers/baconian_cipher.py:29:11     - Unknown word (BABAA)      -- "w": "BABAA",
./ciphers/baconian_cipher.py:30:11     - Unknown word (BABAB)      -- "x": "BABAB",
./ciphers/baconian_cipher.py:31:11     - Unknown word (BABBA)      -- "y": "BABBA",
./ciphers/baconian_cipher.py:32:11     - Unknown word (BABBB)      -- "z": "BABBB",
./ciphers/baconian_cipher.py:45:6      - Unknown word (AABBBAABAAABABAABABAABBAB) -- 'AABBBAABAAABABAABABAABBAB'
./ciphers/baconian_cipher.py:47:32     - Unknown word (BABAAABBABBAAAAABABAAAABB) -- AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB'
./ciphers/baconian_cipher.py:8:11      - Unknown word (AAAAB)      -- "b": "AAAAB",
./ciphers/baconian_cipher.py:9:11      - Unknown word (AAABA)      -- "c": "AAABA",
./ciphers/base32.py:10:7      - Unknown word (GEZDGNBVGY) -- b'GEZDGNBVGY======'
./ciphers/base32.py:12:12     - Unknown word (ZJANRXW)    -- b'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW
./ciphers/base32.py:12:20     - Unknown word (ZZAMNXW)    -- b'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY=
./ciphers/base32.py:12:29     - Unknown word (DMMV)       -- ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY='
./ciphers/base32.py:12:38     - Unknown word (UOJUW)      -- ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY='
./ciphers/base32.py:12:7      - Unknown word (ONXW)       -- b'ONXW2ZJANRXW4ZZAMNXW24DMMV
./ciphers/base32.py:8:13      - Unknown word (DPEBLW)     -- b'JBSWY3DPEBLW64TMMQQQ===='
./ciphers/base32.py:8:21      - Unknown word (TMMQQQ)     -- b'JBSWY3DPEBLW64TMMQQQ===='
./ciphers/base32.py:8:7       - Unknown word (JBSWY)      -- b'JBSWY3DPEBLW64TMMQQQ===='
./ciphers/base64.py:17:53     - Unknown word (Steganography) -- encoding can be used in Steganography to hide data in these
./ciphers/beaufort_cipher.py:17:6      - Unknown word (SECRETSECRETSECRE) -- 'SECRETSECRETSECRE'
./ciphers/beaufort_cipher.py:2:15      - Unknown word (Radadiya)   -- Author: Mohit Radadiya
./ciphers/beaufort_cipher.py:2:9       - Unknown word (Mohit)      -- Author: Mohit Radadiya
./ciphers/beaufort_cipher.py:36:10     - Unknown word (PAYUWL)            -- 'BDC PAYUWL JPAIYI'
./ciphers/beaufort_cipher.py:36:17     - Unknown word (JPAIYI)            -- 'BDC PAYUWL JPAIYI'
./ciphers/bifid.py:58:53     - Unknown word (qtltbdxrxlk) -- encode('testmessage') == 'qtltbdxrxlk'
./ciphers/brute_force_caesar_cipher.py:10:30     - Unknown word (QJABQRU)    -- Decryption using Key #3: QJABQRU MJASR
./ciphers/brute_force_caesar_cipher.py:10:38     - Unknown word (MJASR)      -- using Key #3: QJABQRU MJASR
./ciphers/brute_force_caesar_cipher.py:11:30     - Unknown word (PIZAPQT)    -- Decryption using Key #4: PIZAPQT LIZRQ
./ciphers/brute_force_caesar_cipher.py:11:38     - Unknown word (LIZRQ)      -- using Key #4: PIZAPQT LIZRQ
./ciphers/brute_force_caesar_cipher.py:12:30     - Unknown word (OHYZOPS)    -- Decryption using Key #5: OHYZOPS KHYQP
./ciphers/brute_force_caesar_cipher.py:12:38     - Unknown word (KHYQP)      -- using Key #5: OHYZOPS KHYQP
./ciphers/brute_force_caesar_cipher.py:13:30     - Unknown word (NGXYNOR)    -- Decryption using Key #6: NGXYNOR JGXPO
./ciphers/brute_force_caesar_cipher.py:13:38     - Unknown word (JGXPO)      -- using Key #6: NGXYNOR JGXPO
./ciphers/brute_force_caesar_cipher.py:14:30     - Unknown word (MFWXMNQ)    -- Decryption using Key #7: MFWXMNQ IFWON
./ciphers/brute_force_caesar_cipher.py:14:38     - Unknown word (IFWON)      -- using Key #7: MFWXMNQ IFWON
./ciphers/brute_force_caesar_cipher.py:15:30     - Unknown word (LEVWLMP)    -- Decryption using Key #8: LEVWLMP HEVNM
./ciphers/brute_force_caesar_cipher.py:15:38     - Unknown word (HEVNM)      -- using Key #8: LEVWLMP HEVNM
./ciphers/brute_force_caesar_cipher.py:16:30     - Unknown word (KDUVKLO)    -- Decryption using Key #9: KDUVKLO GDUML
./ciphers/brute_force_caesar_cipher.py:16:38     - Unknown word (GDUML)      -- using Key #9: KDUVKLO GDUML
./ciphers/brute_force_caesar_cipher.py:17:31     - Unknown word (JCTUJKN)    -- Decryption using Key #10: JCTUJKN FCTLK
./ciphers/brute_force_caesar_cipher.py:17:39     - Unknown word (FCTLK)      -- using Key #10: JCTUJKN FCTLK
./ciphers/brute_force_caesar_cipher.py:18:31     - Unknown word (IBSTIJM)    -- Decryption using Key #11: IBSTIJM EBSKJ
./ciphers/brute_force_caesar_cipher.py:18:39     - Unknown word (EBSKJ)      -- using Key #11: IBSTIJM EBSKJ
./ciphers/brute_force_caesar_cipher.py:19:31     - Unknown word (HARSHIL)    -- Decryption using Key #12: HARSHIL DARJI
./ciphers/brute_force_caesar_cipher.py:19:39     - Unknown word (DARJI)      -- using Key #12: HARSHIL DARJI
./ciphers/brute_force_caesar_cipher.py:20:31     - Unknown word (GZQRGHK)    -- Decryption using Key #13: GZQRGHK CZQIH
./ciphers/brute_force_caesar_cipher.py:20:39     - Unknown word (CZQIH)      -- using Key #13: GZQRGHK CZQIH
./ciphers/brute_force_caesar_cipher.py:21:31     - Unknown word (FYPQFGJ)    -- Decryption using Key #14: FYPQFGJ BYPHG
./ciphers/brute_force_caesar_cipher.py:21:39     - Unknown word (BYPHG)      -- using Key #14: FYPQFGJ BYPHG
./ciphers/brute_force_caesar_cipher.py:22:31     - Unknown word (EXOPEFI)    -- Decryption using Key #15: EXOPEFI AXOGF
./ciphers/brute_force_caesar_cipher.py:22:39     - Unknown word (AXOGF)      -- using Key #15: EXOPEFI AXOGF
./ciphers/brute_force_caesar_cipher.py:23:31     - Unknown word (DWNODEH)    -- Decryption using Key #16: DWNODEH ZWNFE
./ciphers/brute_force_caesar_cipher.py:23:39     - Unknown word (ZWNFE)      -- using Key #16: DWNODEH ZWNFE
./ciphers/brute_force_caesar_cipher.py:24:31     - Unknown word (CVMNCDG)    -- Decryption using Key #17: CVMNCDG YVMED
./ciphers/brute_force_caesar_cipher.py:24:39     - Unknown word (YVMED)      -- using Key #17: CVMNCDG YVMED
./ciphers/brute_force_caesar_cipher.py:25:31     - Unknown word (BULMBCF)    -- Decryption using Key #18: BULMBCF XULDC
./ciphers/brute_force_caesar_cipher.py:25:39     - Unknown word (XULDC)      -- using Key #18: BULMBCF XULDC
./ciphers/brute_force_caesar_cipher.py:26:31     - Unknown word (ATKLABE)    -- Decryption using Key #19: ATKLABE WTKCB
./ciphers/brute_force_caesar_cipher.py:26:39     - Unknown word (WTKCB)      -- using Key #19: ATKLABE WTKCB
./ciphers/brute_force_caesar_cipher.py:27:31     - Unknown word (ZSJKZAD)    -- Decryption using Key #20: ZSJKZAD VSJBA
./ciphers/brute_force_caesar_cipher.py:27:39     - Unknown word (VSJBA)      -- using Key #20: ZSJKZAD VSJBA
./ciphers/brute_force_caesar_cipher.py:28:31     - Unknown word (YRIJYZC)    -- Decryption using Key #21: YRIJYZC URIAZ
./ciphers/brute_force_caesar_cipher.py:28:39     - Unknown word (URIAZ)      -- using Key #21: YRIJYZC URIAZ
./ciphers/brute_force_caesar_cipher.py:29:31     - Unknown word (XQHIXYB)    -- Decryption using Key #22: XQHIXYB TQHZY
./ciphers/brute_force_caesar_cipher.py:29:39     - Unknown word (TQHZY)      -- using Key #22: XQHIXYB TQHZY
./ciphers/brute_force_caesar_cipher.py:30:31     - Unknown word (WPGHWXA)    -- Decryption using Key #23: WPGHWXA SPGYX
./ciphers/brute_force_caesar_cipher.py:30:39     - Unknown word (SPGYX)      -- using Key #23: WPGHWXA SPGYX
./ciphers/brute_force_caesar_cipher.py:31:31     - Unknown word (VOFGVWZ)    -- Decryption using Key #24: VOFGVWZ ROFXW
./ciphers/brute_force_caesar_cipher.py:31:39     - Unknown word (ROFXW)      -- using Key #24: VOFGVWZ ROFXW
./ciphers/brute_force_caesar_cipher.py:32:31     - Unknown word (UNEFUVY)    -- Decryption using Key #25: UNEFUVY QNEWV
./ciphers/brute_force_caesar_cipher.py:32:39     - Unknown word (QNEWV)      -- using Key #25: UNEFUVY QNEWV
./ciphers/brute_force_caesar_cipher.py:6:18      - Unknown word (TMDETUX)    -- >>> decrypt('TMDETUX PMDVU')
./ciphers/brute_force_caesar_cipher.py:6:26      - Unknown word (PMDVU)      -- >> decrypt('TMDETUX PMDVU')
./ciphers/brute_force_caesar_cipher.py:8:30      - Unknown word (SLCDSTW)    -- Decryption using Key #1: SLCDSTW OLCUT
./ciphers/brute_force_caesar_cipher.py:8:38      - Unknown word (OLCUT)      -- using Key #1: SLCDSTW OLCUT
./ciphers/brute_force_caesar_cipher.py:9:30      - Unknown word (RKBCRSV)    -- Decryption using Key #2: RKBCRSV NKBTS
./ciphers/brute_force_caesar_cipher.py:9:38      - Unknown word (NKBTS)      -- using Key #2: RKBCRSV NKBTS
./ciphers/caesar_cipher.py:188:30    - Unknown word (IH'N)       -- brute_force("jFyuMy xIH'N vLONy zILwy Gy!")[2
./ciphers/caesar_cipher.py:47:33     - Unknown word (Jgnnq)      -- final message would be "Jgnnq, ecrvckp"
./ciphers/caesar_cipher.py:47:40     - Unknown word (ecrvckp)    -- message would be "Jgnnq, ecrvckp"
./ciphers/caesar_cipher.py:56:11     - Unknown word (Cqks)       -- 'bpm yCqks jzwEv nwF rCuxA wDmz
./ciphers/caesar_cipher.py:62:18     - Unknown word (fqumfgjy)   -- 'f qtbjwhfxj fqumfgjy'
./ciphers/caesar_cipher.py:62:8      - Unknown word (qtbjwhfxj)  -- 'f qtbjwhfxj fqumfgjy'
./ciphers/decrypt_caesar_with_chi_squared.py:112:24    - Unknown word (jhlzhy)     -- ... 'dof pz aol jhlzhy jpwoly zv wvwbshy? pa
./ciphers/decrypt_caesar_with_chi_squared.py:112:31    - Unknown word (jpwoly)     -- 'dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv
./ciphers/decrypt_caesar_with_chi_squared.py:112:41    - Unknown word (wvwbshy)    -- aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr
./ciphers/decrypt_caesar_with_chi_squared.py:112:60    - Unknown word (lhzf)       -- zv wvwbshy? pa pz avv lhzf av jyhjr!'
./ciphers/decrypt_caesar_with_chi_squared.py:112:68    - Unknown word (jyhjr)      -- wvwbshy? pa pz avv lhzf av jyhjr!'
./ciphers/decrypt_caesar_with_chi_squared.py:117:42    - Unknown word (crybd)      -- caesar_with_chi_squared('crybd cdbsxq')
./ciphers/decrypt_caesar_with_chi_squared.py:117:48    - Unknown word (cdbsxq)     -- with_chi_squared('crybd cdbsxq')
./ciphers/decrypt_caesar_with_chi_squared.py:120:42    - Unknown word (Crybd)      -- caesar_with_chi_squared('Crybd Cdbsxq', case_sensitive
./ciphers/decrypt_caesar_with_chi_squared.py:120:48    - Unknown word (Cdbsxq)     -- with_chi_squared('Crybd Cdbsxq', case_sensitive=True
./ciphers/decrypt_caesar_with_chi_squared.py:200:31    - Unknown word (excepcted)  -- # Get the excepcted amount of times the
./ciphers/decrypt_caesar_with_chi_squared.py:56:18     - Unknown word (ifmmp)      -- Cipher text: ifmmp
./ciphers/deterministic_miller_rabin.py:1:30      - Unknown word (bizzfitch)  -- Created by Nathan Damon, @bizzfitch on github
./ciphers/diffie_hellman.py:1:22      - Unknown word (hexlify)    -- from binascii import hexlify
./ciphers/diffie_hellman.py:3:16      - Unknown word (urandom)    -- from os import urandom
./ciphers/diffie_hellman.py:5:40      - Unknown word (MODP)       -- Modular Exponential (MODP) Diffie-Hellman groups
./ciphers/diffie_hellman.py:5:46      - Unknown word (Diffie)     -- Modular Exponential (MODP) Diffie-Hellman groups for
./ciphers/elgamal_key_generator.py:61:21     - Unknown word (elgamal)    -- make_key_files("elgamal", 2048)
./ciphers/enigma_machine2.py:106:5     - Unknown word (pbdict)                     -- pbdict = _plugboard(pb)
./ciphers/enigma_machine2.py:111:16    - Unknown word (pbstring)                   -- def _plugboard(pbstring: str) -> dict[str, str
./ciphers/enigma_machine2.py:142:5     - Unknown word (tmppbl)                     -- tmppbl = set()
./ciphers/enigma_machine2.py:185:7     - Unknown word (VKLEPDBGRNWTFCJOHQAMUZYIXS) -- | VKLEPDBGRNWTFCJOHQAMUZYIXS |
./ciphers/enigma_machine2.py:193:7     - Unknown word (ABCDEFGHIJKLM)              -- | ABCDEFGHIJKLM | e.g. E is paired to
./ciphers/enigma_machine2.py:194:7     - Unknown word (ZYXWVUTSRQPON)              -- | ZYXWVUTSRQPON | so when E goes in
./ciphers/enigma_machine2.py:203:12    - Unknown word (JUHHI)                      -- 'KORYH JUHHI!'
./ciphers/enigma_machine2.py:203:6     - Unknown word (KORYH)                      -- 'KORYH JUHHI!'
./ciphers/enigma_machine2.py:204:24    - Unknown word (juhhi)                      -- >>> enigma('KORYH, juhhi!', (1, 2, 1), plugb
./ciphers/enigma_machine2.py:207:12    - Unknown word (QWOBU)                      -- 'FPNCZ QWOBU!'
./ciphers/enigma_machine2.py:207:6     - Unknown word (FPNCZ)                      -- 'FPNCZ QWOBU!'
./ciphers/enigma_machine2.py:29:11     - Unknown word (EGZWVONAHDCLFQMSIPJBYUKXTR) -- rotor1 = "EGZWVONAHDCLFQMSIPJBYUKXTR"
./ciphers/enigma_machine2.py:30:11     - Unknown word (FOBHMDKEXQNRAULPGSJVTYICZW) -- rotor2 = "FOBHMDKEXQNRAULPGSJVTYICZW"
./ciphers/enigma_machine2.py:31:11     - Unknown word (ZJXESIUQLHAVRMDOYGTNFWPBKC) -- rotor3 = "ZJXESIUQLHAVRMDOYGTNFWPBKC"
./ciphers/enigma_machine2.py:63:11     - Unknown word (RMDJXFUWGISLHVTCQNKYPBEZOA) -- rotor4 = "RMDJXFUWGISLHVTCQNKYPBEZOA"
./ciphers/enigma_machine2.py:64:11     - Unknown word (SGLCPQWZHKXAREONTFBVIYJUDM) -- rotor5 = "SGLCPQWZHKXAREONTFBVIYJUDM"
./ciphers/enigma_machine2.py:65:11     - Unknown word (HVSICLTYKQUBXDWAJZOMFGPREN) -- rotor6 = "HVSICLTYKQUBXDWAJZOMFGPREN"
./ciphers/enigma_machine2.py:66:11     - Unknown word (RZWQHFMVDBKICJLNTUXAGYPSOE) -- rotor7 = "RZWQHFMVDBKICJLNTUXAGYPSOE"
./ciphers/enigma_machine2.py:67:11     - Unknown word (LFKIJODBEGAMQPXVUHYSTCZRWN) -- rotor8 = "LFKIJODBEGAMQPXVUHYSTCZRWN"
./ciphers/enigma_machine2.py:68:11     - Unknown word (KOAEGVDHXPQZMLFTYWJNBRCIUS) -- rotor9 = "KOAEGVDHXPQZMLFTYWJNBRCIUS"
./ciphers/enigma_machine2.py:72:29     - Unknown word (rotsel)                     -- rotpos: RotorPositionT, rotsel: RotorSelectionT, pb
./ciphers/enigma_machine2.py:82:26     - Unknown word (positon)                    -- param rotpos: rotor_positon
./ciphers/enigma_machine2.py:84:16     - Unknown word (plugb)                      -- :param pb: plugb -> validated and transformed
./ciphers/hill_cipher.py:117:10    - Unknown word (TESTINGHILLCIPHERR) -- 'TESTINGHILLCIPHERR'
./ciphers/hill_cipher.py:133:10    - Unknown word (WHXYJOLM)           -- 'WHXYJOLM9C6XT085LL'
./ciphers/hill_cipher.py:63:21     - Unknown word (vectorize)  -- modulus = numpy.vectorize(lambda x: x % 36)
./ciphers/mixed_keyword_cypher.py:24:6      - Unknown word (XKJGUFMJST) -- 'XKJGUFMJST'
./ciphers/mono_alphabetic_ciphers.py:10:28     - Unknown word (QWERTYUIOPASDFGHJKLZXCVBNM) -- translate_message("QWERTYUIOPASDFGHJKLZXCVBNM","Hello World","encrypt
./ciphers/mono_alphabetic_ciphers.py:11:12     - Unknown word (Bidsm)                      -- 'Pcssi Bidsm'
./ciphers/mono_alphabetic_ciphers.py:11:6      - Unknown word (Pcssi)                      -- 'Pcssi Bidsm'
./ciphers/mono_alphabetic_ciphers.py:42:12     - Unknown word (Vgksr)                      -- 'Itssg Vgksr'
./ciphers/mono_alphabetic_ciphers.py:42:6      - Unknown word (Itssg)                      -- 'Itssg Vgksr'
./ciphers/playfair_cipher.py:44:17     - Unknown word (ABCDEFGHIKLMNOPQRSTUVWXYZ) -- alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
./ciphers/playfair_cipher.py:6:5       - Unknown word (chunker)    -- def chunker(seq: Iterable[str],
./ciphers/porta_cipher.py:10:29     - Unknown word (WXYZNOPQRSTUV) -- ("ABCDEFGHIJKLM", "WXYZNOPQRSTUV"),
./ciphers/porta_cipher.py:12:29     - Unknown word (VWXYZNOPQRSTU) -- ("ABCDEFGHIJKLM", "VWXYZNOPQRSTU"),
./ciphers/porta_cipher.py:14:29     - Unknown word (UVWXYZNOPQRST) -- ("ABCDEFGHIJKLM", "UVWXYZNOPQRST"),
./ciphers/porta_cipher.py:16:29     - Unknown word (TUVWXYZNOPQRS) -- ("ABCDEFGHIJKLM", "TUVWXYZNOPQRS"),
./ciphers/porta_cipher.py:18:29     - Unknown word (STUVWXYZNOPQR) -- ("ABCDEFGHIJKLM", "STUVWXYZNOPQR"),
./ciphers/porta_cipher.py:20:29     - Unknown word (RSTUVWXYZNOPQ) -- ("ABCDEFGHIJKLM", "RSTUVWXYZNOPQ"),
./ciphers/porta_cipher.py:22:29     - Unknown word (QRSTUVWXYZNOP) -- ("ABCDEFGHIJKLM", "QRSTUVWXYZNOP"),
./ciphers/porta_cipher.py:24:29     - Unknown word (PQRSTUVWXYZNO) -- ("ABCDEFGHIJKLM", "PQRSTUVWXYZNO"),
./ciphers/porta_cipher.py:26:29     - Unknown word (OPQRSTUVWXYZN) -- ("ABCDEFGHIJKLM", "OPQRSTUVWXYZN"),
./ciphers/porta_cipher.py:2:29      - Unknown word (NOPQRSTUVWXYZ) -- ("ABCDEFGHIJKLM", "NOPQRSTUVWXYZ"),
./ciphers/porta_cipher.py:44:6      - Unknown word (QRACRWU)       -- 'QRACRWU'
./ciphers/porta_cipher.py:4:29      - Unknown word (ZNOPQRSTUVWXY) -- ("ABCDEFGHIJKLM", "ZNOPQRSTUVWXY"),
./ciphers/porta_cipher.py:6:29      - Unknown word (YZNOPQRSTUVWX) -- ("ABCDEFGHIJKLM", "YZNOPQRSTUVWX"),
./ciphers/porta_cipher.py:8:29      - Unknown word (XYZNOPQRSTUVW) -- ("ABCDEFGHIJKLM", "XYZNOPQRSTUVW"),
./ciphers/rabin_miller.py:1:3       - Unknown word (Primality)  -- # Primality Testing with the Rabin
./ciphers/rail_fence_cipher.py:11:10     - Unknown word (olordll)    -- 'HWe olordll'
./ciphers/rot13.py:8:16      - Unknown word (onax)       -- "Zl frperg onax nppbhag ahzore vf 1
./ciphers/rot13.py:8:21      - Unknown word (nppbhag)    -- "Zl frperg onax nppbhag ahzore vf 173-52946
./ciphers/rot13.py:8:29      - Unknown word (ahzore)     -- frperg onax nppbhag ahzore vf 173-52946 fb qba
./ciphers/rot13.py:8:52      - Unknown word (qba'g)      -- ahzore vf 173-52946 fb qba'g gryy nalbar!!"
./ciphers/rot13.py:8:58      - Unknown word (gryy)       -- vf 173-52946 fb qba'g gryy nalbar!!"
./ciphers/rot13.py:8:63      - Unknown word (nalbar)     -- 52946 fb qba'g gryy nalbar!!"
./ciphers/rot13.py:8:9       - Unknown word (frperg)     -- "Zl frperg onax nppbhag ahzore
./ciphers/rsa_factorization.py:16:5      - Unknown word (rsafactor)  -- def rsafactor(d: int, e: int, n: int
./ciphers/shuffled_shift_cipher.py:132:44    - Unknown word (Xyqe)                       -- ShuffledShiftCipher('4PYIXyqeQZr44')
./ciphers/shuffled_shift_cipher.py:66:10     - Unknown word (rtype)      -- :rtype: list
./ciphers/shuffled_shift_cipher.py:82:38     - Unknown word (MLKJIHGF)   -- shuffled parts: [A,CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]
./ciphers/shuffled_shift_cipher.py:82:47     - Unknown word (RQPON)      -- parts: [A,CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]
./ciphers/shuffled_shift_cipher.py:82:53     - Unknown word (ZYXWVUTS)   -- CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]
./ciphers/shuffled_shift_cipher.py:83:35     - Unknown word (ACBEDMLKJIHGFRQPONZYXWVUTS) -- shuffled __key_list : ACBEDMLKJIHGFRQPONZYXWVUTS
./ciphers/simple_keyword_cypher.py:11:12     - Unknown word (dups)       -- key_no_dups = ""
./ciphers/simple_keyword_cypher.py:50:12     - Unknown word (VMQJB)      -- 'CYJJM VMQJB!!'
./ciphers/simple_keyword_cypher.py:50:6      - Unknown word (CYJJM)      -- 'CYJJM VMQJB!!'
./ciphers/simple_substitution_cipher.py:36:56     - Unknown word (Harshil)                    -- LFWOAYUISVKMNXPBDCRJTQEGHZ', 'Harshil Darji')
./ciphers/simple_substitution_cipher.py:36:64     - Unknown word (Darji)                      -- SVKMNXPBDCRJTQEGHZ', 'Harshil Darji')
./ciphers/simple_substitution_cipher.py:37:14     - Unknown word (Olcvs)                      -- 'Ilcrism Olcvs'
./ciphers/simple_substitution_cipher.py:37:6      - Unknown word (Ilcrism)                    -- 'Ilcrism Olcvs'
./ciphers/simple_substitution_cipher.py:9:12      - Unknown word (LFWOAYUISVKMNXPBDCRJTQEGHZ) -- key = "LFWOAYUISVKMNXPBDCRJTQEGHZ"
./ciphers/trafid_cipher.py:133:39    - Unknown word (EPSDUCVWYM) -- encrypt_message(msg, "EPSDUCVWYM.ZLKXNBTFGORIJHAQ")
./ciphers/trafid_cipher.py:133:50    - Unknown word (ZLKXNBTFGORIJHAQ) -- message(msg, "EPSDUCVWYM.ZLKXNBTFGORIJHAQ")
./ciphers/transposition_cipher.py:28:12     - Unknown word (Dsahrij)    -- 'Hlia rDsahrij'
./ciphers/transposition_cipher.py:28:6      - Unknown word (Hlia)       -- 'Hlia rDsahrij'
./ciphers/vigenere_cipher.py:22:63     - Unknown word (Dharmaj)    -- is Harshil Darji from Dharmaj.')
./ciphers/vigenere_cipher.py:23:14     - Unknown word (Odrjqqs)    -- 'Akij ra Odrjqqs Gaisq muod Mphumrs.
./ciphers/vigenere_cipher.py:23:22     - Unknown word (Gaisq)      -- 'Akij ra Odrjqqs Gaisq muod Mphumrs.'
./ciphers/vigenere_cipher.py:23:28     - Unknown word (muod)       -- Akij ra Odrjqqs Gaisq muod Mphumrs.'
./ciphers/vigenere_cipher.py:23:33     - Unknown word (Mphumrs)    -- ra Odrjqqs Gaisq muod Mphumrs.'
./ciphers/vigenere_cipher.py:23:6      - Unknown word (Akij)       -- 'Akij ra Odrjqqs Gaisq muod
./ciphers/xor_cipher.py:131:66    - Unknown word (fout)       -- encrypt.out", "w+") as fout:
./compression/burrows_wheeler.py:31:31     - Unknown word (ANANA)      -- BANANA|', 'BANANA|^', 'ANANA|^B', 'NANA|^BA', 'ANA
./compression/burrows_wheeler.py:31:43     - Unknown word (NANA)       -- BANANA|^', 'ANANA|^B', 'NANA|^BA', 'ANA|^BAN', 'NA
./compression/burrows_wheeler.py:31:71     - Unknown word (BANA)       -- BA', 'ANA|^BAN', 'NA|^BANA',
./compression/burrows_wheeler.py:32:9      - Unknown word (BANAN)      -- 'A|^BANAN', '|^BANANA']
./compression/burrows_wheeler.py:34:32     - Unknown word (casaa)      -- asa_da_casa', '_asa_da_casaa', 'asa_da_casaa_',
./compression/burrows_wheeler.py:36:40     - Unknown word (asaa)       -- , 'casaa_asa_da_', 'asaa_asa_da_c', 'saa_asa
./compression/burrows_wheeler.py:39:39     - Unknown word (namabananapa) -- namabanana', 'anamabananap', 'namabananapa', 'amabananapan',
./compression/burrows_wheeler.py:40:22     - Unknown word (abananapanam) -- 'mabananapana', 'abananapanam', 'bananapanama', 'ananapanam
./compression/burrows_wheeler.py:41:54     - Unknown word (apanamabanan) -- apanamaban', 'napanamabana', 'apanamabanan']
./compression/burrows_wheeler.py:41:6      - Unknown word (nanapanamaba) -- 'nanapanamaba', 'anapanamaban', 'napanamaba
./compression/burrows_wheeler.py:65:21     - Unknown word (aaaadss)      -- {'bwt_string': 'aaaadss_c__aa', 'idx_original
./compression/burrows_wheeler.py:67:21     - Unknown word (mnpbnnaaaaaa) -- {'bwt_string': 'mnpbnnaaaaaa', 'idx_original_string
./compression/lempel_ziv_decompress.py:2:43      - Unknown word (Lempel)     -- several implementations of Lempel–Ziv–Welch decompression
./compression/lz77.py:150:55    - Unknown word (abrarrarrad)         -- find_encoding_token("abrarrarrad", "abracad").offset
./compression/lz77.py:150:70    - Unknown word (abracad)             -- token("abrarrarrad", "abracad").offset
./compression/lz77.py:152:55    - Unknown word (adabrarrarrad)       -- find_encoding_token("adabrarrarrad", "cabrac").length
./compression/lz77.py:152:72    - Unknown word (cabrac)              -- token("adabrarrarrad", "cabrac").length
./compression/lz77.py:201:59    - Unknown word (rarrad)              -- match_length_from_index("rarrad", "adabrar", 0, 4)
./compression/lz77.py:201:69    - Unknown word (adabrar)             -- from_index("rarrad", "adabrar", 0, 4)
./compression/lz77.py:22:2      - Unknown word (cabracadabrarrarrad) -- "cabracadabrarrarrad" <-> [(0, 0, 'c'),
./compression/lz77.py:24:2      - Unknown word (ababcbababaa)        -- "ababcbababaa" <-> [(0, 0, 'a'),
./compression/lz77.py:25:2      - Unknown word (aacaacabcabaaac)     -- "aacaacabcabaaac" <-> [(0, 0, 'a'),
./compression/lz77.py:35:21     - Unknown word (Harcekova)           -- __author__ = "Lucia Harcekova"
./compression/lz77.py:5:53      - Unknown word (LZSS)       -- variations including LZW, LZSS, LZMA and others
./compression/peak_signal_to_noise_ratio.py:28:20     - Unknown word (imread)     -- original = cv2.imread(os.path.join(dir_path
./compression/peak_signal_to_noise_ratio.py:2:30      - Unknown word (PSNR)       -- signal-to-noise ratio - PSNR
./compression/run_length_encoding.py:13:28     - Unknown word (AAADDDDDDFFFCCCAAVVVV) -- run_length_encode("AAADDDDDDFFFCCCAAVVVV")
./compression/run_length_encoding.py:7:28      - Unknown word (AAAABBBCCDAA) -- run_length_encode("AAAABBBCCDAA")
./computer_vision/cnn_classification.py:17:22     - Unknown word (iamges)     -- . The labels of the iamges will be extracted from
./computer_vision/cnn_classification.py:31:7      - Unknown word (Initialising) -- # Initialising the CNN
./computer_vision/cnn_classification.py:39:72     - Unknown word (relu)         -- 64, 3), activation="relu")
./computer_vision/flip_augmentation.py:26:16     - Unknown word (annos)      -- img_paths, annos = get_dataset(LABEL
./computer_vision/flip_augmentation.py:35:13     - Unknown word (imwrite)    -- cv2.imwrite(f"{file_root}.jpg",
./computer_vision/flip_augmentation.py:35:53     - Unknown word (IMWRITE)    -- root}.jpg", image, [cv2.IMWRITE_JPEG_QUALITY, 85])
./computer_vision/flip_augmentation.py:86:32     - Unknown word (narray)     -- new_imgs_list <type: narray>: image after resize
./computer_vision/harris_corner.py:14:23     - Unknown word (neighbourhoods) -- window_size : neighbourhoods considered
./computer_vision/horn_schunck.py:15:12     - Unknown word (ndimage)    -- from scipy.ndimage import convolve
./computer_vision/horn_schunck.py:2:14      - Unknown word (Schunck)    -- The Horn-Schunck method estimates the
./computer_vision/horn_schunck.py:45:24     - Unknown word (arange)     -- np.meshgrid(np.arange(0, image.shape[1]),
./computer_vision/horn_schunck.py:61:10     - Unknown word (schunck)    -- def horn_schunck(
./computer_vision/mosaic_augmentation.py:110:5     - Unknown word (divid)       -- divid_point_x = int(scale
./computer_vision/mosaic_augmentation.py:11:3      - Unknown word (Parrameters) -- # Parrameters
./computer_vision/mosaic_augmentation.py:29:9      - Unknown word (idxs)        -- idxs = random.sample(range
./conversions/astronomical_length_scale_conversion.py:25:6      - Unknown word (gigametre)  -- "gigametre": "Gm",
./conversions/astronomical_length_scale_conversion.py:26:6      - Unknown word (terametre)  -- "terametre": "Tm",
./conversions/astronomical_length_scale_conversion.py:27:6      - Unknown word (petametre)  -- "petametre": "Pm",
./conversions/astronomical_length_scale_conversion.py:28:6      - Unknown word (exametre)   -- "exametre": "Em",
./conversions/astronomical_length_scale_conversion.py:29:6      - Unknown word (zettametre) -- "zettametre": "Zm",
./conversions/astronomical_length_scale_conversion.py:30:6      - Unknown word (yottametre) -- "yottametre": "Ym",
./conversions/astronomical_length_scale_conversion.py:4:30      - Unknown word (Gigametre)  -- Kilometre, Megametre, Gigametre,
./conversions/astronomical_length_scale_conversion.py:5:1       - Unknown word (Terametre)  -- Terametre, Petametre, Exametre
./conversions/astronomical_length_scale_conversion.py:5:12      - Unknown word (Petametre)  -- Terametre, Petametre, Exametre, Zettametre
./conversions/astronomical_length_scale_conversion.py:5:23      - Unknown word (Exametre)   -- Terametre, Petametre, Exametre, Zettametre, Yottametre
./conversions/astronomical_length_scale_conversion.py:5:33      - Unknown word (Zettametre) -- Petametre, Exametre, Zettametre, Yottametre
./conversions/astronomical_length_scale_conversion.py:5:45      - Unknown word (Yottametre) -- Exametre, Zettametre, Yottametre
./conversions/binary_to_hexadecimal.py:40:7      - Unknown word (Sanitising) -- # Sanitising parameter
./conversions/energy_conversions.py:5:64      - Unknown word (nutr)       -- newtonmeter, calorie_nutr,\
./conversions/length_conversion.py:39:6      - Unknown word (inche)      -- "inche": "in",  # Trailing
./conversions/molecular_chemistry.py:10:27     - Unknown word (nfactor)    -- molarity_to_normality(nfactor: int, moles: float,
./conversions/octal_to_binary.py:2:11      - Unknown word (Bama)       -- * Author: Bama Charan Chhandogi (https
./conversions/octal_to_binary.py:2:23      - Unknown word (Chhandogi)  -- Author: Bama Charan Chhandogi (https://github.com
./conversions/prefix_conversions_string.py:22:5      - Unknown word (yotta)      -- yotta = 80
./conversions/prefix_conversions_string.py:23:5      - Unknown word (zetta)      -- zetta = 70
./conversions/prefix_conversions_string.py:25:5      - Unknown word (peta)       -- peta = 50
./conversions/prefix_conversions_string.py:27:5      - Unknown word (giga)       -- giga = 30
./conversions/prefix_conversions_string.py:2:21      - Unknown word (Lullo)      -- * Author: Manuel Di Lullo (https://github.com
./conversions/prefix_conversions_string.py:42:5      - Unknown word (hecto)      -- hecto = 2
./conversions/prefix_conversions_string.py:43:5      - Unknown word (deca)       -- deca = 1
./conversions/prefix_conversions_string.py:44:5      - Unknown word (deci)       -- deci = -1
./conversions/prefix_conversions_string.py:45:5      - Unknown word (centi)      -- centi = -2
./conversions/prefix_conversions_string.py:46:5      - Unknown word (milli)      -- milli = -3
./conversions/prefix_conversions_string.py:49:5      - Unknown word (pico)       -- pico = -12
./conversions/prefix_conversions_string.py:50:5      - Unknown word (femto)      -- femto = -15
./conversions/prefix_conversions_string.py:51:5      - Unknown word (atto)       -- atto = -18
./conversions/prefix_conversions_string.py:52:5      - Unknown word (zepto)      -- zepto = -21
./conversions/prefix_conversions_string.py:53:5      - Unknown word (yocto)      -- yocto = -24
./conversions/prefix_conversions_string.py:5:67      - Unknown word (pyles)      -- repository by lance-pyles
./conversions/roman_numerals.py:24:29     - Unknown word (CLIV)       -- tests = {"III": 3, "CLIV": 154, "MIX": 1009,
./conversions/roman_numerals.py:24:68     - Unknown word (MMMCMXCIX)  -- 1009, "MMD": 2500, "MMMCMXCIX": 3999}
./conversions/temperature_conversions.py:306:5     - Unknown word (reaumur)    -- def reaumur_to_kelvin(reaumur: float
./conversions/temperature_conversions.py:4:43      - Unknown word (ndigits)    -- fahrenheit(celsius: float, ndigits: int = 2) -> float:
./conversions/weight_conversion.py:4:15      - Unknown word (Anubhav)    -- __author__ = "Anubhav Solanki"
./conversions/weight_conversion.py:4:23      - Unknown word (Solanki)    -- author__ = "Anubhav Solanki"
./data_structures/binary_tree/avl_tree.py:240:9     - Unknown word (Ltree)      -- class AVLtree:
./data_structures/binary_tree/avl_tree.py:293:26    - Unknown word (traversale) -- -> str:  # a level traversale, gives a more intuitive
./data_structures/binary_tree/binary_search_tree_recursive.py:233:9     - Unknown word (inorder)    -- def inorder_traversal(self) -> Iterator
./data_structures/binary_tree/binary_search_tree_recursive.py:600:12    - Unknown word (Inorder)    -- print("Inorder traversal:", inorder
./data_structures/binary_tree/inorder_tree_traversal_2022.py:3:9       - Unknown word (Gurneet)    -- Author: Gurneet Singh
./data_structures/binary_tree/lazy_segment_tree.py:128:5     - Unknown word (segt)       -- segt = SegmentTree(size)
./data_structures/binary_tree/red_black_tree.py:710:5     - Unknown word (pytests)    -- def pytests() -> None:
./data_structures/binary_tree/treap.py:124:14    - Unknown word (treap)      -- def interact_treap(root: Node | None, args
./data_structures/binary_tree/treap.py:8:5       - Unknown word (Treap's)    -- Treap's node
./data_structures/binary_tree/treap.py:9:5       - Unknown word (Treap)      -- Treap is a binary tree by
./data_structures/binary_tree/wavelet_tree.py:120:5     - Unknown word (quantile)   -- def quantile(node: Node | None, index
./data_structures/binary_tree/wavelet_tree.py:18:14     - Unknown word (maxx)       -- self.maxx: int = -1
./data_structures/disjoint_set/alternate_disjoint_set.py:54:26     - Unknown word (disj)       -- def get_parent(self, disj_set: int) -> int:
./data_structures/hashing/hash_map.py:7:32      - Unknown word (Hettinger)  -- Dictionaries by Raymond Hettinger
./data_structures/hashing/tests/test_hash_map.py:56:52     - Unknown word (upsize)     -- range(5)], # guaranteed upsize
./data_structures/heap/binomial_heap.py:177:19    - Unknown word (Neighbouring) -- # Neighbouring Nodes
./data_structures/heap/binomial_heap.py:325:11    - Unknown word (Neighbour)    -- # Neighbour nodes
./data_structures/heap/binomial_heap.py:52:64     - Unknown word (logn)       -- elements: Guaranteed logn, amoratized 1
./data_structures/heap/binomial_heap.py:52:70     - Unknown word (amoratized) -- elements: Guaranteed logn, amoratized 1
./data_structures/heap/binomial_heap.py:53:56     - Unknown word (logm)       -- size m and n: O(logn + logm)
./data_structures/linked_list/deque_doubly.py:103:8     - Unknown word (Equeu)      -- # DEqueu Remove Operations (At
./data_structures/linked_list/from_sequence.py:1:13      - Unknown word (Prorgam)    -- # Recursive Prorgam to create a Linked List
./data_structures/linked_list/singly_linked_list.py:400:10    - Unknown word (dlrow)      -- "dlrow olleH",
./data_structures/linked_list/singly_linked_list.py:400:16    - Unknown word (olle)       -- "dlrow olleH",
./data_structures/linked_list/skip_list.py:371:17    - Unknown word (doesnt)     -- def test_delete_doesnt_leave_dead_nodes():
./data_structures/queue/double_ended_queue.py:244:18    - Unknown word (topop)      -- @returns topop.val: the value of the
./data_structures/stacks/dijkstras_two_stack_algorithm.py:39:5      - Unknown word (dijkstras)  -- def dijkstras_two_stack_algorithm
./data_structures/stacks/dijkstras_two_stack_algorithm.py:3:20      - Unknown word (echoaj)     -- GitHub: github.com/echoaj
./data_structures/stacks/infix_to_postfix_conversion.py:19:1      - Unknown word (ASSOCIATIVITIES) -- ASSOCIATIVITIES: dict[str, Literal[
./data_structures/trie/radix_tree.py:27:24     - Unknown word (myprefix)   -- >>> RadixNode("myprefix").match("mystring")
./digital_image_processing/change_brightness.py:25:9      - Unknown word (brigt)      -- brigt_img = change_brightness
./digital_image_processing/convert_to_negative.py:2:36      - Unknown word (opencv)     -- mplemented an algorithm using opencv to convert a colored
./digital_image_processing/edge_detection/canny.py:12:15     - Unknown word (mgrid)      -- x, y = np.mgrid[0 - center : k_size
./digital_image_processing/edge_detection/canny.py:5:39      - Unknown word (sobel)      -- image_processing.filters.sobel_filter import sobel
./digital_image_processing/filters/gabor_filter.py:14:24     - Unknown word (Gabor)       -- of Gabor function.
./digital_image_processing/filters/gabor_filter.py:1:25      - Unknown word (Gaborfilter) -- Implementation of the Gaborfilter
./digital_image_processing/filters/gabor_filter.py:7:5       - Unknown word (gabor)       -- def gabor_filter_kernel(
./digital_image_processing/filters/gabor_filter.py:8:41      - Unknown word (lambd)       -- sigma: int, theta: int, lambd: int, gamma: int, psi
./digital_image_processing/filters/gabor_filter.py:8:5       - Unknown word (ksize)       -- ksize: int, sigma: int, theta
./digital_image_processing/filters/local_binary_pattern.py:29:39     - Unknown word (patternof)  -- of the local binary patternof the pixel
./digital_image_processing/filters/local_binary_pattern.py:66:61     - Unknown word (IMREAD)     -- data/lena.jpg", cv2.IMREAD_GRAYSCALE
./digital_image_processing/histogram_equalization/histogram_stretch.py:4:10      - Unknown word (Binish)     -- @author: Binish125
./digital_image_processing/index_calculation.py:108:18    - Unknown word (matricies)  -- self.set_matricies(red=red, green=green
./digital_image_processing/index_calculation.py:131:9     - Unknown word (funcs)      -- funcs = {
./digital_image_processing/index_calculation.py:133:26    - Unknown word (ccci)       -- "CCCI": self.ccci,
./digital_image_processing/index_calculation.py:136:26    - Unknown word (ndvi)       -- "NDVI": self.ndvi,
./digital_image_processing/index_calculation.py:137:27    - Unknown word (bndvi)      -- "BNDVI": self.bndvi,
./digital_image_processing/index_calculation.py:139:27    - Unknown word (gndvi)      -- "GNDVI": self.gndvi,
./digital_image_processing/index_calculation.py:140:28    - Unknown word (gbndvi)     -- "GBNDVI": self.gbndvi,
./digital_image_processing/index_calculation.py:141:28    - Unknown word (grndvi)     -- "GRNDVI": self.grndvi,
./digital_image_processing/index_calculation.py:142:28    - Unknown word (rbndvi)     -- "RBNDVI": self.rbndvi,
./digital_image_processing/index_calculation.py:143:27    - Unknown word (pndvi)      -- "PNDVI": self.pndvi,
./digital_image_processing/index_calculation.py:145:28    - Unknown word (bwdrvi)     -- "BWDRVI": self.bwdrvi,
./digital_image_processing/index_calculation.py:149:26    - Unknown word (ctvi)       -- "CTVI": self.ctvi,
./digital_image_processing/index_calculation.py:150:26    - Unknown word (gdvi)       -- "GDVI": self.gdvi,
./digital_image_processing/index_calculation.py:152:26    - Unknown word (gemi)       -- "GEMI": self.gemi,
./digital_image_processing/index_calculation.py:153:28    - Unknown word (gosavi)     -- "GOSAVI": self.gosavi,
./digital_image_processing/index_calculation.py:154:27    - Unknown word (gsavi)      -- "GSAVI": self.gsavi,
./digital_image_processing/index_calculation.py:157:26    - Unknown word (ipvi)       -- "IPVI": self.ipvi,
./digital_image_processing/index_calculation.py:160:26    - Unknown word (mrvi)       -- "MRVI": self.mrvi,
./digital_image_processing/index_calculation.py:161:29    - Unknown word (savi)       -- "MSAVI": self.m_savi,
./digital_image_processing/index_calculation.py:165:27    - Unknown word (ngrdi)      -- "NGRDI": self.ngrdi,
./digital_image_processing/index_calculation.py:171:26    - Unknown word (ndre)       -- "NDRE": self.ndre,
./digital_image_processing/index_calculation.py:1:11      - Unknown word (João)       -- # Author: João Gustavo A. Amorim
./digital_image_processing/index_calculation.py:1:27      - Unknown word (Amorim)     -- Author: João Gustavo A. Amorim
./digital_image_processing/index_calculation.py:220:34    - Unknown word (CDVI)       -- Index, Calibrated NDVI - CDVI
./digital_image_processing/index_calculation.py:47:15     - Unknown word (ARVI)       -- #"ARVI2" --  red
./digital_image_processing/index_calculation.py:48:15     - Unknown word (CCCI)       -- #"CCCI" --  red
./digital_image_processing/index_calculation.py:51:15     - Unknown word (NDVI)       -- #"NDVI" --  red
./digital_image_processing/index_calculation.py:52:15     - Unknown word (BNDVI)      -- #"BNDVI" --  blue
./digital_image_processing/index_calculation.py:54:15     - Unknown word (GNDVI)      -- #"GNDVI" --  green
./digital_image_processing/index_calculation.py:55:15     - Unknown word (GBNDVI)     -- #"GBNDVI" --  green
./digital_image_processing/index_calculation.py:564:18    - Unknown word (maxprec)    -- floatmode='maxprec_equal'))
./digital_image_processing/index_calculation.py:56:15     - Unknown word (GRNDVI)     -- #"GRNDVI" --  red,
./digital_image_processing/index_calculation.py:57:15     - Unknown word (RBNDVI)     -- #"RBNDVI" --  red,
./digital_image_processing/index_calculation.py:58:15     - Unknown word (PNDVI)      -- #"PNDVI" --  red
./digital_image_processing/index_calculation.py:60:15     - Unknown word (BWDRVI)     -- #"BWDRVI" --  blue
./digital_image_processing/index_calculation.py:64:15     - Unknown word (CTVI)       -- #"CTVI" --  red
./digital_image_processing/index_calculation.py:65:15     - Unknown word (GDVI)       -- #"GDVI" --  green
./digital_image_processing/index_calculation.py:67:15     - Unknown word (GEMI)       -- #"GEMI" --  red
./digital_image_processing/index_calculation.py:68:15     - Unknown word (GOSAVI)     -- #"GOSAVI" --  green
./digital_image_processing/index_calculation.py:69:15     - Unknown word (GSAVI)      -- #"GSAVI" --  green
./digital_image_processing/index_calculation.py:72:15     - Unknown word (IPVI)       -- #"IPVI" --  red
./digital_image_processing/index_calculation.py:75:15     - Unknown word (MRVI)       -- #"MRVI" --  red
./digital_image_processing/index_calculation.py:76:15     - Unknown word (MSAVI)      -- #"MSAVI" --  red
./digital_image_processing/index_calculation.py:80:15     - Unknown word (NGRDI)      -- #"NGRDI" --  red
./digital_image_processing/index_calculation.py:86:15     - Unknown word (NDRE)       -- #"NDRE" --  redEdge
./divide_and_conquer/closest_pair_of_points.py:112:44    - Unknown word (Xcoords)    -- contains the points, whose Xcoords are at a
./divide_and_conquer/closest_pair_of_points.py:113:45    - Unknown word (Xcoord)     -- pair_dis) from mid's Xcoord
./divide_and_conquer/closest_pair_of_points.py:5:36      - Unknown word (ords)       -- sorted based on Xco-ords and
./divide_and_conquer/convex_hull.py:409:17    - Unknown word (melkman)    -- def convex_hull_melkman(points: list[Point]
./divide_and_conquer/inversions.py:8:25      - Unknown word (nlogn)      -- algorithm which runs in nlogn and the brute-force
./divide_and_conquer/strassen_matrix_multiplication.py:74:12     - Unknown word (strassen)   -- def actual_strassen(matrix_a: list, matrix
./dynamic_programming/all_construct.py:15:34     - Unknown word (purp)       -- construct("purple",["purp","p","ur","le","purpl
./dynamic_programming/all_construct.py:15:55     - Unknown word (purpl)      -- purp","p","ur","le","purpl"])
./dynamic_programming/all_construct.py:51:26     - Unknown word (jwajalapa)  -- print(all_construct("jwajalapa", ["jwa", "j", "w",
./dynamic_programming/all_construct.py:51:68     - Unknown word (lapa)       -- j", "w", "a", "la", "lapa"]))
./dynamic_programming/all_construct.py:55:14     - Unknown word (hexagonosaurus) -- "hexagonosaurus",
./dynamic_programming/all_construct.py:56:52     - Unknown word (auru)           -- "ag", "ago", "ru", "auru", "rus", "go", "no"
./dynamic_programming/catalan_numbers.py:7:20      - Unknown word (Dyck)       -- * - The number of Dyck words of length 2n
./dynamic_programming/climbing_stairs.py:6:9       - Unknown word (Cdoe)       -- LeetCdoe No.70: Climbing Stairs
./dynamic_programming/edit_distance.py:2:11      - Unknown word (Turfa)      -- Author : Turfa Auliarachman
./dynamic_programming/edit_distance.py:2:17      - Unknown word (Auliarachman) -- Author : Turfa Auliarachman
./dynamic_programming/iterating_through_submasks.py:2:15      - Unknown word (Faizan)     -- Author : Syed Faizan (3rd Year Student IIIT
./dynamic_programming/iterating_through_submasks.py:2:40      - Unknown word (IIIT)       -- Faizan (3rd Year Student IIIT Pune)
./dynamic_programming/iterating_through_submasks.py:3:10      - Unknown word (faizan)     -- github : faizan2700
./dynamic_programming/k_means_clustering_tensorflow.py:104:17    - Unknown word (vect)           -- vect = vectors[vector_n]
./dynamic_programming/k_means_clustering_tensorflow.py:129:26    - Unknown word (vects)          -- assigned_vects = [
./dynamic_programming/k_means_clustering_tensorflow.py:36:9      - Unknown word (sess)         -- sess = tf.Session()
./dynamic_programming/k_means_clustering_tensorflow.py:7:33      - Unknown word (noofclusters) -- means_cluster(vectors, noofclusters):
./dynamic_programming/k_means_clustering_tensorflow.py:97:9      - Unknown word (noofiterations) -- noofiterations = 100
./dynamic_programming/longest_common_subsequence.py:68:10     - Unknown word (AGGTAB)     -- a = "AGGTAB"
./dynamic_programming/longest_common_subsequence.py:69:10     - Unknown word (GXTXAYB)    -- b = "GXTXAYB"
./dynamic_programming/longest_common_subsequence.py:71:24     - Unknown word (GTAB)       -- expected_subseq = "GTAB"
./dynamic_programming/longest_common_substring.py:27:35     - Unknown word (abcdxyz)    -- longest_common_substring("abcdxyz", "xyzabcd")
./dynamic_programming/longest_common_substring.py:27:46     - Unknown word (xyzabcd)    -- substring("abcdxyz", "xyzabcd")
./dynamic_programming/longest_common_substring.py:29:35     - Unknown word (zxabcdezy)  -- longest_common_substring("zxabcdezy", "yzabcdezx")
./dynamic_programming/longest_common_substring.py:29:48     - Unknown word (yzabcdezx)  -- substring("zxabcdezy", "yzabcdezx")
./dynamic_programming/longest_common_substring.py:30:6      - Unknown word (abcdez)     -- 'abcdez'
./dynamic_programming/longest_common_substring.py:5:24      - Unknown word (xabded)     -- Example: "abcdef" and "xabded" have two longest common
./dynamic_programming/longest_increasing_subsequence.py:2:11      - Unknown word (Mehdi)      -- Author : Mehdi ALAOUI
./dynamic_programming/longest_increasing_subsequence_o(nlogn).py:2:11      - Unknown word (Aravind)    -- # Author: Aravind Kashyap
./dynamic_programming/longest_increasing_subsequence_o(nlogn).py:2:19      - Unknown word (Kashyap)    -- # Author: Aravind Kashyap
./dynamic_programming/matrix_chain_order.py:32:11     - Unknown word (optiomal)   -- def print_optiomal_solution(optimal_solution
./dynamic_programming/max_subarray_sum.py:7:1       - Unknown word (Kadane's)   -- Kadane's algorithm is a simple
./dynamic_programming/min_distance_up_bottom.py:25:33     - Unknown word (zooicoarchaeologist) -- distance_up_bottom("zooicoarchaeologist", "zoologist")
./dynamic_programming/optimal_binary_search_tree.py:100:5     - Unknown word (freqs)      -- freqs = [nodes[i].freq for
./dynamic_programming/optimal_binary_search_tree.py:72:22     - Unknown word (CLRS)       -- Implemented from CLRS (Introduction to Algorithms
./dynamic_programming/subset_generation.py:44:35     - Unknown word (Ambuj)      -- code is contributed by Ambuj sahu
./dynamic_programming/subset_generation.py:44:41     - Unknown word (sahu)       -- contributed by Ambuj sahu
./dynamic_programming/tribonacci.py:4:5       - Unknown word (tribonacci) -- def tribonacci(num: int) -> list[int
./dynamic_programming/viterbi.py:15:5      - Unknown word (sdafads)    -- sdafads
./dynamic_programming/viterbi.py:4:5       - Unknown word (viterbi)    -- def viterbi(
./electronics/circular_convolution.py:7:69      - Unknown word (DTFT)       -- time Fourier transform (DTFT).
./electronics/circular_convolution.py:9:20      - Unknown word (DTFTs)      -- convolution of the DTFTs of the individual sequences
./electronics/coulombs_law.py:23:29     - Unknown word (mémoire)    -- Coulomb (1785) "Premier mémoire sur l’électricité et
./electronics/coulombs_law.py:23:41     - Unknown word (l’électricité) -- Premier mémoire sur l’électricité et le magnétisme,"
./electronics/coulombs_law.py:23:61     - Unknown word (magnétisme)    -- l’électricité et le magnétisme,"
./electronics/coulombs_law.py:24:17     - Unknown word (l’Académie)    -- Histoire de l’Académie Royale des Sciences
./electronics/coulombs_law.py:24:5      - Unknown word (Histoire)      -- Histoire de l’Académie Royale
./electronics/coulombs_law.py:8:5       - Unknown word (couloumbs)  -- def couloumbs_law(
./electronics/resonant_frequency.py:19:43     - Unknown word (capacitnace) -- value of inductance and capacitnace.
./file_transfer/send_file.py:1:32      - Unknown word (mytext)     -- file(filename: str = "mytext.txt", testing: bool
./file_transfer/tests/test_send_file.py:18:13     - Unknown word (ensurance)  -- # ===== ensurance =====
./fractals/julia_sets.py:14:33     - Unknown word (ambiantly)  -- exponential map Julia set, ambiantly homeomorphic to the
./fractals/julia_sets.py:14:43     - Unknown word (homeomorphic) -- Julia set, ambiantly homeomorphic to the examples in
./fractals/julia_sets.py:1:24      - Unknown word (Zotti)      -- Author Alexandre De Zotti
./fractals/sierpinski_triangle.py:13:38     - Unknown word (Wacław)        -- Polish mathematician Wacław Sierpiński, but appeared
./fractals/sierpinski_triangle.py:2:55      - Unknown word (anuragkumarak) -- uragkumarak95@gmail.com | git/anuragkumarak95
./fractals/sierpinski_triangle.py:6:13      - Unknown word (Sierpiński)    -- What is the Sierpiński Triangle?
./fuzzy_logic/fuzzy_operations.py:102:25    - Unknown word (hspace)     -- plt.subplots_adjust(hspace=0.5)
./fuzzy_logic/fuzzy_operations.py:11:8      - Unknown word (skfuzzy)    -- import skfuzzy as fuzz
./fuzzy_logic/fuzzy_operations.py:18:18     - Unknown word (gbellmf)    -- # (trapmf(), gbellmf(), gaussmf(), etc).
./fuzzy_logic/fuzzy_operations.py:18:29     - Unknown word (gaussmf)    -- trapmf(), gbellmf(), gaussmf(), etc).
./fuzzy_logic/fuzzy_operations.py:18:8      - Unknown word (trapmf)     -- # (trapmf(), gbellmf(), gaussmf
./fuzzy_logic/fuzzy_operations.py:21:29     - Unknown word (trimf)      -- young = fuzz.membership.trimf(X, abc1)
./fuzzy_logic/fuzzy_operations.py:2:18      - Unknown word (Jigyasa)    -- README, Author - Jigyasa Gandhi(mailto:jigsgandhi
./genetic_algorithm/basic_string.py:177:37    - Unknown word (abcdefghijklm) -- ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm"
./genetic_algorithm/basic_string.py:178:10    - Unknown word (nopqrstuvwxyz) -- "nopqrstuvwxyz.,;!?+-*#@^'èéòà€ù=)
./genetic_algorithm/basic_string.py:178:35    - Unknown word (èéòà)          -- nopqrstuvwxyz.,;!?+-*#@^'èéòà€ù=)(&%$£/\\"
./genetic_algorithm/basic_string.py:28:19     - Unknown word (Helxo)      -- >>> evaluate("Helxo Worlx", "Hello World
./genetic_algorithm/basic_string.py:28:25     - Unknown word (Worlx)      -- >>> evaluate("Helxo Worlx", "Hello World")
./genetic_algorithm/basic_string.py:5:11      - Unknown word (rkia)       -- Author: D4rkia
./geodesy/lamberts_ellipsoidal_distance.py:68:39     - Unknown word (Pcos)       -- sin(sigma)) * sin^2Pcos^2Q / cos^2(sigma/2)
./geodesy/lamberts_ellipsoidal_distance.py:70:7      - Unknown word (demonimator) -- x_demonimator = cos(sigma / 2) **
./geodesy/lamberts_ellipsoidal_distance.py:74:39     - Unknown word (Psin)        -- sin(sigma)) * cos^2Psin^2Q / sin^2(sigma/2)
./graphics/bezier_curve.py:49:9      - Unknown word (bezier)     -- def bezier_curve_function(self
./graphics/vector3_for_2d_rendering.py:10:15     - Unknown word (xcodz)      -- __author__ = "xcodz-dot, cclaus, dhruvmanila
./graphics/vector3_for_2d_rendering.py:10:26     - Unknown word (cclaus)     -- author__ = "xcodz-dot, cclaus, dhruvmanila"
./graphics/vector3_for_2d_rendering.py:10:34     - Unknown word (dhruvmanila) -- "xcodz-dot, cclaus, dhruvmanila"
./graphs/basic_graphs.py:130:5     - Unknown word (dijk)       -- def dijk(g, s):
./graphs/basic_graphs.py:157:5     - Unknown word (topo)       -- def topo(g, ind=None, q=None
./graphs/basic_graphs.py:187:5     - Unknown word (adjm)       -- def adjm():
./graphs/basic_graphs.py:208:5     - Unknown word (floy)       -- def floy(a_and_n):
./graphs/basic_graphs.py:262:5     - Unknown word (edglist)    -- def edglist():
./graphs/basic_graphs.py:272:5     - Unknown word (Kruskal's)  -- Kruskal's MST Algorithm
./graphs/basic_graphs.py:280:5     - Unknown word (krusk)      -- def krusk(e_and_n):
./graphs/bi_directional_dijkstra.py:11:11     - Unknown word (Swayam)     -- # Author: Swayam Singh (https://github
./graphs/bidirectional_a_star.py:256:5     - Unknown word (bidir)      -- bidir_astar = BidirectionalAStar
./graphs/bidirectional_a_star.py:79:9      - Unknown word (astar)      -- >>> astar = AStar((0, 0), (len
./graphs/boruvka.py:1:4       - Unknown word (Borůvka's)  -- """Borůvka's algorithm.
./graphs/boruvka.py:82:9      - Unknown word (boruvka)    -- def boruvka(self) -> None:
./graphs/breadth_first_search.py:15:49     - Unknown word (graaph)     -- list representation of graaph
./graphs/breadth_first_search.py:3:13      - Unknown word (OMKAR)      -- """ Author: OMKAR PATHAK """
./graphs/breadth_first_search.py:3:19      - Unknown word (PATHAK)     -- """ Author: OMKAR PATHAK """
./graphs/connected_components.py:24:15     - Unknown word (verts)      -- connected_verts = []
./graphs/dijkstra_2.py:11:14     - Unknown word (mdist)      -- def min_dist(mdist, vset, v):
./graphs/dijkstra_2.py:11:21     - Unknown word (vset)       -- def min_dist(mdist, vset, v):
./graphs/dijkstra_2.py:57:5      - Unknown word (gsrc)       -- gsrc = int(input("\nEnter
./graphs/dijkstra_algorithm.py:2:11      - Unknown word (Shubham)    -- # Author: Shubham Malik
./graphs/dijkstra_algorithm.py:2:19      - Unknown word (Malik)      -- # Author: Shubham Malik
./graphs/dijkstra_algorithm.py:73:33     - Unknown word (atmost)     -- assuming the new_d is atmost old_d
./graphs/dinic.py:17:33     - Unknown word (rcap)       -- edge(self, a, b, c, rcap=0):
./graphs/dinic.py:87:20     - Unknown word (verices)    -- Finally we add the verices near the sink to the
./graphs/edmonds_karp_multiple_source_and_sink.py:63:14     - Unknown word (verticies)  -- self.verticies_count = flow_network
./graphs/g_topological_sort.py:1:11      - Unknown word (Phyllipe)   -- # Author: Phyllipe Bezerra (https://github
./graphs/g_topological_sort.py:1:20      - Unknown word (Bezerra)    -- # Author: Phyllipe Bezerra (https://github.com
./graphs/gale_shapley_bigraph.py:10:5      - Unknown word (oegan)      -- oegan donors and recipients
./graphs/gale_shapley_bigraph.py:16:56     - Unknown word (Numberphile) -- v=Qcv1IqHWAzg&t=13s (Numberphile YouTube).
./graphs/graph_adjacency_list.py:3:16      - Unknown word (Nithyanandam) -- Author: Vikram Nithyanandam
./graphs/graph_adjacency_list.py:3:9       - Unknown word (Vikram)     -- Author: Vikram Nithyanandam
./graphs/graph_adjacency_list.py:44:11     - Unknown word (Falsey)       -- # Falsey checks
./graphs/graph_list.py:3:25      - Unknown word (Nwachukwu)  -- Author: OMKAR PATHAK, Nwachukwu Chidiebere
./graphs/graph_list.py:3:35      - Unknown word (Chidiebere) -- OMKAR PATHAK, Nwachukwu Chidiebere
./graphs/greedy_min_vertex_cover.py:3:16      - Unknown word (Approximization) -- * Description: Approximization algorithm for minimum
./graphs/kahns_algorithm_long.py:3:5       - Unknown word (indegree)   -- indegree = [0] * len(graph)
./graphs/karger.py:2:22      - Unknown word (Karger's)   -- An implementation of Karger's Algorithm for partitioning
./graphs/karger.py:34:40     - Unknown word (adacency)   -- dictionary containing adacency lists for the graph
./graphs/minimum_spanning_tree_boruvka.py:103:41    - Unknown word (Boruvka's)  -- set Union and Find for Boruvka's algorithm
./graphs/minimum_spanning_tree_boruvka.py:37:13     - Unknown word (Boruvks's)  -- For Boruvks's algorithm the weights
./graphs/minimum_spanning_tree_boruvka.py:70:9      - Unknown word (Returna)    -- Returna all edges in the graph
./graphs/minimum_spanning_tree_kruskal.py:1:5       - Unknown word (kruskal)    -- def kruskal(
./graphs/minimum_spanning_tree_prims2.py:2:23      - Unknown word (Jarník's)   -- Prim's (also known as Jarník's) algorithm is a greedy
./graphs/multi_heuristic_astar.py:137:16    - Unknown word (inad)       -- close_list_inad,
./graphs/multi_heuristic_astar.py:141:9     - Unknown word (itera)      -- for itera in range(n_heuristic
./graphs/multi_heuristic_astar.py:47:17     - Unknown word (prito)      -- for prito, yyy in temp:
./graphs/scc_kosaraju.py:24:5      - Unknown word (kosaraju)   -- def kosaraju():
./graphs/strongly_connected_components.py:41:36     - Unknown word (strongliy)  -- first search to find strongliy connected
./graphs/tarjans_scc.py:16:42     - Unknown word (equireachable) -- we save it and it's equireachable vertices as a strongly
./graphs/tests/test_min_spanning_tree_prim.py:25:5      - Unknown word (adjancency) -- adjancency = defaultdict(list)
./hashes/README.md:14:159    - Unknown word (cleartext)  -- size of the plaintext/cleartext. Other algorithms in
./hashes/README.md:17:200    - Unknown word (IMEI)       -- credit card numbers, IMEI numbers, and Canadian
./hashes/README.md:17:297    - Unknown word (LUHN)       -- mathematicians developed the LUHN formula in the late
./hashes/README.md:7:113     - Unknown word (Rivest)     -- algorithm made by Ray Rivest that is known to suffer
./hashes/chaos_machine.py:45:32     - Unknown word (Marsaglia)  -- (Xorshift by George Marsaglia)
./hashes/chaos_machine.py:45:7      - Unknown word (PRNG)       -- # PRNG (Xorshift by George
./hashes/hamming_code.py:1:44      - Unknown word (Kunz)       -- A. Amorim & Gabriel Kunz
./hashes/hamming_code.py:24:67     - Unknown word (Pari)       -- many parity bits (sizePari)
./hashes/hamming_code.py:270:5     - Unknown word (Receiv)     -- dataReceiv, ack = receptorConverter
./hashes/luhn.py:5:8       - Unknown word (luhn)       -- def is_luhn(string: str) -> bool
./hashes/md5.py:30:38     - Unknown word (abcdfghijklmnopqrstuvw) -- little_endian(b'1234567890abcdfghijklmnopqrstuvw')
./hashes/md5.py:318:54    - Unknown word (Üñîçø)                  -- letters.encode("utf-8"), "Üñîçø∂é".encode("utf-8"),
./hashes/md5.py:31:25     - Unknown word (abcdfg)                 -- b'pqrstuvwhijklmno90abcdfg12345678'
./hashes/md5.py:31:7      - Unknown word (pqrstuvwhijklmno)       -- b'pqrstuvwhijklmno90abcdfg12345678'
./hashes/md5.py:327:11    - Unknown word (consts)                 -- added_consts = [int(2**32 * abs(sin
./hashes/sdbm.py:2:36      - Unknown word (sdbm)       -- algorithm was created for sdbm (a public-domain reimplementa
./hashes/sdbm.py:2:58      - Unknown word (reimplementation) -- sdbm (a public-domain reimplementation of ndbm)
./hashes/sha1.py:40:9      - Unknown word (Inititates) -- Inititates the variables data and
./hashes/sha256.py:1:14      - Unknown word (Yathurshan) -- # Author: M. Yathurshan
./knapsack/README.md:13:190    - Unknown word (Dantzig)    -- mathematician Tobias Dantzig (1884–1956), and refers
./knapsack/README.md:20:72     - Unknown word (CLASSNAME)  -- vector)`, and `help(CLASSNAME.METHODNAME)`.
./knapsack/README.md:20:82     - Unknown word (METHODNAME) -- and `help(CLASSNAME.METHODNAME)`.
./knapsack/tests/test_knapsack.py:4:21      - Unknown word (Schröder)   -- @author: Dr. Tobias Schröder
./linear_algebra/README.md:20:40     - Unknown word (eulidean)   -- length() : returns the eulidean length of the vector
./linear_algebra/README.md:31:12     - Unknown word (axpy)       -- - function axpy(scalar, vector1, vector
./linear_algebra/src/conjugate_gradient.py:129:25    - Unknown word (Krylov)       -- # Calculate new Krylov subspace scale.
./linear_algebra/src/conjugate_gradient.py:131:27    - Unknown word (conjuage)     -- # Calculate new A conjuage search direction.
./linear_algebra/src/conjugate_gradient.py:39:27     - Unknown word (eignevectors) -- Get eigenvalues and eignevectors for a symmetric matrix
./linear_algebra/src/conjugate_gradient.py:40:33     - Unknown word (eigh)         -- values, _ = np.linalg.eigh(matrix)
./linear_algebra/src/conjugate_gradient.py:63:31     - Unknown word (randn)        -- random_matrix = np.random.randn(dimension, dimension
./linear_algebra/src/lib.py:254:9     - Unknown word (cofactor)   -- cofactor(x: int, y: int): returns
./linear_algebra/src/power_iteration.py:45:15     - Unknown word (iscomplexobj) -- assert np.iscomplexobj(input_matrix) == np
./linear_algebra/src/power_iteration.py:91:22     - Unknown word (triu)         -- imag_matrix = np.triu(1j * complex_input_matrix
./linear_algebra/src/schur_complement.py:20:45     - Unknown word (Vandenberghe) -- Optimization – Boyd and Vandenberghe, A.5.5
./linear_algebra/src/test_linear_algebra.py:147:9     - Unknown word (cofactors)  -- cofactors = [[-3, 14, -10], [
./linear_programming/simplex.py:136:29    - Unknown word (nans)       -- # Array filled with nans
./linear_programming/simplex.py:167:18    - Unknown word (coeff)      -- for idx, coeff in enumerate(self.tableau
./linear_programming/simplex.py:257:25    - Unknown word (minimisation) -- # Non standard: minimisation and equalities
./linear_programming/simplex.py:325:21    - Unknown word (rowidx)       -- nonzero_rowidx = nonzero[0][0]
./machine_learning/astar.py:60:13     - Unknown word (neigbours)  -- def get_neigbours(self, cell):
./machine_learning/astar.py:64:9      - Unknown word (neughbour)  -- neughbour_cord = [
./machine_learning/decision_tree.py:181:32    - Unknown word (squarred)   -- doctest.testmod(name="mean_squarred_error", verbose=True
./machine_learning/decision_tree.py:39:19     - Unknown word (ndim)       -- if labels.ndim != 1:
./machine_learning/dimensionality_reduction.py:1:29      - Unknown word (Gasco)      -- Copyright (c) 2023 Diego Gasco (diego.gasco99@gmail
./machine_learning/dimensionality_reduction.py:1:62      - Unknown word (Diegomangasco) -- gasco99@gmail.com), Diegomangasco on GitHub
./machine_learning/forecasting/run.py:24:44     - Unknown word (mtch)       -- train_usr: list, train_mtch: list, test_dt: list
./machine_learning/forecasting/run.py:45:45     - Unknown word (exog)       -- data (total_user, with exog data = total_event)
./machine_learning/forecasting/run.py:57:27     - Unknown word (disp)       -- model_fit = model.fit(disp=False, maxiter=600,
./machine_learning/gradient_descent.py:122:13    - Unknown word (rtol)       -- rtol=relative_error_limit
./machine_learning/k_means_clust.py:14:57     - Unknown word (hetrogeneity) -- will be filled with hetrogeneity values if passed
./machine_learning/k_means_clust.py:15:8      - Unknown word (kmeans)       -- to kmeans func.
./machine_learning/k_means_clust.py:232:17    - Unknown word (fillna)       -- df = df.fillna(value=fill_missing_report
./machine_learning/k_means_clust.py:234:30    - Unknown word (dtypes)       -- numeric_cols = df.select_dtypes(np.number).columns
./machine_learning/k_means_clust.py:281:21    - Unknown word (iloc)         -- clustersize.iloc[:, 2:].values
./machine_learning/k_means_clust.py:312:29    - Unknown word (clustert)     -- concat report with clustert size and nan values
./machine_learning/k_means_clust.py:313:41    - Unknown word (isin)         -- report["Features"].isin(clustering_variables
./machine_learning/k_means_clust.py:52:16     - Unknown word (CLUST)        -- TAG = "K-MEANS-CLUST/ "
./machine_learning/linear_regression.py:7:56      - Unknown word (CSGO)       -- particular code, I had used a CSGO dataset (ADR vs
./machine_learning/local_weighted_learning/local_weighted_learning.py:151:10    - Unknown word (preds)      -- def plot_preds(
./machine_learning/local_weighted_learning/local_weighted_learning.py:7:14      - Unknown word (XᵀWy)       -- β = (XᵀWX)⁻¹(XᵀWy),
./machine_learning/local_weighted_learning/local_weighted_learning.py:7:6       - Unknown word (XᵀWX)       -- β = (XᵀWX)⁻¹(XᵀWy),
./machine_learning/logistic_regression.py:83:5      - Unknown word (probs)      -- probs = predict_prob(grid
./machine_learning/multilayer_perceptron_classifier.py:8:13      - Unknown word (lbfgs)      -- solver="lbfgs", alpha=1e-5, hidden
./machine_learning/polynomial_regression.py:135:13    - Unknown word (coefs)      -- >>> coefs = np.array([-250, 5
./machine_learning/polynomial_regression.py:149:21    - Unknown word (pinv)       -- # np.linalg.pinv() computes the Moore
./machine_learning/polynomial_regression.py:28:7      - Unknown word (UΣVᵀ)       -- where UΣVᵀ is an SVD of X.
./machine_learning/polynomial_regression.py:5:29      - Unknown word (βₘxᵐ)       -- β₁x + β₂x² + ... + βₘxᵐ + ε
./machine_learning/scoring_functions.py:133:5     - Unknown word (denumerator) -- denumerator = np.sum(actual) / len
./machine_learning/scoring_functions.py:4:21      - Unknown word (RMSLE)      -- MAE, MSE, RMSE, RMSLE are included.
./machine_learning/scoring_functions.py:84:5      - Unknown word (rmsle)      -- def rmsle(predict, actual):
./machine_learning/sequential_minimum_optimization.py:226:9     - Unknown word (locis)      -- locis = yield from self._choose
./machine_learning/sequential_minimum_optimization.py:236:16    - Unknown word (voilate)    -- voilate kkt condition.
./machine_learning/sequential_minimum_optimization.py:378:7     - Unknown word (Normalise)  -- # Normalise data using min_max way
./machine_learning/sequential_minimum_optimization.py:459:62    - Unknown word (MSIE)       -- Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)"},
./machine_learning/sequential_minimum_optimization.py:46:30     - Unknown word (wdbc)       -- breast-cancer-wisconsin/wdbc.data"
./machine_learning/sequential_minimum_optimization.py:470:17    - Unknown word (dropna)     -- data = data.dropna(axis=0)
./machine_learning/sequential_minimum_optimization.py:479:5     - Unknown word (mykernel)   -- mykernel = Kernel(kernel="rbf
./machine_learning/sequential_minimum_optimization.py:483:5     - Unknown word (mysvm)      -- mysvm = SmoSVM(
./machine_learning/sequential_minimum_optimization.py:533:21    - Unknown word (hstack)     -- train_data = np.hstack((train_y.reshape(50
./machine_learning/sequential_minimum_optimization.py:571:78    - Unknown word (desity)     -- distributed points with high desity and
./machine_learning/sequential_minimum_optimization.py:580:5     - Unknown word (yrange)     -- yrange = np.linspace(train
./machine_learning/support_vector_machines.py:74:15     - Unknown word (sklear)     -- # sklear: def_gamma = 1/(n_features
./machine_learning/xgboost_classifier.py:27:44     - Unknown word (gbtree)     -- score=0.5, booster='gbtree', callbacks=None,
./machine_learning/xgboost_classifier.py:28:29     - Unknown word (bylevel)    -- colsample_bylevel=1, colsample_bynode
./machine_learning/xgboost_classifier.py:28:50     - Unknown word (bynode)     -- bylevel=1, colsample_bynode=1, colsample_bytree
./machine_learning/xgboost_classifier.py:28:70     - Unknown word (bytree)     -- bynode=1, colsample_bytree=1,
./machine_learning/xgboost_classifier.py:7:6       - Unknown word (xgboost)    -- from xgboost import XGBClassifier
./maths/addition_without_arithmetic.py:3:9       - Unknown word (suraj)      -- Author: suraj Kumar
./maths/area.py:583:13    - Unknown word (Reqular)    -- print(f"Reqular Pentagon: {area_reg
./maths/automorphic_number.py:10:12     - Unknown word (Akshay)     -- # Author : Akshay Dubey (https://github
./maths/automorphic_number.py:10:19     - Unknown word (Dubey)      -- # Author : Akshay Dubey (https://github.com
./maths/bailey_borwein_plouffe.py:1:12      - Unknown word (borwein)    -- def bailey_borwein_plouffe(digit_position
./maths/bailey_borwein_plouffe.py:1:20      - Unknown word (plouffe)    -- def bailey_borwein_plouffe(digit_position: int
./maths/binary_exponentiation.py:3:12      - Unknown word (Junth)      -- # Author : Junth Basnet
./maths/binary_exponentiation_2.py:9:11      - Unknown word (chinmoy)    -- * @author chinmoy159
./maths/check_polygon.py:26:17     - Unknown word (Monogons)   -- ValueError: Monogons and Digons are not polygons
./maths/check_polygon.py:26:30     - Unknown word (Digons)     -- ValueError: Monogons and Digons are not polygons in
./maths/chudnovsky_algorithm.py:12:28     - Unknown word (multinomial) -- = constant_term / ((multinomial_term * linear_term)
./maths/chudnovsky_algorithm.py:44:18     - Unknown word (prec)        -- getcontext().prec = precision
./maths/collatz_sequence.py:20:5      - Unknown word (collatz)    -- def collatz_sequence(n: int) ->
./maths/collatz_sequence.py:8:62      - Unknown word (Ulam)       -- 3n + 1 problem, the Ulam conjecture, Kakutani
./maths/collatz_sequence.py:8:79      - Unknown word (Kakutani's) -- the Ulam conjecture, Kakutani's
./maths/collatz_sequence.py:9:14      - Unknown word (Thwaites)   -- problem, the Thwaites conjecture, Hasse's
./maths/dual_number_automatic_differentiation.py:58:20     - Unknown word (jtem)       -- for j, jtem in enumerate(other.duals
./maths/entropy.py:27:27     - Unknown word (telescreen) -- . "from the telescreen was still "
./maths/entropy.py:28:35     - Unknown word (overfulfilment) -- "babbling and the overfulfilment")
./maths/euclidean_gcd.py:20:26     - Unknown word (euclicedan) -- Recursive method for euclicedan gcd algorithm
./maths/eulers_totient.py:19:5      - Unknown word (totients)   -- totients = [i - 1 for i in range
./maths/eulers_totient.py:2:5       - Unknown word (totient)    -- def totient(n: int) -> list:
./maths/extended_euclidean_algorithm.py:10:15     - Unknown word (Sharma)     -- # @Author: S. Sharma <silentcat>
./maths/extended_euclidean_algorithm.py:13:24     - Unknown word (pikulet)    -- Last modified by:   pikulet
./maths/extended_euclidean_algorithm.py:5:41      - Unknown word (Bezout's)   -- bn = gcd(m, n) (a.k.a Bezout's Identity)
./maths/factors.py:16:5      - Unknown word (facs)       -- facs: list[int] = []
./maths/fibonacci.py:147:29    - Unknown word (recursuive) -- Cache must be outside recursuive function
./maths/fibonacci.py:16:5      - Unknown word (binet)      -- fib_binet runtime: 0.0174 ms
./maths/fibonacci.py:7:42      - Unknown word (Binet)      -- function because the Binet formula function  uses
./maths/gaussian_error_linear_unit.py:36:9      - Unknown word (gelu)       -- gelu_vec (np.ndarray): The
./maths/gaussian_error_linear_unit.py:6:29      - Unknown word (GELU)       -- Gaussian Error Linear Unit (GELU) is a high-performing
./maths/gcd_of_n_numbers.py:100:5     - Unknown word (mult)       -- mult = 1
./maths/integration_by_simpson_approx.py:29:19     - Unknown word (fxdx)       -- 1. integration of fxdx with limit a to b is
./maths/jaccard_similarity.py:17:5      - Unknown word (jaccard)    -- def jaccard_similarity(
./maths/jaccard_similarity.py:8:38      - Unknown word (MMDS)       -- of Massive Datasets [MMDS 2nd Edition, Chapter
./maths/krishnamurthy_number.py:26:5      - Unknown word (krishnamurthy) -- def krishnamurthy(number: int) -> bool
./maths/krishnamurthy_number.py:45:51     - Unknown word (Krisnamurthy)  -- whether a number is a Krisnamurthy Number or not.")
./maths/largest_of_very_large_numbers.py:1:11      - Unknown word (Abhijeeth)  -- # Author: Abhijeeth S
./maths/liouville_lambda.py:14:5      - Unknown word (liouville)  -- def liouville_lambda(number: int)
./maths/lucas_lehmer_primality_test.py:16:11     - Unknown word (lehmer)     -- def lucas_lehmer_test(p: int) -> bool
./maths/lucas_lehmer_primality_test.py:2:58      - Unknown word (primality)  -- Lehmer test (LLT) is a primality test for Mersenne
./maths/lucas_lehmer_primality_test.py:2:77      - Unknown word (Mersenne)   -- a primality test for Mersenne
./maths/maclaurin_series.py:7:5       - Unknown word (maclaurin)  -- def maclaurin_sin(theta: float, accuracy
./maths/manhattan_distance.py:3:5       - Unknown word (Expectts)   -- Expectts two list of numbers
./maths/mobius_function.py:12:5      - Unknown word (mobius)     -- def mobius(n: int) -> int:
./maths/monte_carlo.py:2:10      - Unknown word (Matteo)     -- @author: MatteoRaso
./maths/monte_carlo.py:2:16      - Unknown word (Raso)       -- @author: MatteoRaso
./maths/primelib.py:520:74    - Unknown word (Divisiors)    -- Error in function getDivisiors(...)"
./maths/primelib.py:83:14     - Unknown word (erathostenes) -- sieve of erathostenes.
./maths/pronic_number.py:13:8      - Unknown word (pronic)     -- def is_pronic(number: int) -> bool
./maths/pronic_number.py:3:28      - Unknown word (Proic)      -- number n is said to be a Proic number if
./maths/proth_number.py:10:5      - Unknown word (proth)      -- def proth(number: int) -> int
./maths/qr_decomposition.py:21:18     - Unknown word (BLAS)       -- version from BLAS should be used.
./maths/radix2_fft.py:114:9     - Unknown word (inverce)    -- inverce_c = [[dft_a[i] * dft
./maths/radix2_fft.py:5:8       - Unknown word (mpmath)     -- import mpmath # for roots of unity
./maths/radix2_fft.py:88:14     - Unknown word (ncol)       -- next_ncol = self.c_max_length
./maths/runge_kutta.py:4:11      - Unknown word (kutta)      -- def runge_kutta(f, y0, x0, h, x_end
./maths/runge_kutta.py:4:5       - Unknown word (runge)      -- def runge_kutta(f, y0, x0, h,
./maths/sieve_of_eratosthenes.py:10:25     - Unknown word (Simas)      -- doctest provider: Bruno Simas Hadlich (https://github
./maths/sieve_of_eratosthenes.py:10:31     - Unknown word (Hadlich)    -- provider: Bruno Simas Hadlich (https://github.com
./maths/sieve_of_eratosthenes.py:11:16     - Unknown word (Dmitry)     -- Also thanks to Dmitry (https://github.com
./maths/signum.py:6:5       - Unknown word (signum)     -- def signum(num: float) -> int:
./maths/softmax.py:6:8       - Unknown word (exponentials) -- to the exponentials of the input numbers
./maths/square_root.py:25:20     - Unknown word (aproximated) -- Square root is aproximated using Newtons method
./maths/two_sum.py:36:9      - Unknown word (compl)      -- compl = target - val
./maths/zellers_congruence.py:5:5       - Unknown word (zeller)     -- def zeller(date_input: str) ->
./matrix/inverse_of_matrix.py:91:57     - Unknown word (Sarrus)     -- of the matrix using Sarrus rule
./matrix/largest_square_area_in_matrix.py:46:44     - Unknown word (approch)    -- area_in_matrix_top_down_approch(
./matrix/matrix_class.py:39:23     - Unknown word (Cofactors)  -- Identity, Minors, Cofactors and Adjugate are returned
./matrix/matrix_class.py:39:37     - Unknown word (Adjugate)   -- Minors, Cofactors and Adjugate are returned as Matrices
./matrix/matrix_class.py:54:22     - Unknown word (adjugate)   -- >>> print(matrix.adjugate())
./matrix/pascal_triangle.py:3:13      - Unknown word (havingva)   -- The element havingva row index of r and column
./matrix/sherman_morrison.py:213:13    - Unknown word (ainv)       -- >>> ainv = Matrix(3, 3, 0)
./matrix/sherman_morrison.py:59:33     - Unknown word (indicies)   -- method Matrix.validate_indicies>
./matrix/spiral_print.py:56:11     - Unknown word (horizotal)  -- # horizotal printing increasing
./matrix/tests/test_matrix_operation.py:18:40     - Unknown word (matop)      -- matrix_operation as matop
./matrix/tests/test_matrix_operation.py:46:9      - Unknown word (theo)       -- theo = matop.add(mat1, mat
./networking_flow/ford_fulkerson.py:27:10     - Unknown word (fulkerson)  -- def ford_fulkerson(graph, source, sink
./neural_network/2_hidden_layers_neural_network.py:101:46    - Unknown word (sogmoid)    -- using derivative of sogmoid activation function
./neural_network/2_hidden_layers_neural_network.py:101:9     - Unknown word (Updation)   -- Updation is done using derivative
./neural_network/back_propagation_neural_network.py:124:28    - Unknown word (ydata)      -- def train(self, xdata, ydata, train_round, accuracy
./neural_network/back_propagation_neural_network.py:128:22    - Unknown word (hlines)     -- self.ax_loss.hlines(self.accuracy, 0, self
./neural_network/back_propagation_neural_network.py:53:26     - Unknown word (asmatrix)   -- self.weight = np.asmatrix(np.random.normal(0,
./neural_network/back_propagation_neural_network.py:67:35     - Unknown word (xdata)      -- forward_propagation(self, xdata):
./neural_network/back_propagation_neural_network.py:97:7      - Unknown word (BPNN)       -- class BPNN:
./neural_network/convolution_neural_network.py:107:31    - Unknown word (convs)      -- convolute(self, data, convs, w_convs, thre_convs
./neural_network/convolution_neural_network.py:211:25    - Unknown word (datas)      -- self, patterns, datas_train, datas_teach,
./neural_network/convolution_neural_network.py:227:35    - Unknown word (conved)     -- data_focus1, data_conved1 = self.convolute(
./neural_network/convolution_neural_network.py:297:13    - Unknown word (yplot)      -- yplot = [error_accuracy for
./neural_network/convolution_neural_network.py:305:43    - Unknown word (Complished) -- -----------Training Complished--------------------
./neural_network/convolution_neural_network.py:42:19     - Unknown word (thre)       -- self.rate_thre = rate_t
./other/davisb_putnamb_logemannb_loveland.py:153:21    - Unknown word (uncomplemented) -- A symbol is the uncomplemented form of a literal.
./other/davisb_putnamb_logemannb_loveland.py:276:5     - Unknown word (dpll)           -- def dpll_algorithm(
./other/davisb_putnamb_logemannb_loveland.py:4:33      - Unknown word (DPLL)       -- Putnam–Logemann–Loveland (DPLL) algorithm is a complete
./other/davisb_putnamb_logemannb_loveland.py:5:35      - Unknown word (satisfiability) -- algorithm for deciding the satisfiability of propositional logic
./other/davisb_putnamb_logemannb_loveland.py:6:73      - Unknown word (Tisfiability)   -- Conjunctive Normal Form SATisfiability
./other/dijkstra_bankers_algorithm.py:4:13      - Unknown word (Biney)      -- # "Author: "Biney Kingsley (bluedistro
./other/dijkstra_bankers_algorithm.py:80:27     - Unknown word (alloc)      -- max_claim[i][j] - alloc_table[i][j] <= avail
./other/doomsday.py:42:5      - Unknown word (centurian)  -- centurian = year % 100
./other/gauss_easter.py:24:5      - Unknown word (metonic)    -- metonic_cycle = year % 19
./other/graham_scan.py:119:5     - Unknown word (minidx)     -- minidx = 0
./other/graham_scan.py:167:54    - Unknown word (straigh)    -- previous points on those straigh line is not convex hull
./other/graham_scan.py:28:55     - Unknown word (miny)       -- int, int], minx: int, miny: int) -> float:
./other/greedy.py:45:18     - Unknown word (Sambhar)    -- ... "Sambhar", "Chicken", "Fries
./other/linear_congruential_generator.py:13:13     - Unknown word (accptable)  -- # it is accptable because `LinearCongruentialGe
./other/password.py:47:19     - Unknown word (generalised) -- # random is a generalised function for letters
./other/password.py:71:29     - Unknown word (Hwea)        -- is_strong_password('Hwea7$2!')
./other/password.py:77:38     - Unknown word (udfhiaf)     -- strong_password('Hello1238udfhiaf038fajdvjjf!jaiuFhkqi
./other/password.py:77:48     - Unknown word (fajdvjjf)    -- 'Hello1238udfhiaf038fajdvjjf!jaiuFhkqi1')
./other/password.py:77:57     - Unknown word (jaiu)        -- 8udfhiaf038fajdvjjf!jaiuFhkqi1')
./other/password.py:77:61     - Unknown word (Fhkqi)       -- udfhiaf038fajdvjjf!jaiuFhkqi1')
./other/scoring_algorithm.py:2:15      - Unknown word (markmelnic) -- developed by: markmelnic
./other/scoring_algorithm.py:49:9      - Unknown word (dlist)      -- for dlist, weight in zip(data
./other/scoring_algorithm.py:51:9      - Unknown word (maxd)       -- maxd = max(dlist)
./other/scoring_algorithm.py:5:34      - Unknown word (percentual) -- using a range based percentual proximity algorithm
./other/scoring_algorithm.py:89:9      - Unknown word (slist)      -- for slist in score_lists:
./other/scoring_algorithm.py:96:5      - Unknown word (procentual) -- def procentual_proximity(
./other/sdes.py:36:11     - Unknown word (sbox)       -- def apply_sbox(s, data):
./other/sdes.py:96:29     - Unknown word (decypting)  -- print("Plain text after decypting is:", PT)
./physics/basic_orbital_capture.py:174:72    - Unknown word (Bezanson)   -- Astronomy|Professor Rachel Bezanson
./physics/casimir_effect.py:16:17     - Unknown word (Hendrik)    -- Dutch physicist Hendrik B. G. Casimir first
./physics/casimir_effect.py:35:18     - Unknown word (Waals)      -- London-van der Waals Forces", Physical Review
./physics/casimir_effect.py:49:5      - Unknown word (casimir)    -- def casimir_force(force: float,
./physics/grahams_law.py:24:22     - Unknown word (Effustion)  -- effusion_rate_1: Effustion rate of first gas (m
./physics/grahams_law.py:26:58     - Unknown word (kmol)       -- first gas (g/mol, kg/kmol, etc.)
./physics/hubble_parameter.py:40:29     - Unknown word (constante)  -- hubble_constant: Hubble constante is the expansion rate
./physics/hubble_parameter.py:6:42      - Unknown word (directily)  -- becausethe redshift is directily mensure
./physics/hubble_parameter.py:98:12     - Unknown word (LCDM)       -- # demo LCDM approximation
./physics/ideal_gas_law.py:5:45      - Unknown word (Benoît)     -- was first stated by Benoît Paul Émile Clapeyron
./physics/ideal_gas_law.py:5:57      - Unknown word (Émile)      -- stated by Benoît Paul Émile Clapeyron
./physics/ideal_gas_law.py:7:25      - Unknown word (Lussac's)   -- Avogadro's law, and Gay-Lussac's law.[1] The ideal gas
./physics/lorentz_transformation_four_vector.py:7:41      - Unknown word (Minkowski)  -- y, z] described by Minkowski space. Note that t
./physics/malus_law.py:34:39     - Unknown word (Glan)       -- Polaroid to about 1:106 for Glan–Taylor prism polarizers
./physics/malus_law.py:40:5      - Unknown word (malus)      -- def malus_law(initial_intensity
./physics/malus_law.py:7:49      - Unknown word (Étienne)    -- which is named after Étienne-Louis Malus,
./physics/n_body_simulation.py:250:41    - Unknown word (blit)       -- interval=INTERVAL, blit=True
./physics/newtons_law_of_gravitation.py:19:18     - Unknown word (Philosophiæ) -- - Newton (1687) "Philosophiæ Naturalis Principia
./physics/newtons_law_of_gravitation.py:19:30     - Unknown word (Naturalis)   -- (1687) "Philosophiæ Naturalis Principia Mathematica
./physics/newtons_law_of_gravitation.py:19:40     - Unknown word (Principia)   -- Philosophiæ Naturalis Principia Mathematica"
./physics/newtons_law_of_gravitation.py:19:50     - Unknown word (Mathematica) -- Naturalis Principia Mathematica"
./physics/newtons_second_law_of_motion.py:14:14     - Unknown word (Fnet)       -- Formulation: Fnet = m • a
./physics/rms_speed_of_molecule.py:51:5      - Unknown word (vrms)       -- vrms = rms_speed_of_molecule
./physics/rms_speed_of_molecule.py:5:4       - Unknown word (Vrms)       -- | Vrms = √3RT/M |
./physics/speed_of_sound.py:32:36     - Unknown word (moduls)     -- -> Water 20°C: bulk_moduls= 2.15MPa, density=9
./physics/speed_of_sound.py:33:19     - Unknown word (Murcery)    -- Example 2 --> Murcery 20°: bulk_moduls= 2
./project_euler/README.md:66:4      - Unknown word (Stackoverflow) -- - [Stackoverflow link]
./project_euler/README.md:81:6      - Unknown word (Doctest)       -- [Doctest]
./project_euler/problem_001/sol4.py:27:5      - Unknown word (xmulti)     -- xmulti = []
./project_euler/problem_001/sol4.py:28:5      - Unknown word (zmulti)     -- zmulti = []
./project_euler/problem_005/sol1.py:57:9      - Unknown word (nfound)     -- nfound = 0
./project_euler/problem_011/sol1.py:43:13     - Unknown word (horz)       -- horz_product = grid[i][j
./project_euler/problem_014/sol2.py:30:1      - Unknown word (COLLATZ)    -- COLLATZ_SEQUENCE_LENGTHS =
./project_euler/problem_020/sol1.py:48:5      - Unknown word (nfact)      -- nfact = factorial(num)
./project_euler/problem_023/sol1.py:38:5      - Unknown word (abundants)  -- abundants = set()
./project_euler/problem_035/sol1.py:14:27     - Unknown word (Seive)      -- 1 million using the Seive of Eratosthenes.  Then
./project_euler/problem_035/sol1.py:20:1      - Unknown word (seive)      -- seive = [True] * 1000001
./project_euler/problem_037/sol1.py:2:1       - Unknown word (Truncatable) -- Truncatable primes
./project_euler/problem_037/sol1.py:9:54      - Unknown word (truncatable) -- primes that are both truncatable from left to right
./project_euler/problem_038/sol1.py:21:61     - Unknown word (concactenation) -- the solution will be a concactenation of
./project_euler/problem_039/sol1.py:8:57      - Unknown word (maximised)  -- number of solutions maximised?
./project_euler/problem_044/sol1.py:11:37     - Unknown word (minimised)  -- and D = |Pk − Pj| is minimised; what is the value of
./project_euler/problem_047/sol1.py:2:1       - Unknown word (Combinatoric) -- Combinatoric selections
./project_euler/problem_050/sol1.py:23:14     - Unknown word (Erotosthenes) -- Sieve of Erotosthenes
./project_euler/problem_050/sol1.py:55:42     - Unknown word (celing)       -- biggest prime, below the celing, that can be written
./project_euler/problem_054/sol1.py:114:50    - Unknown word (ueen)       -- 9, T(en), J(ack), Q(ueen), K(ing), A(ce)
./project_euler/problem_054/sol1.py:117:11    - Unknown word (pades)      -- S(pades), H(earts), D(iamonds
./project_euler/problem_054/sol1.py:117:21    - Unknown word (earts)      -- S(pades), H(earts), D(iamonds), C(lubs
./project_euler/problem_054/sol1.py:117:31    - Unknown word (iamonds)    -- pades), H(earts), D(iamonds), C(lubs)
./project_euler/problem_054/sol1.py:117:43    - Unknown word (lubs)       -- earts), D(iamonds), C(lubs)
./project_euler/problem_054/sol1.py:147:53    - Unknown word (Stright)    -- 2H 3H 4H 5H 6H")  # Stright flush
./project_euler/problem_054/test_poker_hand.py:140:11    - Unknown word (oppo)       -- play, oppo = randrange(len(SORTED
./project_euler/problem_055/sol1.py:2:1       - Unknown word (Lychrel)    -- Lychrel numbers
./project_euler/problem_055/sol1.py:58:30     - Unknown word (lychrel)    -- Returns the count of all lychrel numbers below limit
./project_euler/problem_059/sol1.py:92:30     - Unknown word (asfla)      -- filter_common_word(['asfla adf', 'I am here',
./project_euler/problem_059/sol1.py:94:30     - Unknown word (athla)      -- filter_common_word(['athla amf', 'I am here',
./project_euler/problem_065/sol1.py:14:21     - Unknown word (convergents) -- Let us consider the convergents for sqrt(2).
./project_euler/problem_087/sol1.py:42:17     - Unknown word (tetr)       -- tetr = prime3 * prime3 *
./project_euler/problem_089/sol1.py:13:1      - Unknown word (VVIIIIII)   -- VVIIIIII
./project_euler/problem_089/sol1.py:15:1      - Unknown word (VVVI)       -- VVVI
./project_euler/problem_091/sol1.py:5:43      - Unknown word (ΔOPQ)       -- origin, O(0,0), to form ΔOPQ.
./project_euler/problem_104/sol1.py:119:32    - Unknown word (optimisation)  -- m=1e9, done for fast optimisation
./project_euler/problem_104/sol1.py:120:5     - Unknown word (tocheck)       -- tocheck = [0] * 1000000
./project_euler/problem_104/sol1.py:47:32     - Unknown word (pandigitality) -- check last 9 numbers for pandigitality
./project_euler/problem_107/sol1.py:110:5     - Unknown word (adjaceny)   -- adjaceny_matrix = [line.split
./project_euler/problem_107/sol1.py:16:28     - Unknown word (optimise)   -- However, it is possible to optimise the network by removing
./project_euler/problem_135/sol1.py:45:52     - Unknown word (divisble)   -- difference % 4:  # d must be divisble by 4
./project_euler/problem_145/sol1.py:3:27      - Unknown word (Smolskiy)   -- Author: Vineet Rao, Maxim Smolskiy
./project_euler/problem_145/sol1.py:3:9       - Unknown word (Vineet)     -- Author: Vineet Rao, Maxim Smolskiy
./project_euler/problem_180/sol1.py:40:75     - Unknown word (uniquq)     -- <= 0. We use a set "uniquq_s"
./project_euler/problem_188/sol1.py:23:6      - Unknown word (modexpt)    -- def _modexpt(base: int, exponent
./project_euler/problem_188/sol1.py:58:39     - Unknown word (assiciative) -- base↑↑height by right-assiciative repeated modular
./project_euler/problem_191/sol1.py:15:11     - Unknown word (OOOL)       -- OOOO OOOA OOOL OOAO OOAA OOAL OOLO
./project_euler/problem_191/sol1.py:15:16     - Unknown word (OOAO)       -- OOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA
./project_euler/problem_191/sol1.py:15:21     - Unknown word (OOAA)       -- OOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO
./project_euler/problem_191/sol1.py:15:26     - Unknown word (OOAL)       -- OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA
./project_euler/problem_191/sol1.py:15:31     - Unknown word (OOLO)       -- OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA
./project_euler/problem_191/sol1.py:15:36     - Unknown word (OOLA)       -- OOAO OOAA OOAL OOLO OOLA OAOO OAOA
./project_euler/problem_191/sol1.py:15:41     - Unknown word (OAOO)       -- OOAA OOAL OOLO OOLA OAOO OAOA
./project_euler/problem_191/sol1.py:15:46     - Unknown word (OAOA)       -- OOAL OOLO OOLA OAOO OAOA
./project_euler/problem_191/sol1.py:15:6      - Unknown word (OOOA)       -- OOOO OOOA OOOL OOAO OOAA OOAL
./project_euler/problem_191/sol1.py:16:1      - Unknown word (OAOL)       -- OAOL OAAO OAAL OALO OALA
./project_euler/problem_191/sol1.py:16:11     - Unknown word (OAAL)       -- OAOL OAAO OAAL OALO OALA OLOO OLOA
./project_euler/problem_191/sol1.py:16:16     - Unknown word (OALO)       -- OAOL OAAO OAAL OALO OALA OLOO OLOA OLAO
./project_euler/problem_191/sol1.py:16:21     - Unknown word (OALA)       -- OAOL OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA
./project_euler/problem_191/sol1.py:16:26     - Unknown word (OLOO)       -- OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO
./project_euler/problem_191/sol1.py:16:31     - Unknown word (OLOA)       -- OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO
./project_euler/problem_191/sol1.py:16:36     - Unknown word (OLAO)       -- OALO OALA OLOO OLOA OLAO OLAA AOOO
./project_euler/problem_191/sol1.py:16:41     - Unknown word (OLAA)       -- OALA OLOO OLOA OLAO OLAA AOOO
./project_euler/problem_191/sol1.py:16:46     - Unknown word (AOOO)       -- OLOO OLOA OLAO OLAA AOOO
./project_euler/problem_191/sol1.py:16:6      - Unknown word (OAAO)       -- OAOL OAAO OAAL OALO OALA OLOO
./project_euler/problem_191/sol1.py:17:1      - Unknown word (AOOA)       -- AOOA AOOL AOAO AOAA AOAL
./project_euler/problem_191/sol1.py:17:11     - Unknown word (AOAO)       -- AOOA AOOL AOAO AOAA AOAL AOLO AOLA
./project_euler/problem_191/sol1.py:17:16     - Unknown word (AOAA)       -- AOOA AOOL AOAO AOAA AOAL AOLO AOLA AAOO
./project_euler/problem_191/sol1.py:17:21     - Unknown word (AOAL)       -- AOOA AOOL AOAO AOAA AOAL AOLO AOLA AAOO AAOA
./project_euler/problem_191/sol1.py:17:26     - Unknown word (AOLO)       -- AOOL AOAO AOAA AOAL AOLO AOLA AAOO AAOA AAOL
./project_euler/problem_191/sol1.py:17:31     - Unknown word (AOLA)       -- AOAO AOAA AOAL AOLO AOLA AAOO AAOA AAOL
./project_euler/problem_191/sol1.py:17:36     - Unknown word (AAOO)       -- AOAA AOAL AOLO AOLA AAOO AAOA AAOL
./project_euler/problem_191/sol1.py:17:41     - Unknown word (AAOA)       -- AOAL AOLO AOLA AAOO AAOA AAOL
./project_euler/problem_191/sol1.py:17:46     - Unknown word (AAOL)       -- AOLO AOLA AAOO AAOA AAOL
./project_euler/problem_191/sol1.py:17:6      - Unknown word (AOOL)       -- AOOA AOOL AOAO AOAA AOAL AOLO
./project_euler/problem_191/sol1.py:18:1      - Unknown word (AALO)       -- AALO AALA ALOO ALOA ALAO
./project_euler/problem_191/sol1.py:18:11     - Unknown word (ALOO)       -- AALO AALA ALOO ALOA ALAO ALAA LOOO
./project_euler/problem_191/sol1.py:18:16     - Unknown word (ALOA)       -- AALO AALA ALOO ALOA ALAO ALAA LOOO LOOA
./project_euler/problem_191/sol1.py:18:21     - Unknown word (ALAO)       -- AALO AALA ALOO ALOA ALAO ALAA LOOO LOOA LOAO
./project_euler/problem_191/sol1.py:18:26     - Unknown word (ALAA)       -- AALA ALOO ALOA ALAO ALAA LOOO LOOA LOAO LOAA
./project_euler/problem_191/sol1.py:18:31     - Unknown word (LOOO)       -- ALOO ALOA ALAO ALAA LOOO LOOA LOAO LOAA
./project_euler/problem_191/sol1.py:18:36     - Unknown word (LOOA)       -- ALOA ALAO ALAA LOOO LOOA LOAO LOAA
./project_euler/problem_191/sol1.py:18:41     - Unknown word (LOAO)       -- ALAO ALAA LOOO LOOA LOAO LOAA
./project_euler/problem_191/sol1.py:18:46     - Unknown word (LOAA)       -- ALAA LOOO LOOA LOAO LOAA
./project_euler/problem_191/sol1.py:18:6      - Unknown word (AALA)       -- AALO AALA ALOO ALOA ALAO ALAA
./project_euler/problem_191/sol1.py:19:1      - Unknown word (LAOO)       -- LAOO LAOA LAAO
./project_euler/problem_191/sol1.py:19:11     - Unknown word (LAAO)       -- LAOO LAOA LAAO
./project_euler/problem_191/sol1.py:19:6      - Unknown word (LAOA)       -- LAOO LAOA LAAO
./project_euler/problem_191/sol1.py:82:11     - Unknown word (ontime)     -- state_ontime = _calculate(days -
./project_euler/problem_493/sol1.py:12:51     - Unknown word (cominations) -- of possible picking cominations
./project_euler/problem_493/sol1.py:13:18     - Unknown word (binom)       -- [combinations := binom_coeff(70, 20)]
./project_euler/problem_493/sol1.py:6:62      - Unknown word (bcdefghij)  -- the decimal point (a.bcdefghij).
./project_euler/problem_551/sol1.py:35:20     - Unknown word (calulcated) -- Term are calulcated until c > 10^k or the
./quantum/README.md:18:11     - Unknown word (Cirq)       -- ## Google Cirq
./quantum/README.md:19:52     - Unknown word (cirq)       -- python -m pip install cirq`, refer the [docs](https
./quantum/README.md:8:3       - Unknown word (Rigetti)    -- * Rigetti: https://rigetti.com
./quantum/bb84.py:11:68     - Unknown word (qubit)      -- encodes the basis for each qubit:
./quantum/bb84.py:50:8      - Unknown word (qiskit)     -- import qiskit
./quantum/bb84.py:7:7       - Unknown word (qubits)     -- using qubits instead of classical
./quantum/deutsch_jozsa.py:100:13    - Unknown word (jozsa)      -- def deutsch_jozsa(case: str, num_qubits
./quantum/deutsch_jozsa.py:109:11    - Unknown word (Aer's)      -- # Use Aer's simulator
./quantum/deutsch_jozsa.py:40:62     - Unknown word (CNOTs)      -- that tells us which CNOTs to
./quantum/half_adder.py:38:11     - Unknown word (cnots)      -- # use cnots to write XOR of the
./quantum/half_adder.py:42:17     - Unknown word (toffoli)    -- # use ccx / toffoli gate to write AND of
./quantum/half_adder.py:50:34     - Unknown word (qasm)       -- Execute the circuit on the qasm simulator
./quantum/not_gate.py:27:29     - Unknown word (Qubits)     -- Apply X (NOT) Gate to Qubits 0 & 1
./quantum/not_gate.py:6:1       - Unknown word (Qiskit)     -- Qiskit Docs: https://qiskit
./quantum/q_fourier_transform.py:6:5       - Unknown word (Shor's)     -- the Shor's algorithm in quantum
./quantum/q_full_adder.py:106:65    - Unknown word (qbits)      -- measure the last two qbits
./quantum/quantum_entanglement.py:42:22     - Unknown word (CNOT)       -- # Adding CX (CNOT) gate
./scheduling/highest_response_ratio_next.py:2:30      - Unknown word (HRRN)       -- response ratio next (HRRN) scheduling is a non
./scheduling/multi_level_feedback_queue.py:152:9     - Unknown word (FCFS)       -- FCFS(First Come, First Served
./scheduling/multi_level_feedback_queue.py:153:33    - Unknown word (MLFQ's)     -- FCFS will be applied to MLFQ's last queue
./scheduling/multi_level_feedback_queue.py:15:7      - Unknown word (MLFQ)       -- class MLFQ:
./scheduling/multi_level_feedback_queue.py:32:27     - Unknown word (mlfq's)     -- # total number of mlfq's queues
./scheduling/multi_level_feedback_queue.py:50:13     - Unknown word (mlfq)       -- >>> mlfq = MLFQ(3, [17, 25],
./scheduling/shortest_job_first.py:137:5     - Unknown word (fcfs)       -- fcfs = pd.DataFrame(
./scheduling/shortest_job_first.py:32:5      - Unknown word (minm)       -- minm = 999999999
./scheduling/shortest_job_first.py:62:13     - Unknown word (finar)      -- finar = finish_time - arrival
./scripts/build_directory_md.py:13:59     - Unknown word (ipynb)      -- filename)[1] in (".py", ".ipynb"):
./scripts/validate_filenames.py:27:1      - Unknown word (nodir)      -- nodir_files = [file for file
./searches/fibonacci_search.py:109:13    - Unknown word (fibb)       -- fibb_k = i
./sorts/README.md:4:102     - Unknown word (optimised)  -- searching can be highly optimised.
./sorts/bitonic_sort.py:40:5      - Unknown word (bitonic)    -- def bitonic_merge(array: list[int
./sorts/bogo_sort.py:2:45      - Unknown word (bogosort)   -- implementation of the bogosort algorithm,
./sorts/bogo_sort.py:4:1       - Unknown word (Bogosort)   -- Bogosort generates random permutations
./sorts/bogo_sort.py:9:22      - Unknown word (bogo)       -- python -m doctest -v bogo_sort.py
./sorts/comb_sort.py:3:75      - Unknown word (Wlodzimierz) -- originally designed by Wlodzimierz
./sorts/comb_sort.py:4:1       - Unknown word (Dobosiewicz) -- Dobosiewicz in 1980.  It was rediscovered
./sorts/counting_sort.py:62:6      - Unknown word (eghhiiinrsssttt) -- 'eghhiiinrsssttt'
./sorts/external_sort.py:85:9      - Unknown word (unshift)    -- def unshift(self, index):
./sorts/gnome_sort.py:34:8      - Unknown word (Gadeimnoprstu) -- ' !Gadeimnoprstu'
./sorts/iterative_merge_sort.py:3:9       - Unknown word (Aman)       -- Author: Aman Gupta
./sorts/iterative_merge_sort.py:49:42     - Unknown word (trai)       -- sort(['dep', 'dang', 'trai'])
./sorts/natural_sort.py:27:9      - Unknown word (alphanum)   -- def alphanum_key(key):
./sorts/normal_distribution_quick_sort.md:13:12     - Unknown word (numpy)      -- >>> import numpy as np
./sorts/normal_distribution_quick_sort.md:14:10     - Unknown word (tempfile)   -- >>> from tempfile import TemporaryFile
./sorts/normal_distribution_quick_sort.md:15:5      - Unknown word (outfile)    -- >>> outfile = TemporaryFile()
./sorts/normal_distribution_quick_sort.md:33:97     - Unknown word (linewidth)  -- / (2 * sigma**2) ),linewidth=2, color='r')
./sorts/normal_distribution_quick_sort.md:47:12     - Unknown word (matplotlib) -- >>> import matplotlib.pyplot as plt
./sorts/normal_distribution_quick_sort.md:47:23     - Unknown word (pyplot)     -- > import matplotlib.pyplot as plt
./sorts/quick_sort_3_partition.py:21:16     - Unknown word (lomuto)     -- def quick_sort_lomuto_partition(sorting: list
./sorts/quick_sort_3_partition.py:24:10     - Unknown word (Lomuto)     -- with Lomuto partition scheme:
./sorts/shell_sort.py:19:14     - Unknown word (Ciura's)    -- # Marcin Ciura's gap sequence
./sorts/shell_sort.py:19:7      - Unknown word (Marcin)     -- # Marcin Ciura's gap sequence
./sorts/slowsort.py:5:53      - Unknown word (Stolfi)     -- Andrei Broder and Jorge Stolfi
./sorts/slowsort.py:6:40      - Unknown word (Simplexity) -- Pessimal Algorithms and Simplexity Analysis
./strings/aho_corasick.py:8:14      - Unknown word (adlist)     -- self.adlist: list[dict] = []
./strings/alternative_string_arrange.py:10:6      - Unknown word (XAYBCD)     -- 'XAYBCD'
./strings/alternative_string_arrange.py:12:6      - Unknown word (AXBYZ)      -- 'AXBYZ'
./strings/alternative_string_arrange.py:8:6       - Unknown word (AXBYCD)     -- 'AXBYCD'
./strings/anagrams.py:11:6      - Unknown word (estt)       -- 'estt'
./strings/anagrams.py:13:9      - Unknown word (aehiisssttt) -- ' aehiisssttt'
./strings/anagrams.py:15:6      - Unknown word (aefilnstt)   -- 'aefilnstt'
./strings/barcode_validator.py:48:18     - Unknown word (dwefgiweuf) -- >>> is_valid(dwefgiweuf)
./strings/can_string_be_rearranged_as_palindrome.py:17:57     - Unknown word (Momo)       -- palindrome_counter("Momo")
./strings/can_string_be_rearranged_as_palindrome.py:1:14      - Unknown word (susmith)    -- # Created by susmith98
./strings/detecting_english_programmatically.py:37:21     - Unknown word (llold)      -- >>> is_english('llold HorWd')
./strings/dna.py:10:6      - Unknown word (CGAT)       -- 'CGAT'
./strings/dna.py:11:14     - Unknown word (ATGC)       -- >>> dna("ATGC")
./strings/dna.py:12:6      - Unknown word (TACG)       -- 'TACG'
./strings/dna.py:13:14     - Unknown word (CTGA)       -- >>> dna("CTGA")
./strings/dna.py:14:6      - Unknown word (GACT)       -- 'GACT'
./strings/dna.py:15:14     - Unknown word (GFGG)       -- >>> dna("GFGG")
./strings/dna.py:21:25     - Unknown word (ATCG)       -- if len(re.findall("[ATCG]", dna)) != len(dna
./strings/dna.py:24:49     - Unknown word (TAGC)       -- dna.maketrans("ATCG", "TAGC"))
./strings/dna.py:9:14      - Unknown word (GCTA)       -- >>> dna("GCTA")
./strings/frequency_finder.py:34:1      - Unknown word (ETAOIN)     -- ETAOIN = "ETAOINSHRDLCUMWFGYPBVKJXQZ
./strings/frequency_finder.py:34:11     - Unknown word (ETAOINSHRDLCUMWFGYPBVKJXQZ) -- ETAOIN = "ETAOINSHRDLCUMWFGYPBVKJXQZ"
./strings/hamming_distance.py:16:38     - Unknown word (kathrin)    -- distance("karolin", "kathrin")
./strings/hamming_distance.py:20:38     - Unknown word (kath)       -- distance("karolin", "kath")
./strings/is_isogram.py:10:21     - Unknown word (Uncopyrightable) -- >>> is_isogram('Uncopyrightable')
./strings/is_isogram.py:9:30      - Unknown word (uncopyrightable) -- Examples of isograms are uncopyrightable and ambidextrously.
./strings/is_spain_national_id.py:2:19      - Unknown word (TRWAGMYFPDXBNJZSQVHLCKE) -- LOOKUP_LETTERS = "TRWAGMYFPDXBNJZSQVHLCKE"
./strings/jaro_winkler.py:10:33     - Unknown word (marhta)     -- jaro_winkler("martha", "marhta")
./strings/jaro_winkler.py:14:31     - Unknown word (dbdbdbdb)   -- jaro_winkler("test", "dbdbdbdb")
./strings/jaro_winkler.py:4:10      - Unknown word (winkler)    -- def jaro_winkler(str1: str, str2: str
./strings/jaro_winkler.py:4:5       - Unknown word (jaro)       -- def jaro_winkler(str1: str, str
./strings/knuth_morris_pratt.py:62:14     - Unknown word (alskfjaldsabc) -- text1 = "alskfjaldsabc1abc1abc12k23adsfabcabc
./strings/knuth_morris_pratt.py:62:40     - Unknown word (adsfabcabc)    -- alskfjaldsabc1abc1abc12k23adsfabcabc"
./strings/knuth_morris_pratt.py:63:14     - Unknown word (alskfjaldsk)   -- text2 = "alskfjaldsk23adsfabcabc"
./strings/knuth_morris_pratt.py:67:16     - Unknown word (ABABX)         -- pattern = "ABABX"
./strings/knuth_morris_pratt.py:68:13     - Unknown word (ABABZABABYABABX) -- text = "ABABZABABYABABX"
./strings/knuth_morris_pratt.py:72:16     - Unknown word (AAAB)            -- pattern = "AAAB"
./strings/knuth_morris_pratt.py:73:13     - Unknown word (ABAAAAAB)        -- text = "ABAAAAAB"
./strings/knuth_morris_pratt.py:77:16     - Unknown word (abcdabcy)        -- pattern = "abcdabcy"
./strings/knuth_morris_pratt.py:78:13     - Unknown word (abcxabcdabxabcdabcdabcy) -- text = "abcxabcdabxabcdabcdabcy"
./strings/knuth_morris_pratt.py:82:16     - Unknown word (aabaabaaa)               -- pattern = "aabaabaaa"
./strings/lower.py:8:6       - Unknown word (hellzo)     -- 'hellzo'
./strings/manacher.py:4:6       - Unknown word (abbba)      -- 'abbba'
./strings/manacher.py:5:29      - Unknown word (ababa)      -- palindromic_string('ababa')
./strings/naive_string_search.py:14:31     - Unknown word (ABAAABCDBBABCDDEBCABC) -- naive_pattern_search("ABAAABCDBBABCDDEBCABC", "ABC")
./strings/naive_string_search.py:22:31     - Unknown word (ABCDEGFTEST)           -- naive_pattern_search("ABCDEGFTEST", "TEST")
./strings/ngram.py:6:12      - Unknown word (ngram)      -- def create_ngram(sentence: str, ngram
./strings/ngram.py:8:12      - Unknown word (ngrams)     -- Create ngrams from a sentence
./strings/prefix_function.py:22:26     - Unknown word (aabcdaabc)  -- >> prefix_function("aabcdaabc")
./strings/prefix_function.py:24:26     - Unknown word (asdasdad)   -- >> prefix_function("asdasdad")
./strings/prefix_function.py:53:25     - Unknown word (abcab)      -- >>> longest_prefix("abcab")
./strings/rabin_karp.py:7:11      - Unknown word (karp)       -- def rabin_karp(pattern: str, text:
./strings/rabin_karp.py:82:13     - Unknown word (Lüsai)      -- text = "Lüsai"
./strings/reverse_letters.py:11:13     - Unknown word (nohty)      -- 'I evol nohtyP'
./strings/reverse_letters.py:11:8      - Unknown word (evol)       -- 'I evol nohtyP'
./strings/reverse_letters.py:7:10      - Unknown word (kciuq)      -- 'ehT kciuq nworb xof depmuj revo
./strings/reverse_letters.py:7:16      - Unknown word (nworb)      -- 'ehT kciuq nworb xof depmuj revo eht
./strings/reverse_letters.py:7:26      - Unknown word (depmuj)     -- ehT kciuq nworb xof depmuj revo eht yzal .god'
./strings/reverse_letters.py:7:33      - Unknown word (revo)       -- kciuq nworb xof depmuj revo eht yzal .god'
./strings/reverse_letters.py:7:42      - Unknown word (yzal)       -- xof depmuj revo eht yzal .god'
./strings/reverse_letters.py:9:15      - Unknown word (eurt)       -- 'sI siht ?eurt'
./strings/reverse_letters.py:9:9       - Unknown word (siht)       -- 'sI siht ?eurt'
./strings/reverse_long_words.py:5:33      - Unknown word (wollef)     -- reverse_long_words("Hey wollef sroirraw")
./strings/reverse_long_words.py:5:40      - Unknown word (sroirraw)   -- long_words("Hey wollef sroirraw")
./strings/wildcard_pattern_matching.py:37:24     - Unknown word (dabc)       -- >>> match_pattern("dabc", "*abc")
./strings/wildcard_pattern_matching.py:43:24     - Unknown word (aaab)       -- >>> match_pattern("aaab", "aa*")
./strings/word_occurrence.py:10:9      - Unknown word (occurence)    -- >>> occurence_dict = word_occurrence
./strings/word_occurrence.py:1:14      - Unknown word (sarathkaul) -- # Created by sarathkaul on 17/11/19
./strings/word_occurrence.py:2:15      - Unknown word (Arkadip)    -- # Modified by Arkadip Bhattacharya(@darkmatter
./strings/word_occurrence.py:2:23      - Unknown word (Bhattacharya) -- Modified by Arkadip Bhattacharya(@darkmatter18) on 2
./strings/z_function.py:27:21     - Unknown word (zxxzxxz)    -- >>> z_function("zxxzxxz")
./web_programming/covid_stats_via_xpath.py:2:51      - Unknown word (worldometers) -- info fetching from worldometers site using lxml
./web_programming/covid_stats_via_xpath.py:2:75      - Unknown word (lxml)         -- worldometers site using lxml
./web_programming/currency_converter.py:100:5     - Unknown word (Myanma)     -- MMK Myanma Kyat
./web_programming/currency_converter.py:118:14    - Unknown word (Nuevo)      -- PEN Peruvian Nuevo Sol
./web_programming/currency_converter.py:131:5     - Unknown word (Seychellois) -- SCR Seychellois Rupee
./web_programming/currency_converter.py:136:12    - Unknown word (Leonean)     -- SLL Sierra Leonean Leone
./web_programming/currency_converter.py:144:16    - Unknown word (Somoni)      -- TJS Tajikistan Somoni
./web_programming/currency_converter.py:145:5     - Unknown word (Turkmenistani) -- TMT Turkmenistani Manat
./web_programming/currency_converter.py:147:11    - Unknown word (Paanga)        -- TOP Tonga Paanga
./web_programming/currency_converter.py:46:11     - Unknown word (Rican)      -- CRC Costa Rican Colon
./web_programming/currency_converter.py:48:10     - Unknown word (Verdean)    -- CVE Cape Verdean Escudo
./web_programming/currency_converter.py:50:5      - Unknown word (Djiboutian) -- DJF Djiboutian Franc
./web_programming/currency_converter.py:82:5      - Unknown word (Kyrgystani) -- KGS Kyrgystani Som
./web_programming/currency_converter.py:98:14     - Unknown word (Ariary)     -- MGA Malagasy Ariary
./web_programming/current_weather.py:12:32     - Unknown word (Kolkata)    -- weather_forecast(q: str = "Kolkata, India", appid: str
./web_programming/download_images_from_google_query.py:12:8      - Unknown word (KHTML)      -- " (KHTML, like Gecko) Chrome
./web_programming/download_images_from_google_query.py:37:17     - Unknown word (isch)       -- "tbm": "isch",
./web_programming/download_images_from_google_query.py:59:43     - Unknown word (gstatic)    -- \/\/encrypted-tbn0\.gstatic\.com\/images\?.*?)\
./web_programming/emails_from_url.py:4:24      - Unknown word (Umer)       -- author__ = "Muhammad Umer Farooq"
./web_programming/emails_from_url.py:4:29      - Unknown word (Farooq)     -- author__ = "Muhammad Umer Farooq"
./web_programming/fetch_anime_and_play.py:141:22    - Unknown word (iframe)     -- url = soup.find("iframe", {"id": "playerframe
./web_programming/fetch_anime_and_play.py:24:26     - Unknown word (animes)     -- [list]: [List of animes]
./web_programming/fetch_anime_and_play.py:70:48     - Unknown word (kimetsu)    -- episode_list("/anime/kimetsu-no-yaiba"))
./web_programming/fetch_anime_and_play.py:70:59     - Unknown word (yaiba)      -- list("/anime/kimetsu-no-yaiba"))
./web_programming/fetch_anime_and_play.py:93:42     - Unknown word (eposiodes)  -- Could not find any anime eposiodes with name {anime_name
./web_programming/fetch_github_info.py:4:12      - Unknown word (lawric)     -- Updated by lawric1 on 24/11/20
./web_programming/fetch_well_rx_price.py:35:40     - Unknown word (eliquis)    -- pharmacy_and_price_list("eliquis", None)
./web_programming/get_imdb_top_250_movies_csv.py:9:9       - Unknown word (imdb)       -- def get_imdb_top_250_movies(url:
./web_programming/get_imdbtop.py:15:61     - Unknown word (IMDB)       -- highly rated movies from IMDB and
./web_programming/get_user_tweets.py:3:8       - Unknown word (tweepy)     -- import tweepy
./web_programming/giphy.py:4:1       - Unknown word (giphy)      -- giphy_api_key = "YOUR API
./web_programming/giphy.py:8:9       - Unknown word (gifs)       -- def get_gifs(query: str, api_key
./web_programming/instagram_video.py:13:30     - Unknown word (IGTV)       -- input("Enter Video/IGTV url: ").strip()
./web_programming/nasa_data.py:6:9       - Unknown word (apod)       -- def get_apod_data(api_key: str, download
./web_programming/nasa_data.py:8:13      - Unknown word (APOD)       -- Get the APOD(Astronomical Picture
./web_programming/reddit.py:12:16     - Unknown word (pwls)       -- name permalink pwls quarantine saved score
./web_programming/search_books_by_isbn.py:15:29     - Unknown word (olids)      -- This code must work for olids with or without a leading
./web_programming/search_books_by_isbn.py:21:22     - Unknown word (Brisku)     -- {'name': 'Adrian Brisku', 'created': {'type

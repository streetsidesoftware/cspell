
Repository: caddyserver/caddy
Url: "https://github.com/caddyserver/caddy.git"
Args: ["**/*.go"]
Lines:
 CSpell: Files checked: 277, Issues found: 3547 in 253 files.
 exit code: 1
admin.go:1064:20   - Unknown word (Redir)       -- return errInternalRedir
admin.go:1340:6    - Unknown word (loggable)    -- type loggableURLArray []*url.URL
admin.go:1342:10   - Unknown word (loggable)    -- func (ua loggableURLArray) MarshalLogArray
admin.go:1363:21   - Unknown word (pidfile)     -- // PIDFile writes a pidfile to the file at filename
admin.go:1371:2    - Unknown word (pidfile)     -- pidfile = filename
admin.go:1381:31   - Unknown word (pidfile)     -- pidfile is the name of the pidfile, if any.
admin.go:1381:4    - Unknown word (pidfile)     -- // pidfile is the name of the pidfile
admin.go:1382:5    - Unknown word (pidfile)     -- var pidfile string
admin.go:1384:15   - Unknown word (Redir)       -- // errInternalRedir indicates an internal
admin.go:1389:16   - Unknown word (Redir)       -- var errInternalRedir = fmt.Errorf("internal
admin.go:165:12    - Unknown word (certmagic)   -- issuers []certmagic.Issuer
admin.go:331:29    - Unknown word (infosec)     -- security checks, the infosec community assures me
admin.go:43:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
admin.go:43:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
admin.go:44:14     - Unknown word (cespare)     -- "github.com/cespare/xxhash/v2"
admin.go:44:22     - Unknown word (xxhash)      -- "github.com/cespare/xxhash/v2"
admin.go:459:24    - Unknown word (loggable)    -- zap.Array("origins", loggableURLArray(handler.allowedOrigin
admin.go:476:16    - Unknown word (caddytls)    -- // import the caddytls package -- but it works
admin.go:490:76    - Unknown word (certmagic)   -- Identity.issuers, issVal.(certmagic.Issuer))
admin.go:500:30    - Unknown word (certmagic)   -- cfg.Admin.Identity.certmagicConfig(logger, true)
admin.go:503:25    - Unknown word (caddytls)    -- as explained in the caddytls package, they need access
admin.go:506:30    - Unknown word (caddytls)    -- avoid import cycle with caddytls package, so manually
admin.go:507:56    - Unknown word (certmagic)   -- interface{ SetConfig(cfg *certmagic.Config) }); ok {
admin.go:575:23    - Unknown word (stdlib)      -- / convert logger to stdlib so it can be used by
admin.go:839:23    - Unknown word (Redir)       -- if err == errInternalRedir {
admin.go:940:38    - Unknown word (xxhash)      -- hash.Hash { return xxhash.New() }
admin_test.go:30:8      - Unknown word (myserver)   -- "myserver": {
admin_test.go:34:8      - Unknown word (yourserver) -- "yourserver": {
caddy.go:1028:33   - Unknown word (devel)       -- = "" || simple == "(devel)" {
caddy.go:1089:32   - Unknown word (caddyserver) -- ImportPath = "github.com/caddyserver/caddy/v2"
caddy.go:38:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
caddy.go:38:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
caddy.go:42:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/internal/filesystems
caddy.go:43:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/notify"
caddy.go:488:5     - Unknown word (certmagic)   -- certmagic.Default.Storage = currentCtx
caddy.go:534:3     - Unknown word (certmagic)   -- certmagic.Default.Storage = newCfg
caddy.go:739:24    - Unknown word (byeee)       -- logger.Warn("exiting; byeee!! ðŸ‘‹")
caddy.go:750:14    - Unknown word (certmagic)   -- // clean up certmagic locks
caddy.go:753:12    - Unknown word (pidfile)     -- // remove pidfile
caddy.go:754:5     - Unknown word (pidfile)     -- if pidfile != "" {
caddy.go:755:20    - Unknown word (pidfile)     -- err := os.Remove(pidfile)
caddy.go:758:17    - Unknown word (pidfile)     -- zap.String("pidfile", pidfile),
caddy.go:758:27    - Unknown word (pidfile)     -- zap.String("pidfile", pidfile),
caddy.go:85:10     - Unknown word (certmagic)   -- storage certmagic.Storage
caddy.go:915:47    - Unknown word (ldflags)     -- during `go build` with `-ldflags`:
caddy.go:917:28    - Unknown word (caddyserver) -- ldflags '-X github.com/caddyserver/caddy/v2.CustomVersion
caddy.go:917:5     - Unknown word (ldflags)     -- // -ldflags '-X github.com/caddyserver
caddy.go:931:28    - Unknown word (devel)       -- this function returns "(devel)" because Go uses that
caddyconfig/caddyfile/adapter.go:130:17    - Unknown word (Errf)        -- return nil, d.Errf("getting module named
caddyconfig/caddyfile/adapter.go:135:17    - Unknown word (Errf)        -- return nil, d.Errf("module %s is not a
caddyconfig/caddyfile/adapter.go:15:9      - Unknown word (caddyfile)  -- package caddyfile
caddyconfig/caddyfile/adapter.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
caddyconfig/caddyfile/adapter.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/caddyfile/adapter.go:23:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
caddyconfig/caddyfile/adapter.go:26:19     - Unknown word (Caddyfile)   -- // Adapter adapts Caddyfile to Caddy JSON.
caddyconfig/caddyfile/adapter.go:31:23     - Unknown word (Caddyfile)   -- Adapt converts the Caddyfile config in body to Caddy
caddyconfig/caddyfile/adapter.go:32:72     - Unknown word (caddyconfig) -- string]any) ([]byte, []caddyconfig.Warning, error) {
caddyconfig/caddyfile/adapter.go:42:15     - Unknown word (Caddyfile)   -- filename = "Caddyfile"
caddyconfig/caddyfile/adapter.go:56:52     - Unknown word (Caddyfile)   -- logical errors (the Caddyfile is a bad format, I'm
caddyconfig/caddyfile/adapter.go:69:58     - Unknown word (caddyconfig) -- string, body []byte) (caddyconfig.Warning, bool) {
caddyconfig/caddyfile/adapter.go:75:10     - Unknown word (caddyconfig) -- return caddyconfig.Warning{}, false
caddyconfig/caddyfile/adapter.go:88:9      - Unknown word (caddyconfig) -- return caddyconfig.Warning{
caddyconfig/caddyfile/adapter.go:91:13     - Unknown word (Caddyfile)   -- Message: "Caddyfile input is not formatted
caddyconfig/caddyfile/dispenser.go:15:9      - Unknown word (caddyfile)  -- package caddyfile
caddyconfig/caddyfile/dispenser.go:347:2     - Unknown word (tkns)       -- tkns := Segment{d.Token(
caddyconfig/caddyfile/dispenser.go:349:17    - Unknown word (tkns)       -- tkns = append(tkns, d.Token())
caddyconfig/caddyfile/dispenser.go:349:3     - Unknown word (tkns)       -- tkns = append(tkns, d.Token
caddyconfig/caddyfile/dispenser.go:360:18    - Unknown word (tkns)       -- tkns = append(tkns, d.Token())
caddyconfig/caddyfile/dispenser.go:360:4     - Unknown word (tkns)       -- tkns = append(tkns, d.Token
caddyconfig/caddyfile/dispenser.go:400:11    - Unknown word (Errf)       -- return d.Errf("wrong argument count
caddyconfig/caddyfile/dispenser.go:413:11    - Unknown word (Errf)       -- return d.Errf("unexpected EOF")
caddyconfig/caddyfile/dispenser.go:421:4     - Unknown word (Errf)       -- // Errf is like Err, but for
caddyconfig/caddyfile/dispenser.go:422:21    - Unknown word (Errf)       -- func (d *Dispenser) Errf(format string, args
caddyconfig/caddyfile/dispenser.go:426:49    - Unknown word (Caddyfile)  -- existing error and adds the Caddyfile file and line number
caddyconfig/caddyfile/dispenser_test.go:15:9      - Unknown word (caddyfile)  -- package caddyfile
caddyconfig/caddyfile/dispenser_test.go:309:20    - Unknown word (Errf)       -- bookingError := d.Errf("unable to reserve:
caddyconfig/caddyfile/dispenser_test.go:311:13    - Unknown word (Errf)       -- t.Errorf("Errf(): should be able to
caddyconfig/caddyfile/formatter.go:15:9      - Unknown word (caddyfile)  -- package caddyfile
caddyconfig/caddyfile/formatter.go:24:29     - Unknown word (Caddyfile)  -- Format formats the input Caddyfile to a standard, nice
caddyconfig/caddyfile/formatter.go:292:9     - Unknown word (Caddyfile)  -- // the Caddyfile does not need any leading
caddyconfig/caddyfile/formatter.go:295:8     - Unknown word (Caddyfiles) -- // ...Caddyfiles should, however, end
caddyconfig/caddyfile/formatter_fuzz.go:15:12     - Unknown word (gofuzz)     -- //go:build gofuzz
caddyconfig/caddyfile/formatter_fuzz.go:17:9      - Unknown word (caddyfile)  -- package caddyfile
caddyconfig/caddyfile/formatter_test.go:15:9      - Unknown word (caddyfile)  -- package caddyfile
caddyconfig/caddyfile/formatter_test.go:315:18    - Unknown word (redir)      -- input: `redir / /some/#/path`,
caddyconfig/caddyfile/formatter_test.go:316:18    - Unknown word (redir)      -- expect: `redir / /some/#/path`,
caddyconfig/caddyfile/formatter_test.go:330:18    - Unknown word (matthewpi)  -- description: "matthewpi/vscode-caddyfile-support
caddyconfig/caddyfile/formatter_test.go:330:35    - Unknown word (caddyfile)  -- escription: "matthewpi/vscode-caddyfile-support#13",
caddyconfig/caddyfile/formatter_test.go:332:10    - Unknown word (ACMEEMAIL)  -- email {$ACMEEMAIL}
caddyconfig/caddyfile/formatter_test.go:340:10    - Unknown word (ACMEEMAIL)  -- email {$ACMEEMAIL}
caddyconfig/caddyfile/formatter_test.go:349:18    - Unknown word (matthewpi)  -- description: "matthewpi/vscode-caddyfile-support
caddyconfig/caddyfile/formatter_test.go:349:35    - Unknown word (caddyfile)  -- escription: "matthewpi/vscode-caddyfile-support#13 - bad formatting
caddyconfig/caddyfile/formatter_test.go:351:10    - Unknown word (ACMEEMAIL)  -- email {$ACMEEMAIL}
caddyconfig/caddyfile/formatter_test.go:359:10    - Unknown word (ACMEEMAIL)  -- email {$ACMEEMAIL}
caddyconfig/caddyfile/importargs.go:15:9      - Unknown word (caddyfile)  -- package caddyfile
caddyconfig/caddyfile/importargs.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
caddyconfig/caddyfile/importargs.go:41:22     - Unknown word (caddyfile)   -- caddy.Log().Named("caddyfile").Warn(
caddyconfig/caddyfile/importargs.go:70:23     - Unknown word (caddyfile)   -- caddy.Log().Named("caddyfile").Warn(
caddyconfig/caddyfile/importargs.go:79:23     - Unknown word (caddyfile)   -- caddy.Log().Named("caddyfile").Warn(
caddyconfig/caddyfile/importargs.go:88:22     - Unknown word (caddyfile)   -- caddy.Log().Named("caddyfile").Warn(
caddyconfig/caddyfile/importgraph.go:15:9      - Unknown word (caddyfile)  -- package caddyfile
caddyconfig/caddyfile/lexer.go:15:9      - Unknown word (caddyfile)  -- package caddyfile
caddyconfig/caddyfile/lexer.go:353:6     - Unknown word (heredocs)   -- // heredocs have an extra linebreak
caddyconfig/caddyfile/lexer.go:52:45     - Unknown word (Caddyfile)  -- that can be parsed as a Caddyfile.
caddyconfig/caddyfile/lexer_fuzz.go:15:12     - Unknown word (gofuzz)     -- //go:build gofuzz
caddyconfig/caddyfile/lexer_fuzz.go:17:9      - Unknown word (caddyfile)  -- package caddyfile
caddyconfig/caddyfile/lexer_fuzz.go:20:34     - Unknown word (Caddyfile)  -- := Tokenize(input, "Caddyfile")
caddyconfig/caddyfile/lexer_test.go:15:9      - Unknown word (caddyfile)  -- package caddyfile
caddyconfig/caddyfile/lexer_test.go:404:24    - Unknown word (Aheredoc)   -- input: []byte("\u000Aheredoc \u003C\u003C\u0073\u
caddyconfig/caddyfile/lexer_test.go:81:7      - Unknown word (redir)      -- redir / /some/#/path
caddyconfig/caddyfile/lexer_test.go:86:22     - Unknown word (redir)      -- {Line: 3, Text: "redir"},
caddyconfig/caddyfile/parse.go:157:26    - Unknown word (Caddyfile)   -- this happens if the Caddyfile consists of only
caddyconfig/caddyfile/parse.go:15:9      - Unknown word (caddyfile)  -- package caddyfile
caddyconfig/caddyfile/parse.go:186:13    - Unknown word (Errf)        -- return p.Errf("redeclaration of previously
caddyconfig/caddyfile/parse.go:219:13    - Unknown word (Errf)        -- return p.Errf("request matchers may
caddyconfig/caddyfile/parse.go:234:14    - Unknown word (Errf)        -- return p.Errf("Expected another address
caddyconfig/caddyfile/parse.go:247:13    - Unknown word (Errf)        -- return p.Errf("Site addresses cannot
caddyconfig/caddyfile/parse.go:264:14    - Unknown word (Errf)        -- return p.Errf("Site addresses cannot
caddyconfig/caddyfile/parse.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
caddyconfig/caddyfile/parse.go:396:13    - Unknown word (elee)        -- // TODO(elee1766): we don't enter
caddyconfig/caddyfile/parse.go:730:36    - Unknown word (Curlies)     -- parser) blockTokens(retainCurlies bool) ([]Token, error
caddyconfig/caddyfile/parse.go:731:21    - Unknown word (curlies)     -- // block must have curlies.
caddyconfig/caddyfile/parse.go:738:11    - Unknown word (Curlies)     -- if retainCurlies {
caddyconfig/caddyfile/parse.go:745:14    - Unknown word (Curlies)     -- if retainCurlies {
caddyconfig/caddyfile/parse_test.go:15:9      - Unknown word (caddyfile)  -- package caddyfile
caddyconfig/caddyfile/parse_test.go:669:13    - Unknown word (foofoobarbar) -- expect: "foofoobarbar",
caddyconfig/caddyfile/parse_test.go:681:13    - Unknown word (foobarfoobar) -- expect: "foobarfoobar",
caddyconfig/caddyfile/parse_test.go:693:13    - Unknown word (foobarbaz)    -- expect: "foobarbaz",
caddyconfig/caddyfile/parse_test.go:697:23    - Unknown word (baz)          -- expect: "foo$FOOBARbaz", // should not chain
caddyconfig/caddyfile/parse_test.go:831:22    - Unknown word (Caddyfile)    -- // Make the derived Caddyfile that expects (common
caddyconfig/configadapters.go:125:8     - Unknown word (caddyserver) -- // See caddyserver/caddy#3132.
caddyconfig/configadapters.go:15:9      - Unknown word (caddyconfig) -- package caddyconfig
caddyconfig/configadapters.go:21:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
caddyconfig/httpcaddyfile/addresses.go:108:56    - Unknown word (sblock)        -- istenersForServerBlockAddress(sblock, parsedKey, options
caddyconfig/httpcaddyfile/addresses.go:114:4     - Unknown word (kwpk)          -- kwpk := keyWithParsedKey
caddyconfig/httpcaddyfile/addresses.go:129:7     - Unknown word (kwpk)          -- kwpk)
caddyconfig/httpcaddyfile/addresses.go:149:4     - Unknown word (prots)         -- prots := make([]string, 0
caddyconfig/httpcaddyfile/addresses.go:151:20    - Unknown word (prots)         -- prots = append(prots, prot)
caddyconfig/httpcaddyfile/addresses.go:151:5     - Unknown word (prots)         -- prots = append(prots, prot
caddyconfig/httpcaddyfile/addresses.go:153:17    - Unknown word (prots)         -- sort.Strings(prots)
caddyconfig/httpcaddyfile/addresses.go:15:9      - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/addresses.go:161:25    - Unknown word (prots)         -- for _, prot := range prots {
caddyconfig/httpcaddyfile/addresses.go:164:20    - Unknown word (caddyfile)     -- keys := make([]caddyfile.Token, len(keyWithParsedKeys
caddyconfig/httpcaddyfile/addresses.go:173:13    - Unknown word (caddyfile)     -- block: caddyfile.ServerBlock{
caddyconfig/httpcaddyfile/addresses.go:175:17    - Unknown word (sblock)        -- Segments: sblock.block.Segments,
caddyconfig/httpcaddyfile/addresses.go:177:18    - Unknown word (sblock)        -- pile: sblock.pile,
caddyconfig/httpcaddyfile/addresses.go:196:2     - Unknown word (sbaddrs)       -- sbaddrs := make([]sbAddrAssociation
caddyconfig/httpcaddyfile/addresses.go:245:7     - Unknown word (Prots)         -- lnProts := listeners[lnAddr
caddyconfig/httpcaddyfile/addresses.go:246:38    - Unknown word (Prots)         -- make([]string, 0, len(lnProts))
caddyconfig/httpcaddyfile/addresses.go:247:25    - Unknown word (Prots)         -- for prot := range lnProts {
caddyconfig/httpcaddyfile/addresses.go:258:21    - Unknown word (sbaddrs)       -- sbaddrs = append(sbaddrs, sbAddrAssociation{
caddyconfig/httpcaddyfile/addresses.go:258:4     - Unknown word (sbaddrs)       -- sbaddrs = append(sbaddrs, sbAddrAssoc
caddyconfig/httpcaddyfile/addresses.go:265:9     - Unknown word (sbaddrs)       -- return sbaddrs
caddyconfig/httpcaddyfile/addresses.go:268:60    - Unknown word (Caddyfile)     -- essentially converts the Caddyfile site addresses to a
caddyconfig/httpcaddyfile/addresses.go:27:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/certmagic"
caddyconfig/httpcaddyfile/addresses.go:27:26     - Unknown word (certmagic)     -- github.com/caddyserver/certmagic"
caddyconfig/httpcaddyfile/addresses.go:286:38    - Unknown word (caddyhttp)     -- httpsPort := strconv.Itoa(caddyhttp.DefaultHTTPPort), strconv
caddyconfig/httpcaddyfile/addresses.go:286:79    - Unknown word (caddyhttp)     -- efaultHTTPPort), strconv.Itoa(caddyhttp.DefaultHTTPSPort)
caddyconfig/httpcaddyfile/addresses.go:287:5     - Unknown word (hport)         -- if hport, ok := options["http
caddyconfig/httpcaddyfile/addresses.go:288:27    - Unknown word (hport)         -- httpPort = strconv.Itoa(hport.(int))
caddyconfig/httpcaddyfile/addresses.go:290:5     - Unknown word (hsport)        -- if hsport, ok := options["https
caddyconfig/httpcaddyfile/addresses.go:291:28    - Unknown word (hsport)        -- httpsPort = strconv.Itoa(hsport.(int))
caddyconfig/httpcaddyfile/addresses.go:29:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2"
caddyconfig/httpcaddyfile/addresses.go:30:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/addresses.go:30:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/addresses.go:30:47     - Unknown word (caddyfile)     -- caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/addresses.go:31:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
caddyconfig/httpcaddyfile/addresses.go:31:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
caddyconfig/httpcaddyfile/addresses.go:333:6     - Unknown word (Netw)          -- lnNetw, lnHost, _, err := caddy
caddyconfig/httpcaddyfile/addresses.go:337:77    - Unknown word (Netw)          -- JoinNetworkAddress(lnNetw, lnHost, lnPort))
caddyconfig/httpcaddyfile/addresses.go:38:52     - Unknown word (Caddyfile)     -- ecessarily. For example, this Caddyfile:
caddyconfig/httpcaddyfile/addresses.go:431:29    - Unknown word (certmagic)     -- Port == strconv.Itoa(certmagic.HTTPSPort) {
caddyconfig/httpcaddyfile/addresses.go:442:49    - Unknown word (caddyhttp)     -- Port != strconv.Itoa(caddyhttp.DefaultHTTPSPort))
caddyconfig/httpcaddyfile/addresses.go:443:48    - Unknown word (caddyhttp)     -- Port != strconv.Itoa(caddyhttp.DefaultHTTPPort)))
caddyconfig/httpcaddyfile/addresses.go:47:63     - Unknown word (Caddyfile)     -- But expressed in this Caddyfile are
caddyconfig/httpcaddyfile/addresses.go:86:13     - Unknown word (caddyfile)     -- key caddyfile.Token
caddyconfig/httpcaddyfile/addresses.go:90:9      - Unknown word (sblock)        -- for i, sblock := range originalServerBlocks
caddyconfig/httpcaddyfile/addresses.go:97:23     - Unknown word (sblock)        -- for j, key := range sblock.block.Keys {
caddyconfig/httpcaddyfile/addresses_fuzz.go:15:12     - Unknown word (gofuzz)     -- //go:build gofuzz
caddyconfig/httpcaddyfile/addresses_fuzz.go:17:9      - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/addresses_test.go:1:9       - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/builtins.go:1053:24   - Unknown word (Hostnames)     -- val.hostnames = customHostnames
caddyconfig/httpcaddyfile/builtins.go:118:12    - Unknown word (caddytls)      -- cp := new(caddytls.ConnectionPolicy)
caddyconfig/httpcaddyfile/builtins.go:119:17    - Unknown word (caddytls)      -- var fileLoader caddytls.FileLoader
caddyconfig/httpcaddyfile/builtins.go:120:19    - Unknown word (caddytls)      -- var folderLoader caddytls.FolderLoader
caddyconfig/httpcaddyfile/builtins.go:121:19    - Unknown word (caddytls)      -- var certSelector caddytls.CustomCertSelectionPolicy
caddyconfig/httpcaddyfile/builtins.go:125:16    - Unknown word (certmagic)     -- var issuers []certmagic.Issuer
caddyconfig/httpcaddyfile/builtins.go:126:21    - Unknown word (certmagic)     -- var certManagers []certmagic.Manager
caddyconfig/httpcaddyfile/builtins.go:15:9      - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/builtins.go:202:19    - Unknown word (Errf)          -- return nil, h.Errf("protocols requires
caddyconfig/httpcaddyfile/builtins.go:206:20    - Unknown word (Errf)          -- return nil, h.Errf("wrong protocol name
caddyconfig/httpcaddyfile/builtins.go:212:20    - Unknown word (Errf)          -- return nil, h.Errf("wrong protocol name
caddyconfig/httpcaddyfile/builtins.go:235:47    - Unknown word (Caddyfile)     -- ClientAuthentication.UnmarshalCaddyfile(h.NewFromNextSegment
caddyconfig/httpcaddyfile/builtins.go:238:9     - Unknown word (alpn)          -- case "alpn":
caddyconfig/httpcaddyfile/builtins.go:243:7     - Unknown word (ALPN)          -- cp.ALPN = args
caddyconfig/httpcaddyfile/builtins.go:26:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/certmagic"
caddyconfig/httpcaddyfile/builtins.go:26:26     - Unknown word (certmagic)     -- github.com/caddyserver/certmagic"
caddyconfig/httpcaddyfile/builtins.go:27:14     - Unknown word (mholt)         -- "github.com/mholt/acmez/v2/acme"
caddyconfig/httpcaddyfile/builtins.go:27:20     - Unknown word (acmez)         -- "github.com/mholt/acmez/v2/acme"
caddyconfig/httpcaddyfile/builtins.go:284:16    - Unknown word (caddyfile)     -- unm, err := caddyfile.UnmarshalModule(h.Dispenser
caddyconfig/httpcaddyfile/builtins.go:288:23    - Unknown word (certmagic)     -- issuer, ok := unm.(certmagic.Issuer)
caddyconfig/httpcaddyfile/builtins.go:290:49    - Unknown word (certmagic)     -- module %s (%T) is not a certmagic.Issuer", modID, unm
caddyconfig/httpcaddyfile/builtins.go:300:16    - Unknown word (caddyfile)     -- unm, err := caddyfile.UnmarshalModule(h.Dispenser
caddyconfig/httpcaddyfile/builtins.go:30:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2"
caddyconfig/httpcaddyfile/builtins.go:31:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/builtins.go:31:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig"
caddyconfig/httpcaddyfile/builtins.go:325:16    - Unknown word (caddyfile)     -- unm, err := caddyfile.UnmarshalModule(h.Dispenser
caddyconfig/httpcaddyfile/builtins.go:329:44    - Unknown word (caddyconfig)   -- Challenges.DNS.ProviderRaw = caddyconfig.JSONModuleObject(unm
caddyconfig/httpcaddyfile/builtins.go:32:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/builtins.go:32:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/builtins.go:32:47     - Unknown word (caddyfile)     -- caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/builtins.go:33:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
caddyconfig/httpcaddyfile/builtins.go:33:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
caddyconfig/httpcaddyfile/builtins.go:34:43     - Unknown word (caddytls)      -- caddyserver/caddy/v2/modules/caddytls"
caddyconfig/httpcaddyfile/builtins.go:43:28     - Unknown word (redir)         -- RegisterHandlerDirective("redir", parseRedir)
caddyconfig/httpcaddyfile/builtins.go:43:41     - Unknown word (Redir)         -- andlerDirective("redir", parseRedir)
caddyconfig/httpcaddyfile/builtins.go:610:26    - Unknown word (caddyhttp)     -- return h.NewRoute(nil, caddyhttp.VarsMiddleware{"root
caddyconfig/httpcaddyfile/builtins.go:625:36    - Unknown word (caddyhttp)     -- NewRoute(userMatcherSet, caddyhttp.VarsMiddleware{"root
caddyconfig/httpcaddyfile/builtins.go:631:33    - Unknown word (caddyhttp)     -- parseFilesystem(h Helper) (caddyhttp.MiddlewareHandler, error
caddyconfig/httpcaddyfile/builtins.go:639:9     - Unknown word (caddyhttp)     -- return caddyhttp.VarsMiddleware{"fs"
caddyconfig/httpcaddyfile/builtins.go:642:58    - Unknown word (Caddyfile)     -- directive. See its UnmarshalCaddyfile method for syntax.
caddyconfig/httpcaddyfile/builtins.go:645:20    - Unknown word (Caddyfile)     -- err := v.UnmarshalCaddyfile(h.Dispenser)
caddyconfig/httpcaddyfile/builtins.go:649:26    - Unknown word (redir)         -- parseRedir parses the redir directive. Syntax:
caddyconfig/httpcaddyfile/builtins.go:649:9     - Unknown word (Redir)         -- // parseRedir parses the redir directive
caddyconfig/httpcaddyfile/builtins.go:651:4     - Unknown word (redir)         -- // redir [<matcher>] <to> [<code
caddyconfig/httpcaddyfile/builtins.go:658:11    - Unknown word (Redir)         -- func parseRedir(h Helper) (caddyhttp
caddyconfig/httpcaddyfile/builtins.go:682:13    - Unknown word (Redir)         -- const metaRedir = `<!DOCTYPE html>
caddyconfig/httpcaddyfile/builtins.go:693:26    - Unknown word (Redir)         -- body = fmt.Sprintf(metaRedir, safeTo, safeTo, safeTo
caddyconfig/httpcaddyfile/builtins.go:705:40    - Unknown word (redir)         -- Errf("Not a supported redir code type or not valid
caddyconfig/httpcaddyfile/builtins.go:72:19     - Unknown word (Errf)          -- return nil, h.Errf("protocols requires
caddyconfig/httpcaddyfile/builtins.go:734:21    - Unknown word (Caddyfile)     -- err := sr.UnmarshalCaddyfile(h.Dispenser)
caddyconfig/httpcaddyfile/builtins.go:750:21    - Unknown word (Caddyfile)     -- err := se.UnmarshalCaddyfile(h.Dispenser)
caddyconfig/httpcaddyfile/builtins.go:75:18     - Unknown word (Errf)          -- return nil, h.Errf("unknown subdirective
caddyconfig/httpcaddyfile/builtins.go:870:19    - Unknown word (hostnames)     -- // hostnames <hostnames...>
caddyconfig/httpcaddyfile/builtins.go:870:8     - Unknown word (hostnames)     -- // hostnames <hostnames...>
caddyconfig/httpcaddyfile/builtins.go:935:47    - Unknown word (hostnames)     -- current site block's hostnames for this logger;
caddyconfig/httpcaddyfile/builtins.go:938:8     - Unknown word (Hostnames)     -- customHostnames := []string{}
caddyconfig/httpcaddyfile/builtins.go:942:9     - Unknown word (hostnames)     -- case "hostnames":
caddyconfig/httpcaddyfile/builtins.go:944:24    - Unknown word (hostnames)     -- return nil, h.Err("hostnames is not allowed in the
caddyconfig/httpcaddyfile/builtins.go:950:10    - Unknown word (Hostnames)     -- customHostnames = append(customHostnames
caddyconfig/httpcaddyfile/builtins.go:950:35    - Unknown word (Hostnames)     -- ustomHostnames = append(customHostnames, args...)
caddyconfig/httpcaddyfile/builtins.go:958:27    - Unknown word (caddyfile)     -- can't use the usual caddyfile.Unmarshaler flow with
caddyconfig/httpcaddyfile/builtins.go:97:8      - Unknown word (alpn)          -- // alpn
caddyconfig/httpcaddyfile/builtins.go:982:19    - Unknown word (caddyconfig)   -- cl.WriterRaw = caddyconfig.JSONModuleObject(wo
caddyconfig/httpcaddyfile/builtins.go:998:17    - Unknown word (caddyconfig)   -- cl.CoreRaw = caddyconfig.JSONModuleObject(core
caddyconfig/httpcaddyfile/builtins_test.go:103:5     - Unknown word (redir)         -- redir /api/* :8081 300
caddyconfig/httpcaddyfile/builtins_test.go:109:5     - Unknown word (redir)         -- redir :8081 300
caddyconfig/httpcaddyfile/builtins_test.go:115:5     - Unknown word (redir)         -- redir /api/* :8081 399
caddyconfig/httpcaddyfile/builtins_test.go:178:31    - Unknown word (htlm)          -- /old.html /new.html htlm
caddyconfig/httpcaddyfile/builtins_test.go:1:9       - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/builtins_test.go:208:14    - Unknown word (caddyfile)     -- adapter := caddyfile.Adapter{
caddyconfig/httpcaddyfile/builtins_test.go:235:57    - Unknown word (Caddyfile)     -- Contains(err.Error(), "Caddyfile:6 (import t1)")
caddyconfig/httpcaddyfile/builtins_test.go:246:57    - Unknown word (Caddyfile)     -- Contains(err.Error(), "Caddyfile:5 (import t1)")
caddyconfig/httpcaddyfile/builtins_test.go:271:14    - Unknown word (caddyfile)     -- adapter := caddyfile.Adapter{
caddyconfig/httpcaddyfile/builtins_test.go:344:14    - Unknown word (caddyfile)     -- adapter := caddyfile.Adapter{
caddyconfig/httpcaddyfile/builtins_test.go:67:14     - Unknown word (caddyfile)     -- adapter := caddyfile.Adapter{
caddyconfig/httpcaddyfile/builtins_test.go:7:14      - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/builtins_test.go:7:35      - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/builtins_test.go:7:47      - Unknown word (caddyfile)     -- caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/builtins_test.go:84:10     - Unknown word (Redir)         -- func TestRedirDirectiveSyntax(t *testing
caddyconfig/httpcaddyfile/builtins_test.go:8:16      - Unknown word (caddyserver)   -- _ "github.com/caddyserver/caddy/v2/modules/logging
caddyconfig/httpcaddyfile/builtins_test.go:91:5      - Unknown word (redir)         -- redir :8081
caddyconfig/httpcaddyfile/builtins_test.go:97:5      - Unknown word (redir)         -- redir * :8081
caddyconfig/httpcaddyfile/directives.go:106:24    - Unknown word (Caddyfile)     -- is encountered in a Caddyfile, setupFunc will be called
caddyconfig/httpcaddyfile/directives.go:15:9      - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/directives.go:188:35    - Unknown word (Caddyfile)     -- is encountered in a Caddyfile, setupFunc will be
caddyconfig/httpcaddyfile/directives.go:198:4     - Unknown word (Caddyfile)     -- // Caddyfile tokens.
caddyconfig/httpcaddyfile/directives.go:200:3     - Unknown word (caddyfile)     -- *caddyfile.Dispenser
caddyconfig/httpcaddyfile/directives.go:201:48    - Unknown word (caddyfile)     -- intermediate variables during caddyfile adaptation.
caddyconfig/httpcaddyfile/directives.go:204:18    - Unknown word (caddyconfig)   -- warnings *[]caddyconfig.Warning
caddyconfig/httpcaddyfile/directives.go:206:15    - Unknown word (caddyfile)     -- parentBlock caddyfile.ServerBlock
caddyconfig/httpcaddyfile/directives.go:215:4     - Unknown word (Caddyfiles)    -- // Caddyfiles returns the list of
caddyconfig/httpcaddyfile/directives.go:217:17    - Unknown word (Caddyfiles)    -- func (h Helper) Caddyfiles() []string {
caddyconfig/httpcaddyfile/directives.go:237:9     - Unknown word (caddyconfig)   -- return caddyconfig.JSON(val, h.warnings
caddyconfig/httpcaddyfile/directives.go:25:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2"
caddyconfig/httpcaddyfile/directives.go:26:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/directives.go:26:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig"
caddyconfig/httpcaddyfile/directives.go:275:10    - Unknown word (caddyhttp)     -- handler caddyhttp.MiddlewareHandler,
caddyconfig/httpcaddyfile/directives.go:279:37    - Unknown word (caddyconfig)   -- append(*h.warnings, caddyconfig.Warning{
caddyconfig/httpcaddyfile/directives.go:27:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/directives.go:27:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/directives.go:27:47     - Unknown word (caddyfile)     -- caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/directives.go:28:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
caddyconfig/httpcaddyfile/directives.go:28:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
caddyconfig/httpcaddyfile/directives.go:293:11    - Unknown word (caddyhttp)     -- Value: caddyhttp.Route{
caddyconfig/httpcaddyfile/directives.go:301:33    - Unknown word (caddyhttp)     -- GroupRoutes adds the routes (caddyhttp.Route type) in vals
caddyconfig/httpcaddyfile/directives.go:307:24    - Unknown word (caddyhttp)     -- if _, ok := v.Value.(caddyhttp.Route); ok {
caddyconfig/httpcaddyfile/directives.go:330:34    - Unknown word (caddyfile)     -- Helper) WithDispenser(d *caddyfile.Dispenser) Helper {
caddyconfig/httpcaddyfile/directives.go:392:19    - Unknown word (Errf)          -- return nil, h.Errf("unrecognized directive
caddyconfig/httpcaddyfile/directives.go:392:72    - Unknown word (Caddyfile)     -- - are you sure your Caddyfile structure (nesting and
caddyconfig/httpcaddyfile/directives.go:401:19    - Unknown word (Errf)          -- return nil, h.Errf("parsing caddyfile tokens
caddyconfig/httpcaddyfile/directives.go:41:45     - Unknown word (redir)         -- directive goes before 'redir' so
caddyconfig/httpcaddyfile/directives.go:515:24    - Unknown word (Caddyfile)     -- serverBlock pairs a Caddyfile server block with
caddyconfig/httpcaddyfile/directives.go:524:54    - Unknown word (hostnames)     -- of all the non-empty hostnames found in
caddyconfig/httpcaddyfile/directives.go:531:18    - Unknown word (hostnames)     -- // joined to the hostnames. This is to effectively
caddyconfig/httpcaddyfile/directives.go:559:2     - Unknown word (sblock)        -- sblockHosts := make([]string
caddyconfig/httpcaddyfile/directives.go:561:24    - Unknown word (sblock)        -- sblockHosts = append(sblockHosts, host)
caddyconfig/httpcaddyfile/directives.go:561:3     - Unknown word (sblock)        -- sblockHosts = append(sblockHosts
caddyconfig/httpcaddyfile/directives.go:564:9     - Unknown word (sblock)        -- return sblockHosts
caddyconfig/httpcaddyfile/directives.go:580:2     - Unknown word (sblock)        -- sblockHosts := make([]string
caddyconfig/httpcaddyfile/directives.go:63:3      - Unknown word (redir)         -- "redir",
caddyconfig/httpcaddyfile/directives.go:94:7      - Unknown word (fastcgi)       -- "php_fastcgi",
caddyconfig/httpcaddyfile/directives_test.go:1:9       - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/httptype.go:1062:34   - Unknown word (caddytls)      -- consolidateConnPolicies(cps caddytls.ConnectionPolicies)
caddyconfig/httpcaddyfile/httptype.go:1086:19   - Unknown word (ALPN)          -- if len(cps[i].ALPN) > 0 &&
caddyconfig/httpcaddyfile/httptype.go:1087:17   - Unknown word (ALPN)          -- len(cps[j].ALPN) > 0 &&
caddyconfig/httpcaddyfile/httptype.go:1088:32   - Unknown word (ALPN)          -- reflect.DeepEqual(cps[i].ALPN, cps[j].ALPN) {
caddyconfig/httpcaddyfile/httptype.go:1088:45   - Unknown word (ALPN)          -- cps[i].ALPN, cps[j].ALPN) {
caddyconfig/httpcaddyfile/httptype.go:1089:85   - Unknown word (ALPN)          -- criteria have conflicting ALPN: %v vs. %v",
caddyconfig/httpcaddyfile/httptype.go:1224:44   - Unknown word (Caddyfile)     -- a site block in the Caddyfile dictate
caddyconfig/httpcaddyfile/httptype.go:139:19    - Unknown word (caddyfile)     -- Dispenser: caddyfile.NewDispenser(segment
caddyconfig/httpcaddyfile/httptype.go:1422:3    - Unknown word (hostm)         -- hostm caddyhttp.MatchHost
caddyconfig/httpcaddyfile/httptype.go:1423:3    - Unknown word (pathm)         -- pathm caddyhttp.MatchPath
caddyconfig/httpcaddyfile/httptype.go:1435:15   - Unknown word (pathm)         -- if (len(mp.pathm) == 0 && addr.Path
caddyconfig/httpcaddyfile/httptype.go:1436:13   - Unknown word (pathm)         -- (len(mp.pathm) == 1 && mp.pathm[0
caddyconfig/httpcaddyfile/httptype.go:1436:31   - Unknown word (pathm)         -- mp.pathm) == 1 && mp.pathm[0] == addr.Path) {
caddyconfig/httpcaddyfile/httptype.go:1444:23   - Unknown word (pathm)         -- chosenMatcherPair.pathm = []string{addr.Path
caddyconfig/httpcaddyfile/httptype.go:1453:22   - Unknown word (hostm)         -- chosenMatcherPair.hostm = nil
caddyconfig/httpcaddyfile/httptype.go:1462:60   - Unknown word (hostm)         -- Contains(chosenMatcherPair.hostm, addr.Host) {
caddyconfig/httpcaddyfile/httptype.go:1463:22   - Unknown word (hostm)         -- chosenMatcherPair.hostm = append(chosenMatcherPair
caddyconfig/httpcaddyfile/httptype.go:1463:55   - Unknown word (hostm)         -- append(chosenMatcherPair.hostm, addr.Host)
caddyconfig/httpcaddyfile/httptype.go:1524:52   - Unknown word (Caddyfile)     -- module '%s' is not a Caddyfile unmarshaler", matcherName
caddyconfig/httpcaddyfile/httptype.go:1526:22   - Unknown word (Caddyfile)     -- err = unm.UnmarshalCaddyfile(dispenser)
caddyconfig/httpcaddyfile/httptype.go:15:9      - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/httptype.go:175:2     - Unknown word (sbmap)         -- sbmap, err := st.mapAddressToProtoc
caddyconfig/httpcaddyfile/httptype.go:181:41    - Unknown word (sbmap)         -- consolidateAddrMappings(sbmap)
caddyconfig/httpcaddyfile/httptype.go:191:37    - Unknown word (caddyhttp)     -- options["metrics"].(*caddyhttp.Metrics)
caddyconfig/httpcaddyfile/httptype.go:194:22    - Unknown word (caddyhttp)     -- metrics = cmp.Or[*caddyhttp.Metrics](metrics, &caddyhttp
caddyconfig/httpcaddyfile/httptype.go:194:51    - Unknown word (caddyhttp)     -- caddyhttp.Metrics](metrics, &caddyhttp.Metrics{})
caddyconfig/httpcaddyfile/httptype.go:195:15    - Unknown word (caddyhttp)     -- metrics = &caddyhttp.Metrics{
caddyconfig/httpcaddyfile/httptype.go:269:5     - Unknown word (annnd)         -- // annnd the top-level config
caddyconfig/httpcaddyfile/httptype.go:273:17    - Unknown word (httpcaddyfile) -- // them are an httpcaddyfile App, then we insert
caddyconfig/httpcaddyfile/httptype.go:285:33    - Unknown word (caddytls)      -- reflect.DeepEqual(tlsApp, &caddytls.TLS{CertificatesRaw
caddyconfig/httpcaddyfile/httptype.go:288:33    - Unknown word (caddypki)      -- reflect.DeepEqual(pkiApp, &caddypki.PKI{CAs: make(map[string
caddyconfig/httpcaddyfile/httptype.go:288:68    - Unknown word (caddypki)      -- CAs: make(map[string]*caddypki.CA)}) {
caddyconfig/httpcaddyfile/httptype.go:297:12    - Unknown word (Cvtr)          -- if storageCvtr, ok := options["storage
caddyconfig/httpcaddyfile/httptype.go:298:56    - Unknown word (Cvtr)          -- JSONModuleObject(storageCvtr,
caddyconfig/httpcaddyfile/httptype.go:300:11    - Unknown word (Cvtr)          -- storageCvtr.(caddy.Module).CaddyModule
caddyconfig/httpcaddyfile/httptype.go:30:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2"
caddyconfig/httpcaddyfile/httptype.go:31:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/httptype.go:31:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig"
caddyconfig/httpcaddyfile/httptype.go:32:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/httptype.go:32:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/httptype.go:32:47     - Unknown word (caddyfile)     -- caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/httptype.go:33:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
caddyconfig/httpcaddyfile/httptype.go:33:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
caddyconfig/httpcaddyfile/httptype.go:34:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddypki
caddyconfig/httpcaddyfile/httptype.go:34:43     - Unknown word (caddypki)      -- caddyserver/caddy/v2/modules/caddypki"
caddyconfig/httpcaddyfile/httptype.go:35:43     - Unknown word (caddytls)      -- caddyserver/caddy/v2/modules/caddytls"
caddyconfig/httpcaddyfile/httptype.go:39:2      - Unknown word (caddyconfig)   -- caddyconfig.RegisterAdapter("caddyfile
caddyconfig/httpcaddyfile/httptype.go:39:31     - Unknown word (caddyfile)     -- caddyconfig.RegisterAdapter("caddyfile", caddyfile.Adapter
caddyconfig/httpcaddyfile/httptype.go:39:43     - Unknown word (caddyfile)     -- RegisterAdapter("caddyfile", caddyfile.Adapter{ServerType:
caddyconfig/httpcaddyfile/httptype.go:53:48     - Unknown word (Caddyfile)     -- config from an HTTP Caddyfile.
caddyconfig/httpcaddyfile/httptype.go:561:10    - Unknown word (sblock)        -- for j, sblock1 := range p.serverBlocks
caddyconfig/httpcaddyfile/httptype.go:562:24    - Unknown word (sblock)        -- for _, key := range sblock1.block.GetKeysText(
caddyconfig/httpcaddyfile/httptype.go:58:22     - Unknown word (caddyfile)     -- inputServerBlocks []caddyfile.ServerBlock,
caddyconfig/httpcaddyfile/httptype.go:60:21     - Unknown word (caddyconfig)   -- ) (*caddy.Config, []caddyconfig.Warning, error) {
caddyconfig/httpcaddyfile/httptype.go:61:17     - Unknown word (caddyconfig)   -- var warnings []caddyconfig.Warning
caddyconfig/httpcaddyfile/httptype.go:623:26    - Unknown word (Redir)         -- srv.AutoHTTPS.DisableRedir = true
caddyconfig/httpcaddyfile/httptype.go:67:9      - Unknown word (sblock)        -- for _, sblock := range inputServerBlocks
caddyconfig/httpcaddyfile/httptype.go:68:21     - Unknown word (sblock)        -- for j, k := range sblock.Keys {
caddyconfig/httpcaddyfile/httptype.go:770:26    - Unknown word (caddytls)      -- cp := cpVal.Value.(*caddytls.ConnectionPolicy)
caddyconfig/httpcaddyfile/httptype.go:772:41    - Unknown word (hostnames)     -- the policy covers all hostnames from the block
caddyconfig/httpcaddyfile/httptype.go:77:11     - Unknown word (sblock)        -- block: sblock,
caddyconfig/httpcaddyfile/httptype.go:901:11    - Unknown word (cval)          -- for _, cval := range sblock.pile
caddyconfig/httpcaddyfile/httptype.go:902:12    - Unknown word (cval)          -- ncl := cval.Value.(namedCustomLog
caddyconfig/httpcaddyfile/httptype.go:905:51    - Unknown word (hostnames)     -- of the site block's hostnames,
caddyconfig/httpcaddyfile/httptype.go:912:47    - Unknown word (hostnames)     -- sHostCatchAllKey() && len(ncl.hostnames) == 0 {
caddyconfig/httpcaddyfile/httptype.go:916:23    - Unknown word (hostnames)     -- } else if len(ncl.hostnames) > 0 {
caddyconfig/httpcaddyfile/httptype.go:917:37    - Unknown word (hostnames)     -- logger overrides the hostnames, map that to the logger
caddyconfig/httpcaddyfile/httptype.go:968:16    - Unknown word (Caddyfile)     -- // using the Caddyfile, user would expect all
caddyconfig/httpcaddyfile/httptype.go:979:55    - Unknown word (caddytls)      -- srv.TLSConnPolicies, &caddytls.ConnectionPolicy{
caddyconfig/httpcaddyfile/httptype_test.go:17:11     - Unknown word (showdebug)     -- query showdebug=1
caddyconfig/httpcaddyfile/httptype_test.go:1:9       - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/httptype_test.go:200:14    - Unknown word (caddyfile)     -- adapter := caddyfile.Adapter{
caddyconfig/httpcaddyfile/httptype_test.go:34:12     - Unknown word (somepath)      -- path /somepath*
caddyconfig/httpcaddyfile/httptype_test.go:43:15     - Unknown word (somepath)      -- not path /somepath*
caddyconfig/httpcaddyfile/httptype_test.go:50:21     - Unknown word (somepath)      -- @debug not path /somepath*
caddyconfig/httpcaddyfile/httptype_test.go:64:14     - Unknown word (caddyfile)     -- adapter := caddyfile.Adapter{
caddyconfig/httpcaddyfile/httptype_test.go:6:14      - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/httptype_test.go:6:35      - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/httptype_test.go:6:47      - Unknown word (caddyfile)     -- caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/options.go:107:17    - Unknown word (Errf)          -- return nil, d.Errf("%s is not a registered
caddyconfig/httpcaddyfile/options.go:144:17    - Unknown word (Errf)          -- return nil, d.Errf("unknown positional
caddyconfig/httpcaddyfile/options.go:159:17    - Unknown word (Errf)          -- return nil, d.Errf("directive '%s' not
caddyconfig/httpcaddyfile/options.go:15:9      - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/options.go:206:14    - Unknown word (ACMEDNS)       -- func parseOptACMEDNS(d *caddyfile.Dispenser
caddyconfig/httpcaddyfile/options.go:218:19    - Unknown word (certmagic)     -- prov, ok := unm.(certmagic.DNSProvider)
caddyconfig/httpcaddyfile/options.go:21:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/certmagic"
caddyconfig/httpcaddyfile/options.go:21:26     - Unknown word (certmagic)     -- github.com/caddyserver/certmagic"
caddyconfig/httpcaddyfile/options.go:220:47    - Unknown word (certmagic)     -- module %s (%T) is not a certmagic.DNSProvider", modID
caddyconfig/httpcaddyfile/options.go:225:14    - Unknown word (ACMEEAB)       -- func parseOptACMEEAB(d *caddyfile.Dispenser
caddyconfig/httpcaddyfile/options.go:22:14     - Unknown word (mholt)         -- "github.com/mholt/acmez/v2/acme"
caddyconfig/httpcaddyfile/options.go:22:20     - Unknown word (acmez)         -- "github.com/mholt/acmez/v2/acme"
caddyconfig/httpcaddyfile/options.go:24:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2"
caddyconfig/httpcaddyfile/options.go:255:16    - Unknown word (certmagic)     -- var issuers []certmagic.Issuer
caddyconfig/httpcaddyfile/options.go:257:25    - Unknown word (certmagic)     -- issuers = existing.([]certmagic.Issuer)
caddyconfig/httpcaddyfile/options.go:25:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/options.go:25:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig"
caddyconfig/httpcaddyfile/options.go:26:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/options.go:26:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/options.go:26:47     - Unknown word (caddyfile)     -- caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/options.go:27:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
caddyconfig/httpcaddyfile/options.go:27:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
caddyconfig/httpcaddyfile/options.go:28:43     - Unknown word (caddytls)      -- caddyserver/caddy/v2/modules/caddytls"
caddyconfig/httpcaddyfile/options.go:359:11    - Unknown word (caddytls)      -- var ond *caddytls.OnDemandConfig
caddyconfig/httpcaddyfile/options.go:368:15    - Unknown word (caddytls)      -- ond = new(caddytls.OnDemandConfig)
caddyconfig/httpcaddyfile/options.go:373:12    - Unknown word (caddytls)      -- perm := caddytls.PermissionByHTTP{Endpoint
caddyconfig/httpcaddyfile/options.go:374:24    - Unknown word (caddyconfig)   -- ond.PermissionRaw = caddyconfig.JSONModuleObject(perm
caddyconfig/httpcaddyfile/options.go:381:15    - Unknown word (caddytls)      -- ond = new(caddytls.OnDemandConfig)
caddyconfig/httpcaddyfile/options.go:396:24    - Unknown word (caddyconfig)   -- ond.PermissionRaw = caddyconfig.JSONModuleObject(perm
caddyconfig/httpcaddyfile/options.go:451:15    - Unknown word (Caddyfile)     -- func unmarshalCaddyfileMetricsOptions(d *caddyfile
caddyconfig/httpcaddyfile/options.go:453:17    - Unknown word (caddyhttp)     -- metrics := new(caddyhttp.Metrics)
caddyconfig/httpcaddyfile/options.go:466:18    - Unknown word (Caddyfile)     -- return unmarshalCaddyfileMetricsOptions(d)
caddyconfig/httpcaddyfile/options.go:470:18    - Unknown word (Caddyfile)     -- return unmarshalCaddyfileServerOptions(d)
caddyconfig/httpcaddyfile/options.go:47:43     - Unknown word (ACMEDNS)       -- "acme_dns", parseOptACMEDNS)
caddyconfig/httpcaddyfile/options.go:48:43     - Unknown word (ACMEEAB)       -- "acme_eab", parseOptACMEEAB)
caddyconfig/httpcaddyfile/options.go:515:17    - Unknown word (caddyconfig)   -- var warnings []caddyconfig.Warning
caddyconfig/httpcaddyfile/options.go:536:23    - Unknown word (Caddyfile)     -- return caddytls.ParseCaddyfilePreferredChainsOptions
caddyconfig/httpcaddyfile/options.go:66:22     - Unknown word (caddyfile)     -- func parseOptTrue(d *caddyfile.Dispenser, _ any) (any
caddyconfig/httpcaddyfile/options.go:68:26     - Unknown word (caddyfile)     -- parseOptHTTPPort(d *caddyfile.Dispenser, _ any) (any
caddyconfig/httpcaddyfile/options.go:78:15     - Unknown word (Errf)          -- return 0, d.Errf("converting port '%s
caddyconfig/httpcaddyfile/options.go:83:27     - Unknown word (caddyfile)     -- parseOptHTTPSPort(d *caddyfile.Dispenser, _ any) (any
caddyconfig/httpcaddyfile/options.go:93:15     - Unknown word (Errf)          -- return 0, d.Errf("converting port '%s
caddyconfig/httpcaddyfile/options.go:98:23     - Unknown word (caddyfile)     -- func parseOptOrder(d *caddyfile.Dispenser, _ any) (any
caddyconfig/httpcaddyfile/options_test.go:16:48     - Unknown word (Caddyfile)     -- cases of successful Caddyfile parsing
caddyconfig/httpcaddyfile/options_test.go:17:22     - Unknown word (caddytest)     -- // are present in: caddytest/integration/caddyfile
caddyconfig/httpcaddyfile/options_test.go:17:44     - Unknown word (caddyfile)     -- caddytest/integration/caddyfile_adapt/
caddyconfig/httpcaddyfile/options_test.go:1:9       - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/options_test.go:49:14     - Unknown word (caddyfile)     -- adapter := caddyfile.Adapter{
caddyconfig/httpcaddyfile/options_test.go:6:14      - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/options_test.go:6:35      - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/options_test.go:6:47      - Unknown word (caddyfile)     -- caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/options_test.go:7:16      - Unknown word (caddyserver)   -- _ "github.com/caddyserver/caddy/v2/modules/logging
caddyconfig/httpcaddyfile/pkiapp.go:125:22    - Unknown word (Errf)          -- return nil, d.Errf("unrecognized pki ca
caddyconfig/httpcaddyfile/pkiapp.go:154:22    - Unknown word (Errf)          -- return nil, d.Errf("unrecognized pki ca
caddyconfig/httpcaddyfile/pkiapp.go:159:20    - Unknown word (Errf)          -- return nil, d.Errf("unrecognized pki ca
caddyconfig/httpcaddyfile/pkiapp.go:15:9      - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/pkiapp.go:166:18    - Unknown word (Errf)          -- return nil, d.Errf("unrecognized pki option
caddyconfig/httpcaddyfile/pkiapp.go:175:13    - Unknown word (caddyconfig)   -- warnings []caddyconfig.Warning,
caddyconfig/httpcaddyfile/pkiapp.go:176:21    - Unknown word (caddyconfig)   -- ) (*caddypki.PKI, []caddyconfig.Warning, error) {
caddyconfig/httpcaddyfile/pkiapp.go:18:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2"
caddyconfig/httpcaddyfile/pkiapp.go:19:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/pkiapp.go:19:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig"
caddyconfig/httpcaddyfile/pkiapp.go:200:10    - Unknown word (sblock)        -- for _, sblock := range p.serverBlocks
caddyconfig/httpcaddyfile/pkiapp.go:203:31    - Unknown word (sblock)        -- caCfgValue := range sblock.pile["pki.ca"] {
caddyconfig/httpcaddyfile/pkiapp.go:20:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/pkiapp.go:20:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/pkiapp.go:20:47     - Unknown word (caddyfile)     -- caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/pkiapp.go:21:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddypki
caddyconfig/httpcaddyfile/pkiapp.go:21:43     - Unknown word (caddypki)      -- caddyserver/caddy/v2/modules/caddypki"
caddyconfig/httpcaddyfile/pkiapp.go:223:27    - Unknown word (CAID)          -- ID = caddypki.DefaultCAID
caddyconfig/httpcaddyfile/pkiapp.go:50:21     - Unknown word (caddyfile)     -- func parsePKIApp(d *caddyfile.Dispenser, existingVal
caddyconfig/httpcaddyfile/pkiapp.go:53:10     - Unknown word (caddypki)      -- pki := &caddypki.PKI{
caddyconfig/httpcaddyfile/pkiapp.go:54:25     - Unknown word (caddypki)      -- CAs: make(map[string]*caddypki.CA),
caddyconfig/httpcaddyfile/pkiapp.go:59:17     - Unknown word (caddypki)      -- pkiCa := new(caddypki.CA)
caddyconfig/httpcaddyfile/pkiapp.go:67:16     - Unknown word (caddypki)      -- pkiCa.ID = caddypki.DefaultCAID
caddyconfig/httpcaddyfile/pkiapp.go:67:32     - Unknown word (CAID)          -- ID = caddypki.DefaultCAID
caddyconfig/httpcaddyfile/serveroptions.go:107:21    - Unknown word (Errf)          -- return nil, d.Errf("parsing read_body timeout
caddyconfig/httpcaddyfile/serveroptions.go:117:21    - Unknown word (Errf)          -- return nil, d.Errf("parsing read_header
caddyconfig/httpcaddyfile/serveroptions.go:127:21    - Unknown word (Errf)          -- return nil, d.Errf("parsing write timeout
caddyconfig/httpcaddyfile/serveroptions.go:137:21    - Unknown word (Errf)          -- return nil, d.Errf("parsing idle timeout
caddyconfig/httpcaddyfile/serveroptions.go:15:9      - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/serveroptions.go:208:16    - Unknown word (caddyfile)     -- unm, err := caddyfile.UnmarshalModule(d, modID
caddyconfig/httpcaddyfile/serveroptions.go:212:23    - Unknown word (caddyhttp)     -- source, ok := unm.(caddyhttp.IPRangeSource)
caddyconfig/httpcaddyfile/serveroptions.go:216:18    - Unknown word (caddyconfig)   -- jsonSource := caddyconfig.JSONModuleObject(
caddyconfig/httpcaddyfile/serveroptions.go:244:29    - Unknown word (caddyhttp)     -- serverOpts.Metrics = new(caddyhttp.Metrics)
caddyconfig/httpcaddyfile/serveroptions.go:24:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2"
caddyconfig/httpcaddyfile/serveroptions.go:25:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/serveroptions.go:25:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig"
caddyconfig/httpcaddyfile/serveroptions.go:269:7     - Unknown word (caddyconfig)   -- _ *[]caddyconfig.Warning,
caddyconfig/httpcaddyfile/serveroptions.go:26:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/serveroptions.go:26:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/serveroptions.go:26:47     - Unknown word (caddyfile)     -- caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/serveroptions.go:27:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
caddyconfig/httpcaddyfile/serveroptions.go:27:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
caddyconfig/httpcaddyfile/serveroptions.go:30:63     - Unknown word (Caddyfile)     -- overrides parsed from Caddyfile global options
caddyconfig/httpcaddyfile/serveroptions.go:37:35     - Unknown word (caddyhttp)     -- will all map 1:1 to the caddyhttp.Server struct
caddyconfig/httpcaddyfile/serveroptions.go:53:24     - Unknown word (caddyhttp)     -- Metrics *caddyhttp.Metrics
caddyconfig/httpcaddyfile/serveroptions.go:57:15     - Unknown word (Caddyfile)     -- func unmarshalCaddyfileServerOptions(d *caddyfile
caddyconfig/httpcaddyfile/serveroptions.go:57:41     - Unknown word (caddyfile)     -- shalCaddyfileServerOptions(d *caddyfile.Dispenser) (any, error
caddyconfig/httpcaddyfile/serveroptions.go:71:19     - Unknown word (Errf)          -- return nil, d.Errf("cannot set a name for
caddyconfig/httpcaddyfile/serveroptions.go:81:17     - Unknown word (caddyfile)     -- unm, err := caddyfile.UnmarshalModule(d, modID
caddyconfig/httpcaddyfile/serveroptions.go:89:28     - Unknown word (caddyconfig)   -- jsonListenerWrapper := caddyconfig.JSONModuleObject(
caddyconfig/httpcaddyfile/shorthands.go:1:9       - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/shorthands.go:22:20     - Unknown word (Caddyfile)     -- // when writing a Caddyfile) with their actual placeholde
caddyconfig/httpcaddyfile/shorthands.go:52:19     - Unknown word (Caddyfile)     -- // be used in the Caddyfile, and the right is the
caddyconfig/httpcaddyfile/shorthands.go:58:32     - Unknown word (hostport)      -- hostport}", "{http.request.hostport}",
caddyconfig/httpcaddyfile/shorthands.go:58:5      - Unknown word (hostport)      -- "{hostport}", "{http.request.hostport
caddyconfig/httpcaddyfile/shorthands.go:77:14     - Unknown word (hostport)      -- "{upstream_hostport}", "{http.reverse_proxy
caddyconfig/httpcaddyfile/shorthands.go:77:56     - Unknown word (hostport)      -- reverse_proxy.upstream.hostport}",
caddyconfig/httpcaddyfile/shorthands.go:7:14      - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/shorthands.go:7:35      - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/shorthands.go:7:47      - Unknown word (caddyfile)     -- caddy/v2/caddyconfig/caddyfile"
caddyconfig/httpcaddyfile/shorthands.go:83:52     - Unknown word (caddyfile)     -- ApplyToSegment(segment *caddyfile.Segment) {
caddyconfig/httpcaddyfile/tlsapp.go:105:10    - Unknown word (sblock)        -- for _, sblock := range p.serverBlocks
caddyconfig/httpcaddyfile/tlsapp.go:106:25    - Unknown word (sblock)        -- for _, addr := range sblock.parsedKeys {
caddyconfig/httpcaddyfile/tlsapp.go:124:10    - Unknown word (sblock)        -- for _, sblock := range p.serverBlocks
caddyconfig/httpcaddyfile/tlsapp.go:127:7     - Unknown word (sblock)        -- if sblock.isAllHTTP() {
caddyconfig/httpcaddyfile/tlsapp.go:143:4     - Unknown word (sblock)        -- sblockHosts := sblock.hostsFromKeys
caddyconfig/httpcaddyfile/tlsapp.go:15:9      - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/tlsapp.go:164:19    - Unknown word (certmagic)     -- var issuers []certmagic.Issuer
caddyconfig/httpcaddyfile/tlsapp.go:166:49    - Unknown word (certmagic)     -- issuers, issuerVal.Value.(certmagic.Issuer))
caddyconfig/httpcaddyfile/tlsapp.go:191:46    - Unknown word (caddyconfig)   -- append(ap.ManagersRaw, caddyconfig.JSONModuleObject(certManager
caddyconfig/httpcaddyfile/tlsapp.go:231:49    - Unknown word (Caddyfile)     -- a poor mapping from Caddyfile to JSON but that's
caddyconfig/httpcaddyfile/tlsapp.go:234:38    - Unknown word (Tailscale)     -- as desired (see the Tailscale listener plugin), so
caddyconfig/httpcaddyfile/tlsapp.go:270:35    - Unknown word (Tailscale)     -- not create Issuers for Tailscale domains; they will be
caddyconfig/httpcaddyfile/tlsapp.go:271:11    - Unknown word (Tailscale)     -- if isTailscaleDomain(s) {
caddyconfig/httpcaddyfile/tlsapp.go:274:10    - Unknown word (certmagic)     -- if !certmagic.SubjectQualifiesForCert
caddyconfig/httpcaddyfile/tlsapp.go:277:22    - Unknown word (certmagic)     -- // we don't use certmagic.SubjectQualifiesForPublicCert
caddyconfig/httpcaddyfile/tlsapp.go:27:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/certmagic"
caddyconfig/httpcaddyfile/tlsapp.go:27:26     - Unknown word (certmagic)     -- github.com/caddyserver/certmagic"
caddyconfig/httpcaddyfile/tlsapp.go:28:14     - Unknown word (mholt)         -- "github.com/mholt/acmez/v2/acme"
caddyconfig/httpcaddyfile/tlsapp.go:28:20     - Unknown word (acmez)         -- "github.com/mholt/acmez/v2/acme"
caddyconfig/httpcaddyfile/tlsapp.go:295:41    - Unknown word (caddyconfig)   -- = []json.RawMessage{caddyconfig.JSONModuleObject(caddytls
caddyconfig/httpcaddyfile/tlsapp.go:30:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2"
caddyconfig/httpcaddyfile/tlsapp.go:31:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
caddyconfig/httpcaddyfile/tlsapp.go:31:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig"
caddyconfig/httpcaddyfile/tlsapp.go:32:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
caddyconfig/httpcaddyfile/tlsapp.go:32:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
caddyconfig/httpcaddyfile/tlsapp.go:33:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddytls
caddyconfig/httpcaddyfile/tlsapp.go:33:43     - Unknown word (caddytls)      -- caddyserver/caddy/v2/modules/caddytls"
caddyconfig/httpcaddyfile/tlsapp.go:381:12    - Unknown word (hostnames)     -- // if any hostnames appear on the same server
caddyconfig/httpcaddyfile/tlsapp.go:39:13     - Unknown word (caddyconfig)   -- warnings []caddyconfig.Warning,
caddyconfig/httpcaddyfile/tlsapp.go:40:21     - Unknown word (caddyconfig)   -- ) (*caddytls.TLS, []caddyconfig.Warning, error) {
caddyconfig/httpcaddyfile/tlsapp.go:40:5      - Unknown word (caddytls)      -- ) (*caddytls.TLS, []caddyconfig.Warning
caddyconfig/httpcaddyfile/tlsapp.go:414:9     - Unknown word (ACMECA)        -- globalACMECA := options["acme_ca
caddyconfig/httpcaddyfile/tlsapp.go:415:9     - Unknown word (ACMECA)        -- globalACMECARoot := options["acme
caddyconfig/httpcaddyfile/tlsapp.go:416:9     - Unknown word (ACMEDNS)       -- globalACMEDNS := options["acme_dns
caddyconfig/httpcaddyfile/tlsapp.go:417:9     - Unknown word (ACMEEAB)       -- globalACMEEAB := options["acme_eab
caddyconfig/httpcaddyfile/tlsapp.go:419:106   - Unknown word (ACMEDNS)       -- balACMECARoot != nil || globalACMEDNS != nil || globalACMEEAB
caddyconfig/httpcaddyfile/tlsapp.go:419:130   - Unknown word (ACMEEAB)       -- globalACMEDNS != nil || globalACMEEAB != nil || globalPreferredChai
caddyconfig/httpcaddyfile/tlsapp.go:419:56    - Unknown word (ACMECA)        -- globalEmail != nil || globalACMECA != nil || globalACMECARoot
caddyconfig/httpcaddyfile/tlsapp.go:419:79    - Unknown word (ACMECA)        -- globalACMECA != nil || globalACMECARoot != nil || globalACMEDNS
caddyconfig/httpcaddyfile/tlsapp.go:41:13     - Unknown word (caddytls)      -- tlsApp := &caddytls.TLS{CertificatesRaw
caddyconfig/httpcaddyfile/tlsapp.go:42:20     - Unknown word (caddytls)      -- var certLoaders []caddytls.CertificateLoader
caddyconfig/httpcaddyfile/tlsapp.go:430:15    - Unknown word (ACMECA)        -- if globalACMECA != nil {
caddyconfig/httpcaddyfile/tlsapp.go:44:27     - Unknown word (caddyhttp)     -- httpPort := strconv.Itoa(caddyhttp.DefaultHTTPPort)
caddyconfig/httpcaddyfile/tlsapp.go:501:8     - Unknown word (ACMEDNS)       -- globalACMEDNS := options["acme_dns
caddyconfig/httpcaddyfile/tlsapp.go:502:8     - Unknown word (ACMEEAB)       -- globalACMEEAB := options["acme_eab
caddyconfig/httpcaddyfile/tlsapp.go:516:11    - Unknown word (ACMEDNS)       -- if globalACMEDNS != nil && (acmeIssuer
caddyconfig/httpcaddyfile/tlsapp.go:519:53    - Unknown word (ACMEDNS)       -- JSONModuleObject(globalACMEDNS, "name", globalACMEDNS
caddyconfig/httpcaddyfile/tlsapp.go:523:11    - Unknown word (ACMEEAB)       -- if globalACMEEAB != nil && acmeIssuer
caddyconfig/httpcaddyfile/tlsapp.go:524:38    - Unknown word (ACMEEAB)       -- ExternalAccount = globalACMEEAB.(*acme.EAB)
caddyconfig/httpcaddyfile/tlsapp.go:538:126   - Unknown word (TLSALPN)       -- acmeIssuer.Challenges.TLSALPN.AlternatePort == 0)
caddyconfig/httpcaddyfile/tlsapp.go:538:86    - Unknown word (TLSALPN)       -- acmeIssuer.Challenges.TLSALPN == nil || acmeIssuer
caddyconfig/httpcaddyfile/tlsapp.go:542:28    - Unknown word (TLSALPN)       -- acmeIssuer.Challenges.TLSALPN == nil {
caddyconfig/httpcaddyfile/tlsapp.go:543:26    - Unknown word (TLSALPN)       -- acmeIssuer.Challenges.TLSALPN = new(caddytls.TLSALPNChallen
caddyconfig/httpcaddyfile/tlsapp.go:543:49    - Unknown word (TLSALPN)       -- TLSALPN = new(caddytls.TLSALPNChallengeConfig)
caddyconfig/httpcaddyfile/tlsapp.go:653:60    - Unknown word (hostnames)     -- if only one has any hostnames
caddyconfig/httpcaddyfile/tlsapp.go:654:57    - Unknown word (hostnames)     -- the one without any hostnames,
caddyconfig/httpcaddyfile/tlsapp.go:751:43    - Unknown word (tailscale)     -- public certs OR are tailscale domains.
caddyconfig/httpcaddyfile/tlsapp.go:754:53    - Unknown word (Tailscale)     -- fiesForPublicCert(ap, i) || isTailscaleDomain(i)
caddyconfig/httpcaddyfile/tlsapp.go:758:8     - Unknown word (Tailscale)     -- func isTailscaleDomain(name string) bool
caddyconfig/httpcaddyfile/tlsapp.go:90:28     - Unknown word (caddytls)      -- tlsApp.Automation = new(caddytls.AutomationConfig)
caddyconfig/httpcaddyfile/tlsapp.go:95:57     - Unknown word (arent)         -- wildcard in them, and arent HTTP
caddyconfig/httpcaddyfile/tlsapp_test.go:1:9       - Unknown word (httpcaddyfile) -- package httpcaddyfile
caddyconfig/httpcaddyfile/tlsapp_test.go:50:11     - Unknown word (caddytls)      -- apA := &caddytls.AutomationPolicy{SubjectsRaw
caddyconfig/httpcaddyfile/tlsapp_test.go:51:11     - Unknown word (caddytls)      -- apB := &caddytls.AutomationPolicy{SubjectsRaw
caddyconfig/httpcaddyfile/tlsapp_test.go:6:14      - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddytls
caddyconfig/httpcaddyfile/tlsapp_test.go:6:43      - Unknown word (caddytls)      -- caddyserver/caddy/v2/modules/caddytls"
caddyconfig/httploader.go:15:9      - Unknown word (caddyconfig) -- package caddyconfig
caddyconfig/httploader.go:185:13    - Unknown word (gosec)       -- //nolint:gosec
caddyconfig/httploader.go:185:6     - Unknown word (nolint)      -- //nolint:gosec
caddyconfig/httploader.go:192:13    - Unknown word (gosec)       -- //nolint:gosec
caddyconfig/httploader.go:192:6     - Unknown word (nolint)      -- //nolint:gosec
caddyconfig/httploader.go:197:21    - Unknown word (CAPEM)       -- if len(hl.TLS.RootCAPEMFiles) > 0 {
caddyconfig/httploader.go:199:39    - Unknown word (CAPEM)       -- := range hl.TLS.RootCAPEMFiles {
caddyconfig/httploader.go:26:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
caddyconfig/httploader.go:71:7      - Unknown word (CAPEM)       -- RootCAPEMFiles []string `json
caddyconfig/load.go:15:9      - Unknown word (caddyconfig) -- package caddyconfig
caddyconfig/load.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
caddyconfig/load.go:37:11     - Unknown word (caddyconfig) -- // of the caddyconfig package for its GetAdapter
caddyconfig/load.go:38:40     - Unknown word (caddyconfig) -- package depends on the caddyconfig package,
caddyconfig/load.go:39:13     - Unknown word (caddyconfig) -- // then the caddyconfig package will not be
caddytest/caddytest.go:108:53    - Unknown word (configurion) -- configure the server with a configurion of a specific
caddytest/caddytest.go:174:22    - Unknown word (caddytest)   -- timeElapsed(start, "caddytest: config load time")
caddytest/caddytest.go:194:14    - Unknown word (caddyconfig) -- adapter := caddyconfig.GetAdapter(configType
caddytest/caddytest.go:1:9       - Unknown word (caddytest)  -- package caddytest
caddytest/caddytest.go:25:14     - Unknown word (aryann)     -- "github.com/aryann/difflib"
caddytest/caddytest.go:25:21     - Unknown word (difflib)    -- "github.com/aryann/difflib"
caddytest/caddytest.go:267:12    - Unknown word (inprocess)   -- // start inprocess caddy server
caddytest/caddytest.go:268:74    - Unknown word (caddyfile)   -- Name(), "--adapter", "caddyfile"}
caddytest/caddytest.go:270:4     - Unknown word (caddycmd)    -- caddycmd.Main()
caddytest/caddytest.go:27:2      - Unknown word (caddycmd)   -- caddycmd "github.com/caddyserver
caddytest/caddytest.go:27:23     - Unknown word (caddyserver) -- caddycmd "github.com/caddyserver/caddy/v2/cmd"
caddytest/caddytest.go:29:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
caddytest/caddytest.go:29:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
caddytest/caddytest.go:306:36    - Unknown word (certificatename) -- convention to replace /[certificatename].[crt|key] with the
caddytest/caddytest.go:31:16     - Unknown word (caddyserver) -- _ "github.com/caddyserver/caddy/v2/modules/standard
caddytest/caddytest.go:326:15    - Unknown word (caddytest)       -- log.Printf("caddytest: redirecting the dialer
caddytest/caddytest.go:338:67    - Unknown word (nolint)          -- InsecureSkipVerify: true}, //nolint:gosec
caddytest/caddytest.go:338:74    - Unknown word (gosec)           -- reSkipVerify: true}, //nolint:gosec
caddytest/caddytest.go:391:16    - Unknown word (caddyconfig)     -- cfgAdapter := caddyconfig.GetAdapter(adapterName
caddytest/caddytest.go:419:10    - Unknown word (difflib)         -- diff := difflib.Diff(
caddytest/caddytest.go:426:17    - Unknown word (difflib)         -- if d.Delta != difflib.Common {
caddytest/caddytest.go:435:9     - Unknown word (difflib)         -- case difflib.Common:
caddytest/caddytest.go:437:9     - Unknown word (difflib)         -- case difflib.LeftOnly:
caddytest/caddytest.go:450:25    - Unknown word (Caddyfile)       -- := CompareAdapt(t, "Caddyfile", rawConfig, adapterName
caddytest/caddytest.go:95:53     - Unknown word (configurion) -- configure the server with a configurion of a specific
caddytest/caddytest_test.go:14:3      - Unknown word (redir)      -- redir / https://b.caddy.localhost
caddytest/caddytest_test.go:1:9       - Unknown word (caddytest)  -- package caddytest
caddytest/integration/acme_test.go:100:12    - Unknown word (caddytest)     -- tester := caddytest.NewTester(t)
caddytest/integration/acme_test.go:111:19    - Unknown word (alpn)          -- challenges tls-alpn-01
caddytest/integration/acme_test.go:114:7     - Unknown word (caddyfile)     -- `, "caddyfile")
caddytest/integration/acme_test.go:14:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
caddytest/integration/acme_test.go:156:107   - Unknown word (alpn)          -- http-01] offered=[tls-alpn-01] remaining=[tls-alpn
caddytest/integration/acme_test.go:156:131   - Unknown word (alpn)          -- alpn-01] remaining=[tls-alpn-01])"
caddytest/integration/acme_test.go:15:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddytest"
caddytest/integration/acme_test.go:15:35     - Unknown word (caddytest)   -- caddyserver/caddy/v2/caddytest"
caddytest/integration/acme_test.go:169:2     - Unknown word (smallstepacme) -- smallstepacme.InsecurePortHTTP01
caddytest/integration/acme_test.go:16:14     - Unknown word (mholt)       -- "github.com/mholt/acmez/v2"
caddytest/integration/acme_test.go:16:20     - Unknown word (acmez)       -- "github.com/mholt/acmez/v2"
caddytest/integration/acme_test.go:17:14     - Unknown word (mholt)       -- "github.com/mholt/acmez/v2/acme"
caddytest/integration/acme_test.go:17:20     - Unknown word (acmez)       -- "github.com/mholt/acmez/v2/acme"
caddytest/integration/acme_test.go:18:2      - Unknown word (smallstepacme) -- smallstepacme "github.com/smallstep
caddytest/integration/acme_test.go:18:28     - Unknown word (smallstep)     -- smallstepacme "github.com/smallstep/certificates/acme"
caddytest/integration/acme_test.go:200:2     - Unknown word (smallstepacme) -- smallstepacme.InsecurePortHTTP01
caddytest/integration/acme_test.go:33:12     - Unknown word (caddytest)     -- tester := caddytest.NewTester(t)
caddytest/integration/acme_test.go:45:7      - Unknown word (caddyfile)     -- `, "caddyfile")
caddytest/integration/acme_test.go:47:12     - Unknown word (acmez)         -- client := acmez.Client{
caddytest/integration/acme_test.go:53:32     - Unknown word (acmez)         -- ChallengeSolvers: map[string]acmez.Solver{
caddytest/integration/acme_test.go:98:31     - Unknown word (acmez)         -- caddy.Log().Named("acmez")
caddytest/integration/acmeserver_test.go:11:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddytest"
caddytest/integration/acmeserver_test.go:11:35     - Unknown word (caddytest)   -- caddyserver/caddy/v2/caddytest"
caddytest/integration/acmeserver_test.go:12:14     - Unknown word (mholt)       -- "github.com/mholt/acmez/v2"
caddytest/integration/acmeserver_test.go:12:20     - Unknown word (acmez)       -- "github.com/mholt/acmez/v2"
caddytest/integration/acmeserver_test.go:134:12    - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/acmeserver_test.go:13:14     - Unknown word (mholt)       -- "github.com/mholt/acmez/v2/acme"
caddytest/integration/acmeserver_test.go:13:20     - Unknown word (acmez)       -- "github.com/mholt/acmez/v2/acme"
caddytest/integration/acmeserver_test.go:155:7     - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/acmeserver_test.go:164:12    - Unknown word (acmez)       -- client := acmez.Client{
caddytest/integration/acmeserver_test.go:18:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/acmeserver_test.go:35:7      - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/acmeserver_test.go:44:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/acmeserver_test.go:66:7      - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/acmeserver_test.go:75:12     - Unknown word (acmez)       -- client := acmez.Client{
caddytest/integration/acmeserver_test.go:81:32     - Unknown word (acmez)       -- ChallengeSolvers: map[string]acmez.Solver{
caddytest/integration/autohttps_test.go:119:7     - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/autohttps_test.go:11:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/autohttps_test.go:141:7     - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/autohttps_test.go:20:11     - Unknown word (Yahaha)      -- respond "Yahaha! You found me!"
caddytest/integration/autohttps_test.go:21:7      - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/autohttps_test.go:27:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/autohttps_test.go:36:11     - Unknown word (Yahaha)      -- respond "Yahaha! You found me!"
caddytest/integration/autohttps_test.go:37:7      - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/autohttps_test.go:43:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/autohttps_test.go:52:11     - Unknown word (Yahaha)      -- respond "Yahaha! You found me!"
caddytest/integration/autohttps_test.go:53:7      - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/autohttps_test.go:59:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/autohttps_test.go:7:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddytest"
caddytest/integration/autohttps_test.go:7:35      - Unknown word (caddytest)   -- caddyserver/caddy/v2/caddytest"
caddytest/integration/caddyfile_adapt_test.go:12:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddytest"
caddytest/integration/caddyfile_adapt_test.go:12:35     - Unknown word (caddytest)   -- caddyserver/caddy/v2/caddytest"
caddytest/integration/caddyfile_adapt_test.go:14:16     - Unknown word (caddyserver) -- _ "github.com/caddyserver/caddy/v2/internal/testmocks
caddytest/integration/caddyfile_adapt_test.go:14:46     - Unknown word (testmocks)   -- caddyserver/caddy/v2/internal/testmocks"
caddytest/integration/caddyfile_adapt_test.go:17:10     - Unknown word (Caddyfile)   -- func TestCaddyfileAdaptToJSON(t *testing
caddytest/integration/caddyfile_adapt_test.go:19:30     - Unknown word (caddyfile)   -- err := os.ReadDir("./caddyfile_adapt")
caddytest/integration/caddyfile_adapt_test.go:21:28     - Unknown word (caddyfile)   -- Errorf("failed to read caddyfile_adapt dir: %s", err
caddytest/integration/caddyfile_adapt_test.go:34:31     - Unknown word (caddyfile)   -- err := os.ReadFile("./caddyfile_adapt/" + filename)
caddytest/integration/caddyfile_adapt_test.go:39:16     - Unknown word (Caddyfile)   -- // split the Caddyfile (first) and JSON (second
caddytest/integration/caddyfile_adapt_test.go:40:25     - Unknown word (Caddyfile)   -- (append newline to Caddyfile to match formatter expectatio
caddytest/integration/caddyfile_adapt_test.go:42:3      - Unknown word (caddyfile)   -- caddyfile, json := strings.TrimSpace
caddytest/integration/caddyfile_adapt_test.go:48:82     - Unknown word (Caddyfile)   -- filepath.Separator), "Caddyfile"))
caddytest/integration/caddyfile_adapt_test.go:49:39     - Unknown word (Caddyfile)   -- ReplaceAll(json, `"./Caddyfile"`, string(replacePath
caddytest/integration/caddyfile_adapt_test.go:52:45     - Unknown word (caddyfile)   -- CompareAdapt(t, filename, caddyfile, "caddyfile", json)
caddytest/integration/caddyfile_adapt_test.go:52:9      - Unknown word (caddytest)   -- ok := caddytest.CompareAdapt(t, filename
caddytest/integration/caddyfile_test.go:102:7     - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/caddyfile_test.go:128:7     - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/caddyfile_test.go:13:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/caddyfile_test.go:150:43    - Unknown word (someinvalidprefix) -- unsupported URL scheme someinvalidprefix://",
caddytest/integration/caddyfile_test.go:170:43    - Unknown word (someinvalidprefix) -- unsupported URL scheme someinvalidprefix://`,
caddytest/integration/caddyfile_test.go:27:7      - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/caddyfile_test.go:35:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/caddyfile_test.go:46:5      - Unknown word (redir)       -- redir / http://localhost:
caddytest/integration/caddyfile_test.go:513:12    - Unknown word (changethis)        -- uri query changethis>changed
caddytest/integration/caddyfile_test.go:52:7      - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/caddyfile_test.go:63:2      - Unknown word (caddytest)   -- caddytest.AssertLoadError(t,
caddytest/integration/caddyfile_test.go:71:4      - Unknown word (caddyfile)   -- "caddyfile",
caddytest/integration/caddyfile_test.go:747:10    - Unknown word (internalerr)       -- error /internalerr* "Internal Server Error
caddytest/integration/caddyfile_test.go:770:10    - Unknown word (threehundred)      -- error /threehundred* "Moved Permanently
caddytest/integration/caddyfile_test.go:771:10    - Unknown word (internalerr)       -- error /internalerr* "Internal Server Error
caddytest/integration/caddyfile_test.go:78:11     - Unknown word (clientname)  -- Name: "clientname",
caddytest/integration/caddyfile_test.go:797:20    - Unknown word (Caddyfile)         -- expectedError: `Caddyfile:2: parsed 'handle' as
caddytest/integration/caddyfile_test.go:79:11     - Unknown word (caddytest)   -- Value: "caddytest",
caddytest/integration/caddyfile_test.go:804:20    - Unknown word (Caddyfile)         -- expectedError: `Caddyfile:2: parsed 'reverse_proxy
caddytest/integration/caddyfile_test.go:8:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddytest"
caddytest/integration/caddyfile_test.go:8:35      - Unknown word (caddytest)   -- caddyserver/caddy/v2/caddytest"
caddytest/integration/handler_test.go:12:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/handler_test.go:24:7      - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/handler_test.go:35:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/handler_test.go:47:7      - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/handler_test.go:8:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddytest"
caddytest/integration/handler_test.go:8:35      - Unknown word (caddytest)   -- caddyserver/caddy/v2/caddytest"
caddytest/integration/intercept_test.go:10:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/intercept_test.go:32:7      - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/intercept_test.go:6:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddytest"
caddytest/integration/intercept_test.go:6:35      - Unknown word (caddytest)   -- caddyserver/caddy/v2/caddytest"
caddytest/integration/leafcertloaders_test.go:10:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/leafcertloaders_test.go:47:28     - Unknown word (leafcert)    -- "files": ["../leafcert.pem"]
caddytest/integration/leafcertloaders_test.go:6:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddytest"
caddytest/integration/leafcertloaders_test.go:6:35      - Unknown word (caddytest)   -- caddyserver/caddy/v2/caddytest"
caddytest/integration/listener_test.go:12:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddytest"
caddytest/integration/listener_test.go:12:35     - Unknown word (caddytest)   -- caddyserver/caddy/v2/caddytest"
caddytest/integration/listener_test.go:15:76     - Unknown word (caddytest)   -- andlerFunc http.HandlerFunc) *caddytest.Tester {
caddytest/integration/listener_test.go:31:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/listener_test.go:49:27     - Unknown word (caddyfile)   -- l.Addr().String()), "caddyfile")
caddytest/integration/map_test.go:12:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/map_test.go:33:6      - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/map_test.go:42:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/map_test.go:61:6      - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/map_test.go:70:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/map_test.go:7:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddytest"
caddytest/integration/map_test.go:7:35      - Unknown word (caddytest)   -- caddyserver/caddy/v2/caddytest"
caddytest/integration/mockdns_test.go:32:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the module from
caddytest/integration/mockdns_test.go:32:47     - Unknown word (Caddyfile)   -- sets up the module from Caddyfile tokens.
caddytest/integration/mockdns_test.go:33:33     - Unknown word (Caddyfile)   -- MockDNSProvider) UnmarshalCaddyfile(d *caddyfile.Dispenser
caddytest/integration/mockdns_test.go:33:46     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
caddytest/integration/mockdns_test.go:38:79     - Unknown word (libdns)      -- zone string, recs []libdns.Record) ([]libdns.Record
caddytest/integration/mockdns_test.go:38:97     - Unknown word (libdns)      -- []libdns.Record) ([]libdns.Record, error) {
caddytest/integration/mockdns_test.go:43:79     - Unknown word (libdns)      -- zone string, recs []libdns.Record) ([]libdns.Record
caddytest/integration/mockdns_test.go:58:7      - Unknown word (caddyfile)   -- var _ caddyfile.Unmarshaler = (*MockDNSProvid
caddytest/integration/mockdns_test.go:59:7      - Unknown word (certmagic)   -- var _ certmagic.DNSProvider = (*MockDNSProvid
caddytest/integration/mockdns_test.go:6:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
caddytest/integration/mockdns_test.go:7:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
caddytest/integration/mockdns_test.go:7:35      - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
caddytest/integration/mockdns_test.go:7:47      - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
caddytest/integration/mockdns_test.go:8:14      - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
caddytest/integration/mockdns_test.go:8:26      - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
caddytest/integration/mockdns_test.go:9:14      - Unknown word (libdns)      -- "github.com/libdns/libdns"
caddytest/integration/mockdns_test.go:9:21      - Unknown word (libdns)      -- "github.com/libdns/libdns"
caddytest/integration/pki_test.go:10:2      - Unknown word (caddytest)   -- caddytest.AssertLoadError(t,
caddytest/integration/pki_test.go:60:2      - Unknown word (caddytest)   -- caddytest.AssertLoadError(t,
caddytest/integration/pki_test.go:6:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddytest"
caddytest/integration/pki_test.go:6:35      - Unknown word (caddytest)   -- caddyserver/caddy/v2/caddytest"
caddytest/integration/reverseproxy_test.go:13:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddytest"
caddytest/integration/reverseproxy_test.go:13:35     - Unknown word (caddytest)   -- caddyserver/caddy/v2/caddytest"
caddytest/integration/reverseproxy_test.go:142:12    - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/reverseproxy_test.go:17:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/reverseproxy_test.go:236:12    - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/reverseproxy_test.go:357:6     - Unknown word (caddyfile)   -- `, "caddyfile")
caddytest/integration/reverseproxy_test.go:416:19    - Unknown word (caddyfile)   -- `, socketName), "caddyfile")
caddytest/integration/reverseproxy_test.go:473:19    - Unknown word (caddyfile)   -- `, socketName), "caddyfile")
caddytest/integration/reverseproxy_test.go:90:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/sni_test.go:110:12    - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/sni_test.go:11:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/sni_test.go:214:12    - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/sni_test.go:289:2     - Unknown word (caddytest)   -- caddytest.AssertAdapt(t, `
caddytest/integration/sni_test.go:299:6     - Unknown word (caddyfile)   -- `, "caddyfile", `{
caddytest/integration/sni_test.go:6:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddytest"
caddytest/integration/sni_test.go:6:35      - Unknown word (caddytest)   -- caddyserver/caddy/v2/caddytest"
caddytest/integration/stream_test.go:155:3     - Unknown word (rstring)     -- rstring, err := httputil.DumpRequest
caddytest/integration/stream_test.go:157:42    - Unknown word (rstring)     -- server received req: %s", rstring)
caddytest/integration/stream_test.go:16:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddytest"
caddytest/integration/stream_test.go:16:35     - Unknown word (caddytest)   -- caddyserver/caddy/v2/caddytest"
caddytest/integration/stream_test.go:207:12    - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
caddytest/integration/stream_test.go:23:12     - Unknown word (caddytest)   -- tester := caddytest.NewTester(t)
cmd/caddy/main.go:32:19     - Unknown word (xcaddy)     -- // Or you can use xcaddy which does it all for
cmd/caddy/main.go:37:2      - Unknown word (caddycmd)   -- caddycmd "github.com/caddyserver
cmd/caddy/main.go:37:23     - Unknown word (caddyserver) -- caddycmd "github.com/caddyserver/caddy/v2/cmd"
cmd/caddy/main.go:40:16     - Unknown word (caddyserver) -- _ "github.com/caddyserver/caddy/v2/modules/standard
cmd/caddy/main.go:44:2      - Unknown word (caddycmd)    -- caddycmd.Main()
cmd/caddy/main.go:4:12      - Unknown word (tlskyber)   -- //go:debug tlskyber=1
cmd/cobra.go:1:9       - Unknown word (caddycmd)   -- package caddycmd
cmd/cobra.go:34:24     - Unknown word (Caddyfile)   -- its configuration. The Caddyfile is a built-in config
cmd/cobra.go:41:48     - Unknown word (Caddyfile)   -- you. If a file named Caddyfile is in the
cmd/cobra.go:86:5      - Unknown word (xcaddy)      -- The xcaddy command can be used
cmd/cobra.go:8:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
cmd/commandfactory.go:1:9       - Unknown word (caddycmd)   -- package caddycmd
cmd/commandfuncs.go:144:16    - Unknown word (Pingback)    -- err = handlePingbackConn(conn, expect)
cmd/commandfuncs.go:15:9      - Unknown word (caddycmd)   -- package caddycmd
cmd/commandfuncs.go:180:2     - Unknown word (pingback)    -- pingbackFlag := fl.String("pingback
cmd/commandfuncs.go:180:29    - Unknown word (pingback)    -- pingbackFlag := fl.String("pingback")
cmd/commandfuncs.go:243:5     - Unknown word (pingback)    -- if pingbackFlag != "" {
cmd/commandfuncs.go:274:44    - Unknown word (USERPROFILE) -- == "" && os.Getenv("USERPROFILE") == "" && !hasXDG
cmd/commandfuncs.go:275:39    - Unknown word (USERPROFILE) -- Warn("neither HOME nor USERPROFILE environment variables
cmd/commandfuncs.go:35:14     - Unknown word (aryann)     -- "github.com/aryann/difflib"
cmd/commandfuncs.go:35:21     - Unknown word (difflib)    -- "github.com/aryann/difflib"
cmd/commandfuncs.go:38:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
cmd/commandfuncs.go:39:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
cmd/commandfuncs.go:39:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
cmd/commandfuncs.go:40:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
cmd/commandfuncs.go:40:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
cmd/commandfuncs.go:40:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
cmd/commandfuncs.go:41:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/internal"
cmd/commandfuncs.go:461:16    - Unknown word (caddyconfig) -- cfgAdapter := caddyconfig.GetAdapter(adapterFlag
cmd/commandfuncs.go:47:2      - Unknown word (pidfile)     -- pidfileFlag := fl.String("pidfile
cmd/commandfuncs.go:47:28     - Unknown word (pidfile)     -- pidfileFlag := fl.String("pidfile")
cmd/commandfuncs.go:536:53    - Unknown word (Caddyfile)   -- required when there is no Caddyfile in current directory
cmd/commandfuncs.go:564:17    - Unknown word (Caddyfile)   -- configFile = "Caddyfile"
cmd/commandfuncs.go:574:20    - Unknown word (caddyfile)   -- fmt.Print(string(caddyfile.Format(input)))
cmd/commandfuncs.go:584:12    - Unknown word (caddyfile)   -- output := caddyfile.Format(input)
cmd/commandfuncs.go:594:11    - Unknown word (difflib)     -- diff := difflib.Diff(
cmd/commandfuncs.go:599:9     - Unknown word (difflib)     -- case difflib.Common:
cmd/commandfuncs.go:601:9     - Unknown word (difflib)     -- case difflib.LeftOnly:
cmd/commandfuncs.go:603:9     - Unknown word (difflib)     -- case difflib.RightOnly:
cmd/commandfuncs.go:611:22    - Unknown word (caddyfile)   -- if warning, diff := caddyfile.FormattingDifference
cmd/commandfuncs.go:612:130   - Unknown word (Caddyfile)   -- overwrite' to update your Caddyfile in-place instead of
cmd/commandfuncs.go:612:58    - Unknown word (Caddyfile)   -- fmt.Errorf(`%s:%d: Caddyfile input is not formatted
cmd/commandfuncs.go:67:30     - Unknown word (pingback)    -- craft the command with a pingback address and with a
cmd/commandfuncs.go:686:7     - Unknown word (srldkjfsd)   -- // "srldkjfsd"), if for some reason
cmd/commandfuncs.go:756:87    - Unknown word (Caddyfile)   -- config flag or ensure Caddyfile exists in current directory
cmd/commandfuncs.go:76:44     - Unknown word (pingback)    -- os.Args[0], "run", "--pingback", ln.Addr().String(
cmd/commandfuncs.go:785:25    - Unknown word (caddyconfig) -- configFile == "" && caddyconfig.GetAdapter("caddyfile
cmd/commandfuncs.go:785:49    - Unknown word (caddyfile)   -- caddyconfig.GetAdapter("caddyfile") != nil {
cmd/commandfuncs.go:94:5      - Unknown word (pidfile)     -- if pidfileFlag != "" {
cmd/commandfuncs.go:95:34     - Unknown word (pidfile)     -- append(cmd.Args, "--pidfile", pidfileFlag)
cmd/commandfuncs.go:95:44     - Unknown word (pidfile)     -- cmd.Args, "--pidfile", pidfileFlag)
cmd/commands.go:109:25    - Unknown word (pidfile)     -- cmd.Flags().StringP("pidfile", "", "", "Path of file
cmd/commands.go:116:103   - Unknown word (pidfile)     -- resume] [--watch] [--pidfile <file>]",
cmd/commands.go:132:2     - Unknown word (Caddyfile)   -- "Caddyfile" and the caddyfile config
cmd/commands.go:132:21    - Unknown word (caddyfile)   -- "Caddyfile" and the caddyfile config adapter is plugged
cmd/commands.go:157:25    - Unknown word (pidfile)     -- cmd.Flags().StringP("pidfile", "", "", "Path of file
cmd/commands.go:158:25    - Unknown word (pingback)    -- cmd.Flags().StringP("pingback", "", "", "Echo confirmation
cmd/commands.go:15:9      - Unknown word (caddycmd)   -- package caddycmd
cmd/commands.go:214:56    - Unknown word (xcaddy)      -- documentation (or by using xcaddy), more
cmd/commands.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
cmd/commands.go:292:41    - Unknown word (caddyfile)   -- StringP("adapter", "a", "caddyfile", "Name of config adapter
cmd/commands.go:327:33    - Unknown word (Caddyfile)   -- storage export --config Caddyfile.old --output - |
cmd/commands.go:328:33    - Unknown word (Caddyfile)   -- storage import --config Caddyfile.new --input -
cmd/commands.go:34:47     - Unknown word (godoc)       -- the RegisterCommand() godoc.
cmd/commands.go:373:21    - Unknown word (Caddyfile)   -- Short: "Formats a Caddyfile",
cmd/commands.go:375:13    - Unknown word (Caddyfile)   -- Formats the Caddyfile by adding proper indentation
cmd/commands.go:496:24    - Unknown word (compinit)    -- $ echo "autoload -U compinit; compinit" >> ~/.zshrc
cmd/commands.go:496:34    - Unknown word (compinit)    -- autoload -U compinit; compinit" >> ~/.zshrc
cmd/commands.go:70:22     - Unknown word (caddycmd)    -- // this function. A caddycmd.WrapCommandFuncForCobra
cmd/commands.go:80:40     - Unknown word (initialised) -- returns a list of commands initialised by
cmd/commands.go:91:80     - Unknown word (pidfile)     -- path>] [--watch] [--pidfile <file>]",
cmd/main.go:110:8     - Unknown word (Caddyfile)    -- func isCaddyfile(configFile, adapterName
cmd/main.go:111:21    - Unknown word (caddyfile)    -- if adapterName == "caddyfile" {
cmd/main.go:115:54    - Unknown word (caddyfile)    -- config file starts with "caddyfile" or
cmd/main.go:116:13    - Unknown word (caddyfile)    -- // has a ".caddyfile" extension, and no adapter
cmd/main.go:118:5     - Unknown word (caddyfile)    -- // caddyfile adapter for convenience
cmd/main.go:121:16    - Unknown word (Caddyfile)    -- startsOrEndsInCaddyfile := strings.HasPrefix
cmd/main.go:121:60    - Unknown word (caddyfile)    -- HasPrefix(baseConfig, "caddyfile") || strings.HasSuffix
cmd/main.go:130:33    - Unknown word (Caddyfile)    -- t a JSON file (e.g. Caddyfile.yaml),
cmd/main.go:132:40    - Unknown word (Caddyfile)    -- "" && startsOrEndsInCaddyfile {
cmd/main.go:140:31    - Unknown word (Caddyfile)    -- does not start with "Caddyfile"
cmd/main.go:158:17    - Unknown word (caddyconfig)  -- var cfgAdapter caddyconfig.Adapter
cmd/main.go:15:9      - Unknown word (caddycmd)   -- package caddycmd
cmd/main.go:177:16    - Unknown word (caddyconfig)  -- cfgAdapter = caddyconfig.GetAdapter("caddyfile
cmd/main.go:202:16    - Unknown word (caddyconfig)  -- cfgAdapter = caddyconfig.GetAdapter(adapterName
cmd/main.go:271:4     - Unknown word (nolint)       -- //nolint:staticcheck
cmd/main.go:301:3     - Unknown word (pflag)        -- *pflag.FlagSet
cmd/main.go:36:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
cmd/main.go:36:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
cmd/main.go:372:26    - Unknown word (certmagic)    -- caddy.DefaultStorage = &certmagic.FileStorage{Path: caddy
cmd/main.go:37:20     - Unknown word (pflag)       -- "github.com/spf13/pflag"
cmd/main.go:38:15     - Unknown word (automaxprocs) -- "go.uber.org/automaxprocs/maxprocs"
cmd/main.go:38:28     - Unknown word (maxprocs)     -- uber.org/automaxprocs/maxprocs"
cmd/main.go:41:14     - Unknown word (caddyserver)  -- "github.com/caddyserver/caddy/v2"
cmd/main.go:42:14     - Unknown word (caddyserver)  -- "github.com/caddyserver/caddy/v2/caddyconfig
cmd/main.go:42:35     - Unknown word (caddyconfig)  -- caddyserver/caddy/v2/caddyconfig"
cmd/main.go:53:2      - Unknown word (certmagic)    -- certmagic.UserAgent = ua
cmd/main.go:58:2      - Unknown word (certmagic)    -- certmagic.DefaultACME.Agreed
cmd/main.go:69:15     - Unknown word (maxprocs)     -- undo, err := maxprocs.Set()
cmd/main.go:84:10     - Unknown word (Pingback)     -- // handlePingbackConn reads from conn
cmd/main.go:86:12     - Unknown word (Pingback)     -- func handlePingbackConn(conn net.Conn, expect
cmd/main_test.go:172:13    - Unknown word (Caddyfile)  -- func Test_isCaddyfile(t *testing.T) {
cmd/main_test.go:184:16    - Unknown word (Caddyfile)  -- name: "bare Caddyfile without adapter",
cmd/main_test.go:186:19    - Unknown word (Caddyfile)  -- configFile: "Caddyfile",
cmd/main_test.go:193:17    - Unknown word (Caddyfile)  -- name: "local Caddyfile without adapter",
cmd/main_test.go:195:21    - Unknown word (Caddyfile)  -- configFile: "./Caddyfile",
cmd/main_test.go:1:9       - Unknown word (caddycmd)   -- package caddycmd
cmd/main_test.go:202:17    - Unknown word (caddyfile)  -- name: "local caddyfile with adapter",
cmd/main_test.go:205:19    - Unknown word (caddyfile)  -- adapterName: "caddyfile",
cmd/main_test.go:211:22    - Unknown word (caddyfile)  -- name: "ends with .caddyfile with adapter",
cmd/main_test.go:213:26    - Unknown word (caddyfile)  -- configFile: "./conf.caddyfile",
cmd/main_test.go:214:19    - Unknown word (caddyfile)  -- adapterName: "caddyfile",
cmd/packagesfuncs.go:15:9      - Unknown word (caddycmd)   -- package caddycmd
cmd/packagesfuncs.go:236:3     - Unknown word (iface)       -- iface := any(modInfo.New(
cmd/packagesfuncs.go:237:28    - Unknown word (iface)       -- rv := reflect.ValueOf(iface); rv.Kind() == reflect
cmd/packagesfuncs.go:238:39    - Unknown word (iface)       -- reflect.New(reflect.TypeOf(iface).Elem()).Elem().Interface
cmd/packagesfuncs.go:238:4     - Unknown word (iface)       -- iface = reflect.New(reflect
cmd/packagesfuncs.go:240:32    - Unknown word (iface)       -- modPkgPath := reflect.TypeOf(iface).PkgPath()
cmd/packagesfuncs.go:33:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
cmd/packagesfuncs.go:41:8      - Unknown word (Pkgs)        -- pluginPkgs, err := getPluginPackages
cmd/packagesfuncs.go:46:28     - Unknown word (Pkgs)        -- return upgradeBuild(pluginPkgs, fl)
cmd/packagesfuncs.go:76:8      - Unknown word (Pkgs)        -- pluginPkgs, err := getPluginPackages
cmd/packagesfuncs.go:87:21     - Unknown word (Pkgs)        -- if _, ok := pluginPkgs[module]; ok && !(version
cmd/packagesfuncs.go:87:66     - Unknown word (Pkgs)        -- version != "" && pluginPkgs[module].Version != version
cmd/removebinary.go:17:9      - Unknown word (caddycmd)   -- package caddycmd
cmd/removebinary_windows.go:15:9      - Unknown word (caddycmd)   -- package caddycmd
cmd/removebinary_windows.go:34:67     - Unknown word (windir)     -- filepath.Join(os.Getenv("windir"), "system32", "cmd
cmd/storagefuncs.go:153:11    - Unknown word (certmagic)   -- var stor certmagic.Storage
cmd/storagefuncs.go:15:9      - Unknown word (caddycmd)   -- package caddycmd
cmd/storagefuncs.go:26:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
cmd/storagefuncs.go:26:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
cmd/storagefuncs.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
cmd/storagefuncs.go:81:11     - Unknown word (certmagic)   -- var stor certmagic.Storage
cmd/x509rootsfallback.go:15:9      - Unknown word (caddycmd)   -- package caddycmd
cmd/x509rootsfallback.go:30:21     - Unknown word (goimports)  -- // between gci and goimports when in main.go.
context.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
context.go:25:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
context.go:29:23     - Unknown word (zapslog)     -- go.uber.org/zap/exp/zapslog"
context.go:31:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/internal/filesystems
context.go:500:30    - Unknown word (certmagic)     -- ctx Context) Storage() certmagic.Storage {
context.go:552:19    - Unknown word (zapslog)       -- return slog.New(zapslog.NewHandler(l.Core()
context.go:556:19    - Unknown word (zapslog)       -- return slog.New(zapslog.NewHandler(Log().Core
context.go:559:18    - Unknown word (zapslog)       -- return slog.New(zapslog.NewHandler(
context.go:561:4     - Unknown word (zapslog)       -- &zapslog.HandlerOptions{
context.go:97:46     - Unknown word (filesystemmap) -- loaded, we use a default filesystemmap, which includes the
context.go:97:80     - Unknown word (osfs)          -- which includes the osfs
context_test.go:28:11     - Unknown word (godoc)      -- // This godoc comment will appear
context_test.go:60:11     - Unknown word (godoc)      -- // This godoc comment will appear
context_test.go:93:11     - Unknown word (godoc)      -- // This godoc comment will appear
duration_fuzz.go:15:12     - Unknown word (gofuzz)     -- //go:build gofuzz
internal/metrics/metrics_test.go:19:28     - Unknown word (ohno)       -- method: strings.Repeat("ohno", 9999), expected:
internal/sockets.go:45:48     - Unknown word (rwxr)       -- returns a string like `-rwxr-xr--` for `u=rwx,g=rx
internal/testmocks/dummyverifier.go:17:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile implements caddyfile
internal/testmocks/dummyverifier.go:17:34     - Unknown word (caddyfile)   -- UnmarshalCaddyfile implements caddyfile.Unmarshaler.
internal/testmocks/dummyverifier.go:18:31     - Unknown word (Caddyfile)   -- dummyVerifier) UnmarshalCaddyfile(d *caddyfile.Dispenser
internal/testmocks/dummyverifier.go:18:44     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
internal/testmocks/dummyverifier.go:1:9       - Unknown word (testmocks)  -- package testmocks
internal/testmocks/dummyverifier.go:39:4      - Unknown word (caddytls)    -- _ caddytls.ClientCertificateVerifier
internal/testmocks/dummyverifier.go:40:4      - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler
internal/testmocks/dummyverifier.go:6:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
internal/testmocks/dummyverifier.go:7:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
internal/testmocks/dummyverifier.go:7:35      - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
internal/testmocks/dummyverifier.go:7:47      - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
internal/testmocks/dummyverifier.go:8:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddytls
internal/testmocks/dummyverifier.go:8:43      - Unknown word (caddytls)    -- caddyserver/caddy/v2/modules/caddytls"
listen.go:143:6     - Unknown word (tconn)      -- if tconn, ok := conn.(canSetKeepAlive
listen.go:145:11    - Unknown word (tconn)      -- err = tconn.SetKeepAlivePeriod(fcl
listen.go:147:11    - Unknown word (tconn)      -- err = tconn.SetKeepAlive(false)
listen.go:249:7     - Unknown word (fcpc)       -- func (fcpc *fakeClosePacketConn
listen.go:251:23    - Unknown word (fcpc)       -- if atomic.LoadInt32(&fcpc.closed) == 1 {
listen.go:253:11    - Unknown word (readfrom)   -- Op: "readfrom",
listen.go:254:10    - Unknown word (fcpc)       -- Net: fcpc.LocalAddr().Network
listen.go:255:10    - Unknown word (fcpc)       -- Addr: fcpc.LocalAddr(),
listen.go:260:21    - Unknown word (readfrom)   -- // call underlying readfrom
listen.go:261:17    - Unknown word (fcpc)       -- n, addr, err = fcpc.sharedPacketConn.ReadFrom
listen.go:40:40     - Unknown word (fdgram)     -- Contains([]string{"fd", "fdgram"}, network)
listen.go:69:75     - Unknown word (fdgram)     -- udp6", "unixgram", "fdgram"}, network)
listen_unix.go:105:40    - Unknown word (fdgram)     -- Contains([]string{"fd", "fdgram"}, network)
listen_unix.go:145:75    - Unknown word (fdgram)     -- udp6", "unixgram", "fdgram"}, network)
listen_unix.go:206:70    - Unknown word (SOREUSEPORT) -- unix.SOL_SOCKET, unixSOREUSEPORT, 1); err != nil {
listen_unix_setopt.go:7:11      - Unknown word (SOREUSEPORT) -- const unixSOREUSEPORT = unix.SO_REUSEPORT
listen_unix_setopt_freebsd.go:7:11      - Unknown word (SOREUSEPORT) -- const unixSOREUSEPORT = unix.SO_REUSEPORT
listeners.go:214:10    - Unknown word (fdgram)      -- // fd or fdgram.
listeners.go:298:38    - Unknown word (netw)        -- returns true if the netw is a unix network.
listeners.go:299:20    - Unknown word (netw)        -- func IsUnixNetwork(netw string) bool {
listeners.go:300:27    - Unknown word (netw)        -- return strings.HasPrefix(netw, "unix")
listeners.go:303:36    - Unknown word (netw)        -- returns true if the netw is a fd network.
listeners.go:304:18    - Unknown word (netw)        -- func IsFdNetwork(netw string) bool {
listeners.go:34:30     - Unknown word (qlog)       -- com/quic-go/quic-go/qlog"
listeners.go:38:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/internal"
listeners.go:447:7     - Unknown word (unwrapper)   -- if unwrapper, ok := h3ln.(interface
listeners.go:448:12    - Unknown word (unwrapper)   -- h3ln = unwrapper.Unwrap()
listeners.go:456:12    - Unknown word (gosec)       -- //nolint:gosec
listeners.go:456:5     - Unknown word (nolint)      -- //nolint:gosec
listeners.go:469:16    - Unknown word (qlog)        -- Tracer: qlog.DefaultConnectionTracer
listeners.go:510:5     - Unknown word (Confs)       -- tlsConfs map[*tls.Config
listeners.go:516:2     - Unknown word (sqtc)        -- sqtc := &sharedQUICState
listeners.go:517:6     - Unknown word (Confs)       -- tlsConfs: make(map[*tls
listeners.go:520:2     - Unknown word (sqtc)        -- sqtc.addState(tlsConfig)
listeners.go:521:9     - Unknown word (sqtc)        -- return sqtc
listeners.go:537:24    - Unknown word (Confs)       -- if cacc, ok := sqs.tlsConfs[tlsConfig]; ok {
listeners.go:537:5     - Unknown word (cacc)        -- if cacc, ok := sqs.tlsConfs
listeners.go:538:10    - Unknown word (cacc)        -- return cacc.Context, cacc.CancelFunc
listeners.go:538:24    - Unknown word (cacc)        -- return cacc.Context, cacc.CancelFunc
listeners.go:548:17    - Unknown word (Confs)       -- delete(sqs.tlsConfs, tlsConfig)
listeners.go:552:27    - Unknown word (Confs)       -- for tc := range sqs.tlsConfs {
listeners.go:613:7     - Unknown word (fcql)        -- func (fcql *fakeCloseQuicListener
listeners.go:614:15    - Unknown word (fcql)        -- conn, err := fcql.sharedQuicListener.Accept
listeners.go:614:46    - Unknown word (fcql)        -- sharedQuicListener.Accept(fcql.context)
listeners.go:620:23    - Unknown word (fcql)        -- if atomic.LoadInt32(&fcql.closed) == 1 && errors
listeners.go:621:29    - Unknown word (fcql)        -- return nil, fakeClosedErr(fcql)
listeners.go:645:34    - Unknown word (fdgram)      -- "fd" || network == "fdgram" {
listeners_fuzz.go:15:12     - Unknown word (gofuzz)     -- //go:build gofuzz
listeners_test.go:21:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/internal"
logging.go:283:7     - Unknown word (wdest)      -- func (wdest writerDestructor) Destruct
logging.go:284:9     - Unknown word (wdest)      -- return wdest.Close()
metrics.go:48:15     - Unknown word (promhttp)    -- // Similar to promhttp.InstrumentHandlerCounter
metrics.go:51:11     - Unknown word (promhttp)    -- // Unlike promhttp.InstrumentHandlerCounter
metrics.go:8:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/internal/metrics
modules.go:49:21     - Unknown word (caddyhttp)  -- // type-asserted as caddyhttp.MiddlewareHandler values
modules/caddyevents/app.go:130:11    - Unknown word (Iface)       -- handlersIface, err := ctx.LoadModule
modules/caddyevents/app.go:134:29    - Unknown word (Iface)       -- h := range handlersIface.([]any) {
modules/caddyevents/app.go:15:9      - Unknown word (caddyevents) -- package caddyevents
modules/caddyevents/app.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyevents/app.go:386:41    - Unknown word (specversion) -- string `json:"specversion"`
modules/caddyevents/app.go:389:41    - Unknown word (datacontenttype) -- string `json:"datacontenttype,omitempty"`
modules/caddyevents/eventsconfig/caddyfile.go:15:12     - Unknown word (eventsconfig) -- // Package eventsconfig is for configuring caddyevent
modules/caddyevents/eventsconfig/caddyfile.go:15:44     - Unknown word (caddyevents)  -- entsconfig is for configuring caddyevents.App with the
modules/caddyevents/eventsconfig/caddyfile.go:16:4      - Unknown word (Caddyfile)    -- // Caddyfile. This code can't be
modules/caddyevents/eventsconfig/caddyfile.go:16:41     - Unknown word (caddyevents)  -- code can't be in the caddyevents package because
modules/caddyevents/eventsconfig/caddyfile.go:17:38     - Unknown word (caddyhttp)     -- httpcaddyfile package imports caddyhttp, which imports
modules/caddyevents/eventsconfig/caddyfile.go:17:8      - Unknown word (httpcaddyfile) -- // the httpcaddyfile package imports caddyhttp
modules/caddyevents/eventsconfig/caddyfile.go:18:4      - Unknown word (caddyevents)   -- // caddyevents: hence, it creates an
modules/caddyevents/eventsconfig/caddyfile.go:19:9      - Unknown word (eventsconfig)  -- package eventsconfig
modules/caddyevents/eventsconfig/caddyfile.go:24:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyevents/eventsconfig/caddyfile.go:24:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig"
modules/caddyevents/eventsconfig/caddyfile.go:25:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyevents/eventsconfig/caddyfile.go:25:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyevents/eventsconfig/caddyfile.go:25:47     - Unknown word (caddyfile)     -- caddy/v2/caddyconfig/caddyfile"
modules/caddyevents/eventsconfig/caddyfile.go:26:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyevents/eventsconfig/caddyfile.go:26:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyevents/eventsconfig/caddyfile.go:26:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyevents/eventsconfig/caddyfile.go:27:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyevents
modules/caddyevents/eventsconfig/caddyfile.go:27:43     - Unknown word (caddyevents)   -- caddyserver/caddy/v2/modules/caddyevents"
modules/caddyevents/eventsconfig/caddyfile.go:31:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterGlobalOption
modules/caddyevents/eventsconfig/caddyfile.go:34:56     - Unknown word (Caddyfile)     -- global option from Caddyfile to set up the events
modules/caddyevents/eventsconfig/caddyfile.go:42:18     - Unknown word (caddyfile)     -- func parseApp(d *caddyfile.Dispenser, _ any) (any
modules/caddyevents/eventsconfig/caddyfile.go:44:13     - Unknown word (caddyevents)   -- app := new(caddyevents.App)
modules/caddyevents/eventsconfig/caddyfile.go:61:16     - Unknown word (caddyfile)     -- unm, err := caddyfile.UnmarshalModule(d, modID
modules/caddyevents/eventsconfig/caddyfile.go:69:6      - Unknown word (caddyconfig)   -- caddyconfig.JSONModuleObject(unm
modules/caddyevents/eventsconfig/caddyfile.go:78:9      - Unknown word (httpcaddyfile) -- return httpcaddyfile.App{
modules/caddyevents/eventsconfig/caddyfile.go:80:10     - Unknown word (caddyconfig)   -- Value: caddyconfig.JSON(app, nil),
modules/caddyfs/filesystem.go:101:15    - Unknown word (caddyfile)     -- unm, err := caddyfile.UnmarshalModule(d, modID
modules/caddyfs/filesystem.go:105:3     - Unknown word (fsys)          -- fsys, ok := unm.(fs.FS)
modules/caddyfs/filesystem.go:107:13    - Unknown word (Errf)          -- return d.Errf("module %s (%T) is not
modules/caddyfs/filesystem.go:109:21    - Unknown word (caddyconfig)   -- f.FileSystemRaw = caddyconfig.JSONModuleObject(fsys
modules/caddyfs/filesystem.go:109:50    - Unknown word (fsys)          -- caddyconfig.JSONModuleObject(fsys, "backend", name, nil
modules/caddyfs/filesystem.go:10:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyfs/filesystem.go:11:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyfs/filesystem.go:11:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddyfs/filesystem.go:12:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyfs/filesystem.go:12:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyfs/filesystem.go:12:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyfs/filesystem.go:13:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyfs/filesystem.go:13:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyfs/filesystem.go:13:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyfs/filesystem.go:18:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterGlobalOption
modules/caddyfs/filesystem.go:1:9       - Unknown word (caddyfs)    -- package caddyfs
modules/caddyfs/filesystem.go:34:26     - Unknown word (caddyfile)     -- parseFilesystems(d *caddyfile.Dispenser, existingVal
modules/caddyfs/filesystem.go:41:20     - Unknown word (Caddyfile)     -- err := x.UnmarshalCaddyfile(d)
modules/caddyfs/filesystem.go:89:32     - Unknown word (Caddyfile)     -- moduleEntry) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyfs/filesystem.go:89:45     - Unknown word (caddyfile)     -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/app.go:116:26    - Unknown word (ALPN)        -- solving the ACME TLS-ALPN challenges, or whenever
modules/caddyhttp/app.go:152:10    - Unknown word (caddytls)    -- tlsApp *caddytls.TLS
modules/caddyhttp/app.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/app.go:169:8     - Unknown word (Iface)       -- tlsAppIface, err := ctx.App("tls
modules/caddyhttp/app.go:173:21    - Unknown word (Iface)       -- app.tlsApp = tlsAppIface.(*caddytls.TLS)
modules/caddyhttp/app.go:173:29    - Unknown word (caddytls)    -- tlsApp = tlsAppIface.(*caddytls.TLS)
modules/caddyhttp/app.go:177:11    - Unknown word (Iface)       -- eventsAppIface, err := ctx.App("events
modules/caddyhttp/app.go:202:25    - Unknown word (Iface)       -- srv.events = eventsAppIface.(*caddyevents.App)
modules/caddyhttp/app.go:202:33    - Unknown word (caddyevents) -- events = eventsAppIface.(*caddyevents.App)
modules/caddyhttp/app.go:33:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/app.go:34:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyevents
modules/caddyhttp/app.go:34:43     - Unknown word (caddyevents) -- caddyserver/caddy/v2/modules/caddyevents"
modules/caddyhttp/app.go:35:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddytls
modules/caddyhttp/app.go:35:43     - Unknown word (caddytls)    -- caddyserver/caddy/v2/modules/caddytls"
modules/caddyhttp/app.go:447:57    - Unknown word (stdlib)      -- NewStdLogAt(app.logger.Named("stdlib"), zap.DebugLevel)
modules/caddyhttp/app.go:479:12    - Unknown word (alpn)        -- for i, alpn := range cp.ALPN {
modules/caddyhttp/app.go:479:29    - Unknown word (ALPN)        -- i, alpn := range cp.ALPN {
modules/caddyhttp/app.go:480:9     - Unknown word (alpn)        -- if alpn == "h2" {
modules/caddyhttp/app.go:481:10    - Unknown word (ALPN)        -- cp.ALPN = append(cp.ALPN[:i
modules/caddyhttp/app.go:481:27    - Unknown word (ALPN)        -- cp.ALPN = append(cp.ALPN[:i], cp.ALPN[i+1:].
modules/caddyhttp/app.go:481:40    - Unknown word (ALPN)        -- append(cp.ALPN[:i], cp.ALPN[i+1:]...)
modules/caddyhttp/app.go:487:6     - Unknown word (nolint)      -- //nolint:errcheck
modules/caddyhttp/app.go:524:5     - Unknown word (hostport)    -- hostport := listenAddr.JoinHostPort
modules/caddyhttp/app.go:531:69    - Unknown word (hostport)    -- zap.String("addr", hostport))
modules/caddyhttp/app.go:541:26    - Unknown word (hostport)    -- zap.String("addr", hostport))
modules/caddyhttp/app.go:603:9     - Unknown word (nolint)      -- //nolint:errcheck
modules/caddyhttp/app.go:612:26    - Unknown word (hostport)    -- zap.String("addr", hostport))
modules/caddyhttp/app.go:62:19     - Unknown word (hostport)    -- // `{http.request.hostport}` | The host and port
modules/caddyhttp/autohttps.go:140:26    - Unknown word (caddytls)    -- srv.TLSConnPolicies = caddytls.ConnectionPolicies{new
modules/caddyhttp/autohttps.go:140:58    - Unknown word (caddytls)    -- ConnectionPolicies{new(caddytls.ConnectionPolicy)}
modules/caddyhttp/autohttps.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/autohttps.go:205:18    - Unknown word (hostnames)   -- // for all the hostnames we found, filter them
modules/caddyhttp/autohttps.go:212:8     - Unknown word (certmagic)   -- if certmagic.SubjectQualifiesForCert
modules/caddyhttp/autohttps.go:240:26    - Unknown word (caddytls)    -- srv.TLSConnPolicies = caddytls.ConnectionPolicies{new
modules/caddyhttp/autohttps.go:240:58    - Unknown word (caddytls)    -- ConnectionPolicies{new(caddytls.ConnectionPolicy)}
modules/caddyhttp/autohttps.go:244:27    - Unknown word (Redir)       -- srv.AutoHTTPS.DisableRedir {
modules/caddyhttp/autohttps.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddyhttp/autohttps.go:24:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddyhttp/autohttps.go:270:31    - Unknown word (redir)       -- redirDomains[""] = append(redirDomains[""], addr)
modules/caddyhttp/autohttps.go:270:5     - Unknown word (redir)       -- redirDomains[""] = append
modules/caddyhttp/autohttps.go:278:17    - Unknown word (redir)       -- if _, ok := redirDomains[d]; !ok ||
modules/caddyhttp/autohttps.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/autohttps.go:280:6     - Unknown word (redir)       -- redirDomains[d] = append(redirDomai
modules/caddyhttp/autohttps.go:289:16    - Unknown word (tailscale)   -- var internal, tailscale []string
modules/caddyhttp/autohttps.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddytls
modules/caddyhttp/autohttps.go:28:43     - Unknown word (caddytls)    -- caddyserver/caddy/v2/modules/caddytls"
modules/caddyhttp/autohttps.go:292:9     - Unknown word (Tailscale)   -- if !isTailscaleDomain(d) {
modules/caddyhttp/autohttps.go:295:21    - Unknown word (Tailscale)   -- // unless it's a Tailscale domain, because we don
modules/caddyhttp/autohttps.go:324:16    - Unknown word (tailscale)   -- // we handle tailscale domains specially, and
modules/caddyhttp/autohttps.go:325:43    - Unknown word (certmagic)   -- self-signed certs); certmagic does not consider public
modules/caddyhttp/autohttps.go:331:34    - Unknown word (certmagic)   -- usingDefaultIssuersAndIsIP := certmagic.SubjectIsIP(ident)
modules/caddyhttp/autohttps.go:333:12    - Unknown word (certmagic)   -- return !certmagic.SubjectQualifiesForPublicCert
modules/caddyhttp/autohttps.go:335:8     - Unknown word (Tailscale)   -- if isTailscaleDomain(d) {
modules/caddyhttp/autohttps.go:336:23    - Unknown word (tailscale)   -- tailscale = append(tailscale, d)
modules/caddyhttp/autohttps.go:336:4     - Unknown word (tailscale)   -- tailscale = append(tailscale,
modules/caddyhttp/autohttps.go:343:53    - Unknown word (tailscale)   -- mationPolicies(ctx, internal, tailscale)
modules/caddyhttp/autohttps.go:34:15     - Unknown word (hostnames)   -- // qualifying hostnames are available from the
modules/caddyhttp/autohttps.go:380:25    - Unknown word (Redir)       -- redirRoute := app.makeRedirRoute(addr.StartPort
modules/caddyhttp/autohttps.go:392:30    - Unknown word (hostnames)   -- demand TLS means that hostnames may be used which are
modules/caddyhttp/autohttps.go:396:39    - Unknown word (hostnames)   -- handle unexpected/new hostnames... however, it's
modules/caddyhttp/autohttps.go:408:33    - Unknown word (Redir)       -- append(routes, app.makeRedirRoute(uint(app.httpsPort
modules/caddyhttp/autohttps.go:43:9      - Unknown word (Redir)       -- DisableRedir bool `json:"disable
modules/caddyhttp/autohttps.go:473:21    - Unknown word (Redir)       -- func (app *App) makeRedirRoute(redirToPort uint
modules/caddyhttp/autohttps.go:529:20    - Unknown word (Tailscale)   -- var ts caddytls.Tailscale
modules/caddyhttp/autohttps.go:535:12    - Unknown word (reprovision) -- // must reprovision the automation policy
modules/caddyhttp/autohttps.go:62:33     - Unknown word (hostnames)   -- certificates for qualifying hostnames. However, if
modules/caddyhttp/autohttps.go:663:44    - Unknown word (Caddyfile)   -- consider the case of a Caddyfile
modules/caddyhttp/autohttps.go:686:19    - Unknown word (Tailscale)   -- var ts caddytls.Tailscale
modules/caddyhttp/autohttps.go:720:4     - Unknown word (reprovisioned) -- // reprovisioned. acmeIssuer must not
modules/caddyhttp/autohttps.go:737:28    - Unknown word (TLSALPN)       -- acmeIssuer.Challenges.TLSALPN == nil {
modules/caddyhttp/autohttps.go:738:26    - Unknown word (TLSALPN)       -- acmeIssuer.Challenges.TLSALPN = new(caddytls.TLSALPNChallen
modules/caddyhttp/autohttps.go:738:49    - Unknown word (TLSALPN)       -- TLSALPN = new(caddytls.TLSALPNChallengeConfig)
modules/caddyhttp/autohttps.go:741:28    - Unknown word (TLSALPN)       -- acmeIssuer.Challenges.TLSALPN.AlternatePort == 0
modules/caddyhttp/autohttps.go:742:26    - Unknown word (TLSALPN)       -- acmeIssuer.Challenges.TLSALPN.AlternatePort = app
modules/caddyhttp/autohttps.go:93:2      - Unknown word (redir)       -- redirDomains := make(map[string
modules/caddyhttp/caddyauth/basicauth.go:15:9      - Unknown word (caddyauth)  -- package caddyauth
modules/caddyhttp/caddyauth/basicauth.go:22:2      - Unknown word (weakrand)   -- weakrand "math/rand"
modules/caddyhttp/caddyauth/basicauth.go:249:12    - Unknown word (gosec)       -- //nolint:gosec
modules/caddyhttp/caddyauth/basicauth.go:249:5     - Unknown word (nolint)      -- //nolint:gosec
modules/caddyhttp/caddyauth/basicauth.go:250:10    - Unknown word (weakrand)    -- rnd := weakrand.Intn(len(c.cache))
modules/caddyhttp/caddyauth/basicauth.go:29:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/caddyauth/basicauth.go:85:8      - Unknown word (Iface)       -- hasherIface, err := ctx.LoadModule
modules/caddyhttp/caddyauth/basicauth.go:89:19     - Unknown word (Iface)       -- hba.Hash = hasherIface.(Comparer)
modules/caddyhttp/caddyauth/caddyauth.go:126:4     - Unknown word (caddyhttp)   -- _ caddyhttp.MiddlewareHandler =
modules/caddyhttp/caddyauth/caddyauth.go:15:9      - Unknown word (caddyauth)  -- package caddyauth
modules/caddyhttp/caddyauth/caddyauth.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/caddyauth/caddyauth.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/caddyauth/caddyauth.go:25:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/caddyauth/caddyauth.go:67:18     - Unknown word (Iface)       -- for modName, modIface := range mods.(map[string
modules/caddyhttp/caddyauth/caddyauth.go:68:29     - Unknown word (Iface)       -- Providers[modName] = modIface.(Authenticator)
modules/caddyhttp/caddyauth/caddyauth.go:73:80     - Unknown word (caddyhttp)   -- *http.Request, next caddyhttp.Handler) error {
modules/caddyhttp/caddyauth/caddyauth.go:90:10     - Unknown word (caddyhttp)   -- return caddyhttp.Error(http.StatusUnauthorized
modules/caddyhttp/caddyauth/caddyfile.go:15:9      - Unknown word (caddyauth)  -- package caddyauth
modules/caddyhttp/caddyauth/caddyfile.go:18:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/caddyauth/caddyfile.go:19:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/caddyauth/caddyfile.go:19:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddyhttp/caddyauth/caddyfile.go:20:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/caddyauth/caddyfile.go:20:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/caddyauth/caddyfile.go:20:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/caddyauth/caddyfile.go:21:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/caddyauth/caddyfile.go:21:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/caddyauth/caddyfile.go:25:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/caddyauth/caddyfile.go:25:59     - Unknown word (Caddyfile)     -- erDirective("basicauth", parseCaddyfile) // deprecated
modules/caddyhttp/caddyauth/caddyfile.go:26:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/caddyauth/caddyfile.go:26:60     - Unknown word (Caddyfile)     -- rDirective("basic_auth", parseCaddyfile)
modules/caddyhttp/caddyauth/caddyfile.go:29:44     - Unknown word (Caddyfile)     -- up the handler from Caddyfile tokens. Syntax:
modules/caddyhttp/caddyauth/caddyfile.go:29:9      - Unknown word (Caddyfile)     -- // parseCaddyfile sets up the handler
modules/caddyhttp/caddyauth/caddyfile.go:37:11     - Unknown word (Caddyfile)     -- func parseCaddyfile(h httpcaddyfile.Helper
modules/caddyhttp/caddyauth/caddyfile.go:37:23     - Unknown word (httpcaddyfile) -- func parseCaddyfile(h httpcaddyfile.Helper) (caddyhttp.Middleware
modules/caddyhttp/caddyauth/caddyfile.go:37:46     - Unknown word (caddyhttp)     -- httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error
modules/caddyhttp/caddyauth/caddyfile.go:42:37     - Unknown word (caddyfile)     -- Named("config.adapter.caddyfile").Warn("the 'basicauth
modules/caddyhttp/caddyauth/caddyfile.go:68:17     - Unknown word (Errf)          -- return nil, h.Errf("unrecognized hash algorithm
modules/caddyhttp/caddyauth/caddyfile.go:71:15     - Unknown word (caddyconfig)   -- ba.HashRaw = caddyconfig.JSONModuleObject(cmp
modules/caddyhttp/caddyauth/caddyfile.go:94:18     - Unknown word (caddyconfig)   -- "http_basic": caddyconfig.JSON(ba, nil),
modules/caddyhttp/caddyauth/command.go:15:9      - Unknown word (caddyauth)  -- package caddyauth
modules/caddyhttp/caddyauth/command.go:27:2      - Unknown word (caddycmd)   -- caddycmd "github.com/caddyserver
modules/caddyhttp/caddyauth/command.go:27:23     - Unknown word (caddyserver) -- caddycmd "github.com/caddyserver/caddy/v2/cmd"
modules/caddyhttp/caddyauth/command.go:29:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/caddyauth/command.go:33:2      - Unknown word (caddycmd)    -- caddycmd.RegisterCommand(caddycmd
modules/caddyhttp/caddyauth/command.go:33:27     - Unknown word (caddycmd)    -- caddycmd.RegisterCommand(caddycmd.Command{
modules/caddyhttp/caddyauth/command.go:50:15     - Unknown word (caddycmd)    -- cmd.RunE = caddycmd.WrapCommandFuncForCobra
modules/caddyhttp/caddyauth/command.go:55:25     - Unknown word (caddycmd)    -- func cmdHashPassword(fs caddycmd.Flags) (int, error)
modules/caddyhttp/caddyauth/hashes.go:15:9      - Unknown word (caddyauth)  -- package caddyauth
modules/caddyhttp/caddyauth/hashes.go:20:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/caddyauth/hashes.go:58:38     - Unknown word (antitiming)  -- password --plaintext "antitiming" --algorithm "bcrypt
modules/caddyhttp/caddyauth/hashes.go:59:26     - Unknown word (ulqf)        -- return []byte("$2a$14$X3ulqf/iGxnf1k6oMZ.RZeJUoqI
modules/caddyhttp/caddyauth/hashes.go:59:32     - Unknown word (Gxnf)        -- byte("$2a$14$X3ulqf/iGxnf1k6oMZ.RZeJUoqI9PX2PM
modules/caddyhttp/caddyauth/hashes.go:59:69     - Unknown word (LGXG)        -- RZeJUoqI9PX2PM4rS5lkIKJXduLGXGPrt6")
modules/caddyhttp/caddyhttp.go:137:30    - Unknown word (unmarshals)  -- WeakString is a type that unmarshals any JSON value
modules/caddyhttp/caddyhttp.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/caddyhttp.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/caddyhttp.go:29:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/caddyhttp.go:29:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/caddyhttp.go:29:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/caddyhttp.go:309:39    - Unknown word (Caddyfile)   -- sPlaceholderWrapper) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/caddyhttp.go:309:52    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error { return
modules/caddyhttp/caddyhttp.go:324:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*tlsPlaceholde
modules/caddyhttp/caddyhttp_test.go:113:25    - Unknown word (cwindows)   -- inputPath: `/..%5cwindows%5cwin.ini`,
modules/caddyhttp/caddyhttp_test.go:113:35    - Unknown word (cwin)       -- `/..%5cwindows%5cwin.ini`,
modules/caddyhttp/caddyhttp_test.go:119:70    - Unknown word (cwindows)   -- c..%5c..%5c..%5c..%5cwindows%5cwin.ini`,
modules/caddyhttp/caddyhttp_test.go:119:80    - Unknown word (cwin)       -- c..%5c..%5cwindows%5cwin.ini`,
modules/caddyhttp/caddyhttp_test.go:1:9       - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/caddyhttp_test.go:63:21     - Unknown word (fbar)       -- inputPath: "/..%2fbar",
modules/caddyhttp/caddyhttp_test.go:68:25     - Unknown word (fbar)       -- inputPath: "/%2e%2e%2fbar",
modules/caddyhttp/caddyhttp_test.go:80:22     - Unknown word (fbar)       -- inputPath: "/foo%2fbar",
modules/caddyhttp/caddyhttp_test.go:85:24     - Unknown word (fbar)       -- inputPath: "/foo%252fbar",
modules/caddyhttp/caddyhttp_test.go:86:45     - Unknown word (fbar)       -- FromSlash("/a/b/foo%2fbar"),
modules/caddyhttp/celmatcher.go:104:18    - Unknown word (unmarshals)  -- // UnmarshalJSON unmarshals m's expression.
modules/caddyhttp/celmatcher.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/celmatcher.go:218:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile implements caddyfile
modules/caddyhttp/celmatcher.go:218:34    - Unknown word (caddyfile)   -- UnmarshalCaddyfile implements caddyfile.Unmarshaler.
modules/caddyhttp/celmatcher.go:219:36    - Unknown word (Caddyfile)   -- MatchExpression) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/celmatcher.go:219:49    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/celmatcher.go:238:48    - Unknown word (Caddyfile)   -- commonly quotes are used in Caddyfile to
modules/caddyhttp/celmatcher.go:244:30    - Unknown word (caddyfile)   -- d.GetContextString(caddyfile.MatcherNameCtxKey)
modules/caddyhttp/celmatcher.go:41:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/celmatcher.go:42:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/celmatcher.go:42:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/celmatcher.go:42:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/celmatcher.go:435:62    - Unknown word (setes)       -- matcherLibrary from option setes.
modules/caddyhttp/celmatcher.go:604:8     - Unknown word (Iface)       -- mapStrIface := mapStrRaw.(map[string
modules/caddyhttp/celmatcher.go:605:55    - Unknown word (Iface)       -- []string, len(mapStrIface))
modules/caddyhttp/celmatcher.go:606:26    - Unknown word (Iface)       -- k, v := range mapStrIface {
modules/caddyhttp/celmatcher.go:738:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*MatchExpressi
modules/caddyhttp/celmatcher_test.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/celmatcher_test.go:26:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/celmatcher_test.go:57:60     - Unknown word (localdomain) -- subject} == 'CN=client.localdomain'",
modules/caddyhttp/encode/brotli/brotli_precompressed.go:1:9       - Unknown word (caddybrotli) -- package caddybrotli
modules/caddyhttp/encode/brotli/brotli_precompressed.go:4:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/encode/brotli/brotli_precompressed.go:5:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/encode/brotli/brotli_precompressed.go:5:43      - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/encode"
modules/caddyhttp/encode/caddyfile.go:104:14    - Unknown word (Errf)          -- return d.Errf("module %s is not an
modules/caddyhttp/encode/caddyfile.go:109:29    - Unknown word (caddyconfig)   -- EncodingsRaw[name] = caddyconfig.JSON(encoding, nil)
modules/caddyhttp/encode/caddyfile.go:121:7     - Unknown word (caddyfile)     -- var _ caddyfile.Unmarshaler = (*Encode
modules/caddyhttp/encode/caddyfile.go:20:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/encode/caddyfile.go:21:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/encode/caddyfile.go:21:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddyhttp/encode/caddyfile.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/encode/caddyfile.go:22:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/encode/caddyfile.go:22:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/encode/caddyfile.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/encode/caddyfile.go:23:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/encode/caddyfile.go:23:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/encode/caddyfile.go:24:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/encode/caddyfile.go:24:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/encode/caddyfile.go:28:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/encode/caddyfile.go:28:56     - Unknown word (Caddyfile)     -- ndlerDirective("encode", parseCaddyfile)
modules/caddyhttp/encode/caddyfile.go:31:11     - Unknown word (Caddyfile)     -- func parseCaddyfile(h httpcaddyfile.Helper
modules/caddyhttp/encode/caddyfile.go:31:23     - Unknown word (httpcaddyfile) -- func parseCaddyfile(h httpcaddyfile.Helper) (caddyhttp.Middleware
modules/caddyhttp/encode/caddyfile.go:31:46     - Unknown word (caddyhttp)     -- httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error
modules/caddyhttp/encode/caddyfile.go:33:22     - Unknown word (Caddyfile)     -- err := enc.UnmarshalCaddyfile(h.Dispenser)
modules/caddyhttp/encode/caddyfile.go:40:13     - Unknown word (Caddyfile)     -- // UnmarshalCaddyfile sets up the handler
modules/caddyhttp/encode/caddyfile.go:40:48     - Unknown word (Caddyfile)     -- up the handler from Caddyfile tokens. Syntax:
modules/caddyhttp/encode/caddyfile.go:44:8      - Unknown word (zstd)          -- // zstd
modules/caddyhttp/encode/caddyfile.go:56:42     - Unknown word (caddyfile)     -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/encode/caddyfile.go:63:13     - Unknown word (Errf)          -- return d.Errf("finding encoder module
modules/caddyhttp/encode/caddyfile.go:67:13     - Unknown word (Errf)          -- return d.Errf("module %s is not an
modules/caddyhttp/encode/caddyfile.go:72:27     - Unknown word (caddyconfig)   -- EncodingsRaw[arg] = caddyconfig.JSON(encoding, nil)
modules/caddyhttp/encode/caddyfile.go:76:38     - Unknown word (caddyhttp)     -- seMatchers := make(map[string]caddyhttp.ResponseMatcher)
modules/caddyhttp/encode/caddyfile.go:89:11     - Unknown word (caddyhttp)     -- err := caddyhttp.ParseNamedResponseMatcher
modules/caddyhttp/encode/caddyfile.go:98:16     - Unknown word (caddyfile)     -- unm, err := caddyfile.UnmarshalModule(d, modID
modules/caddyhttp/encode/encode.go:105:26    - Unknown word (fontobject)  -- "application/vnd.ms-fontobject*",
modules/caddyhttp/encode/encode.go:109:21    - Unknown word (opentype)    -- "application/x-opentype*",
modules/caddyhttp/encode/encode.go:153:75    - Unknown word (caddyhttp)   -- *http.Request, next caddyhttp.Handler) error {
modules/caddyhttp/encode/encode.go:19:65     - Unknown word (Httpgzip)   -- Copyright (c) 2015 The Httpgzip Authors.
modules/caddyhttp/encode/encode.go:212:28    - Unknown word (caddyhttp)   -- rww, ok := wrappedRW.(*caddyhttp.ResponseWriterWrapper
modules/caddyhttp/encode/encode.go:278:11    - Unknown word (bodyclose)   -- //nolint:bodyclose
modules/caddyhttp/encode/encode.go:278:4     - Unknown word (nolint)      -- //nolint:bodyclose
modules/caddyhttp/encode/encode.go:329:4     - Unknown word (deallocates) -- // deallocates any active resources
modules/caddyhttp/encode/encode.go:33:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/encode/encode.go:34:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/encode/encode.go:34:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/encode/encode.go:414:2     - Unknown word (prefs)       -- prefs := []encodingPreference
modules/caddyhttp/encode/encode.go:450:18    - Unknown word (prefs)       -- prefs = append(prefs, encodingPreference
modules/caddyhttp/encode/encode.go:450:3     - Unknown word (prefs)       -- prefs = append(prefs, encodingPrefe
modules/caddyhttp/encode/encode.go:458:13    - Unknown word (prefs)       -- sort.Slice(prefs, func(i, j int) bool
modules/caddyhttp/encode/encode.go:459:15    - Unknown word (prefs)       -- if math.Abs(prefs[i].q-prefs[j].q) <
modules/caddyhttp/encode/encode.go:53:59     - Unknown word (Mmatcher)    -- against this ResponseMmatcher.
modules/caddyhttp/encode/encode.go:55:11     - Unknown word (caddyhttp)   -- Matcher *caddyhttp.ResponseMatcher `json
modules/caddyhttp/encode/encode.go:74:18     - Unknown word (Iface)       -- for modName, modIface := range mods.(map[string
modules/caddyhttp/encode/encode.go:75:28     - Unknown word (Iface)       -- enc.addEncoding(modIface.(Encoding))
modules/caddyhttp/encode/encode.go:87:18     - Unknown word (caddyhttp)   -- enc.Matcher = &caddyhttp.ResponseMatcher{
modules/caddyhttp/encode/encode.go:99:19     - Unknown word (opentype)    -- "application/opentype*",
modules/caddyhttp/encode/encode_test.go:25:34     - Unknown word (zstd)       -- "deflate, gzip, br, zstd",
modules/caddyhttp/encode/encode_test.go:26:24     - Unknown word (zstd)       -- prefer: []string{"zstd", "br", "gzip"},
modules/caddyhttp/encode/encode_test.go:27:24     - Unknown word (zstd)       -- expected: []string{"zstd", "br", "gzip", "deflate
modules/caddyhttp/encode/encode_test.go:31:24     - Unknown word (zstd)       -- accept: "deflate, zstd",
modules/caddyhttp/encode/encode_test.go:32:24     - Unknown word (zstd)       -- prefer: []string{"zstd", "br", "gzip"},
modules/caddyhttp/encode/gzip/gzip.go:15:9      - Unknown word (caddygzip)  -- package caddygzip
modules/caddyhttp/encode/gzip/gzip.go:21:14     - Unknown word (klauspost)  -- "github.com/klauspost/compress/gzip"
modules/caddyhttp/encode/gzip/gzip.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/encode/gzip/gzip.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/encode/gzip/gzip.go:24:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/encode/gzip/gzip.go:24:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/encode/gzip/gzip.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/encode/gzip/gzip.go:25:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/encode"
modules/caddyhttp/encode/gzip/gzip.go:45:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the handler
modules/caddyhttp/encode/gzip/gzip.go:45:48     - Unknown word (Caddyfile)   -- up the handler from Caddyfile tokens.
modules/caddyhttp/encode/gzip/gzip.go:46:25     - Unknown word (Caddyfile)   -- func (g *Gzip) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/encode/gzip/gzip.go:46:38     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/encode/gzip/gzip.go:97:4      - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*Gzip
modules/caddyhttp/encode/gzip/gzip_precompressed.go:1:9       - Unknown word (caddygzip)  -- package caddygzip
modules/caddyhttp/encode/gzip/gzip_precompressed.go:4:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/encode/gzip/gzip_precompressed.go:5:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/encode/gzip/gzip_precompressed.go:5:43      - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/encode"
modules/caddyhttp/encode/zstd/zstd.go:106:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*Zstd
modules/caddyhttp/encode/zstd/zstd.go:15:9      - Unknown word (caddyzstd)  -- package caddyzstd
modules/caddyhttp/encode/zstd/zstd.go:20:14     - Unknown word (klauspost)  -- "github.com/klauspost/compress/zstd"
modules/caddyhttp/encode/zstd/zstd.go:20:33     - Unknown word (zstd)       -- com/klauspost/compress/zstd"
modules/caddyhttp/encode/zstd/zstd.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/encode/zstd/zstd.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/encode/zstd/zstd.go:23:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/encode/zstd/zstd.go:23:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/encode/zstd/zstd.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/encode/zstd/zstd.go:24:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/encode"
modules/caddyhttp/encode/zstd/zstd.go:28:23     - Unknown word (Zstd)        -- caddy.RegisterModule(Zstd{})
modules/caddyhttp/encode/zstd/zstd.go:31:20     - Unknown word (Zstandard)   -- // Zstd can create Zstandard encoders.
modules/caddyhttp/encode/zstd/zstd.go:31:4      - Unknown word (Zstd)        -- // Zstd can create Zstandard
modules/caddyhttp/encode/zstd/zstd.go:32:6      - Unknown word (Zstd)        -- type Zstd struct {
modules/caddyhttp/encode/zstd/zstd.go:36:58     - Unknown word (zstd)        -- constants value from zstd.SpeedFastest to zstd
modules/caddyhttp/encode/zstd/zstd.go:36:79     - Unknown word (zstd)        -- zstd.SpeedFastest to zstd.SpeedBestCompression
modules/caddyhttp/encode/zstd/zstd.go:37:8      - Unknown word (zstd)        -- level zstd.EncoderLevel
modules/caddyhttp/encode/zstd/zstd.go:41:7      - Unknown word (Zstd)        -- func (Zstd) CaddyModule() caddy
modules/caddyhttp/encode/zstd/zstd.go:43:23     - Unknown word (zstd)        -- ID: "http.encoders.zstd",
modules/caddyhttp/encode/zstd/zstd.go:44:41     - Unknown word (Zstd)        -- Module { return new(Zstd) },
modules/caddyhttp/encode/zstd/zstd.go:48:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the handler
modules/caddyhttp/encode/zstd/zstd.go:48:48     - Unknown word (Caddyfile)   -- up the handler from Caddyfile tokens.
modules/caddyhttp/encode/zstd/zstd.go:49:25     - Unknown word (Caddyfile)   -- func (z *Zstd) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/encode/zstd/zstd.go:49:38     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/encode/zstd/zstd.go:56:12     - Unknown word (Errf)        -- return d.Errf("unexpected compression
modules/caddyhttp/encode/zstd/zstd.go:88:29     - Unknown word (Zstandard)   -- NewEncoder returns a new Zstandard writer.
modules/caddyhttp/encode/zstd/zstd_precompressed.go:12:4      - Unknown word (Zstd)        -- // ZstdPrecompressed provides
modules/caddyhttp/encode/zstd/zstd_precompressed.go:12:79     - Unknown word (zstandard)   -- files precompressed with zstandard encoding.
modules/caddyhttp/encode/zstd/zstd_precompressed.go:13:6      - Unknown word (Zstd)        -- type ZstdPrecompressed struct
modules/caddyhttp/encode/zstd/zstd_precompressed.go:14:2      - Unknown word (Zstd)        -- Zstd
modules/caddyhttp/encode/zstd/zstd_precompressed.go:18:7      - Unknown word (Zstd)        -- func (ZstdPrecompressed) CaddyModule
modules/caddyhttp/encode/zstd/zstd_precompressed.go:1:9       - Unknown word (caddyzstd)  -- package caddyzstd
modules/caddyhttp/encode/zstd/zstd_precompressed.go:20:28     - Unknown word (zstd)        -- "http.precompressed.zstd",
modules/caddyhttp/encode/zstd/zstd_precompressed.go:4:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/encode/zstd/zstd_precompressed.go:5:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/encode/zstd/zstd_precompressed.go:5:43      - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/encode"
modules/caddyhttp/encode/zstd/zstd_precompressed.go:9:23      - Unknown word (Zstd)        -- caddy.RegisterModule(ZstdPrecompressed{})
modules/caddyhttp/errors.go:100:12    - Unknown word (gosec)                     -- //nolint:gosec
modules/caddyhttp/errors.go:100:5     - Unknown word (nolint)                    -- //nolint:gosec
modules/caddyhttp/errors.go:101:15    - Unknown word (weakrand)                  -- b[i] = dict[weakrand.Int63()%int64(len(dict
modules/caddyhttp/errors.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/errors.go:20:2      - Unknown word (weakrand)   -- weakrand "math/rand"
modules/caddyhttp/errors.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/errors.go:94:18     - Unknown word (abcdefghijkmnopqrstuvwxyz) -- dict := []byte("abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRTUVWXY
modules/caddyhttp/errors.go:94:43     - Unknown word (ABCDEFGHJKLMNPQRTUVWXY)    -- abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRTUVWXY23456789")
modules/caddyhttp/errors.go:96:18     - Unknown word (abcdefghijkmnpqrstuvwxyz)  -- dict = []byte("abcdefghijkmnpqrstuvwxyz0123456789")
modules/caddyhttp/fileserver/browse.go:103:14    - Unknown word (fsrv)         -- dir, err := fsrv.openFile(fileSystem
modules/caddyhttp/fileserver/browse.go:112:18    - Unknown word (fsrv)         -- listing, err := fsrv.loadDirectoryContents
modules/caddyhttp/fileserver/browse.go:115:10    - Unknown word (caddyhttp)    -- return caddyhttp.Error(http.StatusForbidden
modules/caddyhttp/fileserver/browse.go:225:20    - Unknown word (Caddyfile)    -- // The configs in Caddyfile have lower priority
modules/caddyhttp/fileserver/browse.go:38:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/fileserver/browse.go:39:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/fileserver/browse.go:39:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/fileserver/browse.go:40:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/fileserver/browse.go:40:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/templates"
modules/caddyhttp/fileserver/browse.go:62:33     - Unknown word (namedirfirst) -- sort_by: name(default), namedirfirst, size, time
modules/caddyhttp/fileserver/browse.go:71:122    - Unknown word (caddyhttp)    -- *http.Request, next caddyhttp.Handler) error {
modules/caddyhttp/fileserver/browse.go:71:7      - Unknown word (fsrv)         -- func (fsrv *FileServer) serveBrowse
modules/caddyhttp/fileserver/browse.go:72:10     - Unknown word (fsrv)         -- if c := fsrv.logger.Check(zapcore
modules/caddyhttp/fileserver/browse.go:93:31     - Unknown word (caddyhttp)    -- = r.Context().Value(caddyhttp.OriginalRequestCtxKey
modules/caddyhttp/fileserver/browse.go:96:12     - Unknown word (fsrv)         -- if c := fsrv.logger.Check(zapcore
modules/caddyhttp/fileserver/browsetplcontext.go:101:7     - Unknown word (fsrv)        -- if fsrv.Browse.RevealSymlinks
modules/caddyhttp/fileserver/browsetplcontext.go:145:37    - Unknown word (browsable)   -- parent directory is browsable.
modules/caddyhttp/fileserver/browsetplcontext.go:194:2     - Unknown word (lpath)       -- lpath := l.Path
modules/caddyhttp/fileserver/browsetplcontext.go:195:15    - Unknown word (lpath)       -- if lpath[len(lpath)-1] == '/' {
modules/caddyhttp/fileserver/browsetplcontext.go:195:5     - Unknown word (lpath)       -- if lpath[len(lpath)-1] == '/
modules/caddyhttp/fileserver/browsetplcontext.go:196:11    - Unknown word (lpath)       -- lpath = lpath[:len(lpath)-1]
modules/caddyhttp/fileserver/browsetplcontext.go:196:3     - Unknown word (lpath)       -- lpath = lpath[:len(lpath)
modules/caddyhttp/fileserver/browsetplcontext.go:34:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/fileserver/browsetplcontext.go:35:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/fileserver/browsetplcontext.go:35:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/fileserver/browsetplcontext.go:372:24    - Unknown word (namedirfirst) -- sortByNameDirFirst = "namedirfirst"
modules/caddyhttp/fileserver/browsetplcontext.go:38:7      - Unknown word (fsrv)        -- func (fsrv *FileServer) directoryListing
modules/caddyhttp/fileserver/browsetplcontext.go:39:17     - Unknown word (fsrv)        -- filesToHide := fsrv.transformHidePaths(repl
modules/caddyhttp/fileserver/browsetplcontext.go:62:12     - Unknown word (fsrv)        -- if c := fsrv.logger.Check(zapcore
modules/caddyhttp/fileserver/browsetplcontext.go:74:29     - Unknown word (fsrv)        -- := entry.IsDir() || fsrv.isSymlinkTargetDir(fileSystem
modules/caddyhttp/fileserver/browsetplcontext.go:95:12     - Unknown word (caddyhttp)   -- path := caddyhttp.SanitizedPathJoin(root
modules/caddyhttp/fileserver/browsetplcontext_test.go:72:15     - Unknown word (corge)      -- {"/qux/quux/corge/", []crumb{
modules/caddyhttp/fileserver/browsetplcontext_test.go:76:22     - Unknown word (corge)      -- {Link: "", Text: "corge"},
modules/caddyhttp/fileserver/browsetplcontext_test.go:78:6      - Unknown word (Ù…Ø¬Ù„Ø¯)       -- {"/Ù…Ø¬Ù„Ø¯/", []crumb{
modules/caddyhttp/fileserver/browsetplcontext_test.go:80:22     - Unknown word (Ù…Ø¬Ù„Ø¯)       -- {Link: "", Text: "Ù…Ø¬Ù„Ø¯"},
modules/caddyhttp/fileserver/browsetplcontext_test.go:82:13     - Unknown word (Ù…Ø¬Ù„Ø¯)       -- {"/Ù…Ø¬Ù„Ø¯-1/Ù…Ø¬Ù„Ø¯-2", []crumb{
modules/caddyhttp/fileserver/browsetplcontext_test.go:82:6      - Unknown word (Ù…Ø¬Ù„Ø¯)       -- {"/Ù…Ø¬Ù„Ø¯-1/Ù…Ø¬Ù„Ø¯-2", []crumb{
modules/caddyhttp/fileserver/browsetplcontext_test.go:84:25     - Unknown word (Ù…Ø¬Ù„Ø¯)       -- Link: "../", Text: "Ù…Ø¬Ù„Ø¯-1"},
modules/caddyhttp/fileserver/caddyfile.go:129:17    - Unknown word (Errf)          -- return d.Errf("unknown sort option
modules/caddyhttp/fileserver/caddyfile.go:133:15    - Unknown word (Errf)          -- return d.Errf("unknown subdirective
modules/caddyhttp/fileserver/caddyfile.go:143:15    - Unknown word (Errf)          -- return d.Errf("getting module named
modules/caddyhttp/fileserver/caddyfile.go:148:15    - Unknown word (Errf)          -- return d.Errf("module %s is not a
modules/caddyhttp/fileserver/caddyfile.go:153:38    - Unknown word (caddyconfig)   -- PrecompressedRaw[d.Val()] = caddyconfig.JSON(precompress, nil
modules/caddyhttp/fileserver/caddyfile.go:162:22    - Unknown word (caddyhttp)     -- fsrv.StatusCode = caddyhttp.WeakString(d.Val())
modules/caddyhttp/fileserver/caddyfile.go:185:13    - Unknown word (Errf)          -- return d.Errf("unknown subdirective
modules/caddyhttp/fileserver/caddyfile.go:193:23    - Unknown word (httpcaddyfile) -- requires having an httpcaddyfile.Helper to function,
modules/caddyhttp/fileserver/caddyfile.go:193:73    - Unknown word (Caddyfiles)    -- function, to setup hidden Caddyfiles.
modules/caddyhttp/fileserver/caddyfile.go:195:42    - Unknown word (Caddyfiles)    -- Caddyfile (and any imported Caddyfiles).
modules/caddyhttp/fileserver/caddyfile.go:199:5     - Unknown word (Caddyfiles)    -- // Caddyfiles function.
modules/caddyhttp/fileserver/caddyfile.go:200:22    - Unknown word (Caddyfiles)    -- if configFiles := h.Caddyfiles(); len(configFiles)
modules/caddyhttp/fileserver/caddyfile.go:21:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/fileserver/caddyfile.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/fileserver/caddyfile.go:22:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddyhttp/fileserver/caddyfile.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/fileserver/caddyfile.go:23:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/fileserver/caddyfile.go:23:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/fileserver/caddyfile.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/fileserver/caddyfile.go:24:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/fileserver/caddyfile.go:24:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/fileserver/caddyfile.go:25:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/fileserver/caddyfile.go:25:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/fileserver/caddyfile.go:26:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp/encode"
modules/caddyhttp/fileserver/caddyfile.go:27:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp/rewrite"
modules/caddyhttp/fileserver/caddyfile.go:316:7     - Unknown word (caddyfile)     -- var _ caddyfile.Unmarshaler = (*FileServer
modules/caddyhttp/fileserver/caddyfile.go:31:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/fileserver/caddyfile.go:31:61     - Unknown word (Caddyfile)     -- "file_server", parseCaddyfile)
modules/caddyhttp/fileserver/caddyfile.go:32:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterDirective("try
modules/caddyhttp/fileserver/caddyfile.go:35:9      - Unknown word (Caddyfile)     -- // parseCaddyfile parses the file_server
modules/caddyhttp/fileserver/caddyfile.go:36:17     - Unknown word (Caddyfile)     -- // See UnmarshalCaddyfile for the syntax.
modules/caddyhttp/fileserver/caddyfile.go:37:11     - Unknown word (Caddyfile)     -- func parseCaddyfile(h httpcaddyfile.Helper
modules/caddyhttp/fileserver/caddyfile.go:37:23     - Unknown word (httpcaddyfile) -- func parseCaddyfile(h httpcaddyfile.Helper) (caddyhttp.Middleware
modules/caddyhttp/fileserver/caddyfile.go:37:46     - Unknown word (caddyhttp)     -- httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error
modules/caddyhttp/fileserver/caddyfile.go:38:2      - Unknown word (fsrv)          -- fsrv := new(FileServer)
modules/caddyhttp/fileserver/caddyfile.go:39:23     - Unknown word (Caddyfile)     -- err := fsrv.UnmarshalCaddyfile(h.Dispenser)
modules/caddyhttp/fileserver/caddyfile.go:39:9      - Unknown word (fsrv)          -- err := fsrv.UnmarshalCaddyfile(h
modules/caddyhttp/fileserver/caddyfile.go:41:10     - Unknown word (fsrv)          -- return fsrv, err
modules/caddyhttp/fileserver/caddyfile.go:43:8      - Unknown word (fsrv)          -- err = fsrv.FinalizeUnmarshalCaddyfile
modules/caddyhttp/fileserver/caddyfile.go:47:9      - Unknown word (fsrv)          -- return fsrv, err
modules/caddyhttp/fileserver/caddyfile.go:65:32     - Unknown word (Caddyfiles)    -- finalize setup of hidden Caddyfiles.
modules/caddyhttp/fileserver/caddyfile.go:66:47     - Unknown word (caddyfile)     -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/fileserver/command.go:104:3     - Unknown word (zstd)           -- zstd, err := caddy.GetModule
modules/caddyhttp/fileserver/command.go:104:47    - Unknown word (zstd)           -- GetModule("http.encoders.zstd")
modules/caddyhttp/fileserver/command.go:114:31    - Unknown word (caddyconfig)    -- handlers = append(handlers, caddyconfig.JSONModuleObject(encode
modules/caddyhttp/fileserver/command.go:116:13    - Unknown word (caddyconfig)    -- "zstd": caddyconfig.JSON(zstd.New(), nil
modules/caddyhttp/fileserver/command.go:116:30    - Unknown word (zstd)           -- zstd": caddyconfig.JSON(zstd.New(), nil),
modules/caddyhttp/fileserver/command.go:116:6     - Unknown word (zstd)           -- "zstd": caddyconfig.JSON(zstd
modules/caddyhttp/fileserver/command.go:117:13    - Unknown word (caddyconfig)    -- "gzip": caddyconfig.JSON(gzip.New(), nil
modules/caddyhttp/fileserver/command.go:119:22    - Unknown word (zstd)           -- Prefer: []string{"zstd", "gzip"},
modules/caddyhttp/fileserver/command.go:124:14    - Unknown word (caddytpl)       -- handler := caddytpl.Templates{FileRoot:
modules/caddyhttp/fileserver/command.go:125:31    - Unknown word (caddyconfig)    -- handlers = append(handlers, caddyconfig.JSONModuleObject(handler
modules/caddyhttp/fileserver/command.go:131:28    - Unknown word (caddyhttp)      -- logic mirrors modules/caddyhttp/fileserver/caddyfile
modules/caddyhttp/fileserver/command.go:131:49    - Unknown word (caddyfile)      -- caddyhttp/fileserver/caddyfile.go case "precompressed
modules/caddyhttp/fileserver/command.go:159:11    - Unknown word (caddyhttp)      -- route := caddyhttp.Route{HandlersRaw: handlers
modules/caddyhttp/fileserver/command.go:179:32    - Unknown word (certmagic)      -- ":" + strconv.Itoa(certmagic.HTTPSPort)
modules/caddyhttp/fileserver/command.go:26:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddyhttp/fileserver/command.go:26:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddyhttp/fileserver/command.go:30:2      - Unknown word (caddycmd)    -- caddycmd "github.com/caddyserver
modules/caddyhttp/fileserver/command.go:30:23     - Unknown word (caddyserver) -- caddycmd "github.com/caddyserver/caddy/v2/cmd"
modules/caddyhttp/fileserver/command.go:32:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/fileserver/command.go:33:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/fileserver/command.go:33:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddyhttp/fileserver/command.go:34:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/fileserver/command.go:34:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/fileserver/command.go:35:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/encode"
modules/caddyhttp/fileserver/command.go:36:2      - Unknown word (caddytpl)    -- caddytpl "github.com/caddyserver
modules/caddyhttp/fileserver/command.go:36:52     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/templates"
modules/caddyhttp/fileserver/command.go:40:2      - Unknown word (caddycmd)    -- caddycmd.RegisterCommand(caddycmd
modules/caddyhttp/fileserver/command.go:40:27     - Unknown word (caddycmd)    -- caddycmd.RegisterCommand(caddycmd.Command{
modules/caddyhttp/fileserver/command.go:55:13     - Unknown word (Zstandard)   -- By default, Zstandard and Gzip compression
modules/caddyhttp/fileserver/command.go:69:57     - Unknown word (Zstandard)   -- "", false, "Disable Zstandard and Gzip compression
modules/caddyhttp/fileserver/command.go:70:72     - Unknown word (precompression) -- ]string{}, "Specify precompression file extensions. Compression
modules/caddyhttp/fileserver/command.go:71:15     - Unknown word (caddycmd)       -- cmd.RunE = caddycmd.WrapCommandFuncForCobra
modules/caddyhttp/fileserver/command.go:85:23     - Unknown word (caddycmd)       -- func cmdFileServer(fs caddycmd.Flags) (int, error)
modules/caddyhttp/fileserver/matcher.go:111:2     - Unknown word (fsmap)       -- fsmap caddy.FileSystems
modules/caddyhttp/fileserver/matcher.go:124:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the matcher
modules/caddyhttp/fileserver/matcher.go:124:48    - Unknown word (Caddyfile)   -- up the matcher from Caddyfile tokens. Syntax:
modules/caddyhttp/fileserver/matcher.go:131:30    - Unknown word (Caddyfile)   -- MatchFile) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/fileserver/matcher.go:131:43    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/fileserver/matcher.go:158:14    - Unknown word (Errf)        -- return d.Errf("unrecognized subdirective
modules/caddyhttp/fileserver/matcher.go:176:40    - Unknown word (caddyhttp)   -- func(data ref.Val) (caddyhttp.RequestMatcher, error
modules/caddyhttp/fileserver/matcher.go:177:18    - Unknown word (caddyhttp)   -- values, err := caddyhttp.CELValueToMapStrList
modules/caddyhttp/fileserver/matcher.go:211:82    - Unknown word (caddyhttp)   -- cel.Type{requestType, caddyhttp.CELTypeJSON}, cel.BoolType
modules/caddyhttp/fileserver/matcher.go:213:62    - Unknown word (caddyhttp)   -- cel.Type{requestType, caddyhttp.CELTypeJSON}, cel.BoolType
modules/caddyhttp/fileserver/matcher.go:276:4     - Unknown word (fsmap)       -- m.fsmap = ctx.Filesystems()
modules/caddyhttp/fileserver/matcher.go:328:22    - Unknown word (fsmap)       -- fileSystem, ok := m.fsmap.Get(fsName)
modules/caddyhttp/fileserver/matcher.go:336:3     - Unknown word (fullpath)    -- fullpath, relative, splitRemainder
modules/caddyhttp/fileserver/matcher.go:38:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/fileserver/matcher.go:398:5     - Unknown word (fullpath)    -- fullpath: result,
modules/caddyhttp/fileserver/matcher.go:39:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/fileserver/matcher.go:39:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/fileserver/matcher.go:39:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/fileserver/matcher.go:40:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/fileserver/matcher.go:40:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/fileserver/matcher.go:410:70    - Unknown word (fullpath)    -- filepath.ToSlash(candidate.fullpath))
modules/caddyhttp/fileserver/matcher.go:430:57    - Unknown word (fullpath)    -- trictFileExists(fileSystem, c.fullpath); exists {
modules/caddyhttp/fileserver/matcher.go:444:40    - Unknown word (fullpath)    -- fs.Stat(fileSystem, c.fullpath)
modules/caddyhttp/fileserver/matcher.go:570:2     - Unknown word (nlen)        -- nlen := len(needle)
modules/caddyhttp/fileserver/matcher.go:571:16    - Unknown word (nlen)        -- for i := 0; i+nlen < len(haystack); i+
modules/caddyhttp/fileserver/matcher.go:572:37    - Unknown word (nlen)        -- EqualFold(haystack[i:i+nlen], needle) {
modules/caddyhttp/fileserver/matcher.go:689:40    - Unknown word (godoc)       -- Note that the filepath godoc states that
modules/caddyhttp/fileserver/matcher_test.go:120:4     - Unknown word (fsmap)       -- fsmap: &filesystems.FilesystemMa
modules/caddyhttp/fileserver/matcher_test.go:131:11    - Unknown word (caddyhttp)   -- repl := caddyhttp.NewTestReplacer(req
modules/caddyhttp/fileserver/matcher_test.go:189:15    - Unknown word (missingfile) -- path: "/missingfile.php",
modules/caddyhttp/fileserver/matcher_test.go:193:20    - Unknown word (notphp)      -- path: "/notphp.php.txt",
modules/caddyhttp/fileserver/matcher_test.go:194:20    - Unknown word (notphp)      -- expectedPath: "/notphp.php.txt",
modules/caddyhttp/fileserver/matcher_test.go:199:20    - Unknown word (notphp)      -- path: "/notphp.php.txt/",
modules/caddyhttp/fileserver/matcher_test.go:200:20    - Unknown word (notphp)      -- expectedPath: "/notphp.php.txt",
modules/caddyhttp/fileserver/matcher_test.go:205:15    - Unknown word (notphp)      -- path: "/notphp.php.txt.suffixed",
modules/caddyhttp/fileserver/matcher_test.go:229:4     - Unknown word (fsmap)       -- fsmap: &filesystems.FilesystemM
modules/caddyhttp/fileserver/matcher_test.go:241:11    - Unknown word (caddyhttp)   -- repl := caddyhttp.NewTestReplacer(req
modules/caddyhttp/fileserver/matcher_test.go:26:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/fileserver/matcher_test.go:270:3     - Unknown word (fsmap)       -- fsmap: &filesystems.FilesystemM
modules/caddyhttp/fileserver/matcher_test.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/internal/filesystems
modules/caddyhttp/fileserver/matcher_test.go:285:21    - Unknown word (caddyhttp)   -- expression *caddyhttp.MatchExpression
modules/caddyhttp/fileserver/matcher_test.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/fileserver/matcher_test.go:28:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/fileserver/matcher_test.go:296:16    - Unknown word (caddyhttp)   -- expression: &caddyhttp.MatchExpression{
modules/caddyhttp/fileserver/matcher_test.go:73:20     - Unknown word (foodir)      -- path: "/foodir",
modules/caddyhttp/fileserver/matcher_test.go:74:20     - Unknown word (foodir)      -- expectedPath: "/foodir/",
modules/caddyhttp/fileserver/matcher_test.go:79:20     - Unknown word (foodir)      -- path: "/foodir/",
modules/caddyhttp/fileserver/matcher_test.go:80:20     - Unknown word (foodir)      -- expectedPath: "/foodir/",
modules/caddyhttp/fileserver/matcher_test.go:85:20     - Unknown word (foodir)      -- path: "/foodir/foo.txt",
modules/caddyhttp/fileserver/matcher_test.go:91:15     - Unknown word (missingfile) -- path: "/missingfile.php",
modules/caddyhttp/fileserver/staticfiles.go:126:51    - Unknown word (explictness) -- maximum clarity and explictness, use complete,
modules/caddyhttp/fileserver/staticfiles.go:150:13    - Unknown word (caddyhttp)   -- StatusCode caddyhttp.WeakString `json:"status
modules/caddyhttp/fileserver/staticfiles.go:172:2     - Unknown word (fsmap)       -- fsmap caddy.FileSystems
modules/caddyhttp/fileserver/staticfiles.go:186:7     - Unknown word (fsrv)        -- func (fsrv *FileServer) Provision
modules/caddyhttp/fileserver/staticfiles.go:187:2     - Unknown word (fsrv)        -- fsrv.logger = ctx.Logger
modules/caddyhttp/fileserver/staticfiles.go:189:2     - Unknown word (fsrv)        -- fsrv.fsmap = ctx.Filesystems
modules/caddyhttp/fileserver/staticfiles.go:189:7     - Unknown word (fsmap)       -- fsrv.fsmap = ctx.Filesystems()
modules/caddyhttp/fileserver/staticfiles.go:191:5     - Unknown word (fsrv)        -- if fsrv.FileSystem == "" {
modules/caddyhttp/fileserver/staticfiles.go:192:3     - Unknown word (fsrv)        -- fsrv.FileSystem = "{http
modules/caddyhttp/fileserver/staticfiles.go:218:18    - Unknown word (Iface)       -- for modName, modIface := range mods.(map[string
modules/caddyhttp/fileserver/staticfiles.go:219:15    - Unknown word (Iface)       -- p, ok := modIface.(encode.Precompressed
modules/caddyhttp/fileserver/staticfiles.go:23:2      - Unknown word (weakrand)   -- weakrand "math/rand"
modules/caddyhttp/fileserver/staticfiles.go:261:80    - Unknown word (caddyhttp)   -- *http.Request, next caddyhttp.Handler) error {
modules/caddyhttp/fileserver/staticfiles.go:267:11    - Unknown word (caddyhttp)   -- return caddyhttp.Error(http.StatusBadRequest
modules/caddyhttp/fileserver/staticfiles.go:282:25    - Unknown word (fsmap)       -- fileSystem, ok := fsrv.fsmap.Get(fsName)
modules/caddyhttp/fileserver/staticfiles.go:287:64    - Unknown word (stdlib)      -- fs.ValidPath() in the stdlib
modules/caddyhttp/fileserver/staticfiles.go:36:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/fileserver/staticfiles.go:37:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/fileserver/staticfiles.go:37:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/fileserver/staticfiles.go:38:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/fileserver/staticfiles.go:38:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/encode"
modules/caddyhttp/fileserver/staticfiles.go:524:3     - Unknown word (mtyp)        -- mtyp := mime.TypeByExtension
modules/caddyhttp/fileserver/staticfiles.go:525:6     - Unknown word (mtyp)        -- if mtyp == "" {
modules/caddyhttp/fileserver/staticfiles.go:529:35    - Unknown word (mtyp)        -- Set("Content-Type", mtyp)
modules/caddyhttp/fileserver/staticfiles.go:592:12    - Unknown word (gosec)       -- //nolint:gosec
modules/caddyhttp/fileserver/staticfiles.go:592:5     - Unknown word (nolint)      -- //nolint:gosec
modules/caddyhttp/fileserver/staticfiles.go:593:14    - Unknown word (weakrand)    -- backoff := weakrand.Intn(maxBackoff-minBackoff
modules/caddyhttp/fileserver/staticfiles.go:606:74    - Unknown word (Caza)        -- written by Nathaniel Caza.
modules/caddyhttp/fileserver/staticfiles.go:779:40    - Unknown word (stdlib)      -- intercepts calls by the stdlib to WriteHeader
modules/caddyhttp/headers/caddyfile.go:236:29    - Unknown word (caddyhttp)     -- respHeaderOps.Require = &caddyhttp.ResponseMatcher{
modules/caddyhttp/headers/caddyfile.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/headers/caddyfile.go:23:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/headers/caddyfile.go:23:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/headers/caddyfile.go:24:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/headers/caddyfile.go:24:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/headers/caddyfile.go:28:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterDirective("header
modules/caddyhttp/headers/caddyfile.go:28:49     - Unknown word (Caddyfile)     -- isterDirective("header", parseCaddyfile)
modules/caddyhttp/headers/caddyfile.go:29:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterDirective("request
modules/caddyhttp/headers/caddyfile.go:29:63     - Unknown word (Caddyfile)     -- header", parseReqHdrCaddyfile)
modules/caddyhttp/headers/caddyfile.go:32:9      - Unknown word (Caddyfile)     -- // parseCaddyfile sets up the handler
modules/caddyhttp/headers/caddyfile.go:33:4      - Unknown word (Caddyfile)     -- // Caddyfile tokens. Syntax:
modules/caddyhttp/headers/caddyfile.go:49:11     - Unknown word (Caddyfile)     -- func parseCaddyfile(h httpcaddyfile.Helper
modules/caddyhttp/headers/caddyfile.go:49:23     - Unknown word (httpcaddyfile) -- func parseCaddyfile(h httpcaddyfile.Helper) ([]httpcaddyfile
modules/caddyhttp/headers/caddyfile.go:49:48     - Unknown word (httpcaddyfile) -- httpcaddyfile.Helper) ([]httpcaddyfile.ConfigValue, error)
modules/caddyhttp/headers/headers.go:100:29    - Unknown word (caddyhttp)   -- ResponseWriterWrapper: &caddyhttp.ResponseWriterWrapper
modules/caddyhttp/headers/headers.go:185:11    - Unknown word (caddyhttp)   -- Require *caddyhttp.ResponseMatcher `json
modules/caddyhttp/headers/headers.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/headers/headers.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/headers/headers.go:24:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/headers/headers.go:339:3     - Unknown word (caddyhttp)   -- *caddyhttp.ResponseWriterWrapper
modules/caddyhttp/headers/headers.go:90:73     - Unknown word (caddyhttp)   -- *http.Request, next caddyhttp.Handler) error {
modules/caddyhttp/headers/headers_test.go:129:16    - Unknown word (caddyhttp)   -- Require: &caddyhttp.ResponseMatcher{
modules/caddyhttp/headers/headers_test.go:149:16    - Unknown word (caddyhttp)   -- Require: &caddyhttp.ResponseMatcher{
modules/caddyhttp/headers/headers_test.go:167:16    - Unknown word (caddyhttp)   -- Require: &caddyhttp.ResponseMatcher{
modules/caddyhttp/headers/headers_test.go:216:11    - Unknown word (hdrs)        -- for k, hdrs := range tc.respHeader
modules/caddyhttp/headers/headers_test.go:217:23    - Unknown word (hdrs)        -- for _, v := range hdrs {
modules/caddyhttp/headers/headers_test.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/headers/headers_test.go:26:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/headers/headers_test.go:26:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/headers/headers_test.go:93:32     - Unknown word (lalala)      -- Header-Suffix": []string{"lalala"},
modules/caddyhttp/headers/headers_test.go:96:32     - Unknown word (foofoofoo)   -- Me": []string{"foofoofoo"},
modules/caddyhttp/headers/headers_test.go:99:26     - Unknown word (foofoofoo)   -- Keep-Me": []string{"foofoofoo"},
modules/caddyhttp/http2listener.go:18:60     - Unknown word (stdlib)     -- logic is copied from stdlib http.Server, it's an
modules/caddyhttp/http2listener.go:1:9       - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/http2listener.go:6:2       - Unknown word (weakrand)   -- weakrand "math/rand"
modules/caddyhttp/http2listener.go:73:12     - Unknown word (gosec)      -- //nolint:gosec
modules/caddyhttp/http2listener.go:73:5      - Unknown word (nolint)     -- //nolint:gosec
modules/caddyhttp/http2listener.go:74:48     - Unknown word (weakrand)   -- lIntervalBase + time.Duration(weakrand.Intn(int(pollIntervalBase
modules/caddyhttp/httpredirectlistener.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/httpredirectlistener.go:165:44    - Unknown word (OPTIO)       -- "POST ", "PUT /", "OPTIO":
modules/caddyhttp/httpredirectlistener.go:173:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*HTTPRedirectL
modules/caddyhttp/httpredirectlistener.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/httpredirectlistener.go:26:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/httpredirectlistener.go:26:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/httpredirectlistener.go:26:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/httpredirectlistener.go:59:48     - Unknown word (Caddyfile)   -- rectListenerWrapper) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/httpredirectlistener.go:59:61     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/intercept/intercept.go:103:2     - Unknown word (caddyhttp)     -- caddyhttp.ResponseRecorder
modules/caddyhttp/intercept/intercept.go:105:15    - Unknown word (caddyhttp)     -- handler caddyhttp.ResponseHandler
modules/caddyhttp/intercept/intercept.go:177:13    - Unknown word (Caddyfile)     -- // UnmarshalCaddyfile sets up the handler
modules/caddyhttp/intercept/intercept.go:177:48    - Unknown word (Caddyfile)     -- up the handler from Caddyfile tokens. Syntax:
modules/caddyhttp/intercept/intercept.go:195:43    - Unknown word (caddyfile)     -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/intercept/intercept.go:215:25    - Unknown word (httpcaddyfile) -- / since we need the httpcaddyfile.Helper to parse subroutes
modules/caddyhttp/intercept/intercept.go:222:14    - Unknown word (Errf)          -- return d.Errf("must have one or two
modules/caddyhttp/intercept/intercept.go:229:15    - Unknown word (Errf)          -- return d.Errf("must use a named response
modules/caddyhttp/intercept/intercept.go:233:15    - Unknown word (Errf)          -- return d.Errf("no named response matcher
modules/caddyhttp/intercept/intercept.go:243:14    - Unknown word (Errf)          -- return d.Errf("cannot define routes
modules/caddyhttp/intercept/intercept.go:252:13    - Unknown word (Errf)          -- return d.Errf("unrecognized subdirective
modules/caddyhttp/intercept/intercept.go:260:23    - Unknown word (httpcaddyfile) -- requires having an httpcaddyfile.Helper to function,
modules/caddyhttp/intercept/intercept.go:263:55    - Unknown word (httpcaddyfile) -- lizeUnmarshalCaddyfile(helper httpcaddyfile.Helper) error {
modules/caddyhttp/intercept/intercept.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/intercept/intercept.go:29:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/intercept/intercept.go:29:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/intercept/intercept.go:29:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/intercept/intercept.go:30:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/intercept/intercept.go:30:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/intercept/intercept.go:30:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/intercept/intercept.go:31:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/intercept/intercept.go:31:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/intercept/intercept.go:350:4     - Unknown word (caddyfile)     -- _ caddyfile.Unmarshaler =
modules/caddyhttp/intercept/intercept.go:36:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/intercept/intercept.go:36:59     - Unknown word (Caddyfile)     -- erDirective("intercept", parseCaddyfile)
modules/caddyhttp/intercept/intercept.go:41:28     - Unknown word (Franken)       -- when using modules like FrankenPHP or Caddy Snake.
modules/caddyhttp/intercept/intercept.go:55:19     - Unknown word (caddyhttp)     -- HandleResponse []caddyhttp.ResponseHandler `json
modules/caddyhttp/intercept/intercept.go:57:48     - Unknown word (Caddyfile)     -- response matchers from the Caddyfile while adapting
modules/caddyhttp/intercept/intercept.go:58:30     - Unknown word (caddyhttp)     -- responseMatchers map[string]caddyhttp.ResponseMatcher
modules/caddyhttp/intercept/intercept.go:60:31     - Unknown word (Caddyfile)     -- the handle_response Caddyfile tokens while adapting
modules/caddyhttp/intercept/intercept.go:61:28     - Unknown word (caddyfile)     -- handleResponseSegments []*caddyfile.Dispenser
modules/caddyhttp/invoke.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/invoke.go:21:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/ip_matchers.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/ip_matchers.go:177:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile implements caddyfile
modules/caddyhttp/ip_matchers.go:177:34    - Unknown word (caddyfile)   -- UnmarshalCaddyfile implements caddyfile.Unmarshaler.
modules/caddyhttp/ip_matchers.go:178:34    - Unknown word (Caddyfile)   -- MatchClientIP) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/ip_matchers.go:178:47    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/ip_matchers.go:31:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/ip_matchers.go:32:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/ip_matchers.go:32:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/ip_matchers.go:32:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/ip_matchers.go:33:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/internal"
modules/caddyhttp/ip_matchers.go:75:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile implements caddyfile
modules/caddyhttp/ip_matchers.go:75:34     - Unknown word (caddyfile)   -- UnmarshalCaddyfile implements caddyfile.Unmarshaler.
modules/caddyhttp/ip_matchers.go:76:34     - Unknown word (Caddyfile)   -- MatchRemoteIP) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/ip_matchers.go:76:47     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/ip_range.go:128:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*StaticIPRange
modules/caddyhttp/ip_range.go:134:44    - Unknown word (mholt)       -- is used at least by mholt/caddy-l4.
modules/caddyhttp/ip_range.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/ip_range.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/ip_range.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/ip_range.go:24:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/ip_range.go:24:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/ip_range.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/internal"
modules/caddyhttp/ip_range.go:89:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile implements caddyfile
modules/caddyhttp/ip_range.go:89:34     - Unknown word (caddyfile)   -- UnmarshalCaddyfile implements caddyfile.Unmarshaler.
modules/caddyhttp/ip_range.go:90:34     - Unknown word (Caddyfile)   -- StaticIPRange) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/ip_range.go:90:47     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/logging.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/logging.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/logging.go:36:5      - Unknown word (hostnames)   -- // hostnames that are not in the
modules/caddyhttp/logging.go:39:30     - Unknown word (hostnames)   -- LoggerNames maps request hostnames to one or more custom
modules/caddyhttp/logging.go:47:18     - Unknown word (hostnames)   -- // Keys must be hostnames (without ports), and
modules/caddyhttp/logging/caddyfile.go:18:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/logging/caddyfile.go:18:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/logging/caddyfile.go:18:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/logging/caddyfile.go:19:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/logging/caddyfile.go:19:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/logging/caddyfile.go:19:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/logging/caddyfile.go:20:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/logging/caddyfile.go:20:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/logging/caddyfile.go:24:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/logging/caddyfile.go:24:60     - Unknown word (Caddyfile)     -- rDirective("log_append", parseCaddyfile)
modules/caddyhttp/logging/caddyfile.go:27:55     - Unknown word (Caddyfile)     -- append handler from Caddyfile tokens. Syntax:
modules/caddyhttp/logging/caddyfile.go:27:9      - Unknown word (Caddyfile)     -- // parseCaddyfile sets up the log_append
modules/caddyhttp/logging/caddyfile.go:30:11     - Unknown word (Caddyfile)     -- func parseCaddyfile(h httpcaddyfile.Helper
modules/caddyhttp/logging/caddyfile.go:30:23     - Unknown word (httpcaddyfile) -- func parseCaddyfile(h httpcaddyfile.Helper) (caddyhttp.Middleware
modules/caddyhttp/logging/caddyfile.go:30:46     - Unknown word (caddyhttp)     -- httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error
modules/caddyhttp/logging/caddyfile.go:32:26     - Unknown word (Caddyfile)     -- := handler.UnmarshalCaddyfile(h.Dispenser)
modules/caddyhttp/logging/caddyfile.go:36:34     - Unknown word (caddyfile)     -- UnmarshalCaddyfile implements caddyfile.Unmarshaler.
modules/caddyhttp/logging/caddyfile.go:37:43     - Unknown word (caddyfile)     -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/logging/caddyfile.go:52:4      - Unknown word (caddyfile)     -- _ caddyfile.Unmarshaler = (*LogAppend
modules/caddyhttp/logging/logadd.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/logging/logadd.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/logging/logadd.go:24:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/logging/logadd.go:55:75     - Unknown word (caddyhttp)   -- *http.Request, next caddyhttp.Handler) error {
modules/caddyhttp/logging/logadd.go:65:20     - Unknown word (caddyhttp)   -- vars := ctx.Value(caddyhttp.VarsCtxKey).(map[string
modules/caddyhttp/logging/logadd.go:67:21     - Unknown word (caddyhttp)   -- extra := ctx.Value(caddyhttp.ExtraLogFieldsCtxKey
modules/caddyhttp/logging/logadd.go:67:55     - Unknown word (caddyhttp)   -- ExtraLogFieldsCtxKey).(*caddyhttp.ExtraLogFields)
modules/caddyhttp/map/caddyfile.go:15:9      - Unknown word (maphandler) -- package maphandler
modules/caddyhttp/map/caddyfile.go:20:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/map/caddyfile.go:20:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/map/caddyfile.go:20:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/map/caddyfile.go:21:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/map/caddyfile.go:21:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/map/caddyfile.go:25:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/map/caddyfile.go:25:53     - Unknown word (Caddyfile)     -- rHandlerDirective("map", parseCaddyfile)
modules/caddyhttp/map/caddyfile.go:28:48     - Unknown word (Caddyfile)     -- the map handler from Caddyfile tokens. Syntax:
modules/caddyhttp/map/caddyfile.go:28:9      - Unknown word (Caddyfile)     -- // parseCaddyfile sets up the map handler
modules/caddyhttp/map/caddyfile.go:38:8      - Unknown word (Caddyfile)     -- // The Caddyfile adapter treats outputs
modules/caddyhttp/map/caddyfile.go:44:11     - Unknown word (Caddyfile)     -- func parseCaddyfile(h httpcaddyfile.Helper
modules/caddyhttp/map/caddyfile.go:44:23     - Unknown word (httpcaddyfile) -- func parseCaddyfile(h httpcaddyfile.Helper) (caddyhttp.Middleware
modules/caddyhttp/map/caddyfile.go:44:46     - Unknown word (caddyhttp)     -- httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error
modules/caddyhttp/map/caddyfile.go:61:19     - Unknown word (httpcaddyfile) -- if shorthand := httpcaddyfile.WasReplacedPlaceholderShortha
modules/caddyhttp/map/caddyfile.go:62:18     - Unknown word (Errf)          -- return nil, h.Errf("destination %s conflicts
modules/caddyhttp/map/map.go:124:73    - Unknown word (caddyhttp)   -- *http.Request, next caddyhttp.Handler) error {
modules/caddyhttp/map/map.go:15:9      - Unknown word (maphandler) -- package maphandler
modules/caddyhttp/map/map.go:195:4     - Unknown word (caddyhttp)   -- _ caddyhttp.MiddlewareHandler =
modules/caddyhttp/map/map.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/map/map.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/map/map.go:25:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/map/map_test.go:10:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/map/map_test.go:11:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/map/map_test.go:11:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/map/map_test.go:132:11    - Unknown word (caddyhttp)   -- repl := caddyhttp.NewTestReplacer(req
modules/caddyhttp/map/map_test.go:138:11    - Unknown word (caddyhttp)   -- noop := caddyhttp.HandlerFunc(func(_ http
modules/caddyhttp/map/map_test.go:1:9       - Unknown word (maphandler) -- package maphandler
modules/caddyhttp/map/map_test.go:53:16     - Unknown word (Cxyz)        -- reqURI: "/ABCxyzDEF",
modules/caddyhttp/marshalers.go:100:54    - Unknown word (loggable)    -- TLS connection state loggable with zap.Object().
modules/caddyhttp/marshalers.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/marshalers.go:26:4      - Unknown word (Loggable)   -- // LoggableHTTPRequest makes an
modules/caddyhttp/marshalers.go:26:46     - Unknown word (loggable)   -- makes an HTTP request loggable with zap.Object().
modules/caddyhttp/marshalers.go:27:6      - Unknown word (Loggable)   -- type LoggableHTTPRequest struct {
modules/caddyhttp/marshalers.go:34:9      - Unknown word (Loggable)   -- func (r LoggableHTTPRequest) MarshalLogObject
modules/caddyhttp/marshalers.go:50:27     - Unknown word (Loggable)   -- AddObject("headers", LoggableHTTPHeader{
modules/caddyhttp/marshalers.go:55:24     - Unknown word (Loggable)   -- enc.AddObject("tls", LoggableTLSConnState(*r.TLS)
modules/caddyhttp/marshalers.go:60:44     - Unknown word (loggable)   -- makes an HTTP header loggable with zap.Object().
modules/caddyhttp/marshalers.go:86:49     - Unknown word (marshalable) -- makes a slice of strings marshalable for logging.
modules/caddyhttp/matchers.go:1339:13   - Unknown word (Iface)       -- for _, modIface := range modMap {
modules/caddyhttp/matchers.go:1340:23   - Unknown word (Iface)       -- ms = append(ms, modIface.(RequestMatcher))
modules/caddyhttp/matchers.go:1359:22   - Unknown word (embedable)   -- / MatchRegexp is an embedable type for matching
modules/caddyhttp/matchers.go:139:53    - Unknown word (escapings)   -- including those with bad escapings or illegal characters
modules/caddyhttp/matchers.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/matchers.go:205:47    - Unknown word (unmarshals)  -- because of how this type unmarshals JSON in a
modules/caddyhttp/matchers.go:244:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile implements caddyfile
modules/caddyhttp/matchers.go:244:34    - Unknown word (caddyfile)   -- UnmarshalCaddyfile implements caddyfile.Unmarshaler.
modules/caddyhttp/matchers.go:245:30    - Unknown word (Caddyfile)   -- MatchHost) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/matchers.go:245:43    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/matchers.go:39:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/matchers.go:40:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/matchers.go:40:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/matchers.go:40:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/matchers.go:622:22    - Unknown word (rawpath)     -- // we can now treat rawpath globs (%*) as regular
modules/caddyhttp/matchers.go:658:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile implements caddyfile
modules/caddyhttp/matchers.go:658:34    - Unknown word (caddyfile)   -- UnmarshalCaddyfile implements caddyfile.Unmarshaler.
modules/caddyhttp/matchers.go:659:30    - Unknown word (Caddyfile)   -- MatchPath) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/matchers.go:659:43    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/matchers.go:753:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile implements caddyfile
modules/caddyhttp/matchers.go:813:14    - Unknown word (Errf)        -- return d.Errf("malformed query matcher
modules/caddyhttp/matchers.go:841:22    - Unknown word (WHATWG)      -- // Despite the URL WHATWG spec mandating the use
modules/caddyhttp/matchers.go:842:56    - Unknown word (Filippo)     -- lementation is different, and Filippo Valsorda rightly wrote
modules/caddyhttp/matchers.go:842:64    - Unknown word (Valsorda)    -- different, and Filippo Valsorda rightly wrote:
modules/caddyhttp/matchers.go:89:41     - Unknown word (Fbar)        -- a matcher of `/foo%2Fbar` will match a request
modules/caddyhttp/matchers.go:908:13    - Unknown word (Errf)        -- return d.Errf("malformed header matcher
modules/caddyhttp/matchers.go:90:25     - Unknown word (Fbar)        -- of precisely `/foo%2Fbar`, but not `/foo/bar
modules/caddyhttp/matchers.go:913:14    - Unknown word (Errf)        -- return d.Errf("malformed header matcher
modules/caddyhttp/matchers.go:921:14    - Unknown word (Errf)        -- return d.Errf("malformed header matcher
modules/caddyhttp/matchers.go:925:14    - Unknown word (Errf)        -- return d.Errf("malformed header matcher
modules/caddyhttp/matchers_test.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/matchers_test.go:263:14    - Unknown word (FOOOO)       -- input: "/FOOOO",
modules/caddyhttp/matchers_test.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/matchers_test.go:298:20    - Unknown word (Fbar)        -- input: "/foo/%2Fbar",
modules/caddyhttp/matchers_test.go:303:20    - Unknown word (Fbar)        -- input: "/foo/%2Fbar",
modules/caddyhttp/matchers_test.go:328:21    - Unknown word (Fbar)        -- input: "/foo//%2Fbar",
modules/caddyhttp/matchers_test.go:398:29    - Unknown word (fbar)        -- match: MatchPath{"/foo%2fbar/baz"},
modules/caddyhttp/matchers_test.go:399:19    - Unknown word (Fbar)        -- input: "/foo%2Fbar/baz",
modules/caddyhttp/matchers_test.go:403:29    - Unknown word (fbar)        -- match: MatchPath{"/foo%2fbar/baz"},
modules/caddyhttp/matchers_test.go:409:19    - Unknown word (fbar)        -- input: "/foo%2fbar/baz",
modules/caddyhttp/matchers_test.go:519:60    - Unknown word (myparam)     -- Pattern: "^/foo/(?P<myparam>.*)/baz$", Name: "name
modules/caddyhttp/matchers_test.go:522:40    - Unknown word (myparam)     -- string]string{"name.myparam": "bar"},
modules/caddyhttp/matchers_test.go:599:25    - Unknown word (Alakazam)    -- input: http.Header{"Alakazam": []string{"kapow"}
modules/caddyhttp/matchers_test.go:599:46    - Unknown word (kapow)       -- Alakazam": []string{"kapow"}},
modules/caddyhttp/matchers_test.go:604:43    - Unknown word (kapow)       -- Header{"Field": []string{"kapow"}},
modules/caddyhttp/matchers_test.go:609:43    - Unknown word (kapow)       -- Header{"Field": []string{"kapow", "foo"}},
modules/caddyhttp/matchers_test.go:624:71    - Unknown word (kapow)       -- "Field2": []string{"kapow"}},
modules/caddyhttp/matchers_test.go:661:13    - Unknown word (caddyserver) -- host: "caddyserver.com",
modules/caddyhttp/matchers_test.go:728:35    - Unknown word (wildcarded)  -- non match against a wildcarded",
modules/caddyhttp/matchers_test.go:742:17    - Unknown word (someparam)   -- input: "/?someparam",
modules/caddyhttp/matchers_test.go:772:17    - Unknown word (somekey)     -- input: "/?somekey=1",
modules/caddyhttp/matchers_test.go:819:30    - Unknown word (somekey)     -- Set("http.vars.key", "somekey")
modules/caddyhttp/matchers_test.go:82:23     - Unknown word (Ã©xÃ mplÃª)     -- match: MatchHost{"Ã©xÃ mplÃª.com"},
modules/caddyhttp/matchers_test.go:83:17     - Unknown word (xmpl)        -- input: "xn--xmpl-0na6cm.com",
modules/caddyhttp/matchers_test.go:855:43    - Unknown word (barfoo)      -- Header{"Field": []string{"barfoo", "foobar"}},
modules/caddyhttp/metrics.go:12:50     - Unknown word (promauto)   -- client_golang/prometheus/promauto"
modules/caddyhttp/metrics.go:149:26    - Unknown word (behaviour)   -- Effectively the same behaviour as promhttp.InstrumentHandler
modules/caddyhttp/metrics.go:149:39    - Unknown word (promhttp)    -- the same behaviour as promhttp.InstrumentHandlerTimeToWriteH
modules/caddyhttp/metrics.go:14:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/metrics.go:152:3     - Unknown word (ttfb)        -- ttfb := time.Since(start
modules/caddyhttp/metrics.go:153:69    - Unknown word (ttfb)        -- statusLabels).Observe(ttfb)
modules/caddyhttp/metrics.go:156:2     - Unknown word (wrec)        -- wrec := NewResponseRecorder
modules/caddyhttp/metrics.go:157:24    - Unknown word (wrec)        -- err := h.mh.ServeHTTP(wrec, r, next)
modules/caddyhttp/metrics.go:15:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/internal/metrics
modules/caddyhttp/metrics.go:172:73    - Unknown word (wrec)        -- statusLabels).Observe(float64(wrec.Size()))
modules/caddyhttp/metrics.go:186:17    - Unknown word (wrec)        -- observeRequest(wrec.Status())
modules/caddyhttp/metrics.go:1:9       - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/metrics.go:47:40     - Unknown word (promauto)    -- httpMetrics.requestInFlight = promauto.With(registry).NewGaugeVec
modules/caddyhttp/metrics.go:53:38     - Unknown word (promauto)    -- httpMetrics.requestErrors = promauto.With(registry).NewCounterVec
modules/caddyhttp/metrics.go:59:37     - Unknown word (promauto)    -- httpMetrics.requestCount = promauto.With(registry).NewCounterVec
modules/caddyhttp/metrics.go:74:40     - Unknown word (promauto)    -- httpMetrics.requestDuration = promauto.With(registry).NewHistogramVe
modules/caddyhttp/metrics_test.go:12:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/metrics_test.go:13:50     - Unknown word (testutil)    -- client_golang/prometheus/testutil"
modules/caddyhttp/metrics_test.go:192:12    - Unknown word (testutil)    -- if err := testutil.GatherAndCompare(ctx
modules/caddyhttp/metrics_test.go:1:9       - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/metrics_test.go:215:16    - Unknown word (testutil)    -- if actual := testutil.ToFloat64(metrics.httpMetrics
modules/caddyhttp/metrics_test.go:39:16     - Unknown word (testutil)    -- if actual := testutil.ToFloat64(metrics.httpMetrics
modules/caddyhttp/metrics_test.go:60:15     - Unknown word (testutil)    -- if actual := testutil.ToFloat64(metrics.httpMetrics
modules/caddyhttp/proxyprotocol/listenerwrapper.go:105:27    - Unknown word (goproxy)       -- policy = func(options goproxy.ConnPolicyOptions)
modules/caddyhttp/proxyprotocol/listenerwrapper.go:105:55    - Unknown word (goproxy)       -- ConnPolicyOptions) (goproxy.Policy, error) {
modules/caddyhttp/proxyprotocol/listenerwrapper.go:108:11    - Unknown word (goproxy)       -- return goproxy.USE, nil
modules/caddyhttp/proxyprotocol/listenerwrapper.go:15:9      - Unknown word (proxyprotocol) -- package proxyprotocol
modules/caddyhttp/proxyprotocol/listenerwrapper.go:22:2      - Unknown word (goproxy)       -- goproxy "github.com/pires/go
modules/caddyhttp/proxyprotocol/listenerwrapper.go:22:22     - Unknown word (pires)         -- goproxy "github.com/pires/go-proxyproto"
modules/caddyhttp/proxyprotocol/listenerwrapper.go:22:31     - Unknown word (proxyproto)    -- github.com/pires/go-proxyproto"
modules/caddyhttp/proxyprotocol/listenerwrapper.go:24:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/proxyprotocol/listenerwrapper.go:57:45     - Unknown word (unmarshals)    -- because of how this type unmarshals JSON in a
modules/caddyhttp/proxyprotocol/listenerwrapper.go:85:9      - Unknown word (goproxy)       -- policy goproxy.ConnPolicyFunc
modules/caddyhttp/proxyprotocol/module.go:15:9      - Unknown word (proxyprotocol) -- package proxyprotocol
modules/caddyhttp/proxyprotocol/module.go:18:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/proxyprotocol/module.go:19:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/proxyprotocol/module.go:19:35     - Unknown word (caddyconfig)   -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/proxyprotocol/module.go:19:47     - Unknown word (caddyfile)     -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/proxyprotocol/module.go:33:13     - Unknown word (Caddyfile)     -- // UnmarshalCaddyfile sets up the listener
modules/caddyhttp/proxyprotocol/module.go:33:44     - Unknown word (Listenerwrapper) -- sets up the listener Listenerwrapper from Caddyfile tokens
modules/caddyhttp/proxyprotocol/module.go:33:65     - Unknown word (Caddyfile)       -- Listenerwrapper from Caddyfile tokens. Syntax:
modules/caddyhttp/proxyprotocol/module.go:41:36     - Unknown word (Caddyfile)       -- ListenerWrapper) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/proxyprotocol/module.go:41:49     - Unknown word (caddyfile)       -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/proxyprotocol/module.go:57:14     - Unknown word (Errf)            -- return d.Errf("parsing proxy_protocol
modules/caddyhttp/proxyprotocol/module.go:86:4      - Unknown word (caddyfile)       -- _ caddyfile.Unmarshaler = (*ListenerWrapp
modules/caddyhttp/proxyprotocol/policy.go:1:9       - Unknown word (proxyprotocol) -- package proxyprotocol
modules/caddyhttp/proxyprotocol/policy.go:35:40     - Unknown word (goproxy)       -- yToGoProxyPolicy = map[Policy]goproxy.Policy{
modules/caddyhttp/proxyprotocol/policy.go:36:17     - Unknown word (goproxy)       -- PolicyUSE: goproxy.USE,
modules/caddyhttp/proxyprotocol/policy.go:37:17     - Unknown word (goproxy)       -- PolicyIGNORE: goproxy.IGNORE,
modules/caddyhttp/proxyprotocol/policy.go:38:17     - Unknown word (goproxy)       -- PolicyREJECT: goproxy.REJECT,
modules/caddyhttp/proxyprotocol/policy.go:64:38     - Unknown word (unmarshaller)  -- implements the text unmarshaller method.
modules/caddyhttp/proxyprotocol/policy.go:8:2       - Unknown word (goproxy)       -- goproxy "github.com/pires/go
modules/caddyhttp/proxyprotocol/policy.go:8:22      - Unknown word (pires)         -- goproxy "github.com/pires/go-proxyproto"
modules/caddyhttp/proxyprotocol/policy.go:8:31      - Unknown word (proxyproto)    -- github.com/pires/go-proxyproto"
modules/caddyhttp/push/caddyfile.go:18:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/push/caddyfile.go:18:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/push/caddyfile.go:18:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/push/caddyfile.go:19:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/push/caddyfile.go:19:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/push/caddyfile.go:20:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/push/caddyfile.go:20:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp/headers"
modules/caddyhttp/push/caddyfile.go:24:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/push/caddyfile.go:24:54     - Unknown word (Caddyfile)     -- HandlerDirective("push", parseCaddyfile)
modules/caddyhttp/push/caddyfile.go:27:9      - Unknown word (Caddyfile)     -- // parseCaddyfile sets up the push handler
modules/caddyhttp/push/caddyfile.go:46:11     - Unknown word (Caddyfile)     -- func parseCaddyfile(h httpcaddyfile.Helper
modules/caddyhttp/push/caddyfile.go:46:23     - Unknown word (httpcaddyfile) -- func parseCaddyfile(h httpcaddyfile.Helper) (caddyhttp.Middleware
modules/caddyhttp/push/caddyfile.go:46:46     - Unknown word (caddyhttp)     -- httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error
modules/caddyhttp/push/caddyfile.go:76:20     - Unknown word (Caddyfile)     -- err = headers.CaddyfileHeaderOp(&handler.Headers
modules/caddyhttp/push/caddyfile.go:78:20     - Unknown word (Caddyfile)     -- err = headers.CaddyfileHeaderOp(&handler.Headers
modules/caddyhttp/push/handler.go:101:42    - Unknown word (Loggable)    -- headers", caddyhttp.LoggableHTTPHeader{
modules/caddyhttp/push/handler.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/push/handler.go:26:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/push/handler.go:26:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/push/handler.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/push/handler.go:27:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/headers"
modules/caddyhttp/push/handler.go:76:73     - Unknown word (caddyhttp)   -- *http.Request, next caddyhttp.Handler) error {
modules/caddyhttp/push/handler.go:88:30     - Unknown word (caddyhttp)   -- = r.Context().Value(caddyhttp.ServerCtxKey).(*caddyhttp
modules/caddyhttp/push/handler.go:88:56     - Unknown word (caddyhttp)   -- caddyhttp.ServerCtxKey).(*caddyhttp.Server)
modules/caddyhttp/replacer.go:120:23    - Unknown word (hostport)    -- case "http.request.hostport":
modules/caddyhttp/replacer.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/replacer.go:44:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/replacer.go:45:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddytls
modules/caddyhttp/replacer.go:45:43     - Unknown word (caddytls)    -- caddyserver/caddy/v2/modules/caddytls"
modules/caddyhttp/replacer.go:485:10    - Unknown word (caddytls)    -- return caddytls.ProtocolName(req.TLS
modules/caddyhttp/replacer_test.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/replacer_test.go:196:23    - Unknown word (localdomain) -- expect: "CN=client.localdomain",
modules/caddyhttp/replacer_test.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/replacer_test.go:98:26     - Unknown word (hostport)    -- get: "http.request.hostport",
modules/caddyhttp/requestbody/caddyfile.go:15:9      - Unknown word (requestbody) -- package requestbody
modules/caddyhttp/requestbody/caddyfile.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/requestbody/caddyfile.go:22:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/requestbody/caddyfile.go:22:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/requestbody/caddyfile.go:23:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/requestbody/caddyfile.go:23:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/requestbody/caddyfile.go:27:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/requestbody/caddyfile.go:27:62     - Unknown word (Caddyfile)     -- request_body", parseCaddyfile)
modules/caddyhttp/requestbody/caddyfile.go:30:11     - Unknown word (Caddyfile)     -- func parseCaddyfile(h httpcaddyfile.Helper
modules/caddyhttp/requestbody/caddyfile.go:30:23     - Unknown word (httpcaddyfile) -- func parseCaddyfile(h httpcaddyfile.Helper) (caddyhttp.Middleware
modules/caddyhttp/requestbody/caddyfile.go:30:46     - Unknown word (caddyhttp)     -- httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error
modules/caddyhttp/requestbody/caddyfile.go:45:19     - Unknown word (Errf)          -- return nil, h.Errf("parsing max_size:
modules/caddyhttp/requestbody/caddyfile.go:56:19     - Unknown word (Errf)          -- return nil, h.Errf("parsing read_timeout
modules/caddyhttp/requestbody/caddyfile.go:67:19     - Unknown word (Errf)          -- return nil, h.Errf("parsing write_timeout
modules/caddyhttp/requestbody/caddyfile.go:72:18     - Unknown word (Errf)          -- return nil, h.Errf("unrecognized request
modules/caddyhttp/requestbody/requestbody.go:104:7     - Unknown word (caddyhttp)   -- var _ caddyhttp.MiddlewareHandler =
modules/caddyhttp/requestbody/requestbody.go:15:9      - Unknown word (requestbody) -- package requestbody
modules/caddyhttp/requestbody/requestbody.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/requestbody/requestbody.go:26:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/requestbody/requestbody.go:26:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/requestbody/requestbody.go:61:78     - Unknown word (caddyhttp)   -- *http.Request, next caddyhttp.Handler) error {
modules/caddyhttp/requestbody/requestbody.go:69:12     - Unknown word (bodyclose)   -- //nolint:bodyclose
modules/caddyhttp/requestbody/requestbody.go:69:5      - Unknown word (nolint)      -- //nolint:bodyclose
modules/caddyhttp/requestbody/requestbody.go:98:9      - Unknown word (caddyhttp)   -- err = caddyhttp.Error(http.StatusRequestEntit
modules/caddyhttp/responsematchers.go:109:15    - Unknown word (Errf)        -- return d.Errf("bad status value '
modules/caddyhttp/responsematchers.go:114:13    - Unknown word (Errf)        -- return d.Errf("unrecognized response
modules/caddyhttp/responsematchers.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/responsematchers.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/responsematchers.go:22:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/responsematchers.go:22:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/responsematchers.go:69:35     - Unknown word (caddyfile)   -- ParseNamedResponseMatcher(d *caddyfile.Dispenser, matchers
modules/caddyhttp/responsematchers.go:74:12     - Unknown word (Errf)        -- return d.Errf("matcher is defined
modules/caddyhttp/responsematchers.go:87:34     - Unknown word (Caddyfile)   -- headerMatcher.UnmarshalCaddyfile(d.NewFromNextSegment
modules/caddyhttp/responsematchers_test.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/responsewriter.go:104:11    - Unknown word (caddyhttp)  -- // rec := caddyhttp.NewResponseRecorder
modules/caddyhttp/responsewriter.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/responsewriter.go:243:12    - Unknown word (bodyclose)  -- //nolint:bodyclose
modules/caddyhttp/responsewriter.go:243:5     - Unknown word (nolint)     -- //nolint:bodyclose
modules/caddyhttp/responsewriter.go:256:11    - Unknown word (bodyclose)  -- //nolint:bodyclose
modules/caddyhttp/responsewriter.go:256:4     - Unknown word (nolint)     -- //nolint:bodyclose
modules/caddyhttp/responsewriter_test.go:1:9       - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/responsewriter_test.go:22:6      - Unknown word (barebones)  -- // a barebones http.ResponseWriter
modules/caddyhttp/reverseproxy/addresses.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/admin.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/caddyfile.go:1189:14   - Unknown word (CAPEM)         -- h.TLS.RootCAPEMFiles = args
modules/caddyhttp/reverseproxy/caddyfile.go:1314:19   - Unknown word (caddytls)      -- ca, ok := unm.(caddytls.CA)
modules/caddyhttp/reverseproxy/caddyfile.go:1316:39   - Unknown word (caddytls)      -- "module %s is not a caddytls.CA", modID)
modules/caddyhttp/reverseproxy/caddyfile.go:1321:21   - Unknown word (CAPEM)         -- if len(h.TLS.RootCAPEMFiles) != 0 {
modules/caddyhttp/reverseproxy/caddyfile.go:141:41    - Unknown word (caddyfile)     -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/reverseproxy/caddyfile.go:153:39    - Unknown word (caddyhttp)     -- nseMatchers = make(map[string]caddyhttp.ResponseMatcher)
modules/caddyhttp/reverseproxy/caddyfile.go:169:13    - Unknown word (Errf)          -- return d.Errf("the scheme wss:// is
modules/caddyhttp/reverseproxy/caddyfile.go:171:13    - Unknown word (Errf)          -- return d.Errf("the scheme ws:// is
modules/caddyhttp/reverseproxy/caddyfile.go:175:13    - Unknown word (Errf)          -- return d.Errf("unsupported URL scheme
modules/caddyhttp/reverseproxy/caddyfile.go:179:13    - Unknown word (Errf)          -- return d.Errf("for now, all proxy
modules/caddyhttp/reverseproxy/caddyfile.go:253:16    - Unknown word (caddyfile)     -- unm, err := caddyfile.UnmarshalModule(d, modID
modules/caddyhttp/reverseproxy/caddyfile.go:259:14    - Unknown word (Errf)          -- return d.Errf("module %s (%T) is not
modules/caddyhttp/reverseproxy/caddyfile.go:261:28    - Unknown word (caddyconfig)   -- DynamicUpstreamsRaw = caddyconfig.JSONModuleObject(source
modules/caddyhttp/reverseproxy/caddyfile.go:272:16    - Unknown word (caddyfile)     -- unm, err := caddyfile.UnmarshalModule(d, modID
modules/caddyhttp/reverseproxy/caddyfile.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/caddyfile.go:283:41    - Unknown word (caddyconfig)   -- SelectionPolicyRaw = caddyconfig.JSONModuleObject(sel
modules/caddyhttp/reverseproxy/caddyfile.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/caddyfile.go:28:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddyhttp/reverseproxy/caddyfile.go:29:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/caddyfile.go:29:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/reverseproxy/caddyfile.go:29:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/reverseproxy/caddyfile.go:30:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/caddyfile.go:30:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/reverseproxy/caddyfile.go:30:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/reverseproxy/caddyfile.go:31:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/internal"
modules/caddyhttp/reverseproxy/caddyfile.go:32:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/reverseproxy/caddyfile.go:33:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp/headers"
modules/caddyhttp/reverseproxy/caddyfile.go:34:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp/rewrite"
modules/caddyhttp/reverseproxy/caddyfile.go:357:38    - Unknown word (caddyfile)     -- Named("config.adapter.caddyfile").Warn("the 'health
modules/caddyhttp/reverseproxy/caddyfile.go:35:43     - Unknown word (caddytls)      -- caddyserver/caddy/v2/modules/caddytls"
modules/caddyhttp/reverseproxy/caddyfile.go:39:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/reverseproxy/caddyfile.go:39:63     - Unknown word (Caddyfile)     -- reverse_proxy", parseCaddyfile)
modules/caddyhttp/reverseproxy/caddyfile.go:40:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/reverseproxy/caddyfile.go:40:75     - Unknown word (Caddyfile)     -- response", parseCopyResponseCaddyfile)
modules/caddyhttp/reverseproxy/caddyfile.go:41:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/reverseproxy/caddyfile.go:41:90     - Unknown word (Caddyfile)     -- parseCopyResponseHeadersCaddyfile)
modules/caddyhttp/reverseproxy/caddyfile.go:44:11     - Unknown word (Caddyfile)     -- func parseCaddyfile(h httpcaddyfile.Helper
modules/caddyhttp/reverseproxy/caddyfile.go:44:23     - Unknown word (httpcaddyfile) -- func parseCaddyfile(h httpcaddyfile.Helper) (caddyhttp.Middleware
modules/caddyhttp/reverseproxy/caddyfile.go:44:46     - Unknown word (caddyhttp)     -- httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error
modules/caddyhttp/reverseproxy/caddyfile.go:46:21     - Unknown word (Caddyfile)     -- err := rp.UnmarshalCaddyfile(h.Dispenser)
modules/caddyhttp/reverseproxy/caddyfile.go:658:5     - Unknown word (usize)         -- usize, err := humanize.ParseBytes
modules/caddyhttp/reverseproxy/caddyfile.go:662:18    - Unknown word (usize)         -- size = int64(usize)
modules/caddyhttp/reverseproxy/caddyfile.go:726:100   - Unknown word (hostport)      -- ] == "{http.request.hostport}") {
modules/caddyhttp/reverseproxy/caddyfile.go:726:60    - Unknown word (hostport)      -- host") && (args[1] == "{hostport}" || args[1] == "{http
modules/caddyhttp/reverseproxy/caddyfile.go:735:131   - Unknown word (hostport)      -- host}" || args[1] == "{hostport}" || args[1] == "{http
modules/caddyhttp/reverseproxy/caddyfile.go:735:171   - Unknown word (hostport)      -- ] == "{http.request.hostport}") {
modules/caddyhttp/reverseproxy/command.go:110:19    - Unknown word (httpcaddyfile) -- fromAddr, err := httpcaddyfile.ParseAddress(from)
modules/caddyhttp/reverseproxy/command.go:179:17    - Unknown word (caddyconfig)   -- TransportRaw: caddyconfig.JSONModuleObject(ht
modules/caddyhttp/reverseproxy/command.go:240:73    - Unknown word (hostport)      -- reverse_proxy.upstream.hostport}")
modules/caddyhttp/reverseproxy/command.go:243:11    - Unknown word (caddyhttp)     -- route := caddyhttp.Route{
modules/caddyhttp/reverseproxy/command.go:245:4     - Unknown word (caddyconfig)   -- caddyconfig.JSONModuleObject(handler
modules/caddyhttp/reverseproxy/command.go:251:13    - Unknown word (caddyconfig)   -- "host": caddyconfig.JSON(caddyhttp.MatchHost
modules/caddyhttp/reverseproxy/command.go:266:19    - Unknown word (Redir)         -- } else if disableRedir {
modules/caddyhttp/reverseproxy/command.go:267:56    - Unknown word (Redir)         -- AutoHTTPSConfig{DisableRedir: true}
modules/caddyhttp/reverseproxy/command.go:278:13    - Unknown word (caddytls)      -- tlsApp := caddytls.TLS{
modules/caddyhttp/reverseproxy/command.go:279:17    - Unknown word (caddytls)      -- Automation: &caddytls.AutomationConfig{
modules/caddyhttp/reverseproxy/command.go:27:2      - Unknown word (caddycmd)   -- caddycmd "github.com/caddyserver
modules/caddyhttp/reverseproxy/command.go:27:23     - Unknown word (caddyserver) -- caddycmd "github.com/caddyserver/caddy/v2/cmd"
modules/caddyhttp/reverseproxy/command.go:280:18    - Unknown word (caddytls)      -- Policies: []*caddytls.AutomationPolicy{{
modules/caddyhttp/reverseproxy/command.go:29:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/command.go:30:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/command.go:30:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddyhttp/reverseproxy/command.go:31:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/command.go:31:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/reverseproxy/command.go:31:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/reverseproxy/command.go:32:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/reverseproxy/command.go:32:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/reverseproxy/command.go:33:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp/headers"
modules/caddyhttp/reverseproxy/command.go:34:43     - Unknown word (caddytls)      -- caddyserver/caddy/v2/modules/caddytls"
modules/caddyhttp/reverseproxy/command.go:38:2      - Unknown word (caddycmd)      -- caddycmd.RegisterCommand(caddycmd
modules/caddyhttp/reverseproxy/command.go:38:27     - Unknown word (caddycmd)      -- caddycmd.RegisterCommand(caddycmd.Command{
modules/caddyhttp/reverseproxy/command.go:67:73     - Unknown word (hostport)      -- reverse_proxy.upstream.hostport}".
modules/caddyhttp/reverseproxy/command.go:82:15     - Unknown word (caddycmd)      -- cmd.RunE = caddycmd.WrapCommandFuncForCobra
modules/caddyhttp/reverseproxy/command.go:87:25     - Unknown word (caddycmd)      -- func cmdReverseProxy(fs caddycmd.Flags) (int, error)
modules/caddyhttp/reverseproxy/command.go:93:9      - Unknown word (Redir)         -- disableRedir := fs.Bool("disable
modules/caddyhttp/reverseproxy/command.go:98:27     - Unknown word (caddyhttp)     -- httpPort := strconv.Itoa(caddyhttp.DefaultHTTPPort)
modules/caddyhttp/reverseproxy/command.go:99:28     - Unknown word (caddyhttp)     -- httpsPort := strconv.Itoa(caddyhttp.DefaultHTTPSPort)
modules/caddyhttp/reverseproxy/copyresponse.go:183:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler =
modules/caddyhttp/reverseproxy/copyresponse.go:187:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler =
modules/caddyhttp/reverseproxy/copyresponse.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/copyresponse.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/copyresponse.go:23:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/reverseproxy/copyresponse.go:23:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/reverseproxy/copyresponse.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/reverseproxy/copyresponse.go:24:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/reverseproxy/copyresponse.go:38:13     - Unknown word (caddyhttp)   -- StatusCode caddyhttp.WeakString `json:"status
modules/caddyhttp/reverseproxy/copyresponse.go:58:85     - Unknown word (caddyhttp)   -- req *http.Request, _ caddyhttp.Handler) error {
modules/caddyhttp/reverseproxy/copyresponse.go:64:10     - Unknown word (caddyhttp)   -- return caddyhttp.Error(http.StatusInternalServ
modules/caddyhttp/reverseproxy/copyresponse.go:73:11     - Unknown word (caddyhttp)   -- return caddyhttp.Error(http.StatusInternalServ
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:106:14    - Unknown word (Errf)          -- return d.Errf("bad timeout value
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:117:13    - Unknown word (Errf)          -- return d.Errf("unrecognized subdirective
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:123:35    - Unknown word (fastcgi)       -- arsePHPFastCGI parses the php_fastcgi directive, which has
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:128:8     - Unknown word (fastcgi)       -- // php_fastcgi localhost:7777
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:137:4     - Unknown word (redir)         -- // redir @canonicalPath {path
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:15:9      - Unknown word (fastcgi)    -- package fastcgi
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:167:24    - Unknown word (httpcaddyfile) -- func parsePHPFastCGI(h httpcaddyfile.Helper) ([]httpcaddyfile
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:167:49    - Unknown word (httpcaddyfile) -- httpcaddyfile.Helper) ([]httpcaddyfile.ConfigValue, error)
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:23:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:24:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:24:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:25:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:25:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:266:28    - Unknown word (Errf)          -- return nil, dispenser.Errf("bad timeout value
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:26:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:26:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:27:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp/fileserver"
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:28:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp/reverseproxy"
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:29:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp/rewrite"
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:306:12    - Unknown word (caddyhttp)     -- routes := caddyhttp.RouteList{}
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:314:3     - Unknown word (redir)         -- redirMatcherSet := caddy.ModuleMap
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:326:3     - Unknown word (redir)         -- redirHandler := caddyhttp
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:330:3     - Unknown word (redir)         -- redirRoute := caddyhttp.Route
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:331:38    - Unknown word (redir)         -- herSetsRaw: []caddy.ModuleMap{redirMatcherSet},
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:332:38    - Unknown word (caddyconfig)   -- []json.RawMessage{caddyconfig.JSONModuleObject(redirHandler
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:33:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterDirective("php
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:33:39     - Unknown word (fastcgi)       -- RegisterDirective("php_fastcgi", parsePHPFastCGI)
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:352:38    - Unknown word (caddyconfig)   -- []json.RawMessage{caddyconfig.JSONModuleObject(rewriteHandl
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:36:13     - Unknown word (Caddyfile)     -- // UnmarshalCaddyfile deserializes Caddyfile
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:36:36     - Unknown word (Caddyfile)     -- marshalCaddyfile deserializes Caddyfile tokens into h.
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:376:27    - Unknown word (Caddyfile)     -- rpHandler.UnmarshalCaddyfile(dispenser)
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:380:35    - Unknown word (Caddyfile)     -- rpHandler.FinalizeUnmarshalCaddyfile(h)
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:38:14     - Unknown word (fastcgi)       -- // transport fastcgi {
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:399:12    - Unknown word (httpcaddyfile) -- return []httpcaddyfile.ConfigValue{
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:48:30     - Unknown word (Caddyfile)     -- Transport) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:48:43     - Unknown word (caddyfile)     -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:86:14     - Unknown word (Errf)          -- return d.Errf("bad timeout value
modules/caddyhttp/reverseproxy/fastcgi/caddyfile.go:96:14     - Unknown word (Errf)          -- return d.Errf("bad timeout value
modules/caddyhttp/reverseproxy/fastcgi/client.go:114:27    - Unknown word (MPXS)       -- MultiplexConns string = "MPXS_CONNS"
modules/caddyhttp/reverseproxy/fastcgi/client.go:20:19     - Unknown word (Junqing)    -- // Copyright 2012 Junqing Tan <ivan@mysqlab.net
modules/caddyhttp/reverseproxy/fastcgi/client.go:24:9      - Unknown word (fastcgi)    -- package fastcgi
modules/caddyhttp/reverseproxy/fastcgi/client.go:46:18     - Unknown word (Fileno)     -- // FCGIListenSockFileno describes listen socket
modules/caddyhttp/reverseproxy/fastcgi/client.go:47:21     - Unknown word (Fileno)     -- const FCGIListenSockFileno uint8 = 0
modules/caddyhttp/reverseproxy/fastcgi/client_test.go:103:36    - Unknown word (filemd)     -- Fprintln(resp, "server:filemd5 ", md5 )
modules/caddyhttp/reverseproxy/fastcgi/client_test.go:176:3     - Unknown word (globalt)    -- globalt.Error("Server return
modules/caddyhttp/reverseproxy/fastcgi/client_test.go:183:35    - Unknown word (fcgict)     -- Join(os.TempDir(), "fcgict"+strconv.Itoa(rand.Int
modules/caddyhttp/reverseproxy/fastcgi/client_test.go:214:2     - Unknown word (globalt)    -- globalt = t
modules/caddyhttp/reverseproxy/fastcgi/client_test.go:21:9      - Unknown word (fastcgi)    -- package fastcgi
modules/caddyhttp/reverseproxy/fastcgi/client_test.go:50:26     - Unknown word (fcgic)      -- scriptFile = "/tank/www/fcgic_test.php"
modules/caddyhttp/reverseproxy/fastcgi/client_test.go:51:26     - Unknown word (serv)       -- ipPort = "remote-php-serv:59000"
modules/caddyhttp/reverseproxy/fastcgi/client_test.go:55:5      - Unknown word (globalt)    -- var globalt *testing.T
modules/caddyhttp/reverseproxy/fastcgi/client_test.go:86:35     - Unknown word (filekey)    -- Fprintln(resp, "server:filekey ", kn )
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:117:30    - Unknown word (caddyhttp)   -- = r.Context().Value(caddyhttp.ServerCtxKey).(*caddyhttp
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:117:56    - Unknown word (caddyhttp)   -- caddyhttp.ServerCtxKey).(*caddyhttp.Server)
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:123:15    - Unknown word (caddyhttp)   -- return nil, caddyhttp.Error(http.StatusBadRequest
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:141:2     - Unknown word (loggable)    -- loggableReq := caddyhttp.LoggableHTTPR
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:141:27    - Unknown word (Loggable)    -- loggableReq := caddyhttp.LoggableHTTPRequest{
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:145:17    - Unknown word (loggable)    -- loggableEnv := loggableEnv{vars: env, logCredentials
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:145:2     - Unknown word (loggable)    -- loggableEnv := loggableEnv{vars
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:148:25    - Unknown word (loggable)    -- zap.Object("request", loggableReq),
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:149:21    - Unknown word (loggable)    -- zap.Object("env", loggableEnv),
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:15:9      - Unknown word (fastcgi)    -- package fastcgi
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:30:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:31:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:31:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:32:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:32:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/reverseproxy"
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:33:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddytls
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:33:43     - Unknown word (caddytls)    -- caddyserver/caddy/v2/modules/caddytls"
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:352:22    - Unknown word (caddytls)    -- for _, cs := range caddytls.SupportedCipherSuites
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:416:70    - Unknown word (caddytls)    -- SupportedProtocols in caddytls/config.go
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:44:31     - Unknown word (fastcgi)     -- this directory as the fastcgi root directory. Defaults
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:55:22     - Unknown word (fastcgi)     -- // that 404s if the fastcgi path info is not found
modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go:90:38     - Unknown word (fastcgi)     -- reverse_proxy.transport.fastcgi",
modules/caddyhttp/reverseproxy/fastcgi/header.go:15:9      - Unknown word (fastcgi)    -- package fastcgi
modules/caddyhttp/reverseproxy/fastcgi/pool.go:15:9      - Unknown word (fastcgi)    -- package fastcgi
modules/caddyhttp/reverseproxy/fastcgi/reader.go:15:9      - Unknown word (fastcgi)    -- package fastcgi
modules/caddyhttp/reverseproxy/fastcgi/record.go:15:9      - Unknown word (fastcgi)    -- package fastcgi
modules/caddyhttp/reverseproxy/fastcgi/writer.go:15:9      - Unknown word (fastcgi)    -- package fastcgi
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:105:21    - Unknown word (caddyhttp)     -- HandleResponse: []caddyhttp.ResponseHandler{},
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:15:9      - Unknown word (forwardauth) -- package forwardauth
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:170:25    - Unknown word (Errf)          -- return nil, dispenser.Errf("the 'uri' subdirective
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:201:35    - Unknown word (caddyconfig)   -- andlersRaw: []json.RawMessage{caddyconfig.JSONModuleObject(
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:211:37    - Unknown word (behaviour)     -- reverse proxy's default behaviour of copying the response
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:213:35    - Unknown word (behaviour)     -- specifically for that behaviour; we do need the 2xx
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:220:27    - Unknown word (Caddyfile)     -- rpHandler.UnmarshalCaddyfile(dispenser)
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:224:35    - Unknown word (Caddyfile)     -- rpHandler.FinalizeUnmarshalCaddyfile(h)
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:231:34    - Unknown word (caddyconfig)   -- andlersRaw: []json.RawMessage{caddyconfig.JSONModuleObject(
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:23:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:244:11    - Unknown word (httpcaddyfile) -- return []httpcaddyfile.ConfigValue{
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:24:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:24:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:25:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:25:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:26:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:26:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp/headers"
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:27:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp/reverseproxy"
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:28:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp/rewrite"
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:32:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterDirective("forward
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:32:55     - Unknown word (Caddyfile)     -- forward_auth", parseCaddyfile)
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:35:9      - Unknown word (Caddyfile)     -- // parseCaddyfile parses the forward_auth
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:63:11     - Unknown word (Caddyfile)     -- func parseCaddyfile(h httpcaddyfile.Helper
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:63:23     - Unknown word (httpcaddyfile) -- func parseCaddyfile(h httpcaddyfile.Helper) ([]httpcaddyfile
modules/caddyhttp/reverseproxy/forwardauth/caddyfile.go:63:48     - Unknown word (httpcaddyfile) -- httpcaddyfile.Helper) ([]httpcaddyfile.ConfigValue, error)
modules/caddyhttp/reverseproxy/healthchecks.go:146:11    - Unknown word (hdrs)        -- for key, hdrs := range a.Headers
modules/caddyhttp/reverseproxy/healthchecks.go:147:23    - Unknown word (hdrs)        -- for _, val := range hdrs {
modules/caddyhttp/reverseproxy/healthchecks.go:34:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/healthchecks.go:35:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/reverseproxy/healthchecks.go:35:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/reverseproxy/healthchecks.go:429:31    - Unknown word (caddyhttp)   -- context.WithValue(ctx, caddyhttp.VarsCtxKey, map[string
modules/caddyhttp/reverseproxy/healthchecks.go:436:31    - Unknown word (caddyhttp)   -- context.WithValue(ctx, caddyhttp.OriginalRequestCtxKey
modules/caddyhttp/reverseproxy/healthchecks.go:520:7     - Unknown word (caddyhttp)   -- if !caddyhttp.StatusCodeMatches(resp
modules/caddyhttp/reverseproxy/healthchecks.go:602:98    - Unknown word (forgetter)   -- health check failure forgetter panicked"); c != nil
modules/caddyhttp/reverseproxy/hosts.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/hosts.go:263:18    - Unknown word (caddyhttp)   -- dialInfo, ok := caddyhttp.GetVar(ctx, dialInfoVarKey
modules/caddyhttp/reverseproxy/hosts.go:26:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/reverseproxy/hosts.go:26:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/reverseproxy/httptransport.go:195:3     - Unknown word (netaddr)     -- netaddr, err := caddy.ParseNetworkAdd
modules/caddyhttp/reverseproxy/httptransport.go:199:6     - Unknown word (netaddr)     -- if netaddr.PortRangeSize() > 1
modules/caddyhttp/reverseproxy/httptransport.go:202:10    - Unknown word (netaddr)     -- switch netaddr.Network {
modules/caddyhttp/reverseproxy/httptransport.go:204:47    - Unknown word (netaddr)     -- net.ResolveTCPAddr(netaddr.Network, netaddr.JoinHostPort
modules/caddyhttp/reverseproxy/httptransport.go:204:64    - Unknown word (netaddr)     -- solveTCPAddr(netaddr.Network, netaddr.JoinHostPort(0))
modules/caddyhttp/reverseproxy/httptransport.go:231:14    - Unknown word (gosec)       -- //nolint:gosec
modules/caddyhttp/reverseproxy/httptransport.go:231:7     - Unknown word (nolint)      -- //nolint:gosec
modules/caddyhttp/reverseproxy/httptransport.go:232:33    - Unknown word (weakrand)    -- h.Resolver.netAddrs[weakrand.Intn(len(h.Resolver
modules/caddyhttp/reverseproxy/httptransport.go:24:2      - Unknown word (weakrand)   -- weakrand "math/rand"
modules/caddyhttp/reverseproxy/httptransport.go:262:29    - Unknown word (caddyhttp)   -- proxyProtocolInfo, ok := caddyhttp.GetVar(ctx, proxyProtocolInfo
modules/caddyhttp/reverseproxy/httptransport.go:266:8     - Unknown word (proxyv)      -- var proxyv byte
modules/caddyhttp/reverseproxy/httptransport.go:269:5     - Unknown word (proxyv)      -- proxyv = 1
modules/caddyhttp/reverseproxy/httptransport.go:271:5     - Unknown word (proxyv)      -- proxyv = 2
modules/caddyhttp/reverseproxy/httptransport.go:297:14    - Unknown word (proxyproto)  -- header := proxyproto.HeaderProxyFromAddrs
modules/caddyhttp/reverseproxy/httptransport.go:297:46    - Unknown word (proxyv)      -- HeaderProxyFromAddrs(proxyv, sourceAddr, destAddr
modules/caddyhttp/reverseproxy/httptransport.go:34:14     - Unknown word (pires)      -- "github.com/pires/go-proxyproto"
modules/caddyhttp/reverseproxy/httptransport.go:34:23     - Unknown word (proxyproto) -- github.com/pires/go-proxyproto"
modules/caddyhttp/reverseproxy/httptransport.go:366:18    - Unknown word (Alives)      -- rt.DisableKeepAlives = !*h.KeepAlive.Enabled
modules/caddyhttp/reverseproxy/httptransport.go:376:20    - Unknown word (Alives)      -- if !rt.DisableKeepAlives && h.ProxyProtocol
modules/caddyhttp/reverseproxy/httptransport.go:377:37    - Unknown word (keepalives)  -- Logger().Warn("disabling keepalives, they are incompatible
modules/caddyhttp/reverseproxy/httptransport.go:378:17    - Unknown word (Alives)      -- rt.DisableKeepAlives = true
modules/caddyhttp/reverseproxy/httptransport.go:40:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/httptransport.go:41:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/reverseproxy/httptransport.go:41:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/reverseproxy/httptransport.go:42:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddytls
modules/caddyhttp/reverseproxy/httptransport.go:42:43     - Unknown word (caddytls)    -- caddyserver/caddy/v2/modules/caddytls"
modules/caddyhttp/reverseproxy/httptransport.go:440:3     - Unknown word (newtransport) -- newtransport := &HTTPTransport{
modules/caddyhttp/reverseproxy/httptransport.go:457:3     - Unknown word (newtransport) -- newtransport.Transport.TLSClientConfig
modules/caddyhttp/reverseproxy/httptransport.go:457:71    - Unknown word (newtransport) -- ServerName = repl.ReplaceAll(newtransport.Transport.TLSClientConfig
modules/caddyhttp/reverseproxy/httptransport.go:458:10    - Unknown word (newtransport) -- return newtransport
modules/caddyhttp/reverseproxy/httptransport.go:480:39    - Unknown word (Alives)       -- dedicated DisableKeepAlives field in *http2.Transport
modules/caddyhttp/reverseproxy/httptransport.go:482:38    - Unknown word (Alives)       -- Transport.DisableKeepAlives
modules/caddyhttp/reverseproxy/httptransport.go:53:53     - Unknown word (fastcgi)     -- other transports (like fastcgi) might be
modules/caddyhttp/reverseproxy/httptransport.go:555:6     - Unknown word (CAPEM)        -- RootCAPEMFiles []string `json
modules/caddyhttp/reverseproxy/httptransport.go:57:76     - Unknown word (hostnames)   -- address of upstream hostnames.
modules/caddyhttp/reverseproxy/httptransport.go:626:9     - Unknown word (Iface)        -- tlsAppIface, err := ctx.App("tls
modules/caddyhttp/reverseproxy/httptransport.go:630:19    - Unknown word (Iface)        -- tlsApp := tlsAppIface.(*caddytls.TLS)
modules/caddyhttp/reverseproxy/httptransport.go:630:27    - Unknown word (caddytls)     -- tlsApp := tlsAppIface.(*caddytls.TLS)
modules/caddyhttp/reverseproxy/httptransport.go:636:13    - Unknown word (caddytls)     -- certs := caddytls.AllMatchingCertificates
modules/caddyhttp/reverseproxy/httptransport.go:639:88    - Unknown word (gosec)        -- iteration variable (gosec warning)
modules/caddyhttp/reverseproxy/httptransport.go:653:40    - Unknown word (CAPEM)        -- RootCAPool) > 0 || len(t.RootCAPEMFiles) > 0 {
modules/caddyhttp/reverseproxy/httptransport.go:663:33    - Unknown word (CAPEM)        -- pemFile := range t.RootCAPEMFiles {
modules/caddyhttp/reverseproxy/httptransport.go:674:41    - Unknown word (CAPEM)        -- RootCAPool) > 0 || len(t.RootCAPEMFiles) > 0 {
modules/caddyhttp/reverseproxy/httptransport.go:681:20    - Unknown word (caddytls)     -- ca, ok := caRaw.(caddytls.CA)
modules/caddyhttp/reverseproxy/httptransport.go:708:14    - Unknown word (caddytls)     -- curveID := caddytls.SupportedCurves[curveName
modules/caddyhttp/reverseproxy/httptransport_test.go:15:6      - Unknown word (caddyfile)   -- d *caddyfile.Dispenser
modules/caddyhttp/reverseproxy/httptransport_test.go:26:8      - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(
modules/caddyhttp/reverseproxy/httptransport_test.go:36:8      - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(fmt
modules/caddyhttp/reverseproxy/httptransport_test.go:47:8      - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(fmt
modules/caddyhttp/reverseproxy/httptransport_test.go:87:26     - Unknown word (Caddyfile)   -- if err := ht.UnmarshalCaddyfile(tt.args.d); (err !=
modules/caddyhttp/reverseproxy/httptransport_test.go:88:38     - Unknown word (Caddyfile)   -- HTTPTransport.UnmarshalCaddyfile() error = %v, wantErr
modules/caddyhttp/reverseproxy/httptransport_test.go:92:38     - Unknown word (Caddyfile)   -- HTTPTransport.UnmarshalCaddyfile() = %v, want %v", ht
modules/caddyhttp/reverseproxy/httptransport_test.go:9:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/httptransport_test.go:9:35      - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/reverseproxy/httptransport_test.go:9:47      - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/reverseproxy/metrics.go:24:41     - Unknown word (promauto)   -- oxyMetrics.upstreamsHealthy = promauto.NewGaugeVec(prometheus
modules/caddyhttp/reverseproxy/metrics.go:9:50      - Unknown word (promauto)   -- client_golang/prometheus/promauto"
modules/caddyhttp/reverseproxy/reverseproxy.go:1050:28   - Unknown word (stdlib)      -- no extra logging from stdlib
modules/caddyhttp/reverseproxy/reverseproxy.go:1058:12   - Unknown word (bodyclose)   -- //nolint:bodyclose
modules/caddyhttp/reverseproxy/reverseproxy.go:1058:5    - Unknown word (nolint)      -- //nolint:bodyclose
modules/caddyhttp/reverseproxy/reverseproxy.go:1228:46   - Unknown word (stdlib)      -- borrowed from the Go stdlib reverse proxy,
modules/caddyhttp/reverseproxy/reverseproxy.go:1247:30   - Unknown word (behaviour)   -- breaks reverseproxy behaviour, overriding how the
modules/caddyhttp/reverseproxy/reverseproxy.go:173:22    - Unknown word (roundtrips)  -- // after successful roundtrips. The first handler that
modules/caddyhttp/reverseproxy/reverseproxy.go:185:19    - Unknown word (caddyhttp)   -- HandleResponse []caddyhttp.ResponseHandler `json
modules/caddyhttp/reverseproxy/reverseproxy.go:201:48    - Unknown word (Caddyfile)   -- response matchers from the Caddyfile while adapting
modules/caddyhttp/reverseproxy/reverseproxy.go:202:30    - Unknown word (caddyhttp)   -- responseMatchers map[string]caddyhttp.ResponseMatcher
modules/caddyhttp/reverseproxy/reverseproxy.go:204:31    - Unknown word (Caddyfile)   -- the handle_response Caddyfile tokens while adapting
modules/caddyhttp/reverseproxy/reverseproxy.go:205:28    - Unknown word (caddyfile)   -- handleResponseSegments []*caddyfile.Dispenser
modules/caddyhttp/reverseproxy/reverseproxy.go:214:10    - Unknown word (caddyevents) -- events *caddyevents.App
modules/caddyhttp/reverseproxy/reverseproxy.go:227:10    - Unknown word (Iface)       -- eventAppIface, err := ctx.App("events
modules/caddyhttp/reverseproxy/reverseproxy.go:231:21    - Unknown word (Iface)       -- h.events = eventAppIface.(*caddyevents.App)
modules/caddyhttp/reverseproxy/reverseproxy.go:231:29    - Unknown word (caddyevents) -- events = eventAppIface.(*caddyevents.App)
modules/caddyhttp/reverseproxy/reverseproxy.go:39:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/reverseproxy.go:40:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/reverseproxy.go:40:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/reverseproxy/reverseproxy.go:40:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/reverseproxy/reverseproxy.go:41:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyevents
modules/caddyhttp/reverseproxy/reverseproxy.go:41:43     - Unknown word (caddyevents) -- caddyserver/caddy/v2/modules/caddyevents"
modules/caddyhttp/reverseproxy/reverseproxy.go:42:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/reverseproxy/reverseproxy.go:42:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/reverseproxy/reverseproxy.go:43:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/reverseproxy/reverseproxy.go:43:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/headers"
modules/caddyhttp/reverseproxy/reverseproxy.go:44:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/rewrite"
modules/caddyhttp/reverseproxy/reverseproxy.go:527:40    - Unknown word (hostport)    -- reverse_proxy.upstream.hostport", dialInfo.Address)
modules/caddyhttp/reverseproxy/reverseproxy.go:557:5     - Unknown word (succ)        -- if succ, ok := proxyErr.(roundtripSuc
modules/caddyhttp/reverseproxy/reverseproxy.go:558:16    - Unknown word (succ)        -- return true, succ.error
modules/caddyhttp/reverseproxy/reverseproxy.go:59:34     - Unknown word (hostport)    -- reverse_proxy.upstream.hostport}` | The host:port of
modules/caddyhttp/reverseproxy/reverseproxy.go:619:26    - Unknown word (gunicorn)    -- with "slow clients" (gunicorn, etc.) - this obviously
modules/caddyhttp/reverseproxy/reverseproxy.go:621:47    - Unknown word (slowloris)   -- more susceptible to slowloris
modules/caddyhttp/reverseproxy/reverseproxy.go:800:4     - Unknown word (nolint)      -- //nolint:errcheck
modules/caddyhttp/reverseproxy/reverseproxy.go:860:35    - Unknown word (Loggable)    -- request", caddyhttp.LoggableHTTPRequest{
modules/caddyhttp/reverseproxy/reverseproxy.go:874:36    - Unknown word (Loggable)    -- headers", caddyhttp.LoggableHTTPHeader{
modules/caddyhttp/reverseproxy/reverseproxy.go:977:48    - Unknown word (behaviour)   -- default finalize/copy behaviour
modules/caddyhttp/reverseproxy/selectionpolicies.go:100:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the module from
modules/caddyhttp/reverseproxy/selectionpolicies.go:100:47    - Unknown word (Caddyfile)   -- sets up the module from Caddyfile tokens.
modules/caddyhttp/reverseproxy/selectionpolicies.go:101:61    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/reverseproxy/selectionpolicies.go:112:13    - Unknown word (Errf)        -- return d.Errf("invalid weight value
modules/caddyhttp/reverseproxy/selectionpolicies.go:115:13    - Unknown word (Errf)        -- return d.Errf("invalid weight value
modules/caddyhttp/reverseproxy/selectionpolicies.go:182:55    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/reverseproxy/selectionpolicies.go:191:12    - Unknown word (Errf)        -- return d.Errf("invalid choice value
modules/caddyhttp/reverseproxy/selectionpolicies.go:224:31    - Unknown word (nolint)      -- weakrand.Intn(i + 1) //nolint:gosec
modules/caddyhttp/reverseproxy/selectionpolicies.go:224:38    - Unknown word (gosec)       -- Intn(i + 1) //nolint:gosec
modules/caddyhttp/reverseproxy/selectionpolicies.go:224:8     - Unknown word (weakrand)    -- j := weakrand.Intn(i + 1) //nolint
modules/caddyhttp/reverseproxy/selectionpolicies.go:23:2      - Unknown word (weakrand)   -- weakrand "math/rand"
modules/caddyhttp/reverseproxy/selectionpolicies.go:273:22    - Unknown word (weakrand)    -- if count == 1 || (weakrand.Int()%count) == 0 {
modules/caddyhttp/reverseproxy/selectionpolicies.go:273:53    - Unknown word (nolint)      -- Int()%count) == 0 { //nolint:gosec
modules/caddyhttp/reverseproxy/selectionpolicies.go:273:60    - Unknown word (gosec)       -- count) == 0 { //nolint:gosec
modules/caddyhttp/reverseproxy/selectionpolicies.go:283:52    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/reverseproxy/selectionpolicies.go:31:14     - Unknown word (cespare)    -- "github.com/cespare/xxhash/v2"
modules/caddyhttp/reverseproxy/selectionpolicies.go:31:22     - Unknown word (xxhash)     -- "github.com/cespare/xxhash/v2"
modules/caddyhttp/reverseproxy/selectionpolicies.go:33:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/selectionpolicies.go:34:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/selectionpolicies.go:34:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddyhttp/reverseproxy/selectionpolicies.go:35:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/selectionpolicies.go:35:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/reverseproxy/selectionpolicies.go:35:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/reverseproxy/selectionpolicies.go:36:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/reverseproxy/selectionpolicies.go:36:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/reverseproxy/selectionpolicies.go:406:13    - Unknown word (caddyhttp)   -- address := caddyhttp.GetVar(req.Context(
modules/caddyhttp/reverseproxy/selectionpolicies.go:406:45    - Unknown word (caddyhttp)   -- GetVar(req.Context(), caddyhttp.ClientIPVarKey).(string
modules/caddyhttp/reverseproxy/selectionpolicies.go:474:19    - Unknown word (caddyconfig) -- s.FallbackRaw = caddyconfig.JSONModuleObject(RandomSelect
modules/caddyhttp/reverseproxy/selectionpolicies.go:524:13    - Unknown word (Errf)        -- return d.Errf("unrecognized option
modules/caddyhttp/reverseproxy/selectionpolicies.go:555:19    - Unknown word (caddyconfig) -- s.FallbackRaw = caddyconfig.JSONModuleObject(RandomSelect
modules/caddyhttp/reverseproxy/selectionpolicies.go:604:13    - Unknown word (Errf)        -- return d.Errf("unrecognized option
modules/caddyhttp/reverseproxy/selectionpolicies.go:639:19    - Unknown word (caddyconfig) -- s.FallbackRaw = caddyconfig.JSONModuleObject(RandomSelect
modules/caddyhttp/reverseproxy/selectionpolicies.go:669:21    - Unknown word (caddyhttp)   -- if trusted, ok := caddyhttp.GetVar(req.Context(
modules/caddyhttp/reverseproxy/selectionpolicies.go:669:53    - Unknown word (caddyhttp)   -- GetVar(req.Context(), caddyhttp.TrustedProxyVarKey)
modules/caddyhttp/reverseproxy/selectionpolicies.go:71:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the module from
modules/caddyhttp/reverseproxy/selectionpolicies.go:71:47     - Unknown word (Caddyfile)   -- sets up the module from Caddyfile tokens.
modules/caddyhttp/reverseproxy/selectionpolicies.go:72:36     - Unknown word (Caddyfile)   -- RandomSelection) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/reverseproxy/selectionpolicies.go:72:49     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/reverseproxy/selectionpolicies.go:787:40    - Unknown word (nolint)      -- ) % count) == 0 { //nolint:gosec
modules/caddyhttp/reverseproxy/selectionpolicies.go:787:47    - Unknown word (gosec)       -- count) == 0 { //nolint:gosec
modules/caddyhttp/reverseproxy/selectionpolicies.go:787:7     - Unknown word (weakrand)    -- if (weakrand.Int() % count) == 0
modules/caddyhttp/reverseproxy/selectionpolicies.go:826:14    - Unknown word (weakrand)    -- return best[weakrand.Intn(len(best))] //nolint
modules/caddyhttp/reverseproxy/selectionpolicies.go:826:42    - Unknown word (nolint)      -- weakrand.Intn(len(best))] //nolint:gosec
modules/caddyhttp/reverseproxy/selectionpolicies.go:826:49    - Unknown word (gosec)       -- len(best))] //nolint:gosec
modules/caddyhttp/reverseproxy/selectionpolicies.go:853:7     - Unknown word (xxhash)      -- h := xxhash.New()
modules/caddyhttp/reverseproxy/selectionpolicies_test.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/selectionpolicies_test.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/reverseproxy/selectionpolicies_test.go:24:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddyhttp/reverseproxy/selectionpolicies_test.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/reverseproxy/selectionpolicies_test.go:25:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/reverseproxy/selectionpolicies_test.go:298:57    - Unknown word (caddyhttp)   -- WithValue(req.Context(), caddyhttp.VarsCtxKey, make(map
modules/caddyhttp/reverseproxy/selectionpolicies_test.go:301:2     - Unknown word (caddyhttp)   -- caddyhttp.SetVar(req.Context(
modules/caddyhttp/reverseproxy/selectionpolicies_test.go:301:34    - Unknown word (caddyhttp)   -- SetVar(req.Context(), caddyhttp.ClientIPVarKey, "17
modules/caddyhttp/reverseproxy/selectionpolicies_test.go:306:2     - Unknown word (caddyhttp)   -- caddyhttp.SetVar(req.Context(
modules/caddyhttp/reverseproxy/selectionpolicies_test.go:748:16    - Unknown word (caddyconfig) -- FallbackRaw: caddyconfig.JSONModuleObject(FirstSelecti
modules/caddyhttp/reverseproxy/streaming.go:154:6     - Unknown word (timeoutc)    -- var timeoutc <-chan time.Time
modules/caddyhttp/reverseproxy/streaming.go:158:3     - Unknown word (timeoutc)    -- timeoutc = timer.C
modules/caddyhttp/reverseproxy/streaming.go:161:2     - Unknown word (errc)        -- errc := make(chan error,
modules/caddyhttp/reverseproxy/streaming.go:163:23    - Unknown word (errc)        -- go spc.copyToBackend(errc)
modules/caddyhttp/reverseproxy/streaming.go:164:25    - Unknown word (errc)        -- spc.copyFromBackend(errc)
modules/caddyhttp/reverseproxy/streaming.go:166:16    - Unknown word (errc)        -- case err := <-errc:
modules/caddyhttp/reverseproxy/streaming.go:170:17    - Unknown word (timeoutc)    -- case time := <-timeoutc:
modules/caddyhttp/reverseproxy/streaming.go:231:13    - Unknown word (bodyclose)   -- //nolint:bodyclose
modules/caddyhttp/reverseproxy/streaming.go:231:6     - Unknown word (nolint)      -- //nolint:bodyclose
modules/caddyhttp/reverseproxy/streaming.go:268:7     - Unknown word (rerr)        -- nr, rerr := src.Read(buf)
modules/caddyhttp/reverseproxy/streaming.go:26:2      - Unknown word (weakrand)   -- weakrand "math/rand"
modules/caddyhttp/reverseproxy/streaming.go:271:22    - Unknown word (rerr)        -- c.Write(zap.Error(rerr))
modules/caddyhttp/reverseproxy/streaming.go:273:21    - Unknown word (rerr)        -- if rerr != nil && rerr != io.EOF && rerr !
modules/caddyhttp/reverseproxy/streaming.go:273:39    - Unknown word (rerr)        -- & rerr != io.EOF && rerr != context.Canceled
modules/caddyhttp/reverseproxy/streaming.go:273:6     - Unknown word (rerr)        -- if rerr != nil && rerr != io
modules/caddyhttp/reverseproxy/streaming.go:275:7     - Unknown word (fastcgi)     -- // fastcgi PoC earlier; but it
modules/caddyhttp/reverseproxy/streaming.go:287:8     - Unknown word (werr)        -- nw, werr := dst.Write(buf[:nr
modules/caddyhttp/reverseproxy/streaming.go:295:16    - Unknown word (werr)        -- zap.Error(werr),
modules/caddyhttp/reverseproxy/streaming.go:298:7     - Unknown word (werr)        -- if werr != nil {
modules/caddyhttp/reverseproxy/streaming.go:299:47    - Unknown word (werr)        -- Errorf("writing: %w", werr)
modules/caddyhttp/reverseproxy/streaming.go:395:37    - Unknown word (pascaldekloe) -- connection. Thanks to @pascaldekloe who provided inspiration
modules/caddyhttp/reverseproxy/streaming.go:397:15    - Unknown word (pascaldekloe) -- // github.com/pascaldekloe/websocket. Further work
modules/caddyhttp/reverseproxy/streaming.go:495:7     - Unknown word (weakrand)     -- n := weakrand.Uint32()
modules/caddyhttp/reverseproxy/streaming.go:533:5     - Unknown word (nolint)       -- //nolint:errcheck
modules/caddyhttp/reverseproxy/streaming.go:561:4     - Unknown word (nolint)       -- //nolint:errcheck
modules/caddyhttp/reverseproxy/streaming.go:582:47    - Unknown word (errc)         -- otocolCopier) copyFromBackend(errc chan<- error) {
modules/caddyhttp/reverseproxy/streaming.go:74:11     - Unknown word (bodyclose)  -- //nolint:bodyclose
modules/caddyhttp/reverseproxy/streaming.go:74:4      - Unknown word (nolint)     -- //nolint:bodyclose
modules/caddyhttp/reverseproxy/streaming.go:93:22     - Unknown word (cancelation) -- // Ensure that the cancelation of a request closes
modules/caddyhttp/reverseproxy/streaming_test.go:9:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/upstreams.go:104:14    - Unknown word (gosec)       -- //nolint:gosec
modules/caddyhttp/reverseproxy/upstreams.go:104:7     - Unknown word (nolint)      -- //nolint:gosec
modules/caddyhttp/reverseproxy/upstreams.go:105:34    - Unknown word (weakrand)    -- su.Resolver.netAddrs[weakrand.Intn(len(su.Resolver
modules/caddyhttp/reverseproxy/upstreams.go:121:2     - Unknown word (srvs)        -- srvsMu.RLock()
modules/caddyhttp/reverseproxy/upstreams.go:122:12    - Unknown word (srvs)        -- cached := srvs[suAddr]
modules/caddyhttp/reverseproxy/upstreams.go:123:2     - Unknown word (srvs)        -- srvsMu.RUnlock()
modules/caddyhttp/reverseproxy/upstreams.go:129:2     - Unknown word (srvs)        -- srvsMu.Lock()
modules/caddyhttp/reverseproxy/upstreams.go:130:8     - Unknown word (srvs)        -- defer srvsMu.Unlock()
modules/caddyhttp/reverseproxy/upstreams.go:17:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/reverseproxy/upstreams.go:324:14    - Unknown word (gosec)       -- //nolint:gosec
modules/caddyhttp/reverseproxy/upstreams.go:324:7     - Unknown word (nolint)      -- //nolint:gosec
modules/caddyhttp/reverseproxy/upstreams.go:325:34    - Unknown word (weakrand)    -- au.Resolver.netAddrs[weakrand.Intn(len(au.Resolver
modules/caddyhttp/reverseproxy/upstreams.go:435:4     - Unknown word (failovers)   -- // failovers, especially in conjunction
modules/caddyhttp/reverseproxy/upstreams.go:7:2       - Unknown word (weakrand)   -- weakrand "math/rand"
modules/caddyhttp/rewrite/caddyfile.go:105:6     - Unknown word (rewr)          -- var rewr Rewrite
modules/caddyhttp/rewrite/caddyfile.go:112:3     - Unknown word (rewr)          -- rewr.StripPathPrefix = args
modules/caddyhttp/rewrite/caddyfile.go:113:25    - Unknown word (rewr)          -- if !strings.HasPrefix(rewr.StripPathPrefix, "/
modules/caddyhttp/rewrite/caddyfile.go:114:33    - Unknown word (rewr)          -- StripPathPrefix = "/" + rewr.StripPathPrefix
modules/caddyhttp/rewrite/caddyfile.go:114:4     - Unknown word (rewr)          -- rewr.StripPathPrefix = "
modules/caddyhttp/rewrite/caddyfile.go:141:19    - Unknown word (Errf)          -- return nil, h.Errf("limit must be an integer
modules/caddyhttp/rewrite/caddyfile.go:188:17    - Unknown word (Errf)          -- return nil, h.Errf("unrecognized URI manipulatio
modules/caddyhttp/rewrite/caddyfile.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/rewrite/caddyfile.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/rewrite/caddyfile.go:23:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddyhttp/rewrite/caddyfile.go:247:17    - Unknown word (Errf)          -- return nil, h.Errf("path matcher must begin
modules/caddyhttp/rewrite/caddyfile.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/rewrite/caddyfile.go:24:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/rewrite/caddyfile.go:24:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/rewrite/caddyfile.go:25:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/rewrite/caddyfile.go:25:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/rewrite/caddyfile.go:272:28    - Unknown word (caddyhttp)     -- subroute, ok := handler.(*caddyhttp.Subroute)
modules/caddyhttp/rewrite/caddyfile.go:279:18    - Unknown word (caddyhttp)     -- "path": h.JSON(caddyhttp.MatchPath{path}),
modules/caddyhttp/rewrite/caddyfile.go:285:4     - Unknown word (caddyconfig)   -- caddyconfig.JSONModuleObject(Rewrite
modules/caddyhttp/rewrite/caddyfile.go:29:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterDirective("rewrite
modules/caddyhttp/rewrite/caddyfile.go:29:50     - Unknown word (Caddyfile)     -- sterDirective("rewrite", parseCaddyfileRewrite)
modules/caddyhttp/rewrite/caddyfile.go:30:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/rewrite/caddyfile.go:30:56     - Unknown word (Caddyfile)     -- ndlerDirective("method", parseCaddyfileMethod)
modules/caddyhttp/rewrite/caddyfile.go:31:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/rewrite/caddyfile.go:31:53     - Unknown word (Caddyfile)     -- rHandlerDirective("uri", parseCaddyfileURI)
modules/caddyhttp/rewrite/caddyfile.go:32:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterDirective("handle
modules/caddyhttp/rewrite/caddyfile.go:32:54     - Unknown word (Caddyfile)     -- "handle_path", parseCaddyfileHandlePath)
modules/caddyhttp/rewrite/caddyfile.go:35:9      - Unknown word (Caddyfile)     -- // parseCaddyfileRewrite sets up a basic
modules/caddyhttp/rewrite/caddyfile.go:47:17     - Unknown word (Errf)          -- return nil, h.Errf("too few arguments;
modules/caddyhttp/rewrite/caddyfile.go:50:17     - Unknown word (Errf)          -- return nil, h.Errf("too many arguments
modules/caddyhttp/rewrite/caddyfile.go:75:52     - Unknown word (caddyhttp)     -- httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error
modules/caddyhttp/rewrite/caddyfile.go:97:49     - Unknown word (caddyhttp)     -- httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error
modules/caddyhttp/rewrite/rewrite.go:106:22    - Unknown word (rewr)        -- / Provision sets up rewr.
modules/caddyhttp/rewrite/rewrite.go:107:7     - Unknown word (rewr)        -- func (rewr *Rewrite) Provision
modules/caddyhttp/rewrite/rewrite.go:108:2     - Unknown word (rewr)        -- rewr.logger = ctx.Logger
modules/caddyhttp/rewrite/rewrite.go:110:22    - Unknown word (rewr)        -- for i, rep := range rewr.PathRegexp {
modules/caddyhttp/rewrite/rewrite.go:120:5     - Unknown word (rewr)        -- if rewr.Query != nil {
modules/caddyhttp/rewrite/rewrite.go:132:76    - Unknown word (caddyhttp)   -- *http.Request, next caddyhttp.Handler) error {
modules/caddyhttp/rewrite/rewrite.go:146:26    - Unknown word (caddyhttp)   -- zap.Object("request", caddyhttp.LoggableHTTPRequest
modules/caddyhttp/rewrite/rewrite.go:146:36    - Unknown word (Loggable)    -- request", caddyhttp.LoggableHTTPRequest{Request:
modules/caddyhttp/rewrite/rewrite.go:264:18    - Unknown word (caddyhttp)   -- escapedPath = caddyhttp.CleanPath(escapedPath
modules/caddyhttp/rewrite/rewrite.go:272:18    - Unknown word (caddyhttp)   -- escapedPath = caddyhttp.CleanPath(escapedPath
modules/caddyhttp/rewrite/rewrite.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/rewrite/rewrite.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/rewrite/rewrite.go:28:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/rewrite/rewrite_test.go:155:53    - Unknown word (Ffoo)        -- "/index.php?a=b&p=%2Ffoo%2Fbar"),
modules/caddyhttp/rewrite/rewrite_test.go:155:59    - Unknown word (Fbar)        -- index.php?a=b&p=%2Ffoo%2Fbar"),
modules/caddyhttp/rewrite/rewrite_test.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/rewrite/rewrite_test.go:250:47    - Unknown word (Fbar)        -- GET", "/prefix/foo%2Fbar"),
modules/caddyhttp/rewrite/rewrite_test.go:251:40    - Unknown word (Fbar)        -- newRequest(t, "GET", "/foo%2Fbar"),
modules/caddyhttp/rewrite/rewrite_test.go:307:40    - Unknown word (Fbar)        -- newRequest(t, "GET", "/foo%2Fbar/suffix"),
modules/caddyhttp/rewrite/rewrite_test.go:311:40    - Unknown word (fsuffix)     -- StripPathSuffix: "%2fsuffix"},
modules/caddyhttp/rewrite/rewrite_test.go:312:46    - Unknown word (fsuffix)     -- "GET", "/foo%2Fbar%2fsuffix"),
modules/caddyhttp/rewrite/rewrite_test.go:322:59    - Unknown word (findme)      -- substrReplacer{{Find: "findme", Replace: "replaced
modules/caddyhttp/rewrite/rewrite_test.go:327:59    - Unknown word (findme)      -- substrReplacer{{Find: "findme", Replace: "replaced
modules/caddyhttp/rewrite/rewrite_test.go:328:39    - Unknown word (findme)      -- newRequest(t, "GET", "/foo/findme/bar"),
modules/caddyhttp/rewrite/rewrite_test.go:332:59    - Unknown word (findme)      -- substrReplacer{{Find: "findme", Replace: "replaced
modules/caddyhttp/rewrite/rewrite_test.go:333:39    - Unknown word (findme)      -- newRequest(t, "GET", "/foo/findme%2Fbar"),
modules/caddyhttp/rewrite/rewrite_test.go:64:40     - Unknown word (Fbaz)        -- newRequest(t, "GET", "/bar%3Fbaz?c=d"),
modules/caddyhttp/rewrite/rewrite_test.go:65:40     - Unknown word (Fbaz)        -- newRequest(t, "GET", "/bar%3Fbaz?c=d"),
modules/caddyhttp/rewrite/rewrite_test.go:69:40     - Unknown word (Fbaz)        -- newRequest(t, "GET", "/bar%3Fbaz"),
modules/caddyhttp/rewrite/rewrite_test.go:70:40     - Unknown word (Fbaz)        -- newRequest(t, "GET", "/bar%3Fbaz"),
modules/caddyhttp/rewrite/rewrite_test.go:80:49     - Unknown word (Ffoo)        -- GET", "/index.php?p=%2Ffoo%2Fbar"),
modules/caddyhttp/rewrite/rewrite_test.go:80:55     - Unknown word (Fbar)        -- index.php?p=%2Ffoo%2Fbar"),
modules/caddyhttp/routes.go:138:10    - Unknown word (Iface)       -- matchersIface, err := ctx.LoadModule
modules/caddyhttp/routes.go:142:44    - Unknown word (Iface)       -- FromInterface(matchersIface)
modules/caddyhttp/routes.go:154:10    - Unknown word (Iface)       -- handlersIface, err := ctx.LoadModule
modules/caddyhttp/routes.go:158:34    - Unknown word (Iface)       -- handler := range handlersIface.([]any) {
modules/caddyhttp/routes.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/routes.go:166:9     - Unknown word (midhandler)  -- for _, midhandler := range r.Handlers
modules/caddyhttp/routes.go:167:59    - Unknown word (midhandler)  -- wrapMiddleware(ctx, midhandler, metrics))
modules/caddyhttp/routes.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/routes.go:347:16    - Unknown word (mset)        -- // matchers in mset or if there are no matchers
modules/caddyhttp/routes.go:348:7     - Unknown word (mset)        -- func (mset MatcherSet) Match(r
modules/caddyhttp/routes.go:349:20    - Unknown word (mset)        -- for _, m := range mset {
modules/caddyhttp/routes.go:380:19    - Unknown word (Ifaces)      -- for _, matcherSetIfaces := range matcherSets
modules/caddyhttp/routes.go:382:37    - Unknown word (Ifaces)      -- matcher := range matcherSetIfaces {
modules/caddyhttp/server.go:1100:15   - Unknown word (fdgram)      -- "fdgram": "fdgram",
modules/caddyhttp/server.go:1100:3    - Unknown word (fdgram)      -- "fdgram": "fdgram",
modules/caddyhttp/server.go:113:21    - Unknown word (unrouted)    -- // By default, all unrouted requests receive a
modules/caddyhttp/server.go:138:18    - Unknown word (caddytls)    -- TLSConnPolicies caddytls.ConnectionPolicies
modules/caddyhttp/server.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/server.go:239:16    - Unknown word (caddytls)    -- tlsApp *caddytls.TLS
modules/caddyhttp/server.go:240:16    - Unknown word (caddyevents) -- events *caddyevents.App
modules/caddyhttp/server.go:312:12    - Unknown word (bodyclose)   -- //nolint:bodyclose
modules/caddyhttp/server.go:312:5     - Unknown word (nolint)      -- //nolint:bodyclose
modules/caddyhttp/server.go:328:2     - Unknown word (loggable)    -- loggableReq := zap.Object("request
modules/caddyhttp/server.go:328:39    - Unknown word (Loggable)    -- zap.Object("request", LoggableHTTPRequest{
modules/caddyhttp/server.go:332:35    - Unknown word (loggable)    -- errorLogger.WithLazy(loggableReq)
modules/caddyhttp/server.go:337:3     - Unknown word (wrec)        -- wrec := NewResponseRecorder
modules/caddyhttp/server.go:338:7     - Unknown word (wrec)        -- w = wrec
modules/caddyhttp/server.go:33:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddyhttp/server.go:33:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddyhttp/server.go:348:27    - Unknown word (wrec)        -- setReadSizer, ok := wrec.(interface{ setReadSize
modules/caddyhttp/server.go:354:33    - Unknown word (loggable)    -- s.accessLogger.With(loggableReq)
modules/caddyhttp/server.go:356:33    - Unknown word (wrec)        -- logRequest(accLog, r, wrec, &duration, repl, bodyReader
modules/caddyhttp/server.go:36:30     - Unknown word (qlog)        -- com/quic-go/quic-go/qlog"
modules/caddyhttp/server.go:40:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/server.go:41:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyevents
modules/caddyhttp/server.go:41:43     - Unknown word (caddyevents) -- caddyserver/caddy/v2/modules/caddyevents"
modules/caddyhttp/server.go:42:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddytls
modules/caddyhttp/server.go:42:43     - Unknown word (caddytls)    -- caddyserver/caddy/v2/modules/caddytls"
modules/caddyhttp/server.go:554:57    - Unknown word (caddytls)    -- TLSConnPolicies, func(cp *caddytls.ConnectionPolicy) bool
modules/caddyhttp/server.go:59:45     - Unknown word (slowloris)   -- zero value can mitigate slowloris attacks, but
modules/caddyhttp/server.go:623:15    - Unknown word (qlog)        -- Tracer: qlog.DefaultConnectionTracer
modules/caddyhttp/server.go:629:4     - Unknown word (nolint)      -- //nolint:errcheck
modules/caddyhttp/server.go:72:15     - Unknown word (alives)      -- // when keep-alives are enabled. If zero
modules/caddyhttp/server.go:752:6     - Unknown word (certmagic)   -- if certmagic.MatchWildcard(hostWithoutPort
modules/caddyhttp/server.go:773:39    - Unknown word (wrec)        -- Logger, r *http.Request, wrec ResponseRecorder, duration
modules/caddyhttp/server.go:829:32    - Unknown word (Loggable)    -- Object("resp_headers", LoggableHTTPHeader{
modules/caddyhttp/server_test.go:110:2     - Unknown word (wrec)       -- wrec := NewResponseRecorder
modules/caddyhttp/server_test.go:13:14     - Unknown word (stretchr)   -- "github.com/stretchr/testify/assert"
modules/caddyhttp/server_test.go:1:9       - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/server_test.go:20:9      - Unknown word (Syncer)     -- type nopSyncer writeFunc
modules/caddyhttp/server_test.go:22:12     - Unknown word (Syncer)     -- func (n nopSyncer) Write(p []byte) (int
modules/caddyhttp/server_test.go:26:12     - Unknown word (Syncer)     -- func (n nopSyncer) Sync() error {
modules/caddyhttp/server_test.go:33:11     - Unknown word (Syncer)     -- ws := nopSyncer(wf)
modules/caddyhttp/server_test.go:54:2      - Unknown word (wrec)       -- wrec := NewResponseRecorder
modules/caddyhttp/server_test.go:63:28     - Unknown word (wrec)       -- logRequest(accLog, req, wrec, &duration, repl, bodyReader
modules/caddyhttp/server_test.go:82:2      - Unknown word (wrec)       -- wrec := NewResponseRecorder
modules/caddyhttp/server_test.go:91:28     - Unknown word (wrec)       -- logRequest(accLog, req, wrec, &duration, repl, bodyReader
modules/caddyhttp/standard/imports.go:10:62     - Unknown word (zstd)        -- modules/caddyhttp/encode/zstd"
modules/caddyhttp/standard/imports.go:16:55     - Unknown word (proxyprotocol) -- v2/modules/caddyhttp/proxyprotocol"
modules/caddyhttp/standard/imports.go:18:55     - Unknown word (requestbody)   -- v2/modules/caddyhttp/requestbody"
modules/caddyhttp/standard/imports.go:20:68     - Unknown word (fastcgi)       -- caddyhttp/reverseproxy/fastcgi"
modules/caddyhttp/standard/imports.go:21:68     - Unknown word (forwardauth)   -- caddyhttp/reverseproxy/forwardauth"
modules/caddyhttp/standard/imports.go:5:16      - Unknown word (caddyserver) -- _ "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/standard/imports.go:5:45      - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/standard/imports.go:6:16      - Unknown word (caddyserver) -- _ "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/standard/imports.go:6:45      - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/caddyauth"
modules/caddyhttp/standard/imports.go:6:55      - Unknown word (caddyauth)   -- v2/modules/caddyhttp/caddyauth"
modules/caddyhttp/standard/imports.go:7:16      - Unknown word (caddyserver) -- _ "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/standard/imports.go:7:45      - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/encode"
modules/caddyhttp/standard/imports.go:8:16      - Unknown word (caddyserver) -- _ "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/standard/imports.go:8:45      - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/encode/brotli"
modules/caddyhttp/standard/imports.go:9:16      - Unknown word (caddyserver) -- _ "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/standard/imports.go:9:45      - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp/encode/gzip"
modules/caddyhttp/staticerror.go:114:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*StaticError
modules/caddyhttp/staticerror.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/staticerror.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/staticerror.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/staticerror.go:23:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/staticerror.go:23:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/staticerror.go:54:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the handler
modules/caddyhttp/staticerror.go:54:48     - Unknown word (Caddyfile)   -- up the handler from Caddyfile tokens. Syntax:
modules/caddyhttp/staticerror.go:62:32     - Unknown word (Caddyfile)   -- StaticError) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/staticerror.go:62:45     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/staticerror.go:91:13     - Unknown word (Errf)        -- return d.Errf("unrecognized subdirective
modules/caddyhttp/staticresp.go:131:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the handler
modules/caddyhttp/staticresp.go:131:48    - Unknown word (Caddyfile)   -- up the handler from Caddyfile tokens. Syntax:
modules/caddyhttp/staticresp.go:140:35    - Unknown word (Caddyfile)   -- StaticResponse) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/staticresp.go:140:48    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/staticresp.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/staticresp.go:174:13    - Unknown word (Errf)        -- return d.Errf("unrecognized subdirective
modules/caddyhttp/staticresp.go:288:30    - Unknown word (caddyconfig) -- handlers = append(handlers, caddyconfig.JSONModuleObject(handler
modules/caddyhttp/staticresp.go:297:46    - Unknown word (Redir)       -- AutoHTTPSConfig{DisableRedir: true},
modules/caddyhttp/staticresp.go:306:20    - Unknown word (caddycmd)    -- func cmdRespond(fl caddycmd.Flags) (int, error)
modules/caddyhttp/staticresp.go:33:2      - Unknown word (caddycmd)   -- caddycmd "github.com/caddyserver
modules/caddyhttp/staticresp.go:33:23     - Unknown word (caddyserver) -- caddycmd "github.com/caddyserver/caddy/v2/cmd"
modules/caddyhttp/staticresp.go:35:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/staticresp.go:36:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/staticresp.go:36:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddyhttp/staticresp.go:37:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/staticresp.go:37:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/staticresp.go:37:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/staticresp.go:425:12    - Unknown word (caddyconfig) -- "http": caddyconfig.JSON(httpApp, nil),
modules/caddyhttp/staticresp.go:42:2      - Unknown word (caddycmd)    -- caddycmd.RegisterCommand(caddycmd
modules/caddyhttp/staticresp.go:42:27     - Unknown word (caddycmd)    -- caddycmd.RegisterCommand(caddycmd.Command{
modules/caddyhttp/staticresp.go:461:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*StaticRespons
modules/caddyhttp/staticresp.go:82:15     - Unknown word (caddycmd)    -- cmd.RunE = caddycmd.WrapCommandFuncForCobra
modules/caddyhttp/staticresp_test.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/staticresp_test.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/subroute.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/subroute.go:21:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/templates/caddyfile.go:18:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/templates/caddyfile.go:19:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/templates/caddyfile.go:19:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddyhttp/templates/caddyfile.go:20:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/templates/caddyfile.go:20:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/templates/caddyfile.go:20:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/templates/caddyfile.go:21:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/templates/caddyfile.go:21:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/templates/caddyfile.go:21:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/templates/caddyfile.go:22:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/templates/caddyfile.go:22:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/templates/caddyfile.go:26:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/templates/caddyfile.go:26:59     - Unknown word (Caddyfile)     -- erDirective("templates", parseCaddyfile)
modules/caddyhttp/templates/caddyfile.go:29:44     - Unknown word (Caddyfile)     -- up the handler from Caddyfile tokens. Syntax:
modules/caddyhttp/templates/caddyfile.go:29:9      - Unknown word (Caddyfile)     -- // parseCaddyfile sets up the handler
modules/caddyhttp/templates/caddyfile.go:36:11     - Unknown word (Caddyfile)     -- func parseCaddyfile(h httpcaddyfile.Helper
modules/caddyhttp/templates/caddyfile.go:36:23     - Unknown word (httpcaddyfile) -- func parseCaddyfile(h httpcaddyfile.Helper) (caddyhttp.Middleware
modules/caddyhttp/templates/caddyfile.go:36:46     - Unknown word (caddyhttp)     -- httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error
modules/caddyhttp/templates/caddyfile.go:65:17     - Unknown word (caddyfile)     -- unm, err := caddyfile.UnmarshalModule(h.Dispenser
modules/caddyhttp/templates/caddyfile.go:71:20     - Unknown word (Errf)          -- return nil, h.Errf("module %s (%T) does
modules/caddyhttp/templates/caddyfile.go:76:44     - Unknown word (caddyconfig)   -- extensionModuleName] = caddyconfig.JSON(cf, nil)
modules/caddyhttp/templates/frontmatter_fuzz.go:15:12     - Unknown word (gofuzz)     -- //go:build gofuzz
modules/caddyhttp/templates/templates.go:162:18    - Unknown word (mydir)       -- // {{listFiles "/mydir"}}
modules/caddyhttp/templates/templates.go:168:5     - Unknown word (Goldmark)    -- // [Goldmark](https://github.com
modules/caddyhttp/templates/templates.go:256:4     - Unknown word (sitename)    -- // sitename = "A Caddy site"
modules/caddyhttp/templates/templates.go:266:4     - Unknown word (sitename)    -- // sitename: A Caddy site
modules/caddyhttp/templates/templates.go:276:5     - Unknown word (sitename)    -- // "sitename": "A Caddy site"
modules/caddyhttp/templates/templates.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/templates/templates.go:29:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/templates/templates.go:29:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/templates/templates.go:371:12    - Unknown word (Iface)       -- for _, modIface := range mods.(map[string
modules/caddyhttp/templates/templates.go:372:44    - Unknown word (Iface)       -- append(t.customFuncs, modIface.(CustomFunctions).CustomTempl
modules/caddyhttp/templates/templates.go:392:76    - Unknown word (caddyhttp)   -- *http.Request, next caddyhttp.Handler) error {
modules/caddyhttp/templates/templates.go:409:9     - Unknown word (caddyhttp)   -- rec := caddyhttp.NewResponseRecorder
modules/caddyhttp/templates/templates.go:437:40    - Unknown word (caddyhttp)   -- executeTemplate(rr caddyhttp.ResponseRecorder, r
modules/caddyhttp/templates/templates.go:456:18    - Unknown word (caddyhttp)   -- var handlerErr caddyhttp.HandlerError
modules/caddyhttp/templates/templates.go:63:15     - Unknown word (cookiename)  -- // {{.Cookie "cookiename"}}
modules/caddyhttp/templates/tplcontext.go:104:33    - Unknown word (caddyhttp)   -- Req.Context().Value(caddyhttp.OriginalRequestCtxKey
modules/caddyhttp/templates/tplcontext.go:192:2     - Unknown word (virt)        -- virtReq, err := http.NewRequest
modules/caddyhttp/templates/tplcontext.go:196:2     - Unknown word (virt)        -- virtReq.Host = c.Req.Host
modules/caddyhttp/templates/tplcontext.go:197:2     - Unknown word (virt)        -- virtReq.RemoteAddr = "12
modules/caddyhttp/templates/tplcontext.go:198:2     - Unknown word (virt)        -- virtReq.Header = c.Req.Header
modules/caddyhttp/templates/tplcontext.go:199:2     - Unknown word (virt)        -- virtReq.Header.Set("Accept
modules/caddyhttp/templates/tplcontext.go:204:34    - Unknown word (caddyhttp)   -- Req.Context().Value(caddyhttp.ServerCtxKey).(http
modules/caddyhttp/templates/tplcontext.go:293:13    - Unknown word (caddyhttp)   -- address := caddyhttp.GetVar(c.Req.Context
modules/caddyhttp/templates/tplcontext.go:293:47    - Unknown word (caddyhttp)   -- GetVar(c.Req.Context(), caddyhttp.ClientIPVarKey).(string
modules/caddyhttp/templates/tplcontext.go:359:6     - Unknown word (chromahtml)  -- chromahtml.WithClasses(true),
modules/caddyhttp/templates/tplcontext.go:35:2      - Unknown word (chromahtml) -- chromahtml "github.com/alecthomas
modules/caddyhttp/templates/tplcontext.go:35:25     - Unknown word (alecthomas) -- chromahtml "github.com/alecthomas/chroma/v2/formatters
modules/caddyhttp/templates/tplcontext.go:367:4     - Unknown word (gmhtml)      -- gmhtml.WithUnsafe(), // TODO
modules/caddyhttp/templates/tplcontext.go:37:14     - Unknown word (yuin)       -- "github.com/yuin/goldmark"
modules/caddyhttp/templates/tplcontext.go:37:19     - Unknown word (goldmark)   -- "github.com/yuin/goldmark"
modules/caddyhttp/templates/tplcontext.go:38:27     - Unknown word (yuin)       -- highlighting "github.com/yuin/goldmark-highlighting
modules/caddyhttp/templates/tplcontext.go:38:32     - Unknown word (goldmark)   -- highlighting "github.com/yuin/goldmark-highlighting/v2"
modules/caddyhttp/templates/tplcontext.go:39:14     - Unknown word (yuin)       -- "github.com/yuin/goldmark/extension"
modules/caddyhttp/templates/tplcontext.go:39:19     - Unknown word (goldmark)   -- "github.com/yuin/goldmark/extension"
modules/caddyhttp/templates/tplcontext.go:40:14     - Unknown word (yuin)       -- "github.com/yuin/goldmark/parser"
modules/caddyhttp/templates/tplcontext.go:40:19     - Unknown word (goldmark)   -- "github.com/yuin/goldmark/parser"
modules/caddyhttp/templates/tplcontext.go:41:2      - Unknown word (gmhtml)     -- gmhtml "github.com/yuin/goldmark
modules/caddyhttp/templates/tplcontext.go:41:21     - Unknown word (yuin)       -- gmhtml "github.com/yuin/goldmark/renderer/html
modules/caddyhttp/templates/tplcontext.go:41:26     - Unknown word (goldmark)   -- gmhtml "github.com/yuin/goldmark/renderer/html"
modules/caddyhttp/templates/tplcontext.go:44:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/templates/tplcontext.go:45:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/templates/tplcontext.go:45:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/templates/tplcontext.go:485:12    - Unknown word (dataerr)     -- dataint, dataerr := strconv.ParseUint
modules/caddyhttp/templates/tplcontext.go:485:3     - Unknown word (dataint)     -- dataint, dataerr := strconv
modules/caddyhttp/templates/tplcontext.go:486:6     - Unknown word (dataerr)     -- if dataerr != nil {
modules/caddyhttp/templates/tplcontext.go:487:65    - Unknown word (dataerr)     -- cannot be parsed: %s", dataerr.Error())
modules/caddyhttp/templates/tplcontext.go:489:25    - Unknown word (dataint)     -- return humanize.Bytes(dataint), nil
modules/caddyhttp/templates/tplcontext.go:492:3     - Unknown word (timelayout)  -- timelayout := time.RFC1123Z
modules/caddyhttp/templates/tplcontext.go:494:4     - Unknown word (timelayout)  -- timelayout = parts[1]
modules/caddyhttp/templates/tplcontext.go:497:12    - Unknown word (dataerr)     -- dataint, dataerr := time.Parse(timelayout
modules/caddyhttp/templates/tplcontext.go:497:3     - Unknown word (dataint)     -- dataint, dataerr := time.Parse
modules/caddyhttp/templates/tplcontext.go:497:34    - Unknown word (timelayout)  -- dataerr := time.Parse(timelayout, data)
modules/caddyhttp/templates/tplcontext.go:498:6     - Unknown word (dataerr)     -- if dataerr != nil {
modules/caddyhttp/templates/tplcontext.go:501:24    - Unknown word (dataint)     -- return humanize.Time(dataint), nil
modules/caddyhttp/templates/tplcontext.go:552:24    - Unknown word (niladic)     -- WrappedHeader wraps niladic functions so that they
modules/caddyhttp/templates/tplcontext.go:63:40     - Unknown word (missingkey)  -- New(tplName).Option("missingkey=zero")
modules/caddyhttp/templates/tplcontext_test.go:32:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/templates/tplcontext_test.go:32:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/templates/tplcontext_test.go:486:75    - Unknown word (ctxtest)     -- tplContext.Root), "caddy_ctxtest")
modules/caddyhttp/templates/tplcontext_test.go:58:54     - Unknown word (caddyhttp)   -- tplContext.Req.Context(), caddyhttp.ServerCtxKey, test.handler
modules/caddyhttp/tracing/module.go:108:23    - Unknown word (httpcaddyfile) -- func parseCaddyfile(h httpcaddyfile.Helper) (caddyhttp.Middleware
modules/caddyhttp/tracing/module.go:108:46    - Unknown word (caddyhttp)     -- httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error
modules/caddyhttp/tracing/module.go:10:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/tracing/module.go:10:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/tracing/module.go:10:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/tracing/module.go:117:4     - Unknown word (caddyhttp)     -- _ caddyhttp.MiddlewareHandler =
modules/caddyhttp/tracing/module.go:118:4     - Unknown word (caddyfile)     -- _ caddyfile.Unmarshaler =
modules/caddyhttp/tracing/module.go:11:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/tracing/module.go:11:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/tracing/module.go:11:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddyhttp/tracing/module.go:12:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/tracing/module.go:12:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/tracing/module.go:17:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/caddyhttp/tracing/module.go:17:57     - Unknown word (Caddyfile)     -- dlerDirective("tracing", parseCaddyfile)
modules/caddyhttp/tracing/module.go:63:25     - Unknown word (caddyhttp)     -- ServeHTTP implements caddyhttp.MiddlewareHandler.
modules/caddyhttp/tracing/module.go:64:75     - Unknown word (caddyhttp)     -- *http.Request, next caddyhttp.Handler) error {
modules/caddyhttp/tracing/module.go:68:13     - Unknown word (Caddyfile)     -- // UnmarshalCaddyfile sets up the module from
modules/caddyhttp/tracing/module.go:68:47     - Unknown word (Caddyfile)     -- sets up the module from Caddyfile tokens. Syntax:
modules/caddyhttp/tracing/module.go:73:29     - Unknown word (Caddyfile)     -- ot *Tracing) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/tracing/module.go:73:42     - Unknown word (caddyfile)     -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/tracing/module.go:74:26     - Unknown word (caddyfile)     -- setParameter := func(d *caddyfile.Dispenser, val *string
modules/caddyhttp/tracing/module.go:86:64     - Unknown word (Caddyfile)     -- parameter from the Caddyfile and its destination
modules/caddyhttp/tracing/module.go:9:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/tracing/module_test.go:104:14    - Unknown word (caddyhttp)   -- var handler caddyhttp.HandlerFunc = func(writer
modules/caddyhttp/tracing/module_test.go:105:3     - Unknown word (traceparent) -- traceparent := request.Header.Get
modules/caddyhttp/tracing/module_test.go:105:38    - Unknown word (Traceparent) -- request.Header.Get("Traceparent")
modules/caddyhttp/tracing/module_test.go:106:45    - Unknown word (traceparent) -- | strings.HasPrefix(traceparent, "00-00000000000000
modules/caddyhttp/tracing/module_test.go:106:6     - Unknown word (traceparent) -- if traceparent == "" || strings.HasPrefix
modules/caddyhttp/tracing/module_test.go:107:22    - Unknown word (traceparent) -- t.Errorf("Invalid traceparent: %v", traceparent)
modules/caddyhttp/tracing/module_test.go:107:40    - Unknown word (traceparent) -- Invalid traceparent: %v", traceparent)
modules/caddyhttp/tracing/module_test.go:11:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/tracing/module_test.go:12:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/tracing/module_test.go:12:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/tracing/module_test.go:12:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/tracing/module_test.go:135:14    - Unknown word (caddyhttp)   -- var handler caddyhttp.HandlerFunc = func(writer
modules/caddyhttp/tracing/module_test.go:136:38    - Unknown word (Traceparent) -- request.Header.Get("Traceparent")
modules/caddyhttp/tracing/module_test.go:13:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/tracing/module_test.go:13:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/tracing/module_test.go:167:14    - Unknown word (caddyhttp)   -- var handler caddyhttp.HandlerFunc = func(writer
modules/caddyhttp/tracing/module_test.go:16:27     - Unknown word (Caddyfile)   -- TestTracing_UnmarshalCaddyfile(t *testing.T) {
modules/caddyhttp/tracing/module_test.go:20:13     - Unknown word (caddyfile)   -- d *caddyfile.Dispenser
modules/caddyhttp/tracing/module_test.go:26:7      - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(`
modules/caddyhttp/tracing/module_test.go:35:7      - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(`
modules/caddyhttp/tracing/module_test.go:43:7      - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(`
modules/caddyhttp/tracing/module_test.go:52:26     - Unknown word (Caddyfile)   -- if err := ot.UnmarshalCaddyfile(tt.d); (err != nil)
modules/caddyhttp/tracing/module_test.go:53:24     - Unknown word (Caddyfile)   -- t.Errorf("UnmarshalCaddyfile() error = %v, wantErrType
modules/caddyhttp/tracing/module_test.go:57:24     - Unknown word (Caddyfile)   -- t.Errorf("UnmarshalCaddyfile() SpanName = %v, want
modules/caddyhttp/tracing/module_test.go:63:27     - Unknown word (Caddyfile)   -- TestTracing_UnmarshalCaddyfile_Error(t *testing.T)
modules/caddyhttp/tracing/tracer.go:10:43     - Unknown word (otlptrace)  -- otel/exporters/otlp/otlptrace/otlptracegrpc"
modules/caddyhttp/tracing/tracer.go:10:53     - Unknown word (otlptracegrpc) -- exporters/otlp/otlptrace/otlptracegrpc"
modules/caddyhttp/tracing/tracer.go:128:3     - Unknown word (semconv)       -- semconv.WebEngineName(webEngineName
modules/caddyhttp/tracing/tracer.go:129:3     - Unknown word (semconv)       -- semconv.WebEngineVersion(webEngineVer
modules/caddyhttp/tracing/tracer.go:13:2      - Unknown word (sdktrace)      -- sdktrace "go.opentelemetry.io
modules/caddyhttp/tracing/tracer.go:14:2      - Unknown word (semconv)       -- semconv "go.opentelemetry.io
modules/caddyhttp/tracing/tracer.go:14:36     - Unknown word (semconv)       -- opentelemetry.io/otel/semconv/v1.17.0"
modules/caddyhttp/tracing/tracer.go:18:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/tracing/tracer.go:19:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddyhttp/tracing/tracer.go:19:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddyhttp/tracing/tracer.go:30:7      - Unknown word (caddyhttp)     -- next caddyhttp.Handler
modules/caddyhttp/tracing/tracer.go:62:24     - Unknown word (otlptracegrpc) -- traceExporter, err := otlptracegrpc.New(ctx)
modules/caddyhttp/tracing/tracer.go:67:19     - Unknown word (autoprop)      -- ot.propagators = autoprop.NewTextMapPropagator
modules/caddyhttp/tracing/tracer.go:70:3      - Unknown word (sdktrace)      -- sdktrace.WithBatcher(traceExporter
modules/caddyhttp/tracing/tracer.go:71:3      - Unknown word (sdktrace)      -- sdktrace.WithResource(res),
modules/caddyhttp/tracing/tracer.go:74:15     - Unknown word (otelhttp)      -- ot.handler = otelhttp.NewHandler(http.HandlerFunc
modules/caddyhttp/tracing/tracer.go:76:3      - Unknown word (otelhttp)      -- otelhttp.WithTracerProvider(tracerProv
modules/caddyhttp/tracing/tracer.go:77:3      - Unknown word (otelhttp)      -- otelhttp.WithPropagators(ot.propagator
modules/caddyhttp/tracing/tracer.go:78:3      - Unknown word (otelhttp)      -- otelhttp.WithSpanNameFormatter
modules/caddyhttp/tracing/tracer.go:8:56      - Unknown word (otelhttp)   -- instrumentation/net/http/otelhttp"
modules/caddyhttp/tracing/tracer.go:93:3      - Unknown word (caddyhttp)     -- caddyhttp.SetVar(ctx, "trace_id
modules/caddyhttp/tracing/tracer.go:95:3      - Unknown word (caddyhttp)     -- caddyhttp.SetVar(ctx, "span_id
modules/caddyhttp/tracing/tracer.go:97:29     - Unknown word (caddyhttp)     -- extra, ok := ctx.Value(caddyhttp.ExtraLogFieldsCtxKey
modules/caddyhttp/tracing/tracer.go:9:43      - Unknown word (autoprop)   -- contrib/propagators/autoprop"
modules/caddyhttp/tracing/tracer_test.go:7:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/tracing/tracerprovider.go:18:26     - Unknown word (sdktrace)   -- tracerProvider *sdktrace.TracerProvider
modules/caddyhttp/tracing/tracerprovider.go:23:52     - Unknown word (sdktrace)   -- getTracerProvider(opts ...sdktrace.TracerProviderOption
modules/caddyhttp/tracing/tracerprovider.go:23:84     - Unknown word (sdktrace)   -- TracerProviderOption) *sdktrace.TracerProvider {
modules/caddyhttp/tracing/tracerprovider.go:30:22     - Unknown word (sdktrace)   -- t.tracerProvider = sdktrace.NewTracerProvider(
modules/caddyhttp/tracing/tracerprovider.go:8:2       - Unknown word (sdktrace)   -- sdktrace "go.opentelemetry.io
modules/caddyhttp/vars.go:143:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile implements caddyfile
modules/caddyhttp/vars.go:143:34    - Unknown word (caddyfile)   -- UnmarshalCaddyfile implements caddyfile.Unmarshaler.
modules/caddyhttp/vars.go:144:32    - Unknown word (Caddyfile)   -- VarsMatcher) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/vars.go:144:45    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddyhttp/vars.go:152:13    - Unknown word (Errf)        -- return d.Errf("malformed vars matcher
modules/caddyhttp/vars.go:156:13    - Unknown word (Errf)        -- return d.Errf("malformed vars matcher
modules/caddyhttp/vars.go:15:9      - Unknown word (caddyhttp)  -- package caddyhttp
modules/caddyhttp/vars.go:249:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile implements caddyfile
modules/caddyhttp/vars.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddyhttp/vars.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddyhttp/vars.go:28:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/vars.go:28:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddyhttp/vars.go:74:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile implements caddyfile
modules/caddyhttp/vars.go:74:34     - Unknown word (caddyfile)   -- UnmarshalCaddyfile implements caddyfile.Unmarshaler. Syntax
modules/caddyhttp/vars.go:80:35     - Unknown word (Caddyfile)   -- VarsMiddleware) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddyhttp/vars.go:80:48     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddypki/acmeserver/acmeserver.go:129:12    - Unknown word (caddypki)    -- ash.CA = caddypki.DefaultCAID
modules/caddypki/acmeserver/acmeserver.go:129:28    - Unknown word (CAID)        -- CA = caddypki.DefaultCAID
modules/caddypki/acmeserver/acmeserver.go:148:24    - Unknown word (caddypki)    -- pkiApp := appModule.(*caddypki.PKI)
modules/caddypki/acmeserver/acmeserver.go:15:9      - Unknown word (acmeserver) -- package acmeserver
modules/caddypki/acmeserver/acmeserver.go:165:21    - Unknown word (caddypki)    -- authorityConfig := caddypki.AuthorityConfig{
modules/caddypki/acmeserver/acmeserver.go:171:35    - Unknown word (Smallstep)   -- Challenges: ash.Challenges.toSmallstepType(),
modules/caddypki/acmeserver/acmeserver.go:20:2      - Unknown word (weakrand)   -- weakrand "math/rand"
modules/caddypki/acmeserver/acmeserver.go:217:75    - Unknown word (caddyhttp)   -- *http.Request, next caddyhttp.Handler) error {
modules/caddypki/acmeserver/acmeserver.go:271:17    - Unknown word (bbolt)       -- Type: "bbolt",
modules/caddypki/acmeserver/acmeserver.go:309:14    - Unknown word (gosec)       -- //nolint:gosec
modules/caddypki/acmeserver/acmeserver.go:309:7     - Unknown word (nolint)      -- //nolint:gosec
modules/caddypki/acmeserver/acmeserver.go:30:14     - Unknown word (smallstep)  -- "github.com/smallstep/certificates/acme"
modules/caddypki/acmeserver/acmeserver.go:310:27    - Unknown word (weakrand)    -- addr := ash.resolvers[weakrand.Intn(len(ash.resolvers
modules/caddypki/acmeserver/acmeserver.go:31:14     - Unknown word (smallstep)  -- "github.com/smallstep/certificates/acme/api
modules/caddypki/acmeserver/acmeserver.go:32:24     - Unknown word (smallstep)  -- acmeNoSQL "github.com/smallstep/certificates/acme/db
modules/caddypki/acmeserver/acmeserver.go:33:14     - Unknown word (smallstep)  -- "github.com/smallstep/certificates/authority
modules/caddypki/acmeserver/acmeserver.go:34:14     - Unknown word (smallstep)  -- "github.com/smallstep/certificates/authority
modules/caddypki/acmeserver/acmeserver.go:353:4     - Unknown word (caddyhttp)   -- _ caddyhttp.MiddlewareHandler =
modules/caddypki/acmeserver/acmeserver.go:40:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddypki/acmeserver/acmeserver.go:41:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/caddypki/acmeserver/acmeserver.go:41:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/caddypki/acmeserver/acmeserver.go:42:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddypki
modules/caddypki/acmeserver/acmeserver.go:42:43     - Unknown word (caddypki)    -- caddyserver/caddy/v2/modules/caddypki"
modules/caddypki/acmeserver/acmeserver.go:97:31     - Unknown word (alpn)        -- 01", "dns-01", "tls-alpn-01"
modules/caddypki/acmeserver/caddyfile.go:111:21    - Unknown word (Errf)          -- return nil, h.Errf("unrecognized 'allow
modules/caddypki/acmeserver/caddyfile.go:132:21    - Unknown word (Errf)          -- return nil, h.Errf("unrecognized 'deny
modules/caddypki/acmeserver/caddyfile.go:146:18    - Unknown word (Errf)          -- return nil, h.Errf("unrecognized ACME server
modules/caddypki/acmeserver/caddyfile.go:156:28    - Unknown word (httpcaddyfile) -- return append(configVals, httpcaddyfile.ConfigValue{
modules/caddypki/acmeserver/caddyfile.go:15:9      - Unknown word (acmeserver) -- package acmeserver
modules/caddypki/acmeserver/caddyfile.go:20:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddypki/acmeserver/caddyfile.go:21:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddypki/acmeserver/caddyfile.go:21:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/caddypki/acmeserver/caddyfile.go:21:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/caddypki/acmeserver/caddyfile.go:22:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddypki
modules/caddypki/acmeserver/caddyfile.go:22:43     - Unknown word (caddypki)      -- caddyserver/caddy/v2/modules/caddypki"
modules/caddypki/acmeserver/caddyfile.go:26:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterDirective("acme
modules/caddypki/acmeserver/caddyfile.go:29:56     - Unknown word (Caddyfile)     -- server handler from Caddyfile tokens.
modules/caddypki/acmeserver/caddyfile.go:47:24     - Unknown word (httpcaddyfile) -- func parseACMEServer(h httpcaddyfile.Helper) ([]httpcaddyfile
modules/caddypki/acmeserver/caddyfile.go:47:49     - Unknown word (httpcaddyfile) -- httpcaddyfile.Helper) ([]httpcaddyfile.ConfigValue, error)
modules/caddypki/acmeserver/caddyfile.go:61:10     - Unknown word (caddypki)      -- var ca *caddypki.CA
modules/caddypki/acmeserver/caddyfile.go:70:14     - Unknown word (caddypki)      -- ca = new(caddypki.CA)
modules/caddypki/acmeserver/caddyfile.go:83:19     - Unknown word (Errf)          -- return nil, h.Errf("certificate lifetime
modules/caddypki/acmeserver/caddyfile.go:89:19     - Unknown word (Errf)          -- return nil, h.Errf("must specify at least
modules/caddypki/acmeserver/challenges.go:17:35     - Unknown word (alpn)       -- ACMEChallenge = "tls-alpn-01"
modules/caddypki/acmeserver/challenges.go:17:6      - Unknown word (ALPN)       -- TLS_ALPN_01 ACMEChallenge =
modules/caddypki/acmeserver/challenges.go:1:9       - Unknown word (acmeserver) -- package acmeserver
modules/caddypki/acmeserver/challenges.go:23:28     - Unknown word (ALPN)       -- HTTP_01, DNS_01, TLS_ALPN_01:
modules/caddypki/acmeserver/challenges.go:30:8      - Unknown word (unmarshaller) -- // The unmarshaller first marshals the value
modules/caddypki/acmeserver/challenges.go:31:51     - Unknown word (normaliztion) -- and lowercase it for normaliztion. The
modules/caddypki/acmeserver/challenges.go:60:27     - Unknown word (Smallstep)    -- c ACMEChallenges) toSmallstepType() []provisioner
modules/caddypki/acmeserver/challenges.go:8:14      - Unknown word (smallstep)  -- "github.com/smallstep/certificates/authority
modules/caddypki/acmeserver/policy.go:11:7      - Unknown word (Smallstep)  -- // on Smallstep website for the evaluation
modules/caddypki/acmeserver/policy.go:1:9       - Unknown word (acmeserver) -- package acmeserver
modules/caddypki/acmeserver/policy.go:4:14      - Unknown word (smallstep)  -- "github.com/smallstep/certificates/authority
modules/caddypki/acmeserver/policy.go:5:14      - Unknown word (smallstep)  -- "github.com/smallstep/certificates/authority
modules/caddypki/acmeserver/policy_test.go:1:9       - Unknown word (acmeserver) -- package acmeserver
modules/caddypki/acmeserver/policy_test.go:7:14      - Unknown word (smallstep)  -- "github.com/smallstep/certificates/authority
modules/caddypki/acmeserver/policy_test.go:8:14      - Unknown word (smallstep)  -- "github.com/smallstep/certificates/authority
modules/caddypki/adminapi.go:15:9      - Unknown word (caddypki)   -- package caddypki
modules/caddypki/adminapi.go:198:19    - Unknown word (CAID)        -- if id != DefaultCAID {
modules/caddypki/adminapi.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddypki/ca.go:15:9      - Unknown word (caddypki)   -- package caddypki
modules/caddypki/ca.go:193:31    - Unknown word (Smallstep)   -- NewAuthority returns a new Smallstep-powered signing authority
modules/caddypki/ca.go:279:18    - Unknown word (certmagic)   -- rootKey, err = certmagic.PEMDecodePrivateKey
modules/caddypki/ca.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddypki/ca.go:28:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddypki/ca.go:29:14     - Unknown word (smallstep)   -- "github.com/smallstep/certificates/authority
modules/caddypki/ca.go:303:21    - Unknown word (certmagic)   -- rootKeyPEM, err := certmagic.PEMEncodePrivateKey
modules/caddypki/ca.go:30:14     - Unknown word (smallstep)   -- "github.com/smallstep/certificates/db"
modules/caddypki/ca.go:31:14     - Unknown word (smallstep)   -- "github.com/smallstep/truststore"
modules/caddypki/ca.go:31:24     - Unknown word (truststore)  -- github.com/smallstep/truststore"
modules/caddypki/ca.go:341:19    - Unknown word (certmagic)   -- interKey, err = certmagic.PEMDecodePrivateKey
modules/caddypki/ca.go:34:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddypki/ca.go:417:9     - Unknown word (truststore)  -- return truststore.Install(ca.root,
modules/caddypki/ca.go:418:3     - Unknown word (truststore)  -- truststore.WithDebug(),
modules/caddypki/ca.go:419:3     - Unknown word (truststore)  -- truststore.WithFirefox(),
modules/caddypki/ca.go:420:3     - Unknown word (truststore)  -- truststore.WithJava(),
modules/caddypki/ca.go:435:12    - Unknown word (CAID)        -- // DefaultCAID is the default CA ID
modules/caddypki/ca.go:436:9     - Unknown word (CAID)        -- DefaultCAID = "local"
modules/caddypki/ca.go:78:14     - Unknown word (certmagic)   -- storage certmagic.Storage
modules/caddypki/certificates.go:15:9      - Unknown word (caddypki)   -- package caddypki
modules/caddypki/certificates.go:22:21     - Unknown word (keyutil)    -- "go.step.sm/crypto/keyutil"
modules/caddypki/certificates.go:51:16     - Unknown word (keyutil)    -- signer, err = keyutil.GenerateDefaultSigner
modules/caddypki/command.go:110:17    - Unknown word (CAID)        -- caID = DefaultCAID
modules/caddypki/command.go:15:9      - Unknown word (caddypki)   -- package caddypki
modules/caddypki/command.go:166:9     - Unknown word (truststore)  -- err = truststore.UninstallFile(certFile
modules/caddypki/command.go:167:4     - Unknown word (truststore)  -- truststore.WithDebug(),
modules/caddypki/command.go:168:4     - Unknown word (truststore)  -- truststore.WithFirefox(),
modules/caddypki/command.go:169:4     - Unknown word (truststore)  -- truststore.WithJava())
modules/caddypki/command.go:179:17    - Unknown word (CAID)        -- caID = DefaultCAID
modules/caddypki/command.go:26:14     - Unknown word (smallstep)  -- "github.com/smallstep/truststore"
modules/caddypki/command.go:26:24     - Unknown word (truststore) -- github.com/smallstep/truststore"
modules/caddypki/command.go:29:2      - Unknown word (caddycmd)   -- caddycmd "github.com/caddyserver
modules/caddypki/command.go:29:23     - Unknown word (caddyserver) -- caddycmd "github.com/caddyserver/caddy/v2/cmd"
modules/caddypki/command.go:31:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddypki/command.go:35:2      - Unknown word (caddycmd)    -- caddycmd.RegisterCommand(caddycmd
modules/caddypki/command.go:35:27     - Unknown word (caddycmd)    -- caddycmd.RegisterCommand(caddycmd.Command{
modules/caddypki/command.go:62:15     - Unknown word (caddycmd)    -- cmd.RunE = caddycmd.WrapCommandFuncForCobra
modules/caddypki/command.go:66:2      - Unknown word (caddycmd)    -- caddycmd.RegisterCommand(caddycmd
modules/caddypki/command.go:83:36     - Unknown word (behaviour)   -- the admin API (default behaviour).
modules/caddypki/crypto.go:15:9      - Unknown word (caddypki)   -- package caddypki
modules/caddypki/crypto.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddypki/crypto.go:25:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddypki/crypto.go:92:15     - Unknown word (certmagic)   -- key, err = certmagic.PEMDecodePrivateKey
modules/caddypki/maintain.go:15:9      - Unknown word (caddypki)   -- package caddypki
modules/caddypki/pki.go:130:19    - Unknown word (CAID)         -- if id != DefaultCAID {
modules/caddypki/pki.go:15:9      - Unknown word (caddypki)   -- package caddypki
modules/caddypki/pki.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddypki/pki.go:73:57     - Unknown word (CAID)        -- CA '%s': %v", DefaultCAID, err)
modules/caddypki/pki.go:86:15     - Unknown word (CAID)        -- p.CAs[DefaultCAID] = new(CA)
modules/caddypki/pki.go:87:22     - Unknown word (CAID)        -- return p.CAs[DefaultCAID].Provision(ctx, DefaultCAID
modules/caddypki/pki.go:87:50     - Unknown word (CAID)        -- Provision(ctx, DefaultCAID, p.log)
modules/caddypki/pki.go:95:69     - Unknown word (unconfigured) -- installation disabled; unconfigured clients may show warnings
modules/caddytls/acmeissuer.go:104:11    - Unknown word (certmagic)   -- template certmagic.ACMEIssuer // set at
modules/caddytls/acmeissuer.go:105:12    - Unknown word (certmagic)   -- magic *certmagic.Config // set at
modules/caddytls/acmeissuer.go:106:12    - Unknown word (certmagic)   -- issuer *certmagic.ACMEIssuer // set at
modules/caddytls/acmeissuer.go:147:32    - Unknown word (certmagic)   -- Challenges.DNS.solver = &certmagic.DNS01Solver{
modules/caddytls/acmeissuer.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/acmeissuer.go:200:21    - Unknown word (TLSALPN)     -- if iss.Challenges.TLSALPN != nil {
modules/caddytls/acmeissuer.go:201:20    - Unknown word (TLSALPN)     -- template.DisableTLSALPNChallenge = iss.Challenges
modules/caddytls/acmeissuer.go:201:54    - Unknown word (TLSALPN)     -- LPNChallenge = iss.Challenges.TLSALPN.Disabled
modules/caddytls/acmeissuer.go:202:16    - Unknown word (TLSALPN)     -- template.AltTLSALPNPort = iss.Challenges
modules/caddytls/acmeissuer.go:202:45    - Unknown word (TLSALPN)     -- tTLSALPNPort = iss.Challenges.TLSALPN.AlternatePort
modules/caddytls/acmeissuer.go:225:57    - Unknown word (SSLEAB)      -- err = iss.generateZeroSSLEABCredentials(ctx, acct
modules/caddytls/acmeissuer.go:274:16    - Unknown word (SSLEAB)      -- // generateZeroSSLEABCredentials generates
modules/caddytls/acmeissuer.go:275:37    - Unknown word (usedif)      -- issuer. It should only be usedif the CA endpoint is ZeroSSL
modules/caddytls/acmeissuer.go:276:36    - Unknown word (SSLEAB)      -- ACMEIssuer) generateZeroSSLEABCredentials(ctx context
modules/caddytls/acmeissuer.go:286:14    - Unknown word (zerossl)     -- endpoint := zerossl.BaseURL + "/acme/eab
modules/caddytls/acmeissuer.go:29:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddytls/acmeissuer.go:29:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddytls/acmeissuer.go:309:3     - Unknown word (EABKID)      -- EABKID string `json:"eab
modules/caddytls/acmeissuer.go:30:14     - Unknown word (caddyserver) -- "github.com/caddyserver/zerossl"
modules/caddytls/acmeissuer.go:30:26     - Unknown word (zerossl)     -- github.com/caddyserver/zerossl"
modules/caddytls/acmeissuer.go:310:3     - Unknown word (EABHMAC)     -- EABHMACKey string `json:"eab
modules/caddytls/acmeissuer.go:31:14     - Unknown word (mholt)       -- "github.com/mholt/acmez/v2/acme"
modules/caddytls/acmeissuer.go:31:20     - Unknown word (acmez)       -- "github.com/mholt/acmez/v2/acme"
modules/caddytls/acmeissuer.go:326:39    - Unknown word (EABKID)      -- String("key_id", result.EABKID))
modules/caddytls/acmeissuer.go:330:18    - Unknown word (EABKID)      -- KeyID: result.EABKID,
modules/caddytls/acmeissuer.go:331:18    - Unknown word (EABHMAC)     -- MACKey: result.EABHMACKey,
modules/caddytls/acmeissuer.go:335:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile deserializes Caddyfile
modules/caddytls/acmeissuer.go:335:36    - Unknown word (Caddyfile)   -- marshalCaddyfile deserializes Caddyfile tokens into iss.
modules/caddytls/acmeissuer.go:343:16    - Unknown word (tlsalpn)     -- // disable_tlsalpn_challenge
modules/caddytls/acmeissuer.go:345:12    - Unknown word (tlsalpn)     -- // alt_tlsalpn_port <port>
modules/caddytls/acmeissuer.go:359:33    - Unknown word (Caddyfile)   -- ACMEIssuer) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddytls/acmeissuer.go:359:46    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/acmeissuer.go:35:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/acmeissuer.go:36:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/acmeissuer.go:36:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddytls/acmeissuer.go:378:14    - Unknown word (Errf)        -- return d.Errf("invalid lifetime %s
modules/caddytls/acmeissuer.go:37:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/acmeissuer.go:37:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddytls/acmeissuer.go:37:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddytls/acmeissuer.go:381:14    - Unknown word (Errf)        -- return d.Errf("lifetime must be >
modules/caddytls/acmeissuer.go:387:14    - Unknown word (Errf)        -- return d.Errf("directory is already
modules/caddytls/acmeissuer.go:410:14    - Unknown word (Errf)        -- return d.Errf("invalid timeout duration
modules/caddytls/acmeissuer.go:426:17    - Unknown word (tlsalpn)     -- case "disable_tlsalpn_challenge":
modules/caddytls/acmeissuer.go:444:14    - Unknown word (Errf)        -- return d.Errf("invalid port %s: %v
modules/caddytls/acmeissuer.go:454:13    - Unknown word (tlsalpn)     -- case "alt_tlsalpn_port":
modules/caddytls/acmeissuer.go:490:16    - Unknown word (caddyfile)   -- unm, err := caddyfile.UnmarshalModule(d,
modules/caddytls/acmeissuer.go:494:37    - Unknown word (caddyconfig) -- Challenges.DNS.ProviderRaw = caddyconfig.JSONModuleObject(unm
modules/caddytls/acmeissuer.go:579:27    - Unknown word (Caddyfile)   -- chainPref, err := ParseCaddyfilePreferredChainsOptions
modules/caddytls/acmeissuer.go:592:11    - Unknown word (Caddyfile)   -- func ParseCaddyfilePreferredChainsOptions
modules/caddytls/acmeissuer.go:592:46    - Unknown word (caddyfile)   -- filePreferredChainsOptions(d *caddyfile.Dispenser) (*ChainPreference
modules/caddytls/acmeissuer.go:59:27     - Unknown word (mothership)  -- not sent to any Caddy mothership or used for any purpose
modules/caddytls/acmeissuer.go:667:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler =
modules/caddytls/automation.go:103:5     - Unknown word (zerossl)     -- // zerossl.
modules/caddytls/automation.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/automation.go:166:50    - Unknown word (certmagic)   -- populate an underlying certmagic.Config's
modules/caddytls/automation.go:169:13    - Unknown word (certmagic)   -- Issuers []certmagic.Issuer `json:"-"`
modules/caddytls/automation.go:170:13    - Unknown word (certmagic)   -- Managers []certmagic.Manager `json:"-"`
modules/caddytls/automation.go:173:12    - Unknown word (certmagic)   -- magic *certmagic.Config
modules/caddytls/automation.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddytls/automation.go:27:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddytls/automation.go:28:14     - Unknown word (mholt)       -- "github.com/mholt/acmez/v2"
modules/caddytls/automation.go:28:20     - Unknown word (acmez)       -- "github.com/mholt/acmez/v2"
modules/caddytls/automation.go:32:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/automation.go:435:37    - Unknown word (ALPN)        -- configures the ACME TLS-ALPN challenge.
modules/caddytls/automation.go:435:5     - Unknown word (TLSALPN)     -- // TLSALPN configures the ACME
modules/caddytls/automation.go:438:11    - Unknown word (TLSALPN)     -- TLSALPN *TLSALPNChallengeConfig `json
modules/caddytls/automation.go:438:2     - Unknown word (TLSALPN)     -- TLSALPN *TLSALPNChallengeConfig
modules/caddytls/automation.go:438:45    - Unknown word (alpn)        -- LPNChallengeConfig `json:"tls-alpn,omitempty"`
modules/caddytls/automation.go:43:40     - Unknown word (hostnames)   -- you don't know all the hostnames at
modules/caddytls/automation.go:470:4     - Unknown word (TLSALPN)     -- // TLSALPNChallengeConfig configures
modules/caddytls/automation.go:470:51    - Unknown word (ALPN)        -- configures the ACME TLS-ALPN challenge.
modules/caddytls/automation.go:471:6     - Unknown word (TLSALPN)     -- type TLSALPNChallengeConfig struct
modules/caddytls/automation.go:472:22    - Unknown word (ALPN)        -- // If true, the TLS-ALPN challenge will be disabled
modules/caddytls/automation.go:476:34    - Unknown word (ALPN)        -- challenge. Note that the TLS-ALPN challenge port
modules/caddytls/automation.go:479:18    - Unknown word (ALPN)        -- // standard TLS-ALPN challenge port to this
modules/caddytls/automation.go:513:9     - Unknown word (acmez)       -- solver acmez.Solver
modules/caddytls/automation.go:91:21     - Unknown word (hostnames)   -- // Which subjects (hostnames or IP addresses) this
modules/caddytls/capools.go:148:34    - Unknown word (Caddyfile)   -- FileCAPool) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddytls/capools.go:148:47    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/capools.go:148:7     - Unknown word (fcap)        -- func (fcap *FileCAPool) UnmarshalCaddyfi
modules/caddytls/capools.go:150:2     - Unknown word (fcap)        -- fcap.TrustedCACertPEMFiles
modules/caddytls/capools.go:150:38    - Unknown word (fcap)        -- rustedCACertPEMFiles = append(fcap.TrustedCACertPEMFiles
modules/caddytls/capools.go:154:4     - Unknown word (fcap)        -- fcap.TrustedCACertPEMFiles
modules/caddytls/capools.go:154:40    - Unknown word (fcap)        -- rustedCACertPEMFiles = append(fcap.TrustedCACertPEMFiles
modules/caddytls/capools.go:156:13    - Unknown word (Errf)        -- return d.Errf("unrecognized directive
modules/caddytls/capools.go:15:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddytls/capools.go:15:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddytls/capools.go:174:10    - Unknown word (caddypki)    -- ca []*caddypki.CA
modules/caddytls/capools.go:17:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/capools.go:18:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/capools.go:18:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddytls/capools.go:194:18    - Unknown word (caddypki)    -- pki := pkiApp.(*caddypki.PKI)
modules/caddytls/capools.go:19:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/capools.go:19:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddytls/capools.go:19:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddytls/capools.go:1:9       - Unknown word (caddytls)   -- package caddytls
modules/caddytls/capools.go:20:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddypki
modules/caddytls/capools.go:20:43     - Unknown word (caddypki)    -- caddyserver/caddy/v2/modules/caddypki"
modules/caddytls/capools.go:219:37    - Unknown word (Caddyfile)   -- PKIRootCAPool) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddytls/capools.go:219:50    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/capools.go:219:7     - Unknown word (pkir)        -- func (pkir *PKIRootCAPool) UnmarshalCadd
modules/caddytls/capools.go:221:2     - Unknown word (pkir)        -- pkir.Authority = append(pkir
modules/caddytls/capools.go:221:26    - Unknown word (pkir)        -- pkir.Authority = append(pkir.Authority, d.RemainingArgs
modules/caddytls/capools.go:225:28    - Unknown word (pkir)        -- pkir.Authority = append(pkir.Authority, d.RemainingArgs
modules/caddytls/capools.go:225:4     - Unknown word (pkir)        -- pkir.Authority = append(pkir
modules/caddytls/capools.go:227:13    - Unknown word (Errf)        -- return d.Errf("unrecognized directive
modules/caddytls/capools.go:246:10    - Unknown word (caddypki)    -- ca []*caddypki.CA
modules/caddytls/capools.go:266:18    - Unknown word (caddypki)    -- pki := pkiApp.(*caddypki.PKI)
modules/caddytls/capools.go:290:44    - Unknown word (Caddyfile)   -- IIntermediateCAPool) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddytls/capools.go:290:57    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/capools.go:298:13    - Unknown word (Errf)        -- return d.Errf("unrecognized directive
modules/caddytls/capools.go:321:10    - Unknown word (certmagic)   -- storage certmagic.Storage
modules/caddytls/capools.go:378:33    - Unknown word (Caddyfile)   -- StoragePool) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddytls/capools.go:398:14    - Unknown word (Errf)        -- return d.Errf("module %s is not a
modules/caddytls/capools.go:400:20    - Unknown word (caddyconfig) -- sp.StorageRaw = caddyconfig.JSONModuleObject(storage
modules/caddytls/capools.go:416:50    - Unknown word (caddyhttp)   -- modifications: modules/caddyhttp/reverseproxy/httptransport
modules/caddytls/capools.go:416:73    - Unknown word (httptransport) -- caddyhttp/reverseproxy/httptransport.go
modules/caddytls/capools.go:463:39    - Unknown word (caddytls)      -- "module %s is not a caddytls.CA", modID)
modules/caddytls/capools.go:465:14    - Unknown word (caddyconfig)   -- t.CARaw = caddyconfig.JSONModuleObject(ca
modules/caddytls/capools.go:501:50    - Unknown word (caddyhttp)     -- modifications: modules/caddyhttp/reverseproxy/httptransport
modules/caddytls/capools.go:501:73    - Unknown word (httptransport) -- caddyhttp/reverseproxy/httptransport.go
modules/caddytls/capools.go:593:3     - Unknown word (pembs)         -- pembs, err := io.ReadAll(res
modules/caddytls/capools.go:598:33    - Unknown word (pembs)         -- caPool.AppendCertsFromPEM(pembs) {
modules/caddytls/capools.go:82:35     - Unknown word (Caddyfile)   -- InlineCAPool) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddytls/capools.go:82:48     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/capools.go:92:13     - Unknown word (Errf)        -- return d.Errf("unrecognized directive
modules/caddytls/capools_test.go:105:29    - Unknown word (Caddyfile)     -- TestFileCAPoolUnmarshalCaddyfile(t *testing.T) {
modules/caddytls/capools_test.go:10:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/capools_test.go:116:26    - Unknown word (certificatest) -- name: "configuring no certificatest produces an error",
modules/caddytls/capools_test.go:11:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/capools_test.go:11:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddytls/capools_test.go:11:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddytls/capools_test.go:12:16     - Unknown word (caddyserver) -- _ "github.com/caddyserver/caddy/v2/modules/filestorage
modules/caddytls/capools_test.go:12:45     - Unknown word (filestorage) -- caddyserver/caddy/v2/modules/filestorage"
modules/caddytls/capools_test.go:17:28     - Unknown word (caddytest)   -- cert_file_1 = "../../caddytest/caddy.ca.cer"
modules/caddytls/capools_test.go:195:4     - Unknown word (fcap)          -- fcap := &FileCAPool{}
modules/caddytls/capools_test.go:196:14    - Unknown word (fcap)          -- if err := fcap.UnmarshalCaddyfile(tt
modules/caddytls/capools_test.go:199:55    - Unknown word (fcap)          -- DeepEqual(&tt.expected, fcap) {
modules/caddytls/capools_test.go:1:9       - Unknown word (caddytls)   -- package caddytls
modules/caddytls/capools_test.go:200:63    - Unknown word (fcap)          -- alCaddyfile() = %v, want %v", fcap, tt.expected)
modules/caddytls/capools_test.go:20:31     - Unknown word (Caddyfile)   -- TestInlineCAPoolUnmarshalCaddyfile(t *testing.T) {
modules/caddytls/capools_test.go:217:26    - Unknown word (certificatest) -- name: "configuring no certificatest produces an error",
modules/caddytls/capools_test.go:22:6      - Unknown word (caddyfile)   -- d *caddyfile.Dispenser
modules/caddytls/capools_test.go:289:4     - Unknown word (pkir)          -- pkir := &PKIRootCAPool{}
modules/caddytls/capools_test.go:290:14    - Unknown word (pkir)          -- if err := pkir.UnmarshalCaddyfile(tt
modules/caddytls/capools_test.go:293:55    - Unknown word (pkir)          -- DeepEqual(&tt.expected, pkir) {
modules/caddytls/capools_test.go:294:66    - Unknown word (pkir)          -- alCaddyfile() = %v, want %v", pkir, tt.expected)
modules/caddytls/capools_test.go:311:26    - Unknown word (certificatest) -- name: "configuring no certificatest produces an error",
modules/caddytls/capools_test.go:31:26     - Unknown word (certificatest) -- name: "configuring no certificatest produces an error",
modules/caddytls/capools_test.go:33:8      - Unknown word (caddyfile)     -- d: caddyfile.NewTestDispenser(`
modules/caddytls/capools_test.go:43:8      - Unknown word (caddyfile)     -- d: caddyfile.NewTestDispenser(fmt
modules/caddytls/capools_test.go:52:8      - Unknown word (caddyfile)     -- d: caddyfile.NewTestDispenser(fmt
modules/caddytls/capools_test.go:95:27     - Unknown word (Caddyfile)     -- err := icp.UnmarshalCaddyfile(tt.args.d); (err !=
modules/caddytls/capools_test.go:96:37     - Unknown word (Caddyfile)     -- InlineCAPool.UnmarshalCaddyfile() error = %v, wantErr
modules/caddytls/capools_test.go:99:37     - Unknown word (Caddyfile)     -- InlineCAPool.UnmarshalCaddyfile() = %v, want %v", icp
modules/caddytls/certmanagers.go:12:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddytls/certmanagers.go:12:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddytls/certmanagers.go:13:14     - Unknown word (tailscale)   -- "github.com/tailscale/tscert"
modules/caddytls/certmanagers.go:13:24     - Unknown word (tscert)      -- github.com/tailscale/tscert"
modules/caddytls/certmanagers.go:179:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile deserializes Caddyfile
modules/caddytls/certmanagers.go:179:36    - Unknown word (Caddyfile)   -- marshalCaddyfile deserializes Caddyfile tokens into ts.
modules/caddytls/certmanagers.go:17:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/certmanagers.go:182:50    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/certmanagers.go:18:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/certmanagers.go:18:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddytls/certmanagers.go:18:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddytls/certmanagers.go:1:9       - Unknown word (caddytls)   -- package caddytls
modules/caddytls/certmanagers.go:201:4     - Unknown word (certmagic)   -- _ certmagic.Manager = (*Tailscale
modules/caddytls/certmanagers.go:203:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*Tailscale
modules/caddytls/certmanagers.go:205:4     - Unknown word (certmagic)   -- _ certmagic.Manager = (*HTTPCertGette
modules/caddytls/certmanagers.go:207:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*HTTPCertGette
modules/caddytls/certmanagers.go:22:23     - Unknown word (Tailscale)   -- caddy.RegisterModule(Tailscale{})
modules/caddytls/certmanagers.go:26:4      - Unknown word (Tailscale)   -- // Tailscale is a module that can
modules/caddytls/certmanagers.go:26:67     - Unknown word (Tailscale)   -- certificates from the local Tailscale process.
modules/caddytls/certmanagers.go:27:6      - Unknown word (Tailscale)   -- type Tailscale struct {
modules/caddytls/certmanagers.go:32:7      - Unknown word (Tailscale)   -- func (Tailscale) CaddyModule() caddy
modules/caddytls/certmanagers.go:34:29     - Unknown word (tailscale)   -- tls.get_certificate.tailscale",
modules/caddytls/certmanagers.go:54:9      - Unknown word (tscert)      -- return tscert.GetCertificateWithContext
modules/caddytls/certmanagers.go:59:59     - Unknown word (tailscale)   -- ToLower(hello.ServerName), tailscaleDomainAliasEnding) {
modules/caddytls/certmanagers.go:62:17     - Unknown word (tscert)      -- status, err := tscert.GetStatus(ctx)
modules/caddytls/certmanagers.go:67:6      - Unknown word (certmagic)   -- if certmagic.MatchWildcard(hello
modules/caddytls/certmanagers.go:74:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile deserializes Caddyfile
modules/caddytls/certmanagers.go:74:36     - Unknown word (Caddyfile)   -- marshalCaddyfile deserializes Caddyfile tokens into ts.
modules/caddytls/certmanagers.go:76:8      - Unknown word (tailscale)   -- // ... tailscale
modules/caddytls/certmanagers.go:77:27     - Unknown word (Caddyfile)   -- Tailscale) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddytls/certmanagers.go:77:40     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/certmanagers.go:85:4      - Unknown word (tailscale)   -- // tailscaleDomainAliasEnding is
modules/caddytls/certselection.go:122:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the CustomCertSelecti
modules/caddytls/certselection.go:122:66    - Unknown word (Caddyfile)   -- ustomCertSelectionPolicy from Caddyfile tokens. Syntax:
modules/caddytls/certselection.go:131:46    - Unknown word (Caddyfile)   -- CertSelectionPolicy) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddytls/certselection.go:131:59    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/certselection.go:155:14    - Unknown word (Errf)        -- return d.Errf("duplicate %s option
modules/caddytls/certselection.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/certselection.go:162:14    - Unknown word (Errf)        -- return d.Errf("parsing %s option
modules/caddytls/certselection.go:173:15    - Unknown word (Errf)        -- return d.Errf("parsing %s option
modules/caddytls/certselection.go:188:13    - Unknown word (Errf)        -- return d.Errf("malformed %s option
modules/caddytls/certselection.go:219:7     - Unknown word (caddyfile)   -- var _ caddyfile.Unmarshaler = (*CustomCertSel
modules/caddytls/certselection.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddytls/certselection.go:25:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddytls/certselection.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/certselection.go:27:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddytls/certselection.go:27:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddytls/certselection.go:51:33     - Unknown word (certmagic)   -- SelectCertificate implements certmagic.CertificateSelector
modules/caddytls/certselection.go:56:116    - Unknown word (certmagic)   -- certmagic.Certificate) (certmagic.Certificate, error)
modules/caddytls/certselection.go:56:92     - Unknown word (certmagic)   -- ClientHelloInfo, choices []certmagic.Certificate) (certmagic
modules/caddytls/certselection.go:57:19     - Unknown word (certmagic)   -- viable := make([]certmagic.Certificate, 0, len
modules/caddytls/certselection.go:64:68     - Unknown word (gosec)       -- iteration variable (gosec warning)
modules/caddytls/connpolicy.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/connpolicy.go:164:18    - Unknown word (ALPN)        -- // Negotiation (ALPN) during the handshake
modules/caddytls/connpolicy.go:165:23    - Unknown word (alpn)        -- ALPN []string `json:"alpn,omitempty"`
modules/caddytls/connpolicy.go:195:20    - Unknown word (SSLKEYLOGFILE) -- // Also known as "SSLKEYLOGFILE", TLS secrets will be
modules/caddytls/connpolicy.go:197:5     - Unknown word (Wireshark)     -- // Wireshark and other tools. This
modules/caddytls/connpolicy.go:230:8     - Unknown word (Iface)         -- tlsAppIface, err := ctx.App("tls
modules/caddytls/connpolicy.go:243:55    - Unknown word (certmagic)     -- works: we pre-build certmagic configs
modules/caddytls/connpolicy.go:244:53    - Unknown word (certmagic)     -- faster. Unfortunately, certmagic configs are
modules/caddytls/connpolicy.go:247:12    - Unknown word (certmagic)     -- // of a certmagic config that come from
modules/caddytls/connpolicy.go:249:23    - Unknown word (certmagic)     -- // builds the base certmagic config. Since the pre
modules/caddytls/connpolicy.go:254:9     - Unknown word (certmagic)     -- // a certmagic config for each combination
modules/caddytls/connpolicy.go:30:14     - Unknown word (mholt)      -- "github.com/mholt/acmez/v2"
modules/caddytls/connpolicy.go:30:20     - Unknown word (acmez)      -- "github.com/mholt/acmez/v2"
modules/caddytls/connpolicy.go:324:6     - Unknown word (alpn)          -- var alpnFound bool
modules/caddytls/connpolicy.go:326:11    - Unknown word (acmez)         -- if a == acmez.ACMETLS1Protocol {
modules/caddytls/connpolicy.go:326:17    - Unknown word (ACMETLS)       -- if a == acmez.ACMETLS1Protocol {
modules/caddytls/connpolicy.go:327:4     - Unknown word (alpn)          -- alpnFound = true
modules/caddytls/connpolicy.go:331:6     - Unknown word (alpn)          -- if !alpnFound && (cfg.NextProtos
modules/caddytls/connpolicy.go:332:43    - Unknown word (acmez)         -- append(cfg.NextProtos, acmez.ACMETLS1Protocol)
modules/caddytls/connpolicy.go:332:49    - Unknown word (ACMETLS)       -- cfg.NextProtos, acmez.ACMETLS1Protocol)
modules/caddytls/connpolicy.go:34:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/connpolicy.go:35:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/connpolicy.go:35:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddytls/connpolicy.go:367:11    - Unknown word (destructable)  -- return destructableWriter{w}, err
modules/caddytls/connpolicy.go:36:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/connpolicy.go:36:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddytls/connpolicy.go:36:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddytls/connpolicy.go:402:13    - Unknown word (Caddyfile)     -- // UnmarshalCaddyfile sets up the ConnectionPolicy
modules/caddytls/connpolicy.go:402:57    - Unknown word (Caddyfile)     -- ConnectionPolicy from Caddyfile tokens. Syntax:
modules/caddytls/connpolicy.go:405:5     - Unknown word (alpn)          -- // alpn <values
modules/caddytls/connpolicy.go:424:38    - Unknown word (Caddyfile)     -- ConnectionPolicy) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddytls/connpolicy.go:424:51    - Unknown word (caddyfile)     -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/connpolicy.go:444:14    - Unknown word (Errf)          -- return d.Errf("duplicate %s option
modules/caddytls/connpolicy.go:447:25    - Unknown word (Caddyfile)     -- if err := p.UnmarshalCaddyfile(d.NewFromNextSegment
modules/caddytls/connpolicy.go:453:14    - Unknown word (Errf)          -- return d.Errf("duplicate %s option
modules/caddytls/connpolicy.go:456:26    - Unknown word (Caddyfile)     -- if err := ca.UnmarshalCaddyfile(d.NewFromNextSegment
modules/caddytls/connpolicy.go:472:14    - Unknown word (Errf)          -- return d.Errf("duplicate %s option
modules/caddytls/connpolicy.go:480:14    - Unknown word (Errf)          -- return d.Errf("duplicate %s option
modules/caddytls/connpolicy.go:485:14    - Unknown word (Errf)          -- return d.Errf("duplicate %s option
modules/caddytls/connpolicy.go:58:13     - Unknown word (Iface)       -- for _, modIface := range mods.(map[string
modules/caddytls/connpolicy.go:597:55    - Unknown word (caddyfile)     -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/connpolicy.go:59:47     - Unknown word (Iface)       -- append(cp[i].matchers, modIface.(ConnectionMatcher)
modules/caddytls/connpolicy.go:634:4     - Unknown word (ders)          -- ders, err := convertPEMFilesToDER
modules/caddytls/connpolicy.go:638:50    - Unknown word (ders)          -- append(ca.TrustedCACerts, ders...)
modules/caddytls/connpolicy.go:63:10     - Unknown word (ALPN)        -- if pol.ALPN == nil {
modules/caddytls/connpolicy.go:644:4     - Unknown word (ders)          -- ders, err := convertPEMFilesToDER
modules/caddytls/connpolicy.go:648:54    - Unknown word (ders)          -- ca.TrustedLeafCerts, ders...)
modules/caddytls/connpolicy.go:64:26     - Unknown word (ALPN)        -- pol.ALPN = append(pol.ALPN, defaultALPN...)
modules/caddytls/connpolicy.go:64:39     - Unknown word (ALPN)        -- append(pol.ALPN, defaultALPN...)
modules/caddytls/connpolicy.go:64:8      - Unknown word (ALPN)        -- pol.ALPN = append(pol.ALPN, defaultALP
modules/caddytls/connpolicy.go:657:16    - Unknown word (caddyfile)     -- mod, err := caddyfile.UnmarshalModule(d,
modules/caddytls/connpolicy.go:665:15    - Unknown word (caddyconfig)   -- ca.CARaw = caddyconfig.JSONModuleObject(caMod
modules/caddytls/connpolicy.go:673:16    - Unknown word (caddyfile)     -- unm, err := caddyfile.UnmarshalModule(d, modID
modules/caddytls/connpolicy.go:680:41    - Unknown word (caddytls)      -- module '%s' is not a caddytls.ClientCertificateVerifier
modules/caddytls/connpolicy.go:682:46    - Unknown word (caddyconfig)   -- append(ca.VerifiersRaw, caddyconfig.JSONModuleObject(unm
modules/caddytls/connpolicy.go:692:14    - Unknown word (caddyconfig)   -- ca.CARaw = caddyconfig.JSONModuleObject(fileMod
modules/caddytls/connpolicy.go:703:6     - Unknown word (ders)          -- var ders []string
modules/caddytls/connpolicy.go:721:7     - Unknown word (clientauth)    -- func (clientauth *ClientAuthentication
modules/caddytls/connpolicy.go:722:39    - Unknown word (clientauth)    -- clientauth.CARaw) > 0 && (len(clientauth.TrustedCACerts) > 0
modules/caddytls/connpolicy.go:722:77    - Unknown word (clientauth)    -- TrustedCACerts) > 0 || len(clientauth.TrustedCACertPEMFiles
modules/caddytls/connpolicy.go:722:9     - Unknown word (clientauth)    -- if len(clientauth.CARaw) > 0 && (len(clientauth
modules/caddytls/connpolicy.go:727:9     - Unknown word (clientauth)    -- if len(clientauth.TrustedCACertPEMFiles
modules/caddytls/connpolicy.go:772:46    - Unknown word (clientauth's)  -- sets up cfg to enforce clientauth's configuration.
modules/caddytls/connpolicy.go:84:7      - Unknown word (Iface)       -- modIface, err := ctx.LoadModule
modules/caddytls/connpolicy.go:88:32     - Unknown word (Iface)       -- handshakeContext = modIface.(HandshakeContext)
modules/caddytls/connpolicy.go:915:13    - Unknown word (Certloaders)   -- trustedLeafCertloaders := []LeafCertificateLoader
modules/caddytls/connpolicy.go:917:14    - Unknown word (Certloaders)   -- trustedLeafCertloaders = append(trustedLeafCertloade
modules/caddytls/connpolicy.go:917:46    - Unknown word (Certloaders)   -- = append(trustedLeafCertloaders, loader.(LeafCertificateLoade
modules/caddytls/connpolicy.go:920:36    - Unknown word (Certloaders)   -- := range trustedLeafCertloaders {
modules/caddytls/connpolicy.go:950:33    - Unknown word (unmarshalable) -- PublicKeyAlgorithm is a JSON-unmarshalable wrapper type.
modules/caddytls/connpolicy.go:984:6     - Unknown word (destructable)  -- type destructableWriter struct{ *os.File
modules/caddytls/connpolicy.go:986:9     - Unknown word (destructable)  -- func (d destructableWriter) Destruct() error
modules/caddytls/connpolicy_test.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/connpolicy_test.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/connpolicy_test.go:23:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddytls/connpolicy_test.go:23:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddytls/connpolicy_test.go:26:39     - Unknown word (Caddyfile)   -- tClientAuthenticationUnmarshalCaddyfileWithDirectiveName(t
modules/caddytls/connpolicy_test.go:271:26    - Unknown word (Caddyfile)   -- if err := ca.UnmarshalCaddyfile(tt.args.d); (err !=
modules/caddytls/connpolicy_test.go:272:45    - Unknown word (Caddyfile)   -- ClientAuthentication.UnmarshalCaddyfile() error = %v, wantErr
modules/caddytls/connpolicy_test.go:276:45    - Unknown word (Caddyfile)   -- ClientAuthentication.UnmarshalCaddyfile() = %v, want %v", ca
modules/caddytls/connpolicy_test.go:28:34     - Unknown word (caddytest)   -- cert_file_1 = "../../caddytest/caddy.ca.cer"
modules/caddytls/connpolicy_test.go:30:6      - Unknown word (caddyfile)   -- d *caddyfile.Dispenser
modules/caddytls/connpolicy_test.go:41:8      - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(
modules/caddytls/connpolicy_test.go:51:8      - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(
modules/caddytls/connpolicy_test.go:62:8      - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(
modules/caddytls/distributedstek/distributedstek.go:100:2     - Unknown word (dstek)           -- dstek, err := s.getSTEK()
modules/caddytls/distributedstek/distributedstek.go:100:21    - Unknown word (STEK)            -- dstek, err := s.getSTEK()
modules/caddytls/distributedstek/distributedstek.go:107:37    - Unknown word (dstek)           -- NewTimer(time.Until(dstek.NextRotation))
modules/caddytls/distributedstek/distributedstek.go:109:9     - Unknown word (dstek)           -- return dstek.Keys, nil
modules/caddytls/distributedstek/distributedstek.go:119:24    - Unknown word (STEK)            -- func (s *Provider) loadSTEK() (distributedSTEK,
modules/caddytls/distributedstek/distributedstek.go:119:43    - Unknown word (STEK)            -- loadSTEK() (distributedSTEK, error) {
modules/caddytls/distributedstek/distributedstek.go:120:20    - Unknown word (STEK)            -- var sg distributedSTEK
modules/caddytls/distributedstek/distributedstek.go:121:41    - Unknown word (stek)            -- storage.Load(s.ctx, stekFileName)
modules/caddytls/distributedstek/distributedstek.go:123:50    - Unknown word (certmagic)       -- wrap, in case error is certmagic.ErrNotExist
modules/caddytls/distributedstek/distributedstek.go:133:30    - Unknown word (dstek)           -- Provider) storeSTEK(dstek distributedSTEK) error
modules/caddytls/distributedstek/distributedstek.go:135:37    - Unknown word (dstek)           -- NewEncoder(&buf).Encode(dstek)
modules/caddytls/distributedstek/distributedstek.go:139:31    - Unknown word (stek)            -- storage.Store(s.ctx, stekFileName, buf.Bytes(
modules/caddytls/distributedstek/distributedstek.go:156:4     - Unknown word (nolint)          -- //nolint:errcheck
modules/caddytls/distributedstek/distributedstek.go:15:12     - Unknown word (distributedstek) -- // Package distributedstek provides TLS session
modules/caddytls/distributedstek/distributedstek.go:226:64    - Unknown word (godoc)           -- reset directly (see godoc)
modules/caddytls/distributedstek/distributedstek.go:230:18    - Unknown word (godocs)          -- // again, see godocs for why timer is stopped
modules/caddytls/distributedstek/distributedstek.go:23:9      - Unknown word (distributedstek) -- package distributedstek
modules/caddytls/distributedstek/distributedstek.go:250:7     - Unknown word (caddytls)        -- var _ caddytls.STEKProvider = (*Provider
modules/caddytls/distributedstek/distributedstek.go:36:14     - Unknown word (caddyserver)     -- "github.com/caddyserver/certmagic"
modules/caddytls/distributedstek/distributedstek.go:36:26     - Unknown word (certmagic)       -- github.com/caddyserver/certmagic"
modules/caddytls/distributedstek/distributedstek.go:38:14     - Unknown word (caddyserver)     -- "github.com/caddyserver/caddy/v2"
modules/caddytls/distributedstek/distributedstek.go:39:14     - Unknown word (caddyserver)     -- "github.com/caddyserver/caddy/v2/modules/caddytls
modules/caddytls/distributedstek/distributedstek.go:39:43     - Unknown word (caddytls)        -- caddyserver/caddy/v2/modules/caddytls"
modules/caddytls/distributedstek/distributedstek.go:46:38     - Unknown word (STEK)            -- implements a distributed STEK provider. This
modules/caddytls/distributedstek/distributedstek.go:56:13     - Unknown word (certmagic)       -- storage certmagic.Storage
modules/caddytls/distributedstek/distributedstek.go:57:14     - Unknown word (caddytls)        -- stekConfig *caddytls.SessionTicketService
modules/caddytls/distributedstek/distributedstek.go:57:2      - Unknown word (stek)            -- stekConfig *caddytls.SessionTicket
modules/caddytls/distributedstek/distributedstek.go:65:13     - Unknown word (stek)            -- ID: "tls.stek.distributed",
modules/caddytls/distributedstek/distributedstek.go:96:39     - Unknown word (caddytls)        -- Initialize(config *caddytls.SessionTicketService
modules/caddytls/distributedstek/distributedstek.go:98:4      - Unknown word (stek)            -- s.stekConfig = config
modules/caddytls/fileloader.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/fileloader.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/folderloader.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/folderloader.go:26:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/internalissuer.go:103:86    - Unknown word (certmagic)   -- CertificateRequest) (*certmagic.IssuedCertificate, error
modules/caddytls/internalissuer.go:105:13    - Unknown word (caddypki)    -- authCfg := caddypki.AuthorityConfig{
modules/caddytls/internalissuer.go:145:10    - Unknown word (certmagic)   -- return &certmagic.IssuedCertificate{
modules/caddytls/internalissuer.go:150:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile deserializes Caddyfile
modules/caddytls/internalissuer.go:150:36    - Unknown word (Caddyfile)   -- marshalCaddyfile deserializes Caddyfile tokens into iss.
modules/caddytls/internalissuer.go:157:37    - Unknown word (Caddyfile)   -- InternalIssuer) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddytls/internalissuer.go:157:50    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/internalissuer.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/internalissuer.go:187:7     - Unknown word (Smallstep)   -- // by Smallstep libs, particularly the
modules/caddytls/internalissuer.go:201:4     - Unknown word (certmagic)   -- _ certmagic.Issuer
modules/caddytls/internalissuer.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddytls/internalissuer.go:24:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddytls/internalissuer.go:25:14     - Unknown word (smallstep)   -- "github.com/smallstep/certificates/authority
modules/caddytls/internalissuer.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/internalissuer.go:29:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/internalissuer.go:29:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddytls/internalissuer.go:29:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddytls/internalissuer.go:30:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddypki
modules/caddytls/internalissuer.go:30:43     - Unknown word (caddypki)    -- caddyserver/caddy/v2/modules/caddypki"
modules/caddytls/internalissuer.go:55:10     - Unknown word (caddypki)    -- ca *caddypki.CA
modules/caddytls/internalissuer.go:73:12     - Unknown word (caddypki)    -- iss.CA = caddypki.DefaultCAID
modules/caddytls/internalissuer.go:73:28     - Unknown word (CAID)        -- CA = caddypki.DefaultCAID
modules/caddytls/internalissuer.go:81:24     - Unknown word (caddypki)    -- pkiApp := appModule.(*caddypki.PKI)
modules/caddytls/leaffileloader.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/leaffileloader.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/leaffileloader.go:59:3      - Unknown word (ders)        -- ders, err := convertPEMFilesToDERB
modules/caddytls/leaffileloader.go:63:40     - Unknown word (ders)        -- 9.ParseCertificates(ders)
modules/caddytls/leaffileloader.go:77:6      - Unknown word (ders)        -- var ders []byte
modules/caddytls/leaffileloader.go:83:3      - Unknown word (ders)        -- ders = append(
modules/caddytls/leaffileloader.go:84:4      - Unknown word (ders)        -- ders,
modules/caddytls/leaffileloader_test.go:10:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/leaffileloader_test.go:14:46     - Unknown word (caddytest)   -- Files: []string{"../../caddytest/leafcert.pem"}}
modules/caddytls/leaffileloader_test.go:14:56     - Unknown word (leafcert)    -- string{"../../caddytest/leafcert.pem"}}
modules/caddytls/leaffileloader_test.go:1:9       - Unknown word (caddytls)   -- package caddytls
modules/caddytls/leaffileloader_test.go:27:42     - Unknown word (caddytest)   -- os.ReadFile("../../caddytest/leafcert.pem")
modules/caddytls/leaffileloader_test.go:27:52     - Unknown word (leafcert)    -- ReadFile("../../caddytest/leafcert.pem")
modules/caddytls/leaffolderloader.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/leaffolderloader.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/leaffolderloader_test.go:10:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/leaffolderloader_test.go:14:50     - Unknown word (caddytest)   -- Folders: []string{"../../caddytest"}}
modules/caddytls/leaffolderloader_test.go:1:9       - Unknown word (caddytls)   -- package caddytls
modules/caddytls/leaffolderloader_test.go:26:42     - Unknown word (caddytest)   -- os.ReadFile("../../caddytest/leafcert.pem")
modules/caddytls/leaffolderloader_test.go:26:52     - Unknown word (leafcert)    -- ReadFile("../../caddytest/leafcert.pem")
modules/caddytls/leafpemloader.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/leafpemloader.go:21:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/leafpemloader_test.go:10:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/leafpemloader_test.go:1:9       - Unknown word (caddytls)   -- package caddytls
modules/caddytls/leafpemloader_test.go:43:42     - Unknown word (caddytest)   -- os.ReadFile("../../caddytest/leafcert.pem")
modules/caddytls/leafpemloader_test.go:43:52     - Unknown word (leafcert)    -- ReadFile("../../caddytest/leafcert.pem")
modules/caddytls/leafstorageloader.go:107:6     - Unknown word (ders)        -- var ders []byte
modules/caddytls/leafstorageloader.go:113:3     - Unknown word (ders)        -- ders = append(
modules/caddytls/leafstorageloader.go:114:4     - Unknown word (ders)        -- ders,
modules/caddytls/leafstorageloader.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/leafstorageloader.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddytls/leafstorageloader.go:23:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddytls/leafstorageloader.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/leafstorageloader.go:43:10     - Unknown word (certmagic)   -- storage certmagic.Storage
modules/caddytls/leafstorageloader.go:93:3      - Unknown word (ders)        -- ders, err := convertPEMToDER
modules/caddytls/leafstorageloader.go:97:40     - Unknown word (ders)        -- 9.ParseCertificates(ders)
modules/caddytls/matchers.go:102:4     - Unknown word (caddyhttp)   -- // caddyhttp.MatchRegexp with a local
modules/caddytls/matchers.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/matchers.go:178:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile implements caddyfile
modules/caddytls/matchers.go:178:34    - Unknown word (caddyfile)   -- UnmarshalCaddyfile implements caddyfile.Unmarshaler.
modules/caddytls/matchers.go:179:34    - Unknown word (Caddyfile)   -- MatchRegexp) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddytls/matchers.go:179:47    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/matchers.go:201:37    - Unknown word (caddyfile)   -- requires d.SetContext(caddyfile.MatcherNameCtxKey, value
modules/caddytls/matchers.go:202:25    - Unknown word (unmarshalling) -- called before this unmarshalling, otherwise it wouldn
modules/caddytls/matchers.go:228:5     - Unknown word (caddytls)      -- // caddytls.TestServerNameMatcher
modules/caddytls/matchers.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddytls/matchers.go:27:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddytls/matchers.go:31:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/matchers.go:32:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/matchers.go:32:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddytls/matchers.go:32:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddytls/matchers.go:33:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/internal"
modules/caddytls/matchers.go:363:13    - Unknown word (Errf)          -- return d.Errf("malformed TLS handshake
modules/caddytls/matchers.go:468:13    - Unknown word (Errf)          -- return d.Errf("malformed TLS handshake
modules/caddytls/matchers.go:59:5      - Unknown word (caddytls)    -- // caddytls.TestServerNameMatcher
modules/caddytls/matchers.go:69:6      - Unknown word (certmagic)   -- if certmagic.MatchWildcard(hello
modules/caddytls/matchers.go:76:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the MatchServerName
modules/caddytls/matchers.go:76:56     - Unknown word (Caddyfile)   -- MatchServerName from Caddyfile tokens. Syntax:
modules/caddytls/matchers.go:79:36     - Unknown word (Caddyfile)   -- MatchServerName) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddytls/matchers.go:79:49     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/matchers.go:92:13     - Unknown word (Errf)        -- return d.Errf("malformed TLS handshake
modules/caddytls/matchers_test.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/matchers_test.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/ondemand.go:102:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile implements caddyfile
modules/caddytls/ondemand.go:102:34    - Unknown word (caddyfile)   -- UnmarshalCaddyfile implements caddyfile.Unmarshaler.
modules/caddytls/ondemand.go:103:37    - Unknown word (Caddyfile)   -- PermissionByHTTP) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddytls/ondemand.go:103:50    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/ondemand.go:136:26    - Unknown word (certmagic)   -- chi, ok := ctx.Value(certmagic.ClientHelloInfoCtxKey
modules/caddytls/ondemand.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/ondemand.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddytls/ondemand.go:27:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddytls/ondemand.go:31:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/ondemand.go:32:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/ondemand.go:32:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddytls/ondemand.go:32:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddytls/ondemand.go:65:28     - Unknown word (certmagic)   -- value available at the certmagic.ClientHelloInfoCtxKey
modules/caddytls/pemloader.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/pemloader.go:21:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/sessiontickets.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/sessiontickets.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/sessiontickets.go:36:78     - Unknown word (stek)        -- caddy:"namespace=tls.stek inline_key=provider
modules/caddytls/sessiontickets.go:44:14     - Unknown word (STEK)        -- // Disables STEK rotation.
modules/caddytls/sessiontickets.go:50:14     - Unknown word (STEK)        -- keySource STEKProvider
modules/caddytls/sessiontickets.go:63:46     - Unknown word (STEK)        -- caddy.Duration(defaultSTEKRotationInterval)
modules/caddytls/sessiontickets.go:72:14     - Unknown word (STEK)        -- // load the STEK module, which will provide
modules/caddytls/sessiontickets.go:77:21     - Unknown word (STEK)        -- s.keySource = val.(STEKProvider)
modules/caddytls/standardstek/stek.go:117:64    - Unknown word (godoc)        -- reset directly (see godoc)
modules/caddytls/standardstek/stek.go:121:18    - Unknown word (godocs)       -- // again, see godocs for why timer is stopped
modules/caddytls/standardstek/stek.go:137:7     - Unknown word (caddytls)     -- var _ caddytls.STEKProvider = (*standardSTEK
modules/caddytls/standardstek/stek.go:15:9      - Unknown word (standardstek) -- package standardstek
modules/caddytls/standardstek/stek.go:23:14     - Unknown word (caddyserver)  -- "github.com/caddyserver/caddy/v2"
modules/caddytls/standardstek/stek.go:24:14     - Unknown word (caddyserver)  -- "github.com/caddyserver/caddy/v2/modules/caddytls
modules/caddytls/standardstek/stek.go:24:43     - Unknown word (caddytls)     -- caddyserver/caddy/v2/modules/caddytls"
modules/caddytls/standardstek/stek.go:28:31     - Unknown word (STEK)         -- RegisterModule(standardSTEKProvider{})
modules/caddytls/standardstek/stek.go:31:14     - Unknown word (STEK)         -- type standardSTEKProvider struct {
modules/caddytls/standardstek/stek.go:32:14     - Unknown word (caddytls)     -- stekConfig *caddytls.SessionTicketService
modules/caddytls/standardstek/stek.go:32:2      - Unknown word (stek)         -- stekConfig *caddytls.SessionTicket
modules/caddytls/standardstek/stek.go:37:15     - Unknown word (STEK)         -- func (standardSTEKProvider) CaddyModule
modules/caddytls/standardstek/stek.go:39:13     - Unknown word (stek)         -- ID: "tls.stek.standard",
modules/caddytls/standardstek/stek.go:40:49     - Unknown word (STEK)         -- return new(standardSTEKProvider) },
modules/caddytls/standardstek/stek.go:45:18     - Unknown word (STEK)         -- func (s *standardSTEKProvider) Initialize
modules/caddytls/standardstek/stek.go:45:51     - Unknown word (caddytls)     -- Initialize(config *caddytls.SessionTicketService
modules/caddytls/standardstek/stek.go:47:4      - Unknown word (stek)         -- s.stekConfig = config
modules/caddytls/standardstek/stek.go:49:2      - Unknown word (itvl)         -- itvl := time.Duration(s.stekConfig
modules/caddytls/standardstek/stek.go:49:26     - Unknown word (stek)         -- itvl := time.Duration(s.stekConfig.RotationInterval
modules/caddytls/standardstek/stek.go:58:38     - Unknown word (itvl)         -- IsZero() || since > itvl {
modules/caddytls/standardstek/stek.go:60:17     - Unknown word (stek)         -- keys, err = s.stekConfig.RotateSTEKs(keys
modules/caddytls/standardstek/stek.go:70:26     - Unknown word (itvl)         -- timer = time.NewTimer(itvl - since)
modules/caddytls/storageloader.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/storageloader.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddytls/storageloader.go:22:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddytls/storageloader.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/storageloader.go:39:10     - Unknown word (certmagic)   -- storage certmagic.Storage
modules/caddytls/tls.go:101:22    - Unknown word (caddyevents) -- events *caddyevents.App
modules/caddytls/tls.go:119:11    - Unknown word (Iface)       -- eventsAppIface, err := ctx.App("events
modules/caddytls/tls.go:123:22    - Unknown word (Iface)       -- t.events = eventsAppIface.(*caddyevents.App)
modules/caddytls/tls.go:123:30    - Unknown word (caddyevents) -- events = eventsAppIface.(*caddyevents.App)
modules/caddytls/tls.go:130:15    - Unknown word (certmagic)   -- cacheOpts := certmagic.CacheOptions{
modules/caddytls/tls.go:131:31    - Unknown word (certmagic)   -- GetConfigForCert: func(cert certmagic.Certificate) (*certmagic
modules/caddytls/tls.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/tls.go:160:18    - Unknown word (Iface)       -- for modName, modIface := range val.(map[string
modules/caddytls/tls.go:164:31    - Unknown word (Iface)       -- automateNames, ok := modIface.(*AutomateLoader); ok
modules/caddytls/tls.go:172:101   - Unknown word (Iface)       -- strings, got: %T", modIface)
modules/caddytls/tls.go:238:36    - Unknown word (STEK)        -- ticket ephemeral keys (STEK) service and provider
modules/caddytls/tls.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddytls/tls.go:28:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddytls/tls.go:32:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/tls.go:33:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyevents
modules/caddytls/tls.go:33:43     - Unknown word (caddyevents) -- caddyserver/caddy/v2/modules/caddyevents"
modules/caddytls/tls.go:42:15     - Unknown word (certmagic)   -- certCache *certmagic.Cache
modules/caddytls/tls.go:472:2     - Unknown word (zerossl)     -- zerosslValidation := certmagic
modules/caddytls/tls.go:472:46    - Unknown word (SSLHTTP)     -- certmagic.LooksLikeZeroSSLHTTPValidation(r)
modules/caddytls/tls.go:475:24    - Unknown word (zerossl)     -- if !acmeChallenge && !zerosslValidation {
modules/caddytls/tls.go:501:12    - Unknown word (zerossl)     -- } else if zerosslValidation {
modules/caddytls/tls.go:503:7     - Unknown word (ziss)        -- if ziss, ok := iss.(*ZeroSSLIssuer
modules/caddytls/tls.go:504:30    - Unknown word (SSLHTTP)     -- ziss.issuer.HandleZeroSSLHTTPValidation(w, r) {
modules/caddytls/tls.go:504:8     - Unknown word (ziss)        -- if ziss.issuer.HandleZeroSSLHTTPValid
modules/caddytls/tls.go:730:20    - Unknown word (hostnames)   -- // for the list of hostnames, rather than loading
modules/caddytls/tls.go:85:24     - Unknown word (certmagic)   -- Disables checks in certmagic that the configured
modules/caddytls/values.go:112:4     - Unknown word (Temporily)   -- // Temporily we ignore these default
modules/caddytls/values.go:115:4     - Unknown word (nolint)      -- // nolint:unused
modules/caddytls/values.go:130:4     - Unknown word (nolint)      -- //nolint:staticcheck
modules/caddytls/values.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/values.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddytls/values.go:22:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddytls/values.go:23:14     - Unknown word (klauspost)   -- "github.com/klauspost/cpuid/v2"
modules/caddytls/values.go:23:24     - Unknown word (cpuid)       -- github.com/klauspost/cpuid/v2"
modules/caddytls/values.go:52:28     - Unknown word (AESNI)       -- defaultCipherSuitesWithAESNI = []uint16{
modules/caddytls/values.go:64:31     - Unknown word (AESNI)       -- defaultCipherSuitesWithoutAESNI = []uint16{
modules/caddytls/values.go:78:24     - Unknown word (cpuid)       -- if cpuid.CPU.Supports(cpuid.AESNI) {
modules/caddytls/values.go:78:30     - Unknown word (AESNI)       -- cpuid.CPU.Supports(cpuid.AESNI) {
modules/caddytls/values.go:78:5      - Unknown word (cpuid)       -- if cpuid.CPU.Supports(cpuid.AESNI
modules/caddytls/values.go:79:33     - Unknown word (AESNI)       -- defaultCipherSuitesWithAESNI
modules/caddytls/values.go:81:35     - Unknown word (AESNI)       -- defaultCipherSuitesWithoutAESNI
modules/caddytls/values.go:88:3      - Unknown word (secp)        -- "secp256r1": tls.CurveP25
modules/caddytls/values.go:89:3      - Unknown word (secp)        -- "secp384r1": tls.CurveP38
modules/caddytls/values.go:90:3      - Unknown word (secp)        -- "secp521r1": tls.CurveP52
modules/caddytls/values.go:95:40     - Unknown word (certmagic)   -- rtedCertKeyTypes = map[string]certmagic.KeyType{
modules/caddytls/values.go:96:13     - Unknown word (certmagic)   -- "rsa2048": certmagic.RSA2048,
modules/caddytls/values.go:97:13     - Unknown word (certmagic)   -- "rsa4096": certmagic.RSA4096,
modules/caddytls/values.go:98:13     - Unknown word (certmagic)   -- "p256": certmagic.P256,
modules/caddytls/zerosslissuer.go:127:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile deserializes Caddyfile
modules/caddytls/zerosslissuer.go:127:36    - Unknown word (Caddyfile)   -- marshalCaddyfile deserializes Caddyfile tokens into iss.
modules/caddytls/zerosslissuer.go:129:8     - Unknown word (zerossl)     -- // ... zerossl <api_key> {
modules/caddytls/zerosslissuer.go:138:36    - Unknown word (Caddyfile)   -- ZeroSSLIssuer) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/caddytls/zerosslissuer.go:138:49    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/caddytls/zerosslissuer.go:154:14    - Unknown word (Errf)        -- return d.Errf("validity days is already
modules/caddytls/zerosslissuer.go:158:14    - Unknown word (Errf)        -- return d.Errf("invalid number of days
modules/caddytls/zerosslissuer.go:15:9      - Unknown word (caddytls)   -- package caddytls
modules/caddytls/zerosslissuer.go:168:14    - Unknown word (Errf)        -- return d.Errf("invalid port %s: %v
modules/caddytls/zerosslissuer.go:180:16    - Unknown word (caddyfile)   -- unm, err := caddyfile.UnmarshalModule(d,
modules/caddytls/zerosslissuer.go:184:38    - Unknown word (caddyconfig) -- CNAMEValidation.ProviderRaw = caddyconfig.JSONModuleObject(unm
modules/caddytls/zerosslissuer.go:193:14    - Unknown word (Errf)        -- return d.Errf("invalid propagation
modules/caddytls/zerosslissuer.go:212:15    - Unknown word (Errf)        -- return d.Errf("invalid propagation
modules/caddytls/zerosslissuer.go:244:32    - Unknown word (zerossl)     -- d.Errf("unrecognized zerossl issuer property: %s
modules/caddytls/zerosslissuer.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/caddytls/zerosslissuer.go:24:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/caddytls/zerosslissuer.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/caddytls/zerosslissuer.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/zerosslissuer.go:28:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/caddytls/zerosslissuer.go:29:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/caddytls/zerosslissuer.go:29:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/caddytls/zerosslissuer.go:29:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/caddytls/zerosslissuer.go:64:10     - Unknown word (certmagic)   -- storage certmagic.Storage
modules/caddytls/zerosslissuer.go:65:11     - Unknown word (certmagic)   -- issuer *certmagic.ZeroSSLIssuer
modules/caddytls/zerosslissuer.go:71:22     - Unknown word (zerossl)     -- ID: "tls.issuance.zerossl",
modules/caddytls/zerosslissuer.go:82:18     - Unknown word (certmagic)   -- var dnsManager *certmagic.DNSManager
modules/caddytls/zerosslissuer.go:88:17     - Unknown word (certmagic)   -- dnsManager = &certmagic.DNSManager{
modules/filestorage/filestorage.go:15:9      - Unknown word (filestorage) -- package filestorage
modules/filestorage/filestorage.go:18:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
modules/filestorage/filestorage.go:18:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
modules/filestorage/filestorage.go:20:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/filestorage/filestorage.go:21:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/filestorage/filestorage.go:21:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/filestorage/filestorage.go:21:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/filestorage/filestorage.go:28:21     - Unknown word (certmagic)   -- // FileStorage is a certmagic.Storage wrapper for
modules/filestorage/filestorage.go:28:51     - Unknown word (certmagic)   -- Storage wrapper for certmagic.FileStorage.
modules/filestorage/filestorage.go:42:37     - Unknown word (certmagic)   -- tMagicStorage converts s to a certmagic.Storage instance.
modules/filestorage/filestorage.go:43:42     - Unknown word (certmagic)   -- CertMagicStorage() (certmagic.Storage, error) {
modules/filestorage/filestorage.go:47:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the storage
modules/filestorage/filestorage.go:47:55     - Unknown word (Caddyfile)   -- storage module from Caddyfile tokens.
modules/filestorage/filestorage.go:48:32     - Unknown word (Caddyfile)   -- FileStorage) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/filestorage/filestorage.go:48:45     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/filestorage/filestorage.go:72:13     - Unknown word (Errf)        -- return d.Errf("unrecognized parameter
modules/filestorage/filestorage.go:84:4      - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*FileStorage
modules/logging/appendencoder.go:121:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the module from
modules/logging/appendencoder.go:121:47    - Unknown word (Caddyfile)   -- sets up the module from Caddyfile tokens. Syntax:
modules/logging/appendencoder.go:130:35    - Unknown word (Caddyfile)   -- AppendEncoder) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/logging/appendencoder.go:130:48    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/logging/appendencoder.go:157:16    - Unknown word (caddyfile)   -- unm, err := caddyfile.UnmarshalModule(d, moduleID
modules/logging/appendencoder.go:163:14    - Unknown word (Errf)        -- return d.Errf("module %s (%T) is not
modules/logging/appendencoder.go:165:20    - Unknown word (caddyconfig) -- fe.WrappedRaw = caddyconfig.JSONModuleObject(enc
modules/logging/appendencoder.go:29:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/logging/appendencoder.go:30:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/logging/appendencoder.go:30:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/logging/appendencoder.go:31:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/logging/appendencoder.go:31:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/logging/appendencoder.go:31:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/logging/appendencoder.go:355:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler
modules/logging/cores.go:27:31     - Unknown word (Caddyfile)   -- *MockCore) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/logging/cores.go:27:44     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/logging/cores.go:35:4      - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*MockCore
modules/logging/cores.go:6:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/logging/cores.go:7:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/logging/cores.go:7:35      - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/logging/cores.go:7:47      - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/logging/encoders.go:105:12    - Unknown word (godoc)       -- // See the godoc on the LogEncoderConfig
modules/logging/encoders.go:107:46    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/logging/encoders.go:129:120   - Unknown word (milli)       -- 39_nano, wall, wall_milli, wall_nano, common_log
modules/logging/encoders.go:129:53    - Unknown word (milli)       -- seconds_float, unix_milli_float, unix_nano, iso
modules/logging/encoders.go:134:64    - Unknown word (milli)       -- seconds, ns/nano/nanos, ms/milli/millis, string.
modules/logging/encoders.go:158:52    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/logging/encoders.go:195:13    - Unknown word (Errf)        -- return d.Errf("unrecognized subdirective
modules/logging/encoders.go:235:13    - Unknown word (milli)       -- case "unix_milli_float":
modules/logging/encoders.go:24:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/logging/encoders.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/logging/encoders.go:25:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/logging/encoders.go:25:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/logging/encoders.go:307:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*ConsoleEncode
modules/logging/encoders.go:53:25     - Unknown word (milli)       -- ce.TimeFormat = "wall_milli"
modules/logging/encoders.go:59:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the module from
modules/logging/encoders.go:59:47     - Unknown word (Caddyfile)   -- sets up the module from Caddyfile tokens. Syntax:
modules/logging/encoders.go:65:12     - Unknown word (godoc)       -- // See the godoc on the LogEncoderConfig
modules/logging/encoders.go:67:36     - Unknown word (Caddyfile)   -- ConsoleEncoder) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/logging/encoders.go:67:49     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/logging/encoders.go:72:38     - Unknown word (Caddyfile)   -- LogEncoderConfig.UnmarshalCaddyfile(d)
modules/logging/encoders.go:99:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the module from
modules/logging/filewriter.go:197:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the module from
modules/logging/filewriter.go:197:47    - Unknown word (Caddyfile)   -- sets up the module from Caddyfile tokens. Syntax:
modules/logging/filewriter.go:221:32    - Unknown word (Caddyfile)   -- FileWriter) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/logging/filewriter.go:221:45    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/logging/filewriter.go:240:14    - Unknown word (Errf)        -- return d.Errf("parsing mode: %v",
modules/logging/filewriter.go:258:14    - Unknown word (Errf)        -- return d.Errf("parsing size: %v",
modules/logging/filewriter.go:27:12     - Unknown word (natefinch)  -- "gopkg.in/natefinch/lumberjack.v2"
modules/logging/filewriter.go:282:14    - Unknown word (Errf)        -- return d.Errf("parsing roll_keep number
modules/logging/filewriter.go:293:14    - Unknown word (Errf)        -- return d.Errf("parsing roll_keep_for
modules/logging/filewriter.go:296:14    - Unknown word (Errf)        -- return d.Errf("negative roll_keep
modules/logging/filewriter.go:29:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/logging/filewriter.go:308:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*FileWriter
modules/logging/filewriter.go:30:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/logging/filewriter.go:30:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/logging/filewriter.go:30:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/logging/filewriter_test.go:105:32    - Unknown word (caddytest)   -- = os.MkdirTemp("", "caddytest")
modules/logging/filewriter_test.go:179:12    - Unknown word (caddyfile)   -- d *caddyfile.Dispenser
modules/logging/filewriter_test.go:185:7     - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(`
modules/logging/filewriter_test.go:197:7     - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(`
modules/logging/filewriter_test.go:209:7     - Unknown word (caddyfile)   -- d: caddyfile.NewTestDispenser(`
modules/logging/filewriter_test.go:246:26    - Unknown word (Caddyfile)   -- if err := fw.UnmarshalCaddyfile(tt.d); (err != nil)
modules/logging/filewriter_test.go:247:24    - Unknown word (Caddyfile)   -- t.Fatalf("UnmarshalCaddyfile() error = %v, want
modules/logging/filewriter_test.go:26:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/logging/filewriter_test.go:26:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/logging/filewriter_test.go:26:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/logging/filewriter_test.go:353:32    - Unknown word (caddytest)   -- = os.MkdirTemp("", "caddytest")
modules/logging/filewriter_test.go:75:34     - Unknown word (caddytest)   -- = os.MkdirTemp("", "caddytest")
modules/logging/filewriter_test_windows.go:31:32     - Unknown word (caddytest)  -- = os.MkdirTemp("", "caddytest")
modules/logging/filterencoder.go:109:20    - Unknown word (Iface)       -- for fieldName, modIface := range vals.(map[string
modules/logging/filterencoder.go:110:29    - Unknown word (Iface)       -- Fields[fieldName] = modIface.(LogFieldFilter)
modules/logging/filterencoder.go:139:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the module from
modules/logging/filterencoder.go:139:47    - Unknown word (Caddyfile)   -- sets up the module from Caddyfile tokens. Syntax:
modules/logging/filterencoder.go:152:35    - Unknown word (Caddyfile)   -- FilterEncoder) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/logging/filterencoder.go:152:48    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/logging/filterencoder.go:166:15    - Unknown word (caddyfile)   -- unm, err := caddyfile.UnmarshalModule(d, moduleID
modules/logging/filterencoder.go:172:13    - Unknown word (Errf)        -- return d.Errf("module %s (%T) is not
modules/logging/filterencoder.go:174:25    - Unknown word (caddyconfig) -- fe.FieldsRaw[field] = caddyconfig.JSONModuleObject(filter
modules/logging/filterencoder.go:186:16    - Unknown word (caddyfile)   -- unm, err := caddyfile.UnmarshalModule(d, moduleID
modules/logging/filterencoder.go:192:14    - Unknown word (Errf)        -- return d.Errf("module %s (%T) is not
modules/logging/filterencoder.go:194:20    - Unknown word (caddyconfig) -- fe.WrappedRaw = caddyconfig.JSONModuleObject(enc
modules/logging/filterencoder.go:28:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/logging/filterencoder.go:29:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/logging/filterencoder.go:29:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig"
modules/logging/filterencoder.go:30:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/logging/filterencoder.go:30:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/logging/filterencoder.go:30:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/logging/filterencoder.go:452:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler
modules/logging/filters.go:102:32    - Unknown word (caddyhttp)   -- ok := in.Interface.(caddyhttp.LoggableStringArray
modules/logging/filters.go:102:42    - Unknown word (Loggable)    -- Interface.(caddyhttp.LoggableStringArray); ok {
modules/logging/filters.go:103:20    - Unknown word (caddyhttp)   -- newArray := make(caddyhttp.LoggableStringArray
modules/logging/filters.go:103:30    - Unknown word (Loggable)    -- newArray := make(caddyhttp.LoggableStringArray, len(array
modules/logging/filters.go:130:47    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/logging/filters.go:170:46    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/logging/filters.go:175:12    - Unknown word (Errf)        -- return d.Errf("too many arguments
modules/logging/filters.go:180:13    - Unknown word (Errf)        -- return d.Errf("error parsing %s:
modules/logging/filters.go:187:14    - Unknown word (Errf)        -- return d.Errf("error parsing %s:
modules/logging/filters.go:201:14    - Unknown word (Errf)        -- return d.Errf("error parsing %s:
modules/logging/filters.go:211:14    - Unknown word (Errf)        -- return d.Errf("error parsing %s:
modules/logging/filters.go:243:32    - Unknown word (caddyhttp)   -- ok := in.Interface.(caddyhttp.LoggableStringArray
modules/logging/filters.go:243:42    - Unknown word (Loggable)    -- Interface.(caddyhttp.LoggableStringArray); ok {
modules/logging/filters.go:244:20    - Unknown word (caddyhttp)   -- newArray := make(caddyhttp.LoggableStringArray
modules/logging/filters.go:244:30    - Unknown word (Loggable)    -- newArray := make(caddyhttp.LoggableStringArray, len(array
modules/logging/filters.go:30:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/logging/filters.go:31:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/logging/filters.go:31:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/logging/filters.go:31:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/logging/filters.go:32:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/logging/filters.go:32:43     - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/logging/filters.go:394:42    - Unknown word (Loggable)    -- Interface.(caddyhttp.LoggableStringArray); ok {
modules/logging/filters.go:64:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the module from
modules/logging/filters.go:64:47     - Unknown word (Caddyfile)   -- sets up the module from Caddyfile tokens.
modules/logging/filters.go:65:30     - Unknown word (Caddyfile)   -- DeleteFilter) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/logging/filters.go:65:43     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/logging/filters.go:95:13     - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the module from
modules/logging/filters.go:95:47     - Unknown word (Caddyfile)   -- sets up the module from Caddyfile tokens.
modules/logging/filters.go:96:44     - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/logging/filters_test.go:109:38    - Unknown word (notexist)    -- replaceAction, Parameter: "notexist", Value: "REDACTED"
modules/logging/filters_test.go:111:37    - Unknown word (notexist)    -- deleteAction, Parameter: "notexist"},
modules/logging/filters_test.go:120:53    - Unknown word (Loggable)    -- Interface: caddyhttp.LoggableStringArray{
modules/logging/filters_test.go:165:2     - Unknown word (outval)      -- outval := out.Interface.(caddyhttp
modules/logging/filters_test.go:169:5     - Unknown word (outval)      -- if outval[0] != expected[0] {
modules/logging/filters_test.go:55:43     - Unknown word (caddyhttp)   -- zapcore.Field{Interface: caddyhttp.LoggableStringArray
modules/logging/filters_test.go:55:53     - Unknown word (Loggable)    -- Interface: caddyhttp.LoggableStringArray{
modules/logging/filters_test.go:59:28     - Unknown word (caddyhttp)   -- ok := out.Interface.(caddyhttp.LoggableStringArray
modules/logging/filters_test.go:59:38     - Unknown word (Loggable)    -- Interface.(caddyhttp.LoggableStringArray)
modules/logging/filters_test.go:6:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/logging/filters_test.go:70:42     - Unknown word (caddyhttp)   -- zapcore.Field{Interface: caddyhttp.LoggableStringArray
modules/logging/filters_test.go:70:52     - Unknown word (Loggable)    -- Interface: caddyhttp.LoggableStringArray{
modules/logging/filters_test.go:74:27     - Unknown word (caddyhttp)   -- ok = out.Interface.(caddyhttp.LoggableStringArray
modules/logging/filters_test.go:74:37     - Unknown word (Loggable)    -- Interface.(caddyhttp.LoggableStringArray)
modules/logging/filters_test.go:7:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/logging/filters_test.go:7:43      - Unknown word (caddyhttp)   -- caddyserver/caddy/v2/modules/caddyhttp"
modules/logging/filters_test.go:89:20     - Unknown word (notexist)    -- {replaceAction, "notexist", "REDACTED"},
modules/logging/filters_test.go:91:19     - Unknown word (notexist)    -- {deleteAction, "notexist", ""},
modules/logging/netwriter.go:107:2     - Unknown word (reconn)      -- reconn.connMu.Lock()
modules/logging/netwriter.go:108:2     - Unknown word (reconn)      -- reconn.Conn = conn
modules/logging/netwriter.go:109:2     - Unknown word (reconn)      -- reconn.connMu.Unlock()
modules/logging/netwriter.go:113:13    - Unknown word (Caddyfile)   -- // UnmarshalCaddyfile sets up the handler
modules/logging/netwriter.go:113:48    - Unknown word (Caddyfile)   -- up the handler from Caddyfile tokens. Syntax:
modules/logging/netwriter.go:119:31    - Unknown word (Caddyfile)   -- NetWriter) UnmarshalCaddyfile(d *caddyfile.Dispenser
modules/logging/netwriter.go:119:44    - Unknown word (caddyfile)   -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/logging/netwriter.go:136:14    - Unknown word (Errf)        -- return d.Errf("invalid duration:
modules/logging/netwriter.go:153:4     - Unknown word (redialer)    -- // redialerConn wraps an underlying
modules/logging/netwriter.go:156:6     - Unknown word (redialer)    -- type redialerConn struct {
modules/logging/netwriter.go:166:15    - Unknown word (redialer)    -- func (reconn *redialerConn) Write(b []byte
modules/logging/netwriter.go:214:15    - Unknown word (redialer)    -- func (reconn *redialerConn) dial() (net.Conn
modules/logging/netwriter.go:222:4     - Unknown word (caddyfile)   -- _ caddyfile.Unmarshaler = (*NetWriter
modules/logging/netwriter.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/logging/netwriter.go:26:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/logging/netwriter.go:26:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/logging/netwriter.go:26:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/logging/netwriter.go:94:13     - Unknown word (redialer)    -- reconn := &redialerConn{
modules/logging/netwriter.go:94:2      - Unknown word (reconn)      -- reconn := &redialerConn{
modules/logging/netwriter.go:98:15     - Unknown word (reconn)      -- conn, err := reconn.dial()
modules/metrics/adminmetrics.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/metrics/metrics.go:103:73    - Unknown word (caddyhttp)     -- *http.Request, next caddyhttp.Handler) error {
modules/metrics/metrics.go:111:4     - Unknown word (caddyhttp)     -- _ caddyhttp.MiddlewareHandler =
modules/metrics/metrics.go:112:4     - Unknown word (caddyfile)     -- _ caddyfile.Unmarshaler =
modules/metrics/metrics.go:115:34    - Unknown word (promhttp)      -- createMetricsHandler(logger promhttp.Logger, enableOpenMetrics
modules/metrics/metrics.go:116:9     - Unknown word (promhttp)      -- return promhttp.InstrumentMetricHandler
modules/metrics/metrics.go:117:3     - Unknown word (promhttp)      -- promhttp.HandlerFor(registry
modules/metrics/metrics.go:117:33    - Unknown word (promhttp)      -- HandlerFor(registry, promhttp.HandlerOpts{
modules/metrics/metrics.go:22:50     - Unknown word (promhttp)   -- client_golang/prometheus/promhttp"
modules/metrics/metrics.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2"
modules/metrics/metrics.go:26:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/metrics/metrics.go:26:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/metrics/metrics.go:26:47     - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/metrics/metrics.go:27:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/metrics/metrics.go:27:35     - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/httpcaddyfile"
modules/metrics/metrics.go:27:47     - Unknown word (httpcaddyfile) -- caddy/v2/caddyconfig/httpcaddyfile"
modules/metrics/metrics.go:28:14     - Unknown word (caddyserver)   -- "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/metrics/metrics.go:28:43     - Unknown word (caddyhttp)     -- caddyserver/caddy/v2/modules/caddyhttp"
modules/metrics/metrics.go:33:2      - Unknown word (httpcaddyfile) -- httpcaddyfile.RegisterHandlerDirective
modules/metrics/metrics.go:33:57     - Unknown word (Caddyfile)     -- dlerDirective("metrics", parseCaddyfile)
modules/metrics/metrics.go:44:41     - Unknown word (openmetrics)   -- bool `json:"disable_openmetrics,omitempty"`
modules/metrics/metrics.go:74:11     - Unknown word (Caddyfile)     -- func parseCaddyfile(h httpcaddyfile.Helper
modules/metrics/metrics.go:74:23     - Unknown word (httpcaddyfile) -- func parseCaddyfile(h httpcaddyfile.Helper) (caddyhttp.Middleware
modules/metrics/metrics.go:74:46     - Unknown word (caddyhttp)     -- httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error
modules/metrics/metrics.go:76:20     - Unknown word (Caddyfile)     -- err := m.UnmarshalCaddyfile(h.Dispenser)
modules/metrics/metrics.go:80:13     - Unknown word (Caddyfile)     -- // UnmarshalCaddyfile sets up the handler
modules/metrics/metrics.go:80:48     - Unknown word (Caddyfile)     -- up the handler from Caddyfile tokens. Syntax:
modules/metrics/metrics.go:83:16     - Unknown word (openmetrics)   -- // disable_openmetrics
modules/metrics/metrics.go:85:41     - Unknown word (caddyfile)     -- UnmarshalCaddyfile(d *caddyfile.Dispenser) error {
modules/metrics/metrics.go:94:17     - Unknown word (openmetrics)   -- case "disable_openmetrics":
modules/metrics/metrics.go:97:13     - Unknown word (Errf)          -- return d.Errf("unrecognized subdirective
modules/metrics/metrics_test.go:11:7      - Unknown word (caddyfile)   -- d := caddyfile.NewTestDispenser(`metrics
modules/metrics/metrics_test.go:12:20     - Unknown word (Caddyfile)   -- err := m.UnmarshalCaddyfile(d)
modules/metrics/metrics_test.go:18:6      - Unknown word (caddyfile)   -- d = caddyfile.NewTestDispenser(`metrics
modules/metrics/metrics_test.go:19:19     - Unknown word (Caddyfile)   -- err = m.UnmarshalCaddyfile(d)
modules/metrics/metrics_test.go:29:52     - Unknown word (openmetrics) -- tDispenser(`metrics { disable_openmetrics }`)
modules/metrics/metrics_test.go:29:6      - Unknown word (caddyfile)   -- d = caddyfile.NewTestDispenser(`metrics
modules/metrics/metrics_test.go:30:19     - Unknown word (Caddyfile)   -- err = m.UnmarshalCaddyfile(d)
modules/metrics/metrics_test.go:40:6      - Unknown word (caddyfile)   -- d = caddyfile.NewTestDispenser(`metrics
modules/metrics/metrics_test.go:41:19     - Unknown word (Caddyfile)   -- err = m.UnmarshalCaddyfile(d)
modules/metrics/metrics_test.go:6:14      - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/caddyconfig
modules/metrics/metrics_test.go:6:35      - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/metrics/metrics_test.go:6:47      - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/metrics/metrics_test.go:9:26      - Unknown word (Caddyfile)   -- TestMetricsUnmarshalCaddyfile(t *testing.T) {
modules/standard/imports.go:10:45     - Unknown word (caddypki)     -- caddyserver/caddy/v2/modules/caddypki"
modules/standard/imports.go:11:45     - Unknown word (caddypki)     -- caddyserver/caddy/v2/modules/caddypki/acmeserver"
modules/standard/imports.go:11:54     - Unknown word (acmeserver)   -- v2/modules/caddypki/acmeserver"
modules/standard/imports.go:12:45     - Unknown word (caddytls)     -- caddyserver/caddy/v2/modules/caddytls"
modules/standard/imports.go:13:45     - Unknown word (caddytls)     -- caddyserver/caddy/v2/modules/caddytls/distributedstek"
modules/standard/imports.go:13:54     - Unknown word (distributedstek) -- v2/modules/caddytls/distributedstek"
modules/standard/imports.go:14:45     - Unknown word (caddytls)        -- caddyserver/caddy/v2/modules/caddytls/standardstek"
modules/standard/imports.go:14:54     - Unknown word (standardstek)    -- v2/modules/caddytls/standardstek"
modules/standard/imports.go:15:45     - Unknown word (filestorage)     -- caddyserver/caddy/v2/modules/filestorage"
modules/standard/imports.go:5:16      - Unknown word (caddyserver) -- _ "github.com/caddyserver/caddy/v2/caddyconfig
modules/standard/imports.go:5:37      - Unknown word (caddyconfig) -- caddyserver/caddy/v2/caddyconfig/caddyfile"
modules/standard/imports.go:5:49      - Unknown word (caddyfile)   -- caddy/v2/caddyconfig/caddyfile"
modules/standard/imports.go:6:16      - Unknown word (caddyserver) -- _ "github.com/caddyserver/caddy/v2/modules/caddyevents
modules/standard/imports.go:6:45      - Unknown word (caddyevents) -- caddyserver/caddy/v2/modules/caddyevents"
modules/standard/imports.go:7:16      - Unknown word (caddyserver) -- _ "github.com/caddyserver/caddy/v2/modules/caddyevents
modules/standard/imports.go:7:45      - Unknown word (caddyevents) -- caddyserver/caddy/v2/modules/caddyevents/eventsconfig"
modules/standard/imports.go:7:57      - Unknown word (eventsconfig) -- modules/caddyevents/eventsconfig"
modules/standard/imports.go:8:16      - Unknown word (caddyserver)  -- _ "github.com/caddyserver/caddy/v2/modules/caddyfs
modules/standard/imports.go:8:45      - Unknown word (caddyfs)      -- caddyserver/caddy/v2/modules/caddyfs"
modules/standard/imports.go:9:16      - Unknown word (caddyserver)  -- _ "github.com/caddyserver/caddy/v2/modules/caddyhttp
modules/standard/imports.go:9:45      - Unknown word (caddyhttp)    -- caddyserver/caddy/v2/modules/caddyhttp/standard"
replacer_fuzz.go:15:12     - Unknown word (gofuzz)     -- //go:build gofuzz
replacer_test.go:256:14    - Unknown word (NOOO)       -- return "NOOO", false
replacer_test.go:268:14    - Unknown word (NOOO)       -- return "NOOO", false
replacer_test.go:281:26    - Unknown word (Ã¤Ã¼test)     -- expected: "val1123Ã¶Ã¶_Ã¤Ã¼test-123space value1.2.3
replacer_test.go:296:17    - Unknown word (teval)      -- expected: "{teval1{as{{dftest-123",
replacer_test.go:296:28    - Unknown word (dftest)     -- expected: "{teval1{as{{dftest-123",
replacer_test.go:384:36    - Unknown word (envtest)    -- CADDY_REPLACER_TEST", "envtest")
replacer_test.go:413:15    - Unknown word (envtest)    -- value: "envtest",
replacer_test.go:431:20    - Unknown word (caddytest)  -- variable: "file.caddytest/integration/testdata
replacer_test.go:435:20    - Unknown word (caddytest)  -- variable: "file.caddytest/integration/testdata
replacer_test.go:439:20    - Unknown word (caddytest)  -- variable: "file.caddytest/integration/testdata
replacer_test.go:469:20    - Unknown word (caddytest)  -- variable: "file.caddytest/integration/testdata
service_windows.go:23:14     - Unknown word (caddyserver) -- "github.com/caddyserver/caddy/v2/notify"
sigtrap_posix.go:25:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
sigtrap_posix.go:25:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
sigtrap_posix.go:32:12     - Unknown word (Moby)        -- // Docker/Moby has a similar hack:
sigtrap_posix.go:36:3      - Unknown word (sigchan)     -- sigchan := make(chan os.Signal
sigtrap_posix.go:37:17     - Unknown word (sigchan)     -- signal.Notify(sigchan, syscall.SIGTERM, syscall
sigtrap_posix.go:39:20     - Unknown word (sigchan)     -- for sig := range sigchan {
sigtrap_posix.go:43:5      - Unknown word (certmagic)   -- certmagic.CleanUpOwnLocks(context
storage.go:160:23    - Unknown word (certmagic)   -- var DefaultStorage = &certmagic.FileStorage{Path: AppDataDir
storage.go:22:14     - Unknown word (caddyserver) -- "github.com/caddyserver/certmagic"
storage.go:22:26     - Unknown word (certmagic)   -- github.com/caddyserver/certmagic"
storage.go:27:23     - Unknown word (certmagic)   -- to a valid, usable certmagic.Storage value. (The
storage.go:32:22     - Unknown word (certmagic)   -- CertMagicStorage() (certmagic.Storage, error)
storage.go:38:20     - Unknown word (sdcard)      -- // which returns "/sdcard".
storage.go:42:12     - Unknown word (sdcard)      -- home = "/sdcard"
storage.go:63:22     - Unknown word (USERPROFILE) -- home = os.Getenv("USERPROFILE")


Repository: RustPython/RustPython
Url: "https://github.com/RustPython/RustPython.git"
Args: ["**"]
Lines:
 CSpell: Files checked: 621, Issues found: 1556 in 194 files.
 exit code: 1
Cargo.toml:172:1     - Unknown word (rustix)     -- rustix = { version = "0.38
Cargo.toml:82:62     - Unknown word (redoxer)    -- to compile/check with redoxer
DEVELOPMENT.md:131:26    - Unknown word (subcrates)  -- src`: using the other subcrates to bring rustpython
Dockerfile.bin:13:5      - Unknown word (RUSTPYTHONPATH) -- ENV RUSTPYTHONPATH /usr/lib/rustpython
LICENSE-logo:139:15    - Unknown word (sublicensable) -- non-sublicensable, non-exclusive, irrevocable
LICENSE-logo:205:34    - Unknown word (waivable)      -- under any voluntary or waivable statutory or compulsory
README.md:100:1     - Unknown word (wasmer)         -- wasmer run --dir `pwd` -- target
README.md:103:8     - Unknown word (wapm)           -- Run by wapm
README.md:106:3     - Unknown word (wapm)           -- $ wapm install rustpython
README.md:107:3     - Unknown word (wapm)           -- $ wapm run rustpython
README.md:168:4     - Unknown word (FOSDEM)         -- - [FOSDEM 2019](https://www.youtube
README.md:16:4      - Unknown word (WAPM)       -- [![WAPM package](https://wapm
README.md:176:4     - Unknown word (Greptime)       -- - [GreptimeDB](https://github.com
README.md:177:4     - Unknown word (pyckitup)       -- - [pyckitup](https://github.com
README.md:245:16    - Unknown word (rspython)       -- [windelbouwman/rspython](https://github.com
README.md:245:2     - Unknown word (windelbouwman)  -- [windelbouwman/rspython](https://github
README.md:246:2     - Unknown word (shinglyu)       -- [shinglyu/RustPython](https:/
README.md:53:38     - Unknown word (RUSTPYTHONPATH) -- windows users, please set `RUSTPYTHONPATH` environment variable
README.md:54:58     - Unknown word (RUSTPYTHONPATH) -- C:\RustPython`, set `RUSTPYTHONPATH` as `C:\RustPython\Lib
README.md:97:8      - Unknown word (wasmer)         -- Run by wasmer
benches/benchmarks/fannkuch.py:14:5      - Unknown word (fannkuch)   -- def fannkuch(n):
benches/benchmarks/fannkuch.py:54:25     - Unknown word (fannkuch)   -- #runner.bench_func('fannkuch', fannkuch, arg)
benches/benchmarks/fannkuch.py:54:36     - Unknown word (fannkuch)   -- bench_func('fannkuch', fannkuch, arg)
benches/benchmarks/fannkuch.py:55:5      - Unknown word (fannkuch)   -- fannkuch(arg)
benches/benchmarks/fannkuch.py:5:16      - Unknown word (Sokolov)    -- Contributed by Sokolov Yura, modified by Tupteq
benches/benchmarks/fannkuch.py:5:24      - Unknown word (Yura)       -- Contributed by Sokolov Yura, modified by Tupteq
benches/benchmarks/fannkuch.py:5:42      - Unknown word (Tupteq)     -- Sokolov Yura, modified by Tupteq.
benches/benchmarks/nbody.py:5:15      - Unknown word (Tupteq)     -- # modified by Tupteq, Fredrik Johansson,
benches/benchmarks/nbody.py:5:23      - Unknown word (Fredrik)    -- modified by Tupteq, Fredrik Johansson, and Daniel
benches/benchmarks/nbody.py:5:31      - Unknown word (Johansson)  -- modified by Tupteq, Fredrik Johansson, and Daniel Nanz
benches/benchmarks/nbody.py:5:53      - Unknown word (Nanz)       -- Johansson, and Daniel Nanz
benches/benchmarks/pystone.py:109:23    - Unknown word (DHRYSTONE)  -- String2Loc = "DHRYSTONE PROGRAM, 2'ND STRING
benches/benchmarks/pystone.py:128:5     - Unknown word (benchtime)  -- benchtime = clock() - starttime
benches/benchmarks/pystone.py:129:8     - Unknown word (benchtime)  -- if benchtime == 0.0:
benches/benchmarks/pystone.py:130:17    - Unknown word (Benchtime)  -- loopsPerBenchtime = 0.0
benches/benchmarks/pystone.py:132:17    - Unknown word (Benchtime)  -- loopsPerBenchtime = (loops / benchtime
benches/benchmarks/pystone.py:132:38    - Unknown word (benchtime)  -- loopsPerBenchtime = (loops / benchtime)
benches/benchmarks/pystone.py:133:12    - Unknown word (benchtime)  -- return benchtime, loopsPerBenchtime
benches/benchmarks/pystone.py:133:31    - Unknown word (Benchtime)  -- return benchtime, loopsPerBenchtime
benches/benchmarks/pystone.py:19:51     - Unknown word (Arndt)      -- version 1.1.1 by Chris Arndt:
benches/benchmarks/pystone.py:52:40     - Unknown word (Discr)      -- self, PtrComp = None, Discr = 0, EnumComp = 0,
benches/benchmarks/pystone.py:55:14     - Unknown word (Discr)      -- self.Discr = Discr
benches/benchmarks/pystone.py:55:22     - Unknown word (Discr)      -- self.Discr = Discr
benches/benchmarks/pystone.py:5:2       - Unknown word (PYSTONE)    -- "PYSTONE" Benchmark Program
benches/benchmarks/pystone.py:61:42     - Unknown word (Discr)      -- Record(self.PtrComp, self.Discr, self.EnumComp,
benches/benchmarks/pystone.py:7:57      - Unknown word (Pystone)    -- corresponds to C/1.1 plus 2 Pystone fixes)
benches/benchmarks/pystone.py:95:12     - Unknown word (Discr)      -- PtrGlb.Discr = Ident1
benches/benchmarks/pystone.py:98:26     - Unknown word (DHRYSTONE)  -- PtrGlb.StringComp = "DHRYSTONE PROGRAM, SOME STRING
benches/benchmarks/pystone.py:99:19     - Unknown word (DHRYSTONE)  -- String1Loc = "DHRYSTONE PROGRAM, 1'ST STRING
benches/benchmarks/pystone.py:9:29      - Unknown word (Weicker)    -- Reinhold P. Weicker, CACM Vol 27, No 1
benches/benchmarks/pystone.py:9:39      - Unknown word (CACM)       -- Reinhold P. Weicker,  CACM Vol 27, No 10, 10/8
benches/execution.rs:109:17    - Unknown word (pystone)    -- if let Some(pystone_contents) = benches
benches/execution.rs:109:53    - Unknown word (pystone)    -- contents) = benches.remove("pystone.py") {
benches/execution.rs:110:17    - Unknown word (pystone)    -- let mut pystone_group = c.benchmark
benches/execution.rs:23:10     - Unknown word (rustpy)     -- fn bench_rustpy_code(b: &mut Bencher
benches/execution.rs:46:15     - Unknown word (rustpy)     -- bench_rustpy_code(b, name, contents
benches/execution.rs:71:18     - Unknown word (pystone)    -- pub fn benchmark_pystone(group: &mut BenchmarkGroup
benches/execution.rs:82:19     - Unknown word (rustpy)     -- bench_rustpy_code(b, "pystone", code
benches/execution.rs:82:35     - Unknown word (pystone)    -- bench_rustpy_code(b, "pystone", code_str)
benches/microbenchmarks.rs:107:10    - Unknown word (rustpy)     -- fn bench_rustpy_code(group: &mut BenchmarkGro
benches/microbenchmarks.rs:172:11    - Unknown word (rustpy)     -- bench_rustpy_code(&mut group, &benchmark
common/src/boxvec.rs:1:8       - Unknown word (unresizable) -- //! An unresizable vector backed by a
common/src/boxvec.rs:264:23    - Unknown word (nonoverlapping) -- ptr::copy_nonoverlapping(other.as_ptr(), dst
common/src/fileutils.rs:311:21    - Unknown word (PCWSTR)     -- PCWSTR,
common/src/fileutils.rs:31:28     - Unknown word (PCWSTR)     -- use windows_sys::core::PCWSTR;
common/src/float_ops.rs:5:8       - Unknown word (ufrexp)     -- pub fn ufrexp(value: f64) -> (f64
common/src/hash.rs:109:35    - Unknown word (ufrexp)     -- = super::float_ops::ufrexp(value);
common/src/hash.rs:65:58     - Unknown word (hashf)      -- E>(&self, iter: I, hashf: F) -> Result<PyHash
common/src/hash.rs:72:29     - Unknown word (hashf)      -- let item_hash = hashf(element)?;
common/src/lock/cell_lock.rs:131:23    - Unknown word (upgradably) -- deadlock("upgradably+sharedly ", "RwLock
common/src/lock/cell_lock.rs:131:34    - Unknown word (sharedly)   -- deadlock("upgradably+sharedly ", "RwLock")
common/src/lock/cell_lock.rs:180:35    - Unknown word (sharedly)   -- deadlock("recursively+sharedly ", "RwLock")
common/src/lock/cell_lock.rs:72:23     - Unknown word (sharedly)   -- deadlock("sharedly ", "RwLock")
common/src/os.rs:113:31    - Unknown word (WSAEACCES)  -- Networking::WinSock::{WSAEACCES, WSAEBADF, WSAEFAULT
common/src/os.rs:113:42    - Unknown word (WSAEBADF)   -- WinSock::{WSAEACCES, WSAEBADF, WSAEFAULT, WSAEINTR
common/src/os.rs:113:52    - Unknown word (WSAEFAULT)  -- WSAEACCES, WSAEBADF, WSAEFAULT, WSAEINTR, WSAEINVAL
common/src/os.rs:113:73    - Unknown word (WSAEINVAL)  -- WSAEFAULT, WSAEINTR, WSAEINVAL, WSAEMFILE},
common/src/os.rs:113:84    - Unknown word (WSAEMFILE)  -- WSAEINTR, WSAEINVAL, WSAEMFILE},
common/src/os.rs:115:30    - Unknown word (HRESULT)    -- Unwrap FACILITY_WIN32 HRESULT errors.
common/src/os.rs:123:24    - Unknown word (WSAEBADF)   -- WSAEINTR | WSAEBADF | WSAEACCES | WSAEFAULT
common/src/os.rs:123:35    - Unknown word (WSAEACCES)  -- WSAEINTR | WSAEBADF | WSAEACCES | WSAEFAULT | WSAEINVAL
common/src/os.rs:123:47    - Unknown word (WSAEFAULT)  -- WSAEBADF | WSAEACCES | WSAEFAULT | WSAEINVAL | WSAEMFILE
common/src/os.rs:123:59    - Unknown word (WSAEINVAL)  -- WSAEACCES | WSAEFAULT | WSAEINVAL | WSAEMFILE => {
common/src/os.rs:123:71    - Unknown word (WSAEMFILE)  -- WSAEFAULT | WSAEINVAL | WSAEMFILE => {
common/src/os.rs:152:17    - Unknown word (IOPL)       -- | ERROR_IOPL_NOT_ENABLED
common/src/os.rs:153:25    - Unknown word (SEGDPL)     -- | ERROR_INVALID_SEGDPL
common/src/os.rs:156:29    - Unknown word (XEEDS)      -- | ERROR_RELOC_CHAIN_XEEDS_SEGLIM
common/src/os.rs:156:35    - Unknown word (SEGLIM)     -- ERROR_RELOC_CHAIN_XEEDS_SEGLIM
common/src/os.rs:157:17    - Unknown word (INFLOOP)    -- | ERROR_INFLOOP_IN_RELOC_CHAIN => ENOEXEC
common/src/static_cell.rs:111:56    - Unknown word (oncecell)   -- cell::StaticCell::_from_oncecell($crate::lock::OnceCell
common/src/static_cell.rs:79:28     - Unknown word (oncecell)   -- pub const fn _from_oncecell(inner: OnceCell<T>)
compiler/codegen/src/snapshots/rustpython_compiler_core__compile__tests__nested_double_async_with.snap:29:42     - Unknown word (woohoo)     -- LoadNameAny (6, woohoo)
compiler/codegen/src/snapshots/rustpython_compiler_core__compile__tests__nested_double_async_with.snap:3:184     - Unknown word (woohoo)     -- async with woohoo():\n
deny.toml:156:45    - Unknown word (dotgraphs)  -- ghlighting used when creating dotgraphs for crates
deny.toml:188:11    - Unknown word (reqwest)    -- #crate = "reqwest"
deny.toml:193:7     - Unknown word (rustls)     -- # "rustls",
deny.toml:194:9     - Unknown word (rustls)     -- # "__rustls",
deny.toml:196:13    - Unknown word (rustls)     -- # "hyper-rustls",
deny.toml:197:7     - Unknown word (rustls)     -- # "rustls",
deny.toml:198:14    - Unknown word (pemfile)    -- # "rustls-pemfile",
deny.toml:198:7     - Unknown word (rustls)     -- # "rustls-pemfile",
deny.toml:199:18    - Unknown word (webpki)     -- # "rustls-tls-webpki-roots",
deny.toml:201:7     - Unknown word (webpki)     -- # "webpki-roots",
deny.toml:210:21    - Unknown word (gnullvm)    -- "windows_x86_64_gnullvm",
deny.toml:215:22    - Unknown word (gnullvm)    -- "windows_aarch64_gnullvm",
example_projects/aheui-rust.md:1:3       - Unknown word (aheui)      -- # aheui-rust
example_projects/aheui-rust.md:4:14      - Unknown word (frozenlib)  -- - Creating a frozenlib: https://github.com
example_projects/barebone/Cargo.toml:2:17      - Unknown word (barebone)   -- name = "example-barebone"
example_projects/frozen_stdlib/src/main.rs:4:16      - Unknown word (aheui)      -- /// See also: `aheui-rust.md` for freezing
examples/parse_folder.rs:68:35     - Unknown word (Erreur)     -- Err(y) => error!("Erreur in file {:?} {:?}",
extra_tests/custom_text_test_runner.py:7:22      - Unknown word (Abtin)      -- Copyright (c) 2015 Abtin Gramian
extra_tests/custom_text_test_runner.py:7:28      - Unknown word (Gramian)    -- Copyright (c) 2015 Abtin Gramian
extra_tests/jsontests.py:3:11      - Unknown word (libregrtest) -- from test.libregrtest.runtest import findtests
extra_tests/snippets/3.1.2.18.py:3:9       - Unknown word (Jython)     -- assert "Jython" == "J" + word[1:]
extra_tests/snippets/builtin_bool.py:33:7      - Unknown word (Falsey)     -- class Falsey:
extra_tests/snippets/builtin_bool.py:37:12     - Unknown word (Falsey)     -- assert not Falsey()
extra_tests/snippets/builtin_bytearray.py:100:30    - Unknown word (efghij)     -- -6:] == bytearray(b"efghij")
extra_tests/snippets/builtin_bytearray.py:101:32    - Unknown word (bdfh)       -- 8:2] == bytearray(b"bdfh")
extra_tests/snippets/builtin_bytearray.py:102:33    - Unknown word (igec)       -- :-2] == bytearray(b"igec")
extra_tests/snippets/builtin_bytearray.py:163:25    - Unknown word (hhjjk)      -- bytearray.fromhex(b"hhjjk")
extra_tests/snippets/builtin_bytearray.py:165:21    - Unknown word (koki)       -- assert [bytearray(b"koki").center(i, b"|") for
extra_tests/snippets/builtin_bytearray.py:166:7     - Unknown word (koki)       -- b"koki",
extra_tests/snippets/builtin_bytearray.py:167:7     - Unknown word (koki)       -- b"koki",
extra_tests/snippets/builtin_bytearray.py:168:8     - Unknown word (koki)       -- b"|koki",
extra_tests/snippets/builtin_bytearray.py:169:8     - Unknown word (koki)       -- b"|koki|",
extra_tests/snippets/builtin_bytearray.py:17:33     - Unknown word (jilj)       -- bytearray("bla", encoding=b"jilj")
extra_tests/snippets/builtin_bytearray.py:192:58    - Unknown word (xkokx)      -- bytearray(b"x")) == b"xkokx"
extra_tests/snippets/builtin_bytearray.py:224:57    - Unknown word (kokxx)      -- bytearray(b"x")) == b"kokxx"
extra_tests/snippets/builtin_bytearray.py:256:57    - Unknown word (xxkok)      -- bytearray(b"x")) == b"xxkok"
extra_tests/snippets/builtin_bytearray.py:25:20     - Unknown word (omkmok)     -- assert bytearray(b"omkmok\Xaa") == bytearray(
extra_tests/snippets/builtin_bytearray.py:261:20    - Unknown word (azeazerazeazopia) -- assert bytearray(b"azeazerazeazopia").count(b"aze") ==
extra_tests/snippets/builtin_bytearray.py:262:20    - Unknown word (azeazerazeazopia) -- assert bytearray(b"azeazerazeazopia").count(b"az") == 4
extra_tests/snippets/builtin_bytearray.py:263:20    - Unknown word (azeazerazeazopia) -- assert bytearray(b"azeazerazeazopia").count(b"a") == 5
extra_tests/snippets/builtin_bytearray.py:265:20    - Unknown word (azeazerazeazopia) -- assert bytearray(b"azeazerazeazopia").count(bytearray(b
extra_tests/snippets/builtin_bytearray.py:266:20    - Unknown word (azeazerazeazopia) -- assert bytearray(b"azeazerazeazopia").count(memoryview(b
extra_tests/snippets/builtin_bytearray.py:282:28    - Unknown word (kmoomk)           -- jiljl", bytearray(b"kmoomk"), memoryview(b"aaaa
extra_tests/snippets/builtin_bytearray.py:282:8     - Unknown word (jiljl)            -- (b"jiljl", bytearray(b"kmoomk
extra_tests/snippets/builtin_bytearray.py:283:18    - Unknown word (jiljlkmoomkaaaa)  -- ) == bytearray(b"jiljlkmoomkaaaa")
extra_tests/snippets/builtin_bytearray.py:288:22    - Unknown word (abcxyz)           -- ) == bytearray(b"123abcxyz")
extra_tests/snippets/builtin_bytearray.py:315:32    - Unknown word (cdaaaaa)          -- bytearray(b"abcd").index(b"cdaaaaa")
extra_tests/snippets/builtin_bytearray.py:326:34    - Unknown word (cdaaaaa)          -- bytearray(b"abcd").find(b"cdaaaaa") == -1
extra_tests/snippets/builtin_bytearray.py:331:20    - Unknown word (abcdabcda)        -- assert bytearray(b"abcdabcda").find(b"a") == 0
extra_tests/snippets/builtin_bytearray.py:332:20    - Unknown word (abcdabcda)        -- assert bytearray(b"abcdabcda").rfind(b"a") == 8
extra_tests/snippets/builtin_bytearray.py:333:20    - Unknown word (abcdabcda)        -- assert bytearray(b"abcdabcda").rfind(b"a", 2, 6)
extra_tests/snippets/builtin_bytearray.py:334:20    - Unknown word (abcdabcda)        -- assert bytearray(b"abcdabcda").rfind(b"a", None,
extra_tests/snippets/builtin_bytearray.py:335:20    - Unknown word (abcdabcda)        -- assert bytearray(b"abcdabcda").rfind(b"a", 2, None
extra_tests/snippets/builtin_bytearray.py:349:20    - Unknown word (hjhtuyjyujuyj)    -- assert bytearray(b"hjhtuyjyujuyj").translate(
extra_tests/snippets/builtin_bytearray.py:351:18    - Unknown word (btuybyubuyb)      -- ) == bytearray(b"btuybyubuyb")
extra_tests/snippets/builtin_bytearray.py:352:20    - Unknown word (hjhtuyjyujuyj)    -- assert bytearray(b"hjhtuyjyujuyj").translate(
extra_tests/snippets/builtin_bytearray.py:354:18    - Unknown word (abatuybyubuyb)    -- ) == bytearray(b"abatuybyubuyb")
extra_tests/snippets/builtin_bytearray.py:355:20    - Unknown word (hjhtuyjyujuyj)    -- assert bytearray(b"hjhtuyjyujuyj").translate(
extra_tests/snippets/builtin_bytearray.py:357:18    - Unknown word (abatuybyubuyb)    -- ) == bytearray(b"abatuybyubuyb")
extra_tests/snippets/builtin_bytearray.py:358:20    - Unknown word (hjhtuyfjtyhuhjuyj) -- assert bytearray(b"hjhtuyfjtyhuhjuyj").translate(None, bytearray
extra_tests/snippets/builtin_bytearray.py:359:7     - Unknown word (juyfjyujuyj)       -- b"juyfjyujuyj"
extra_tests/snippets/builtin_bytearray.py:361:20    - Unknown word (hjhtuyfjtyhuhjuyj) -- assert bytearray(b"hjhtuyfjtyhuhjuyj").translate(None, delete
extra_tests/snippets/builtin_bytearray.py:362:7     - Unknown word (juyfjyujuyj)       -- b"juyfjyujuyj"
extra_tests/snippets/builtin_bytearray.py:368:46    - Unknown word (cmowz)             -- example.com").strip(b"cmowz.") == bytearray(b"example
extra_tests/snippets/builtin_bytearray.py:370:47    - Unknown word (cmowz)             -- example.com").lstrip(b"cmowz.") == bytearray(b"example
extra_tests/snippets/builtin_bytearray.py:372:64    - Unknown word (mississ)           -- ipz") == bytearray(b"mississ")
extra_tests/snippets/builtin_bytearray.py:54:23     - Unknown word (abcdé)      -- assert len(bytearray("abcdé", "utf8")) == 6
extra_tests/snippets/builtin_bytearray.py:636:17    - Unknown word (appen)             -- a = bytearray(b"appen")
extra_tests/snippets/builtin_bytearray.py:656:29    - Unknown word (abcdabcdabcd)      -- a * 3 == bytearray(b'abcdabcdabcd')
extra_tests/snippets/builtin_bytearray.py:657:29    - Unknown word (abcdabcdabcd)      -- * a == bytearray(b'abcdabcdabcd')
extra_tests/snippets/builtin_bytearray.py:661:25    - Unknown word (abcdabcdabcd)      -- assert a == bytearray(b'abcdabcdabcd')
extra_tests/snippets/builtin_bytearray.py:686:25    - Unknown word (whello)            -- assert a == bytearray(b"whello, world"), a
extra_tests/snippets/builtin_bytearray.py:689:25    - Unknown word (whello)            -- assert a == bytearray(b"whello, worlwd"), a
extra_tests/snippets/builtin_bytearray.py:689:33    - Unknown word (worlwd)            -- bytearray(b"whello, worlwd"), a
extra_tests/snippets/builtin_bytearray.py:692:25    - Unknown word (owhello)           -- assert a == bytearray(b"owhello, worlwd"), a
extra_tests/snippets/builtin_bytearray.py:692:34    - Unknown word (worlwd)            -- bytearray(b"owhello, worlwd"), a
extra_tests/snippets/builtin_bytearray.py:695:25    - Unknown word (owhello)           -- assert a == bytearray(b"owhello, worlwdo"), a
extra_tests/snippets/builtin_bytearray.py:695:34    - Unknown word (worlwdo)           -- bytearray(b"owhello, worlwdo"), a
extra_tests/snippets/builtin_bytearray.py:699:17    - Unknown word (abcdabcd)          -- a = bytearray(b'abcdabcd')
extra_tests/snippets/builtin_bytearray.py:702:25    - Unknown word (abdabcd)           -- assert a == bytearray(b'abdabcd')
extra_tests/snippets/builtin_bytearray.py:708:25    - Unknown word (dlrow)             -- assert a == bytearray(b'dlrow ,olleh')
extra_tests/snippets/builtin_bytearray.py:708:32    - Unknown word (olleh)             -- bytearray(b'dlrow ,olleh')
extra_tests/snippets/builtin_bytearray.py:726:24    - Unknown word (bpython)           -- assert bytearray('rust%bpython%b', 'utf-8') % (b'
extra_tests/snippets/builtin_bytearray.py:72:33     - Unknown word (unashable)  -- bytearray(b"abcd")) # unashable
extra_tests/snippets/builtin_bytearray.py:737:18    - Unknown word (xffab)             -- a = bytearray(b'\xffab\x80\0\0\370\0\0')
extra_tests/snippets/builtin_bytearray.py:738:87    - Unknown word (xffab)             -- codecs\nencode\np1\n(V\xffab\x80\\u0000\\u0000\xf
extra_tests/snippets/builtin_bytearray.py:739:109   - Unknown word (xbfab)             -- x0c\x00\x00\x00\xc3\xbfab\xc2\x80\x00\x00\xc3
extra_tests/snippets/builtin_bytearray.py:740:115   - Unknown word (xbfab)             -- x0c\x00\x00\x00\xc3\xbfab\xc2\x80\x00\x00\xc3
extra_tests/snippets/builtin_bytearray.py:741:71    - Unknown word (xffab)             -- nbytearray\nq\x00C\t\xffab\x80\x00\x00\xf8\x00
extra_tests/snippets/builtin_bytearray.py:742:124   - Unknown word (xffab)             -- tbytearray\x94\x93\x94C\t\xffab\x80\x00\x00\xf8\x00
extra_tests/snippets/builtin_bytearray.py:79:29     - Unknown word (abcdab)     -- a + b == bytearray(b"abcdab")
extra_tests/snippets/builtin_bytes.py:13:29     - Unknown word (jilj)       -- bytes("bla", encoding=b"jilj")
extra_tests/snippets/builtin_bytes.py:148:21    - Unknown word (hhjjk)      -- bytes.fromhex(b"hhjjk")
extra_tests/snippets/builtin_bytes.py:150:11    - Unknown word (koki)       -- assert [b"koki".center(i, b"|") for
extra_tests/snippets/builtin_bytes.py:151:7     - Unknown word (koki)       -- b"koki",
extra_tests/snippets/builtin_bytes.py:152:7     - Unknown word (koki)       -- b"koki",
extra_tests/snippets/builtin_bytes.py:153:8     - Unknown word (koki)       -- b"|koki",
extra_tests/snippets/builtin_bytes.py:154:8     - Unknown word (koki)       -- b"|koki|",
extra_tests/snippets/builtin_bytes.py:177:47    - Unknown word (xkokx)      -- bytearray(b"x")) == b"xkokx"
extra_tests/snippets/builtin_bytes.py:209:46    - Unknown word (kokxx)      -- bytearray(b"x")) == b"kokxx"
extra_tests/snippets/builtin_bytes.py:23:10     - Unknown word (omkmok)     -- assert b"omkmok\Xaa" == bytes([111,
extra_tests/snippets/builtin_bytes.py:241:46    - Unknown word (xxkok)      -- bytearray(b"x")) == b"xxkok"
extra_tests/snippets/builtin_bytes.py:246:10    - Unknown word (azeazerazeazopia) -- assert b"azeazerazeazopia".count(b"aze") == 3
extra_tests/snippets/builtin_bytes.py:247:10    - Unknown word (azeazerazeazopia) -- assert b"azeazerazeazopia".count(b"az") == 4
extra_tests/snippets/builtin_bytes.py:248:10    - Unknown word (azeazerazeazopia) -- assert b"azeazerazeazopia".count(b"a") == 5
extra_tests/snippets/builtin_bytes.py:250:10    - Unknown word (azeazerazeazopia) -- assert b"azeazerazeazopia".count(bytearray(b"aze
extra_tests/snippets/builtin_bytes.py:251:10    - Unknown word (azeazerazeazopia) -- assert b"azeazerazeazopia".count(memoryview(b
extra_tests/snippets/builtin_bytes.py:267:17    - Unknown word (jiljl)            -- b"".join((b"jiljl", bytearray(b"kmoomk
extra_tests/snippets/builtin_bytes.py:267:37    - Unknown word (kmoomk)           -- jiljl", bytearray(b"kmoomk"), memoryview(b"aaaa
extra_tests/snippets/builtin_bytes.py:268:10    - Unknown word (jiljlkmoomkaaaa)  -- == b"jiljlkmoomkaaaa"
extra_tests/snippets/builtin_bytes.py:273:46    - Unknown word (abcxyz)           -- ", b"xyz")) == b"123abcxyz"
extra_tests/snippets/builtin_bytes.py:300:21    - Unknown word (cdaaaaa)          -- b"abcd".index(b"cdaaaaa")
extra_tests/snippets/builtin_bytes.py:311:23    - Unknown word (cdaaaaa)          -- assert b"abcd".find(b"cdaaaaa") == -1
extra_tests/snippets/builtin_bytes.py:316:10    - Unknown word (abcdabcda)        -- assert b"abcdabcda".find(b"a") == 0
extra_tests/snippets/builtin_bytes.py:317:10    - Unknown word (abcdabcda)        -- assert b"abcdabcda".rfind(b"a") == 8
extra_tests/snippets/builtin_bytes.py:318:10    - Unknown word (abcdabcda)        -- assert b"abcdabcda".rfind(b"a", 2, 6)
extra_tests/snippets/builtin_bytes.py:319:10    - Unknown word (abcdabcda)        -- assert b"abcdabcda".rfind(b"a", None,
extra_tests/snippets/builtin_bytes.py:320:10    - Unknown word (abcdabcda)        -- assert b"abcdabcda".rfind(b"a", 2, None
extra_tests/snippets/builtin_bytes.py:334:10    - Unknown word (hjhtuyjyujuyj)    -- assert b"hjhtuyjyujuyj".translate(bytes.maketrans
extra_tests/snippets/builtin_bytes.py:334:77    - Unknown word (btuybyubuyb)      -- b"ab"), b"h") == b"btuybyubuyb"
extra_tests/snippets/builtin_bytes.py:336:7     - Unknown word (hjhtuyjyujuyj)    -- b"hjhtuyjyujuyj".translate(bytes.maketrans
extra_tests/snippets/builtin_bytes.py:336:74    - Unknown word (abatuybyubuyb)    -- b"ab"), b"a") == b"abatuybyubuyb"
extra_tests/snippets/builtin_bytes.py:338:10    - Unknown word (hjhtuyjyujuyj)    -- assert b"hjhtuyjyujuyj".translate(bytes.maketrans
extra_tests/snippets/builtin_bytes.py:338:71    - Unknown word (abatuybyubuyb)    -- b"hj", b"ab")) == b"abatuybyubuyb"
extra_tests/snippets/builtin_bytes.py:339:10    - Unknown word (hjhtuyfjtyhuhjuyj) -- assert b"hjhtuyfjtyhuhjuyj".translate(None, b"ht
extra_tests/snippets/builtin_bytes.py:339:57    - Unknown word (juyfjyujuyj)       -- translate(None, b"ht") == b"juyfjyujuyj"
extra_tests/snippets/builtin_bytes.py:340:10    - Unknown word (hjhtuyfjtyhuhjuyj) -- assert b"hjhtuyfjtyhuhjuyj".translate(None, delete
extra_tests/snippets/builtin_bytes.py:340:64    - Unknown word (juyfjyujuyj)       -- delete=b"ht") == b"juyfjyujuyj"
extra_tests/snippets/builtin_bytes.py:345:35    - Unknown word (cmowz)             -- example.com".strip(b"cmowz.") == b"example"
extra_tests/snippets/builtin_bytes.py:347:36    - Unknown word (cmowz)             -- example.com".lstrip(b"cmowz.") == b"example.com
extra_tests/snippets/builtin_bytes.py:349:43    - Unknown word (mississ)           -- rstrip(b"ipz") == b"mississ"
extra_tests/snippets/builtin_bytes.py:40:19     - Unknown word (abcdé)      -- assert len(bytes("abcdé", "utf8")) == 6
extra_tests/snippets/builtin_bytes.py:603:19    - Unknown word (abcdabcdabcd)      -- assert a * 3 == b'abcdabcdabcd'
extra_tests/snippets/builtin_bytes.py:604:19    - Unknown word (abcdabcdabcd)      -- assert 3 * a == b'abcdabcdabcd'
extra_tests/snippets/builtin_bytes.py:615:15    - Unknown word (bpython)           -- assert b'rust%bpython%b' % (b' ', b'!') =
extra_tests/snippets/builtin_bytes.py:64:19     - Unknown word (abcdab)     -- assert a + b == b"abcdab"
extra_tests/snippets/builtin_bytes.py:85:20     - Unknown word (efghij)     -- assert d[-6:] == b"efghij"
extra_tests/snippets/builtin_bytes.py:86:22     - Unknown word (bdfh)       -- assert d[1:8:2] == b"bdfh"
extra_tests/snippets/builtin_bytes.py:87:23     - Unknown word (igec)       -- assert d[8:1:-2] == b"igec"
extra_tests/snippets/builtin_exceptions.py:105:77    - Unknown word (excs)       -- ok, will print two excs
extra_tests/snippets/builtin_exceptions.py:105:9     - Unknown word (excepthook) -- sys.excepthook(type(exc), exc, exc
extra_tests/snippets/builtin_exceptions.py:126:9     - Unknown word (excepthook) -- sys.excepthook(type(exc), exc, exc
extra_tests/snippets/builtin_exceptions.py:142:9     - Unknown word (excepthook) -- sys.excepthook(type(exc), exc, exc
extra_tests/snippets/builtin_exceptions.py:158:9     - Unknown word (excepthook) -- sys.excepthook(type(exc), exc, exc
extra_tests/snippets/builtin_exceptions.py:95:9      - Unknown word (excepthook) -- sys.excepthook(type(exc), exc, exc
extra_tests/snippets/builtin_float.py:267:6     - Unknown word (infi)       -- "infi", # misspelt infinities
extra_tests/snippets/builtin_float.py:268:7     - Unknown word (Infinit)    -- "-Infinit",
extra_tests/snippets/builtin_float.py:278:6     - Unknown word (nfinity)    -- "nfinity",
extra_tests/snippets/builtin_float.py:279:6     - Unknown word (inity)      -- "inity",
extra_tests/snippets/builtin_float.py:280:6     - Unknown word (iinity)     -- "iinity",
extra_tests/snippets/builtin_float.py:281:7     - Unknown word (xnan)       -- "0xnan",
extra_tests/snippets/builtin_float.py:393:21    - Unknown word (xbep)       -- identical(fromHex("0xbep0"), 190.0)
extra_tests/snippets/builtin_list.py:253:13    - Unknown word (refrences)  -- # make sure refrences are assigned correctly
extra_tests/snippets/builtin_list.py:358:13    - Unknown word (refrences)  -- # make sure refrences are assigned correctly
extra_tests/snippets/builtin_list.py:639:26    - Unknown word (daedlock)   -- Test for list entering daedlock or not (https://github
extra_tests/snippets/builtin_pow.py:144:9     - Unknown word (fiveto)     -- fiveto = float(5 ** n)
extra_tests/snippets/builtin_pow.py:145:24    - Unknown word (fiveto)     -- # For small n, fiveto will be odd.  Eventually
extra_tests/snippets/builtin_pow.py:146:38    - Unknown word (thereafer)  -- mantissa bits, though, and thereafer fiveto will be even
extra_tests/snippets/builtin_pow.py:146:48    - Unknown word (fiveto)     -- though, and thereafer fiveto will be even.
extra_tests/snippets/builtin_pow.py:147:20    - Unknown word (fiveto)     -- expected = fiveto % 2.0 and -1.0 or 1
extra_tests/snippets/builtin_pow.py:148:19    - Unknown word (fiveto)     -- eq(pow(a, fiveto), expected)
extra_tests/snippets/builtin_pow.py:64:5      - Unknown word (asseq)      -- asseq = assert_equal
extra_tests/snippets/builtin_pow.py:67:9      - Unknown word (asseq)      -- asseq = assert_almost_equal
extra_tests/snippets/builtin_pow.py:79:21     - Unknown word (asseq)      -- asseq(
extra_tests/snippets/builtin_property.py:15:5      - Unknown word (Fubar)      -- f = Fubar()
extra_tests/snippets/builtin_property.py:19:13     - Unknown word (Fubar)      -- assert type(Fubar.foo) is property
extra_tests/snippets/builtin_property.py:4:7       - Unknown word (Fubar)      -- class Fubar:
extra_tests/snippets/builtin_set.py:384:27    - Unknown word (aruguments) -- TODO: Assert that empty aruguments raises exception.
extra_tests/snippets/builtin_str.py:100:7     - Unknown word (koki)       -- "|koki|",
extra_tests/snippets/builtin_str.py:174:153   - Unknown word (hoho)       -- 'Hallo', 'HELLO', 'hoho', 'haha', 'another'
extra_tests/snippets/builtin_str.py:174:161   - Unknown word (haha)       -- , 'HELLO', 'hoho', 'haha', 'another', 'yetanother
extra_tests/snippets/builtin_str.py:174:180   - Unknown word (yetanother) -- 'haha', 'another', 'yetanother', 'last', '.']
extra_tests/snippets/builtin_str.py:174:42    - Unknown word (dhoho)      -- x0cHallo\x1cHELLO\x1dhoho\x1ehaha\x85another\u
extra_tests/snippets/builtin_str.py:174:50    - Unknown word (ehaha)      -- cHallo\x1cHELLO\x1dhoho\x1ehaha\x85another\u2028yetanother
extra_tests/snippets/builtin_str.py:174:72    - Unknown word (yetanother) -- ehaha\x85another\u2028yetanother\u2029last\r\n.'.splitlines
extra_tests/snippets/builtin_str.py:175:182   - Unknown word (hoho)       -- x1c', 'HELLO\x1d', 'hoho\x1e', 'haha\x85', 'another
extra_tests/snippets/builtin_str.py:175:194   - Unknown word (haha)       -- HELLO\x1d', 'hoho\x1e', 'haha\x85', 'another\u202
extra_tests/snippets/builtin_str.py:175:223   - Unknown word (yetanother) -- , 'another\u2028', 'yetanother\u2029', 'last\r\n',
extra_tests/snippets/builtin_str.py:175:42    - Unknown word (dhoho)      -- x0cHallo\x1cHELLO\x1dhoho\x1ehaha\x85another\u
extra_tests/snippets/builtin_str.py:175:50    - Unknown word (ehaha)      -- cHallo\x1cHELLO\x1dhoho\x1ehaha\x85another\u2028yetanother
extra_tests/snippets/builtin_str.py:175:72    - Unknown word (yetanother) -- ehaha\x85another\u2028yetanother\u2029last\r\n.'.splitlines
extra_tests/snippets/builtin_str.py:340:7     - Unknown word (isisprintable) -- # str.isisprintable
extra_tests/snippets/builtin_str.py:37:21     - Unknown word (xyxyxy)     -- assert "xy" * 3 == "xyxyxy"
extra_tests/snippets/builtin_str.py:41:21     - Unknown word (xyxyxy)     -- assert 3 * "xy" == "xyxyxy"
extra_tests/snippets/builtin_str.py:645:10    - Unknown word (foobarfoo)     -- s = 'foobarfoo'
extra_tests/snippets/builtin_str.py:646:12    - Unknown word (foobarfoo)     -- s_ref='foobarfoo'
extra_tests/snippets/builtin_str.py:656:28    - Unknown word (afoo)          -- assert s.removeprefix('afoo') == s_ref
extra_tests/snippets/builtin_str.py:661:15    - Unknown word (foobarfoo)     -- s_uc = '😱foobarfoo🖖'
extra_tests/snippets/builtin_str.py:662:19    - Unknown word (foobarfoo)     -- s_ref_uc = '😱foobarfoo🖖'
extra_tests/snippets/builtin_str.py:689:8     - Unknown word (foobarfoo)     -- s='foobarfoo'
extra_tests/snippets/builtin_str.py:701:28    - Unknown word (fooa)          -- assert s.removesuffix('fooa') == s_ref
extra_tests/snippets/builtin_str.py:96:10     - Unknown word (koki)       -- assert ["koki".center(i, "|") for
extra_tests/snippets/builtin_str.py:97:6      - Unknown word (koki)       -- "koki",
extra_tests/snippets/builtin_str.py:98:6      - Unknown word (koki)       -- "koki",
extra_tests/snippets/builtin_str.py:99:7      - Unknown word (koki)       -- "|koki",
extra_tests/snippets/builtin_str_encode.py:11:42     - Unknown word (estás)     -- UnicodeEncodeError, "¿como estás?".encode, "ascii")
extra_tests/snippets/builtin_str_encode.py:19:25     - Unknown word (𝕐𝕥)       -- round_trip("☢🐣 ᖇ𝓤𝕊тⓟ𝕐𝕥卄σ𝔫 ♬👣")
extra_tests/snippets/builtin_str_encode.py:20:19     - Unknown word (ק𝔂t)       -- round_trip("💀👌 ק𝔂tℍⓞ𝓷 ３  🔥👤")
extra_tests/snippets/builtin_str_unicode.py:26:40     - Unknown word (abcij)      -- encode("idna") == b'xn--abcij-zb5f'
extra_tests/snippets/builtin_str_unicode.py:31:48     - Unknown word (pythn)      -- encode("idna") == b"xn--pythn-mua.org"
extra_tests/snippets/builtin_str_unicode.py:32:49     - Unknown word (pythn)      -- encode("idna") == b"xn--pythn-mua.org."
extra_tests/snippets/builtin_str_unicode.py:35:14     - Unknown word (pythn)      -- assert b"xn--pythn-mua.org".decode("idna
extra_tests/snippets/builtin_str_unicode.py:36:14     - Unknown word (pythn)      -- assert b"xn--pythn-mua.org.".decode("idna
extra_tests/snippets/builtin_str_unicode_slice.py:35:19     - Unknown word (רֵאשִ)      -- hebrew_text = "בְּרֵאשִׁית, בָּרָא אֱלֹהִים
extra_tests/snippets/builtin_str_unicode_slice.py:35:36     - Unknown word (אֱלֹהִים)   -- בְּרֵאשִׁית, בָּרָא אֱלֹהִים, אֵת הַשָּׁמַיִם, ו
extra_tests/snippets/builtin_str_unicode_slice.py:35:50     - Unknown word (הַשָּׁמַיִם) -- ָּרָא אֱלֹהִים, אֵת הַשָּׁמַיִם, וְאֵת הָאָרֶץ"
extra_tests/snippets/builtin_str_unicode_slice.py:35:63     - Unknown word (וְאֵת)       -- ם, אֵת הַשָּׁמַיִם, וְאֵת הָאָרֶץ"
extra_tests/snippets/builtin_str_unicode_slice.py:35:69     - Unknown word (הָאָרֶץ)     -- הַשָּׁמַיִם, וְאֵת הָאָרֶץ"
extra_tests/snippets/builtin_str_unicode_slice.py:47:32     - Unknown word (מַיִם)       -- hebrew_text[-20:50] == 'מַיִם, וְא'
extra_tests/snippets/builtin_str_unicode_slice.py:49:35     - Unknown word (רֵאשִ)       -- text[:-30:1] == 'בְּרֵאשִׁית, בָּרָא אֱלֹהִים
extra_tests/snippets/builtin_str_unicode_slice.py:49:52     - Unknown word (אֱלֹהִים)    -- בְּרֵאשִׁית, בָּרָא אֱלֹהִים, '
extra_tests/snippets/builtin_str_unicode_slice.py:51:42     - Unknown word (אֱלֹהִים)    -- :-30] == 'ת, בָּרָא אֱלֹהִים, '
extra_tests/snippets/builtin_str_unicode_slice.py:56:34     - Unknown word (אםהֱאּ)      -- hebrew_text[30:10:-3] == 'אםהֱאּ '
extra_tests/snippets/builtin_str_unicode_slice.py:58:37     - Unknown word (םיִהֹלֱא)    -- text[30:10:-1] == 'א ,םיִהֹלֱא אָרָּב ,'
extra_tests/snippets/builtin_str_unicode_slice.py:58:46     - Unknown word (אָרּ)        -- -1] == 'א ,םיִהֹלֱא אָרָּב ,'
extra_tests/snippets/builtin_type.py:273:9     - Unknown word (stmethod)   -- def stmethod():
extra_tests/snippets/builtin_type.py:292:25    - Unknown word (stmethod)   -- assert MyTypeWithMethod.stmethod.__name__ == 'stmethod
extra_tests/snippets/builtin_type.py:292:47    - Unknown word (stmethod)   -- stmethod.__name__ == 'stmethod'
extra_tests/snippets/builtin_type.py:293:27    - Unknown word (stmethod)   -- assert MyTypeWithMethod().stmethod.__name__ == 'stmethod
extra_tests/snippets/builtin_type.py:293:49    - Unknown word (stmethod)   -- stmethod.__name__ == 'stmethod'
extra_tests/snippets/builtin_type.py:331:3     - Unknown word (Regresesion) -- # Regresesion to
extra_tests/snippets/example_interactive.py:25:14     - Unknown word (kwonlyargcount) -- assert c2.co_kwonlyargcount == 1, (c2.co_kwonlyargcount
extra_tests/snippets/example_interactive.py:25:42     - Unknown word (kwonlyargcount) -- kwonlyargcount == 1, (c2.co_kwonlyargcount)
extra_tests/snippets/example_interactive.py:26:16     - Unknown word (lnotab)         -- # assert c2.co_lnotab == 0, c2.co_lnotab
extra_tests/snippets/example_interactive.py:26:35     - Unknown word (lnotab)         -- co_lnotab == 0, c2.co_lnotab # b'\x00\x01' # Line
extra_tests/snippets/intro/3.1.2.5.py:1:9       - Unknown word (unununium)  -- assert 'unununium' == 3 * 'un' + 'ium
extra_tests/snippets/intro/3.1.2.6.py:1:26      - Unknown word (thon)       -- assert 'Python' == 'Py' 'thon'
extra_tests/snippets/protocol_index_bad.py:15:9      - Unknown word (setslice)   -- def run_setslice():
extra_tests/snippets/protocol_index_bad.py:23:9      - Unknown word (delslice)   -- def run_delslice():
extra_tests/snippets/protocol_index_bad.py:31:9      - Unknown word (setslice)   -- run_setslice()
extra_tests/snippets/protocol_index_bad.py:32:9      - Unknown word (delslice)   -- run_delslice()
extra_tests/snippets/stdlib_array.py:116:3     - Unknown word (teset)      -- # teset array.__contains__
extra_tests/snippets/stdlib_binascii.py:18:3      - Unknown word (unhexlify)  -- # unhexlify tests
extra_tests/snippets/stdlib_binascii.py:19:15     - Unknown word (unhexlify)  -- uh = binascii.unhexlify
extra_tests/snippets/stdlib_binascii.py:47:33     - Unknown word (Ghvbg)      -- equal(dec_b64(b"UnVzdFB5dGhvbg==\n"), b"RustPython
extra_tests/snippets/stdlib_binascii.py:50:18     - Unknown word (𝕐𝕥)       -- "☢🐣 ᖇ𝓤𝕊тⓟ𝕐𝕥卄σ𝔫 ♬👣".encode(),
extra_tests/snippets/stdlib_binascii.py:5:3       - Unknown word (hexlify)    -- # hexlify tests
extra_tests/snippets/stdlib_binascii.py:6:14      - Unknown word (hexlify)    -- h = binascii.hexlify
extra_tests/snippets/stdlib_collections_deque.py:17:5      - Unknown word (klass)      -- klass = type(iter(deque()
extra_tests/snippets/stdlib_collections_deque.py:22:17     - Unknown word (klass)      -- d = klass(deque(s), i)
extra_tests/snippets/stdlib_collections_deque.py:28:17     - Unknown word (klass)      -- d = klass(deque(s), i)
extra_tests/snippets/stdlib_collections_deque.py:7:5       - Unknown word (klass)      -- klass = type(iter(deque()
extra_tests/snippets/stdlib_collections_deque.py:9:9       - Unknown word (klass)      -- d = klass(deque(s))
extra_tests/snippets/stdlib_datetime.py:1043:13   - Unknown word (todayagain) -- todayagain = self.theclass.fromtimestamp
extra_tests/snippets/stdlib_datetime.py:1044:25   - Unknown word (todayagain) -- if today == todayagain:
extra_tests/snippets/stdlib_datetime.py:1060:21   - Unknown word (todayagain) -- if today != todayagain:
extra_tests/snippets/stdlib_datetime.py:1061:36   - Unknown word (todayagain) -- self.assertAlmostEqual(todayagain, today,
extra_tests/snippets/stdlib_datetime.py:1158:20   - Unknown word (excercise)  -- #at least, excercise them to make sure that
extra_tests/snippets/stdlib_datetime.py:1212:9    - Unknown word (justasbig)  -- justasbig = timedelta(0, 0, n
extra_tests/snippets/stdlib_datetime.py:1213:27   - Unknown word (justasbig)  -- assert_equal(big, justasbig)
extra_tests/snippets/stdlib_datetime.py:1275:23   - Unknown word (OTHERSTUFF) -- for badarg in OTHERSTUFF:
extra_tests/snippets/stdlib_datetime.py:1391:17   - Unknown word (newmeth)    -- def newmeth(self, start):
extra_tests/snippets/stdlib_datetime.py:1403:26   - Unknown word (newmeth)    -- assert_equal(dt2.newmeth(-7), dt1.year + dt1
extra_tests/snippets/stdlib_datetime.py:152:14    - Unknown word (ACDT)       -- self.ACDT = timezone(timedelta
extra_tests/snippets/stdlib_datetime.py:152:53    - Unknown word (ACDT)       -- timedelta(hours=9.5), 'ACDT')
extra_tests/snippets/stdlib_datetime.py:157:25    - Unknown word (ACDT)       -- for tz in [self.ACDT, self.EST, timezone
extra_tests/snippets/stdlib_datetime.py:163:25    - Unknown word (ACDT)       -- for tz in [self.ACDT, self.EST, timezone
extra_tests/snippets/stdlib_datetime.py:2015:9    - Unknown word (alsobog)    -- alsobog = AlsoBogus()
extra_tests/snippets/stdlib_datetime.py:2016:50   - Unknown word (alsobog)    -- ValueError, dt.astimezone, alsobog) # also naive
extra_tests/snippets/stdlib_datetime.py:2030:17   - Unknown word (newmeth)    -- def newmeth(self, start):
extra_tests/snippets/stdlib_datetime.py:2042:26   - Unknown word (newmeth)    -- assert_equal(dt2.newmeth(-7), dt1.year + dt1
extra_tests/snippets/stdlib_datetime.py:2118:23   - Unknown word (OTHERSTUFF) -- for badarg in OTHERSTUFF:
extra_tests/snippets/stdlib_datetime.py:228:35    - Unknown word (ACDT)       -- tz in [self.EST, self.ACDT, Eastern]:
extra_tests/snippets/stdlib_datetime.py:2334:17   - Unknown word (newmeth)    -- def newmeth(self, start):
extra_tests/snippets/stdlib_datetime.py:2356:23   - Unknown word (atribute)   -- theclass as a class atribute, and theclass(1, 1,
extra_tests/snippets/stdlib_datetime.py:2413:17   - Unknown word (aofs)       -- aofs = abs(offset)
extra_tests/snippets/stdlib_datetime.py:2414:31   - Unknown word (aofs)       -- h, m = divmod(aofs, 60)
extra_tests/snippets/stdlib_datetime.py:2473:55   - Unknown word (comparands) -- gets ignored if the comparands have
extra_tests/snippets/stdlib_datetime.py:2495:50   - Unknown word (uctoffset)  -- re different members, uctoffset is not ignored.
extra_tests/snippets/stdlib_datetime.py:2496:59   - Unknown word (depedent)   -- actually have an operand-depedent offset,
extra_tests/snippets/stdlib_datetime.py:257:17    - Unknown word (pickler)    -- for pickler, unpickler, proto in
extra_tests/snippets/stdlib_datetime.py:257:26    - Unknown word (unpickler)  -- for pickler, unpickler, proto in pickle_choices
extra_tests/snippets/stdlib_datetime.py:258:27    - Unknown word (unpickler)  -- tz_copy = unpickler.loads(pickler.dumps
extra_tests/snippets/stdlib_datetime.py:258:43    - Unknown word (pickler)    -- copy = unpickler.loads(pickler.dumps(tz, proto))
extra_tests/snippets/stdlib_datetime.py:2605:15   - Unknown word (Badtzname)  -- class Badtzname(tzinfo):
extra_tests/snippets/stdlib_datetime.py:2608:34   - Unknown word (Badtzname)  -- time(2, 3, 4, tzinfo=Badtzname())
extra_tests/snippets/stdlib_datetime.py:2614:13   - Unknown word (Badtzname)  -- Badtzname.tz = '\ud800'
extra_tests/snippets/stdlib_datetime.py:261:13    - Unknown word (pickler)    -- for pickler, unpickler, proto in
extra_tests/snippets/stdlib_datetime.py:261:22    - Unknown word (unpickler)  -- for pickler, unpickler, proto in pickle_choices
extra_tests/snippets/stdlib_datetime.py:262:23    - Unknown word (unpickler)  -- tz_copy = unpickler.loads(pickler.dumps
extra_tests/snippets/stdlib_datetime.py:262:39    - Unknown word (pickler)    -- copy = unpickler.loads(pickler.dumps(tz, proto))
extra_tests/snippets/stdlib_datetime.py:27:1      - Unknown word (OTHERSTUFF) -- OTHERSTUFF = (10, 34.5, "abc",
extra_tests/snippets/stdlib_datetime.py:2805:17   - Unknown word (afer)       -- # Equal afer adjustment.
extra_tests/snippets/stdlib_datetime.py:2845:23   - Unknown word (uctoffset)  -- # Try a bogus uctoffset.
extra_tests/snippets/stdlib_datetime.py:2938:9    - Unknown word (timeaware)  -- timeaware = now.time().replace
extra_tests/snippets/stdlib_datetime.py:2939:54   - Unknown word (timeaware)  -- combine(now.date(), timeaware)
extra_tests/snippets/stdlib_datetime.py:2939:9    - Unknown word (nowaware)   -- nowaware = self.theclass.combine
extra_tests/snippets/stdlib_datetime.py:2940:23   - Unknown word (nowaware)   -- self.assertIs(nowaware.tzinfo, tz55)
extra_tests/snippets/stdlib_datetime.py:2941:22   - Unknown word (nowaware)   -- assert_equal(nowaware.timetz(), timeaware
extra_tests/snippets/stdlib_datetime.py:2941:41   - Unknown word (timeaware)  -- equal(nowaware.timetz(), timeaware)
extra_tests/snippets/stdlib_datetime.py:2944:48   - Unknown word (nowaware)   -- TypeError, lambda: now - nowaware)
extra_tests/snippets/stdlib_datetime.py:2945:42   - Unknown word (nowaware)   -- raises(TypeError, lambda: nowaware - now)
extra_tests/snippets/stdlib_datetime.py:2958:9    - Unknown word (nowawareplus) -- nowawareplus = nowaware + delta
extra_tests/snippets/stdlib_datetime.py:2960:9    - Unknown word (nowawareplus) -- nowawareplus2 = delta + nowaware
extra_tests/snippets/stdlib_datetime.py:2961:23   - Unknown word (nowawareplus) -- self.assertIs(nowawareplus2.tzinfo, tz55)
extra_tests/snippets/stdlib_datetime.py:2962:22   - Unknown word (nowawareplus) -- assert_equal(nowawareplus, nowawareplus2)
extra_tests/snippets/stdlib_datetime.py:2962:36   - Unknown word (nowawareplus) -- equal(nowawareplus, nowawareplus2)
extra_tests/snippets/stdlib_datetime.py:3022:13   - Unknown word (weirdtz)      -- for weirdtz in [FixedOffset(timedelta
extra_tests/snippets/stdlib_datetime.py:3022:71   - Unknown word (weirdtz)      -- hours=15, minutes=58), "weirdtz", 0),
extra_tests/snippets/stdlib_datetime.py:3023:68   - Unknown word (weirdtz)      -- hours=15, minutes=58), "weirdtz"),]:
extra_tests/snippets/stdlib_datetime.py:3025:36   - Unknown word (weirdtz)      -- now = datetime.now(weirdtz)
extra_tests/snippets/stdlib_datetime.py:3026:43   - Unknown word (weirdtz)      -- assertIs(now.tzinfo, weirdtz)
extra_tests/snippets/stdlib_datetime.py:3144:15   - Unknown word (UOFS)         -- class UOFS(DST):
extra_tests/snippets/stdlib_datetime.py:3145:32   - Unknown word (uofs)         -- def __init__(self, uofs, dofs=None):
extra_tests/snippets/stdlib_datetime.py:3145:38   - Unknown word (dofs)         -- _init__(self, uofs, dofs=None):
extra_tests/snippets/stdlib_datetime.py:3146:36   - Unknown word (dofs)         -- DST.__init__(self, dofs)
extra_tests/snippets/stdlib_datetime.py:3147:22   - Unknown word (uofs)         -- self.uofs = timedelta(minutes
extra_tests/snippets/stdlib_datetime.py:3147:47   - Unknown word (uofs)         -- = timedelta(minutes=uofs)
extra_tests/snippets/stdlib_datetime.py:3149:29   - Unknown word (uofs)         -- return self.uofs
extra_tests/snippets/stdlib_datetime.py:3152:53   - Unknown word (UOFS)         -- 20, 30, 40, tzinfo=UOFS(-53, dstvalue))
extra_tests/snippets/stdlib_datetime.py:3173:15   - Unknown word (NOFS)         -- class NOFS(DST):
extra_tests/snippets/stdlib_datetime.py:3176:49   - Unknown word (NOFS)         -- 20, 30, 40, tzinfo=NOFS())
extra_tests/snippets/stdlib_datetime.py:3181:15   - Unknown word (BOFS)         -- class BOFS(DST):
extra_tests/snippets/stdlib_datetime.py:3184:49   - Unknown word (BOFS)         -- 20, 30, 40, tzinfo=BOFS())
extra_tests/snippets/stdlib_datetime.py:3197:52   - Unknown word (UOFS)         -- 1, 0, 0, 37, tzinfo=UOFS(1439))
extra_tests/snippets/stdlib_datetime.py:3201:64   - Unknown word (UOFS)         -- 37, 999999, tzinfo=UOFS(-1439))
extra_tests/snippets/stdlib_datetime.py:3222:17   - Unknown word (ofsstr)       -- ofsstr = ofs is not None and
extra_tests/snippets/stdlib_datetime.py:3223:37   - Unknown word (ofsstr)       -- tailstr = timestr + ofsstr
extra_tests/snippets/stdlib_datetime.py:3440:31   - Unknown word (reprname)     -- init__(self, hours, reprname, stdname, dstname):
extra_tests/snippets/stdlib_datetime.py:3442:14   - Unknown word (reprname)     -- self.reprname = reprname
extra_tests/snippets/stdlib_datetime.py:3442:25   - Unknown word (reprname)     -- self.reprname = reprname
extra_tests/snippets/stdlib_datetime.py:3447:21   - Unknown word (reprname)     -- return self.reprname
extra_tests/snippets/stdlib_datetime.py:3491:5    - Unknown word (dston)        -- dston = datetime(2002, 4,
extra_tests/snippets/stdlib_datetime.py:3497:40   - Unknown word (dston)        -- heckinside(self, dt, tz, utc, dston, dstoff):
extra_tests/snippets/stdlib_datetime.py:3503:9    - Unknown word (asutc)        -- asutc = dt.astimezone(utc
extra_tests/snippets/stdlib_datetime.py:3504:26   - Unknown word (asutc)        -- there_and_back = asutc.astimezone(tz)
extra_tests/snippets/stdlib_datetime.py:3514:25   - Unknown word (dston)        -- if dt.date() == dston.date() and dt.hour
extra_tests/snippets/stdlib_datetime.py:3536:24   - Unknown word (asutc)        -- nexthour_utc = asutc + HOUR
extra_tests/snippets/stdlib_datetime.py:3536:9    - Unknown word (nexthour)     -- nexthour_utc = asutc + HOUR
extra_tests/snippets/stdlib_datetime.py:3537:23   - Unknown word (nexthour)     -- nexthour_tz = nexthour_utc.astimezone(tz)
extra_tests/snippets/stdlib_datetime.py:3537:9    - Unknown word (nexthour)     -- nexthour_tz = nexthour_utc.astimezone
extra_tests/snippets/stdlib_datetime.py:3541:26   - Unknown word (nexthour)     -- assert_equal(nexthour_tz, dt.replace(hour
extra_tests/snippets/stdlib_datetime.py:3542:13   - Unknown word (nexthour)     -- nexthour_utc += HOUR
extra_tests/snippets/stdlib_datetime.py:3556:9    - Unknown word (asutc)        -- asutc = dt.astimezone(utc
extra_tests/snippets/stdlib_datetime.py:3557:26   - Unknown word (asutc)        -- there_and_back = asutc.astimezone(tz)
extra_tests/snippets/stdlib_datetime.py:3561:22   - Unknown word (dston)        -- dston = self.dston.replace(tzinfo=tz)
extra_tests/snippets/stdlib_datetime.py:3561:9    - Unknown word (dston)        -- dston = self.dston.replace
extra_tests/snippets/stdlib_datetime.py:3609:9    - Unknown word (ninewest)     -- ninewest = FixedOffset(-9*60
extra_tests/snippets/stdlib_datetime.py:3610:44   - Unknown word (ninewest)     -- fourback.replace(tzinfo=ninewest)
extra_tests/snippets/stdlib_datetime.py:3624:9    - Unknown word (sixutc)       -- sixutc = self.dston.replace
extra_tests/snippets/stdlib_datetime.py:3629:15   - Unknown word (sixutc)       -- got = sixutc.astimezone(Eastern)
extra_tests/snippets/stdlib_datetime.py:3646:17   - Unknown word (asutcbase)    -- asutcbase = asutc.replace(tzinfo
extra_tests/snippets/stdlib_datetime.py:3647:21   - Unknown word (tzhour)       -- for tzhour in (0, 1, 1, 2):
extra_tests/snippets/stdlib_datetime.py:3648:61   - Unknown word (tzhour)       -- dstoff.replace(hour=tzhour)
extra_tests/snippets/stdlib_datetime.py:3651:33   - Unknown word (asutcbase)    -- asutc = asutcbase.replace(minute=minute
extra_tests/snippets/stdlib_datetime.py:3652:25   - Unknown word (astz)         -- astz = asutc.astimezone(tz
extra_tests/snippets/stdlib_datetime.py:3653:38   - Unknown word (astz)         -- assert_equal(astz.replace(tzinfo=None
extra_tests/snippets/stdlib_datetime.py:3654:21   - Unknown word (asutcbase)    -- asutcbase += HOUR
extra_tests/snippets/stdlib_datetime.py:3667:15   - Unknown word (notok)        -- class notok(ok):
extra_tests/snippets/stdlib_datetime.py:3669:51   - Unknown word (notok)        -- ValueError, now.astimezone, notok())
extra_tests/snippets/stdlib_datetime.py:3675:22   - Unknown word (notok)        -- class tricky_notok(ok):
extra_tests/snippets/stdlib_datetime.py:3682:57   - Unknown word (notok)        -- dt.astimezone, tricky_notok())
extra_tests/snippets/stdlib_datetime.py:3698:62   - Unknown word (FEDT)         -- FEastern", "FEST", "FEDT")
extra_tests/snippets/stdlib_datetime.py:3768:3    - Unknown word (Neverthelss)  -- # Neverthelss, comparison should work
extra_tests/snippets/stdlib_datetime.py:509:13    - Unknown word (pickler)    -- for pickler, unpickler, proto in
extra_tests/snippets/stdlib_datetime.py:509:22    - Unknown word (unpickler)  -- for pickler, unpickler, proto in pickle_choices
extra_tests/snippets/stdlib_datetime.py:539:23    - Unknown word (OTHERSTUFF) -- for badarg in OTHERSTUFF:
extra_tests/snippets/stdlib_datetime.py:726:9     - Unknown word (zerotd)     -- zerotd = timedelta(0)
extra_tests/snippets/stdlib_datetime.py:727:54    - Unknown word (zerotd)     -- eroDivisionError, truediv, t, zerotd)
extra_tests/snippets/stdlib_datetime.py:728:55    - Unknown word (zerotd)     -- roDivisionError, floordiv, t, zerotd)
extra_tests/snippets/stdlib_datetime.py:744:9     - Unknown word (zerotd)     -- zerotd = timedelta(0)
extra_tests/snippets/stdlib_datetime.py:745:50    - Unknown word (zerotd)     -- ZeroDivisionError, mod, t, zerotd)
extra_tests/snippets/stdlib_datetime.py:841:13    - Unknown word (fromord)    -- fromord = self.theclass.fromordinal
extra_tests/snippets/stdlib_datetime.py:842:29    - Unknown word (fromord)    -- assert_equal(d, fromord)
extra_tests/snippets/stdlib_datetime.py:843:24    - Unknown word (fromord)    -- if hasattr(fromord, "hour"):
extra_tests/snippets/stdlib_datetime.py:846:30    - Unknown word (fromord)    -- assert_equal(fromord.hour, 0)
extra_tests/snippets/stdlib_datetime.py:847:30    - Unknown word (fromord)    -- assert_equal(fromord.minute, 0)
extra_tests/snippets/stdlib_datetime.py:882:9     - Unknown word (aord)       -- aord = a.toordinal()
extra_tests/snippets/stdlib_datetime.py:883:27    - Unknown word (aord)       -- b = a.fromordinal(aord)
extra_tests/snippets/stdlib_datetime.py:886:57    - Unknown word (aord)       -- lambda: a.fromordinal(aord - 1))
extra_tests/snippets/stdlib_datetime.py:889:37    - Unknown word (aord)       -- equal(b.toordinal(), aord + 1)
extra_tests/snippets/stdlib_datetime.py:890:51    - Unknown word (aord)       -- theclass.fromordinal(aord + 1))
extra_tests/snippets/stdlib_hashlib.py:34:30     - Unknown word (fubar)      -- hashlib.new("blake2s", b"fubar")
extra_tests/snippets/stdlib_imghdr.py:15:21     - Unknown word (rast)       -- ('python.ras', 'rast'),
extra_tests/snippets/stdlib_io_bytesio.py:49:37     - Unknown word (accpets)    -- that the write method accpets bytearray
extra_tests/snippets/stdlib_itertools.py:185:5     - Unknown word (underten)   -- def underten(x):
extra_tests/snippets/stdlib_itertools.py:229:9     - Unknown word (underten)   -- it = tw(underten, [1, 3, 5, 20, 2, 4
extra_tests/snippets/stdlib_itertools.py:230:171   - Unknown word (nbtp)       -- naI8\natp4\nRp5\nI0\nbtp6\nRp7\nI0\nb.'
extra_tests/snippets/stdlib_itertools.py:230:33    - Unknown word (citertools) -- pickle.dumps(it, 0) == b'citertools\ntakewhile\np0\n(c_
extra_tests/snippets/stdlib_itertools.py:230:71    - Unknown word (nunderten)  -- ntakewhile\np0\n(c__main__\nunderten\np1\nc__builtin__\niter
extra_tests/snippets/stdlib_itertools.py:231:33    - Unknown word (citertools) -- pickle.dumps(it, 1) == b'citertools\ntakewhile\nq\x00(c
extra_tests/snippets/stdlib_itertools.py:231:72    - Unknown word (nunderten)  -- ntakewhile\nq\x00(c__main__\nunderten\nq\x01c__builtin__\niter
extra_tests/snippets/stdlib_itertools.py:232:41    - Unknown word (citertools) -- it, 2) == b'\x80\x02citertools\ntakewhile\nq\x00c_
extra_tests/snippets/stdlib_itertools.py:232:79    - Unknown word (nunderten)  -- ntakewhile\nq\x00c__main__\nunderten\nq\x01c__builtin__\niter
extra_tests/snippets/stdlib_itertools.py:233:41    - Unknown word (citertools) -- it, 3) == b'\x80\x03citertools\ntakewhile\nq\x00c_
extra_tests/snippets/stdlib_itertools.py:233:79    - Unknown word (nunderten)  -- ntakewhile\nq\x00c__main__\nunderten\nq\x01cbuiltins\niter
extra_tests/snippets/stdlib_itertools.py:234:148   - Unknown word (underten)   -- __main__\x94\x8c\x08underten\x94\x93\x94\x8c\x08builtins
extra_tests/snippets/stdlib_itertools.py:235:148   - Unknown word (underten)   -- __main__\x94\x8c\x08underten\x94\x93\x94\x8c\x08builtins
extra_tests/snippets/stdlib_itertools.py:243:171   - Unknown word (nbtp)       -- naI8\natp4\nRp5\nI4\nbtp6\nRp7\nI1\nb.'
extra_tests/snippets/stdlib_itertools.py:243:33    - Unknown word (citertools) -- pickle.dumps(it, 0) == b'citertools\ntakewhile\np0\n(c_
extra_tests/snippets/stdlib_itertools.py:243:71    - Unknown word (nunderten)  -- ntakewhile\np0\n(c__main__\nunderten\np1\nc__builtin__\niter
extra_tests/snippets/stdlib_itertools.py:247:148   - Unknown word (underten)   -- __main__\x94\x8c\x08underten\x94\x93\x94\x8c\x08builtins
extra_tests/snippets/stdlib_itertools.py:325:171   - Unknown word (nbtp)       -- naI8\natp4\nRp5\nI0\nbtp6\nRp7\nI0\nb.'
extra_tests/snippets/stdlib_itertools.py:332:171   - Unknown word (nbtp)       -- naI8\natp4\nRp5\nI4\nbtp6\nRp7\nI1\nb.'
extra_tests/snippets/stdlib_itertools.py:367:67    - Unknown word (ACEF)       -- 1,0,1,1])) == list("ACEF")
extra_tests/snippets/stdlib_itertools.py:372:77    - Unknown word (ACEF)       -- ,"",1,9])) == list("ACEF")
extra_tests/snippets/stdlib_itertools.py:54:24     - Unknown word (evaluted)   -- iterables are lazily evaluted
extra_tests/snippets/stdlib_logging.py:10:16     - Unknown word (WOOT)       -- logging.error('WOOT')
extra_tests/snippets/stdlib_logging.py:15:10     - Unknown word (WOOT)       -- assert 'WOOT' in res
extra_tests/snippets/stdlib_math.py:11:9      - Unknown word (Conversible) -- # class Conversible():
extra_tests/snippets/stdlib_math.py:16:39     - Unknown word (Conversible) -- 1.1111) == math.log(Conversible())
extra_tests/snippets/stdlib_math.py:18:3      - Unknown word (roundings)   -- # roundings
extra_tests/snippets/stdlib_os.py:121:14    - Unknown word (BOYA)       -- CONTENT3 = b"BOYA"
extra_tests/snippets/stdlib_os.py:290:48    - Unknown word (getpwall)   -- pw_uid for u in pwd.getpwall()]
extra_tests/snippets/stdlib_os.py:519:63    - Unknown word (VDISABLE)   -- "PC_MAX_INPUT", "PC_VDISABLE"]:
extra_tests/snippets/stdlib_re.py:18:17     - Unknown word (abcabca)    -- s = p.sub('x', 'abcabca')
extra_tests/snippets/stdlib_re.py:20:14     - Unknown word (xcxca)      -- assert s == 'xcxca'
extra_tests/snippets/stdlib_re.py:40:35     - Unknown word (abcdddd)    -- compile('abcd*').match('abcdddd').group() == 'abcdddd
extra_tests/snippets/stdlib_re.py:40:57     - Unknown word (abcdddd)    -- abcdddd').group() == 'abcdddd'
extra_tests/snippets/stdlib_re.py:42:36     - Unknown word (abce)       -- compile('abcd*e').match('abce').group() == 'abce'
extra_tests/snippets/stdlib_re.py:42:55     - Unknown word (abce)       -- 'abce').group() == 'abce'
extra_tests/snippets/stdlib_re.py:43:37     - Unknown word (abcddeee)   -- compile('abcd*e+').match('abcddeee').group() == 'abcddeee
extra_tests/snippets/stdlib_re.py:43:60     - Unknown word (abcddeee)   -- abcddeee').group() == 'abcddeee'
extra_tests/snippets/stdlib_re.py:44:35     - Unknown word (abcddd)     -- compile('abcd+').match('abcddd').group() == 'abcddd
extra_tests/snippets/stdlib_re.py:44:56     - Unknown word (abcddd)     -- abcddd').group() == 'abcddd'
extra_tests/snippets/stdlib_re.py:52:41     - Unknown word (abcdcdcd)   -- a)(b)(cd)*').match('abcdcdcd').group(0, 1, 2, 3)
extra_tests/snippets/stdlib_re.py:52:75     - Unknown word (abcdcdcd)   -- group(0, 1, 2, 3) == ('abcdcdcd', 'a', 'b', 'cd')
extra_tests/snippets/stdlib_re.py:5:11      - Unknown word (ello)       -- needle = 'ello'
extra_tests/snippets/stdlib_re.py:64:41     - Unknown word (Xtest)      -- ', 'X', 'test') == 'Xtest'
extra_tests/snippets/stdlib_select.py:26:1      - Unknown word (recvr)      -- recvr = socket.socket()
extra_tests/snippets/stdlib_select.py:28:1      - Unknown word (recvr)      -- recvr.bind(("127.0.0.1",
extra_tests/snippets/stdlib_select.py:30:1      - Unknown word (recvr)      -- recvr.listen()
extra_tests/snippets/stdlib_select.py:32:1      - Unknown word (recvr)      -- recvr.settimeout(10.0)
extra_tests/snippets/stdlib_select.py:34:1      - Unknown word (sendr)      -- sendr = socket.socket()
extra_tests/snippets/stdlib_select.py:36:1      - Unknown word (sendr)      -- sendr.connect(("127.0.0.1
extra_tests/snippets/stdlib_select.py:37:1      - Unknown word (sendr)      -- sendr.send(b"aaaa")
extra_tests/snippets/stdlib_select.py:39:1      - Unknown word (rres)       -- rres, wres, xres = select
extra_tests/snippets/stdlib_select.py:39:35     - Unknown word (recvr)      -- xres = select.select([recvr], [sendr], [])
extra_tests/snippets/stdlib_select.py:39:44     - Unknown word (sendr)      -- select.select([recvr], [sendr], [])
extra_tests/snippets/stdlib_select.py:42:21     - Unknown word (rres)       -- assert recvr in rres
extra_tests/snippets/stdlib_select.py:44:8      - Unknown word (sendr)      -- assert sendr in wres
extra_tests/snippets/stdlib_socket.py:164:13    - Unknown word (gaierror)   -- (socket.gaierror, "gaierror"),
extra_tests/snippets/stdlib_socket.py:164:24    - Unknown word (gaierror)   -- (socket.gaierror, "gaierror"),
extra_tests/snippets/stdlib_sqlite.py:21:7      - Unknown word (Aggr)       -- class AggrSum:
extra_tests/snippets/stdlib_sqlite.py:31:33     - Unknown word (Aggr)       -- aggregate("mysum", 1, AggrSum)
extra_tests/snippets/stdlib_sqlite.py:38:7      - Unknown word (Aggr)       -- class AggrText:
extra_tests/snippets/stdlib_sqlite.py:47:22     - Unknown word (aggtxt)     -- cx.create_aggregate("aggtxt", 1, AggrText)
extra_tests/snippets/stdlib_sqlite.py:47:34     - Unknown word (Aggr)       -- aggregate("aggtxt", 1, AggrText)
extra_tests/snippets/stdlib_sqlite.py:48:21     - Unknown word (aggtxt)     -- cur.execute("select aggtxt(key) from foo")
extra_tests/snippets/stdlib_subprocess.py:18:36     - Unknown word (unixy)      -- make work in a non-unixy environment (something
extra_tests/snippets/stdlib_sys.py:112:12    - Unknown word (PYTHONSAFEPATH) -- # Test the PYTHONSAFEPATH environment variable
extra_tests/snippets/stdlib_sys.py:115:10    - Unknown word (PYTHONSAFEPATH) -- env.pop('PYTHONSAFEPATH', None)
extra_tests/snippets/stdlib_sys.py:124:6     - Unknown word (PYTHONSAFEPATH) -- env['PYTHONSAFEPATH'] = '1'
extra_tests/snippets/stdlib_sys.py:92:74     - Unknown word (compatiblity) -- correctly, this'll break on compatiblity mode or a build without
extra_tests/snippets/stdlib_xdrlib.py:1:25      - Unknown word (superceeded) -- This probably will be superceeded by the python unittests
extra_tests/snippets/stdlib_zlib.py:36:38     - Unknown word (amet)       -- Lorem ipsum dolor sit amet", "utf-8")
extra_tests/snippets/stdlib_zlib.py:39:54     - Unknown word (amet)       -- xffLorem ipsum dolor sit amet\x83\xd5\t\xc5",
extra_tests/snippets/syntax_async.py:8:16      - Unknown word (Entrada)    -- print("Entrada")
extra_tests/snippets/syntax_class.py:229:20    - Unknown word (dbca)       -- assert D().f() == 'dbca', "Mro resolution using
extra_tests/snippets/syntax_class.py:42:9      - Unknown word (fubar)      -- def fubar(cls, x):
extra_tests/snippets/syntax_class.py:48:9      - Unknown word (kungfu)     -- def kungfu(x):
extra_tests/snippets/syntax_class.py:59:5      - Unknown word (fubar)      -- bar.fubar(2)
extra_tests/snippets/syntax_class.py:60:5      - Unknown word (fubar)      -- Bar.fubar(2)
extra_tests/snippets/syntax_class.py:62:5      - Unknown word (kungfu)     -- bar.kungfu(3)
extra_tests/snippets/syntax_class.py:63:5      - Unknown word (kungfu)     -- Bar.kungfu(3)
extra_tests/snippets/syntax_fstring.py:144:1     - Unknown word (tenπ)       -- tenπ = 31.4
extra_tests/snippets/syntax_fstring.py:145:21    - Unknown word (tenπ)       -- self.assertEqual(f'{tenπ=:.2f}', 'tenπ=31.40
extra_tests/snippets/syntax_fstring.py:145:35    - Unknown word (tenπ)       -- assertEqual(f'{tenπ=:.2f}', 'tenπ=31.40')
extra_tests/snippets/syntax_fstring.py:16:14     - Unknown word (tersing)    -- # lets start tersing
extra_tests/snippets/syntax_fstring.py:22:24     - Unknown word (barfoo)     -- assert f"{foo}foo" == 'barfoo'
extra_tests/snippets/syntax_fstring.py:23:27     - Unknown word (foobarfoo)  -- assert f"foo{foo}foo" == 'foobarfoo'
extra_tests/snippets/syntax_fstring.py:29:36     - Unknown word (barbarfoo)  -- f"{foo}" 'foo' == 'barbarfoo'
extra_tests/snippets/syntax_function2.py:23:5      - Unknown word (fubar)      -- def fubar():
extra_tests/snippets/syntax_function2.py:26:8      - Unknown word (fubar)      -- assert fubar() == (42,)
extra_tests/snippets/syntax_function2.py:66:23     - Unknown word (abcw)       -- assert f5.__doc__ == 'abcw00t', f5.__doc__
extra_tests/snippets/syntax_function_args.py:37:13     - Unknown word (kwdefaults) -- assert va.__kwdefaults__ is None
extra_tests/snippets/syntax_function_args.py:65:21     - Unknown word (kwdefaults) -- kw_defaults = va3.__kwdefaults__
extra_tests/snippets/syntax_function_args.py:66:16     - Unknown word (kwdefaults) -- # assert va3.__kwdefaults__ == {'b': 2, 'c':
extra_tests/snippets/syntax_function_args.py:76:5      - Unknown word (fubar)      -- def fubar(x, y, obj=None):
extra_tests/snippets/syntax_function_args.py:82:1      - Unknown word (fubar)      -- fubar(obj=6, *rest)
extra_tests/snippets/syntax_generator.py:124:13    - Unknown word (coro)       -- def wrapper(coro):
extra_tests/snippets/syntax_generator.py:125:16    - Unknown word (coro)       -- yield from coro
extra_tests/snippets/syntax_generator.py:171:13    - Unknown word (yieldfrom)  -- assert g.gi_yieldfrom is it
extra_tests/snippets/syntax_generator.py:173:13    - Unknown word (yieldfrom)  -- assert g.gi_yieldfrom is None
extra_tests/snippets/syntax_global_nonlocal.py:3:28      - Unknown word (funkyness)  -- global and nonlocal funkyness
extra_tests/snippets/syntax_short_circuit_bool.py:14:14     - Unknown word (booled)     -- self.booled = False
extra_tests/snippets/syntax_short_circuit_bool.py:17:25     - Unknown word (booled)     -- assert not self.booled
extra_tests/snippets/syntax_short_circuit_bool.py:18:14     - Unknown word (booled)     -- self.booled = True
extra_tests/snippets/syntax_statement.py:4:15      - Unknown word (seperated)  -- # small ones, seperated by ';':
extra_tests/snippets/syntax_try.py:35:12     - Unknown word (kablam)     -- print('kablam')
extra_tests/snippets/syntax_try.py:49:12     - Unknown word (kablam)     -- print('kablam')
extra_tests/snippets/syntax_try.py:62:12     - Unknown word (kablam)     -- print('kablam')
extra_tests/snippets/syntax_try.py:73:16     - Unknown word (kablam)     -- print('kablam')
extra_tests/snippets/syntax_try.py:82:5      - Unknown word (fubar)      -- fubar
extra_tests/snippets/syntax_with.py:30:16     - Unknown word (Ajuus)      -- print('Ajuus')
extra_tests/snippets/syntax_with.py:5:16      - Unknown word (Entrada)    -- print('Entrada')
extra_tests/snippets/testutils.py:68:28     - Unknown word (klass)      -- assert_isinstance(obj, klass):
extra_tests/snippets/testutils.py:69:43     - Unknown word (klass)      -- lambda: isinstance(obj, klass), ['isisntance(', _typed
extra_tests/snippets/testutils.py:69:53     - Unknown word (isisntance) -- isinstance(obj, klass), ['isisntance(', _typed(obj), ','
extra_tests/snippets/testutils.py:69:85     - Unknown word (klass)      -- , _typed(obj), ',', klass, ')'])
extra_tests/test_snippets.py:27:5      - Unknown word (pushd)      -- def pushd(path):
jit/src/instructions.rs:256:36    - Unknown word (brnz)       -- self.builder.ins().brnz(val, then_block, &[
jit/src/instructions.rs:411:68    - Unknown word (ifcout)     -- self.builder.ins().iadd_ifcout(a, b);
jit/src/instructions.rs:412:44    - Unknown word (trapif)     -- self.builder.ins().trapif(
jit/src/instructions.rs:435:55    - Unknown word (ushr)       -- self.builder.ins().ushr_imm(b, 63);
jit/src/instructions.rs:436:44    - Unknown word (trapnz)     -- self.builder.ins().trapnz(
jit/src/instructions.rs:442:48    - Unknown word (ishl)       -- self.builder.ins().ishl(a, b)
jit/src/instructions.rs:444:48    - Unknown word (sshr)       -- self.builder.ins().sshr(a, b)
jit/src/instructions.rs:466:60    - Unknown word (fmul)       -- Float(self.builder.ins().fmul(a, b))
jit/src/instructions.rs:493:68    - Unknown word (fmul)       -- Float(self.builder.ins().fmul(operand_one, operand
jit/src/instructions.rs:516:79    - Unknown word (ifbout)     -- t special-case isub_ifbout
jit/src/instructions.rs:517:55    - Unknown word (ifbout)     -- self.builder.ins().isub_ifbout(a, b);
jit/src/instructions.rs:520:17    - Unknown word (trapif)     -- // .trapif(IntCC::Overflow, carry
jit/src/instructions.rs:523:52    - Unknown word (ifcout)     -- self.builder.ins().iadd_ifcout(a, neg_b);
jit/src/instructions.rs:526:14    - Unknown word (trapif)     -- .trapif(IntCC::Overflow, carry
pdc.sh:33:1      - Unknown word (RUSTPYTHONPATH) -- RUSTPYTHONPATH=Lib
pdc.sh:34:8      - Unknown word (RUSTPYTHONPATH) -- export RUSTPYTHONPATH
pylib/build.rs:15:44     - Unknown word (RUSTPYTHONPATH) -- expect("failed to resolve RUSTPYTHONPATH during build time")
scripts/bench.sh:1:29      - Unknown word (fannkuch)   -- BENCH in "int" "nbody" "fannkuch" "scimark"; do
scripts/bench.sh:1:40      - Unknown word (scimark)    -- "nbody" "fannkuch" "scimark"; do
scripts/install-openssl.ps1:1:12      - Unknown word (Actix)      -- # From the Actix Web windows workflow
scripts/redox/recipe.sh:3:1       - Unknown word (CARGOFLAGS) -- CARGOFLAGS=--no-default-features
scripts/redox/recipe.sh:4:18      - Unknown word (RUSTPYTHONPATH) -- export BUILDTIME_RUSTPYTHONPATH=/lib/rustpython/
scripts/redox/run-redoxer.sh:12:11     - Unknown word (RUSTPYTHONPATH) -- BUILDTIME_RUSTPYTHONPATH=/root/rustpython-lib
scripts/redox/run-redoxer.sh:12:47     - Unknown word (redoxer)        -- root/rustpython-lib redoxer build --release
scripts/redox/run-redoxer.sh:17:1      - Unknown word (redoxer)        -- redoxer exec -f "$DIR" -- .
scripts/release-wapm.sh:10:93     - Unknown word (WAPM)           -- features="${FEATURES_FOR_WAPM[*]}"
scripts/release-wapm.sh:12:1      - Unknown word (wapm)           -- wapm publish
scripts/release-wapm.sh:6:14      - Unknown word (WAPM)       -- FEATURES_FOR_WAPM=(stdlib zlib)
scripts/release-wapm.sh:8:18      - Unknown word (RUSTPYTHONPATH) -- export BUILDTIME_RUSTPYTHONPATH="/lib/rustpython"
src/interpreter.rs:110:22    - Unknown word (RUSTPYTHONPATH) -- // BUILDTIME_RUSTPYTHONPATH should be set when distributi
src/interpreter.rs:111:53    - Unknown word (RUSTPYTHONPATH) -- option_env!("BUILDTIME_RUSTPYTHONPATH") {
src/lib.rs:120:13    - Unknown word (getpip)     -- let get_getpip = rustpython_vm::py
src/lib.rs:129:59    - Unknown word (getpip)     -- vm.ctx.new_code(get_getpip), vm.new_scope_with
src/lib.rs:129:9     - Unknown word (getpip)     -- let getpip_code = vm.run_code_obj
src/lib.rs:130:58    - Unknown word (getpip)     -- builtins::PyStrRef = getpip_code
src/lib.rs:130:9     - Unknown word (getpip)     -- let getpip_code: rustpython_vm
src/lib.rs:13:81     - Unknown word (otherthing) -- pass", module_name = "otherthing"));
src/lib.rs:171:79    - Unknown word (RUSTPYTHONPATH) -- Lib directory to your RUSTPYTHONPATH \
src/settings.rs:155:46    - Unknown word (pycs)       -- name("check-hash-based-pycs")
src/settings.rs:156:41    - Unknown word (pycs)       -- long("check-hash-based-pycs")
src/settings.rs:173:55    - Unknown word (PYTHONUNBUFFERED) -- effect on stdin; also PYTHONUNBUFFERED=x",
src/settings.rs:206:46    - Unknown word (RUSTPYTHONPATH)   -- list.extend(get_paths("RUSTPYTHONPATH"));
src/settings.rs:230:59    - Unknown word (PYTHONNOUSERSITE) -- flag("no-user-site", "PYTHONNOUSERSITE"));
src/settings.rs:232:66    - Unknown word (PYTHONDONTWRITEBYTECODE) -- dont-write-bytecode", "PYTHONDONTWRITEBYTECODE");
src/settings.rs:233:71    - Unknown word (PYTHONSAFEPATH)          -- bool_flag("safe-path", "PYTHONSAFEPATH");
src/settings.rs:235:57    - Unknown word (PYTHONUNBUFFERED)        -- flag("unbuffered", "PYTHONUNBUFFERED");
src/settings.rs:237:44    - Unknown word (PYTHONINTMAXSTRDIGITS)   -- environment && env::var_os("PYTHONINTMAXSTRDIGITS").is_some() {
src/settings.rs:238:55    - Unknown word (PYTHONINTMAXSTRDIGITS)   -- digits = match env::var("PYTHONINTMAXSTRDIGITS").unwrap().parse()
src/settings.rs:241:77    - Unknown word (PYTHONINTMAXSTRDIGITS)   -- int_max_str_digits: PYTHONINTMAXSTRDIGITS: invalid limit; must
src/settings.rs:247:25    - Unknown word (pycs)                    -- settings.check_hash_pycs_mode = matches
src/settings.rs:248:37    - Unknown word (pycs)                    -- of("check-hash-based-pycs")
src/settings.rs:280:14    - Unknown word (xoptions)                -- settings.xoptions.extend(xopts);
src/settings.rs:282:53    - Unknown word (PYTHONWARNDEFAULTENCODING) -- encoding |= bool_env_var("PYTHONWARNDEFAULTENCODING");
src/settings.rs:331:37    - Unknown word (PYTHONHASHSEED)            -- seed = match env::var("PYTHONHASHSEED") {
src/settings.rs:337:42    - Unknown word (PYTHONHASHSEED)            -- Fatal Python init error: PYTHONHASHSEED must be \"random\" or
stdlib/Cargo.toml:102:1     - Unknown word (rustix)     -- rustix = { workspace = true
stdlib/Cargo.toml:133:28    - Unknown word (Ndis)       -- 2_NetworkManagement_Ndis",
stdlib/Cargo.toml:52:1      - Unknown word (puruspe)    -- puruspe = "0.2.4"
stdlib/src/binascii.rs:105:15    - Unknown word (CRCTAB)     -- const CRCTAB_HQX: [u16; 256] = [
stdlib/src/binascii.rs:137:45    - Unknown word (CRCTAB)     -- crc << 8) & 0xFF00) ^ CRCTAB_HQX[((crc >> 8) as u
stdlib/src/binascii.rs:331:28    - Unknown word (roken)      -- // roken case from broken python
stdlib/src/binascii.rs:570:8     - Unknown word (rlecode)    -- fn rlecode_hqx(s: ArgAsciiBuffer
stdlib/src/binascii.rs:605:8     - Unknown word (rledecode)  -- fn rledecode_hqx(s: ArgAsciiBuffer
stdlib/src/contextvars.rs:324:55    - Unknown word (tsver)      -- Context index; cached_tsver in CPython
stdlib/src/contextvars.rs:43:19     - Unknown word (hamt)       -- // TODO: Real hamt implementation
stdlib/src/contextvars.rs:44:10     - Unknown word (Hamt)       -- type Hamt = IndexMap<PyRef<ContextVar
stdlib/src/contextvars.rs:46:32     - Unknown word (Hamt)       -- pyclass(no_attr, name = "Hamt", module = "contextvars
stdlib/src/contextvars.rs:48:23     - Unknown word (Hamt)       -- pub(crate) struct HamtObject {
stdlib/src/contextvars.rs:49:23     - Unknown word (Hamt)       -- hamt: RefCell<Hamt>,
stdlib/src/contextvars.rs:49:9      - Unknown word (hamt)       -- hamt: RefCell<Hamt>,
stdlib/src/contextvars.rs:53:10     - Unknown word (Hamt)       -- impl HamtObject {}
stdlib/src/contextvars.rs:58:17     - Unknown word (hamt)       -- hamt: RefCell::new(Hamt:
stdlib/src/contextvars.rs:95:29     - Unknown word (hamt)       -- self.inner.vars.hamt.borrow()
stdlib/src/contextvars.rs:99:29     - Unknown word (hamt)       -- self.inner.vars.hamt.borrow_mut()
stdlib/src/csv.rs:280:21    - Unknown word (pydialect)  -- opts.update_pydialect(&mut dialect);
stdlib/src/csv.rs:668:19    - Unknown word (pydialect)  -- fn update_pydialect<'b>(&self, res: &'b
stdlib/src/csv.rs:703:37    - Unknown word (pydialect)  -- self.update_pydialect(&mut dialect);
stdlib/src/csv.rs:706:66    - Unknown word (registed)   -- format!("{} is not registed.", name)))
stdlib/src/csv.rs:712:33    - Unknown word (pydialect)  -- self.update_pydialect(&mut o);
stdlib/src/csv.rs:718:33    - Unknown word (pydialect)  -- self.update_pydialect(&mut res);
stdlib/src/csv.rs:974:22    - Unknown word (rposition)  -- .rposition(|&x| x != b' ')
stdlib/src/fcntl.rs:14:36     - Unknown word (EXLCK)      -- SETLKW64, FASYNC, F_EXLCK, F_SHLCK, DN_ACCESS
stdlib/src/fcntl.rs:14:45     - Unknown word (SHLCK)      -- FASYNC, F_EXLCK, F_SHLCK, DN_ACCESS, DN_MODIFY
stdlib/src/fcntl.rs:15:39     - Unknown word (MULTISHOT)  -- RENAME, DN_ATTRIB, DN_MULTISHOT
stdlib/src/fcntl.rs:18:16     - Unknown word (SRDOPT)     -- // I_SRDOPT, I_GRDOPT, I_NREAD,
stdlib/src/fcntl.rs:18:26     - Unknown word (GRDOPT)     -- / I_SRDOPT, I_GRDOPT, I_NREAD, I_FDINSERT
stdlib/src/fcntl.rs:18:64     - Unknown word (SWROPT)     -- I_FDINSERT, I_STR, I_SWROPT, I_GWROPT, I_SENDFD
stdlib/src/fcntl.rs:18:74     - Unknown word (GWROPT)     -- I_STR, I_SWROPT, I_GWROPT, I_SENDFD,
stdlib/src/fcntl.rs:19:16     - Unknown word (RECVFD)     -- // I_RECVFD, I_LIST, I_ATMARK, I
stdlib/src/fcntl.rs:19:44     - Unknown word (CKBAND)     -- I_LIST, I_ATMARK, I_CKBAND, I_GETBAND, I_CANPUT
stdlib/src/fcntl.rs:19:65     - Unknown word (CANPUT)     -- CKBAND, I_GETBAND, I_CANPUT, I_SETCLTIME, I_GETCLTIME
stdlib/src/fcntl.rs:19:75     - Unknown word (SETCLTIME)  -- GETBAND, I_CANPUT, I_SETCLTIME, I_GETCLTIME,
stdlib/src/fcntl.rs:19:88     - Unknown word (GETCLTIME)  -- CANPUT, I_SETCLTIME, I_GETCLTIME,
stdlib/src/gc.rs:43:12     - Unknown word (refererts)  -- fn get_refererts(_args: FuncArgs, vm
stdlib/src/grp.rs:84:8      - Unknown word (getgrall)   -- fn getgrall(vm: &VirtualMachine
stdlib/src/grp.rs:85:67     - Unknown word (fgetgrent)  -- thread safe. Could use fgetgrent_r, but this is easier
stdlib/src/grp.rs:86:16     - Unknown word (GETGRALL)   -- static GETGRALL: parking_lot::Mutex
stdlib/src/grp.rs:87:22     - Unknown word (GETGRALL)   -- let _guard = GETGRALL.lock();
stdlib/src/hashlib.rs:335:9     - Unknown word (digestmod)  -- digestmod: bool, // TODO: RUSTPYTHON
stdlib/src/json/machinery.rs:5:30      - Unknown word (LOJKINE)    -- Copyright (c) 2018, Ophir LOJKINE
stdlib/src/locale.rs:59:72     - Unknown word (ABMON)      -- , ABDAY_6, ABDAY_7, ABMON_1, ABMON_10, ABMON_
stdlib/src/locale.rs:59:81     - Unknown word (ABMON)      -- , ABDAY_7, ABMON_1, ABMON_10, ABMON_11,
stdlib/src/locale.rs:59:91     - Unknown word (ABMON)      -- ABMON_1, ABMON_10, ABMON_11,
stdlib/src/locale.rs:60:19     - Unknown word (ABMON)      -- ABMON_12, ABMON_2, ABMON_3, ABMON_4
stdlib/src/locale.rs:60:9      - Unknown word (ABMON)      -- ABMON_12, ABMON_2, ABMON_
stdlib/src/math.rs:135:26    - Unknown word (logx)       -- log2(x, vm).map(|logx| logx / base.log2()
stdlib/src/math.rs:135:32    - Unknown word (logx)       -- log2(x, vm).map(|logx| logx / base.log2())
stdlib/src/math.rs:187:26    - Unknown word (logx)       -- log2(x, vm).map(|logx| logx / 10f64.log2(
stdlib/src/math.rs:187:32    - Unknown word (logx)       -- log2(x, vm).map(|logx| logx / 10f64.log2())
stdlib/src/math.rs:464:13    - Unknown word (puruspe)    -- puruspe::erf(x)
stdlib/src/math.rs:474:13    - Unknown word (puruspe)    -- puruspe::erfc(x)
stdlib/src/math.rs:482:13    - Unknown word (puruspe)    -- puruspe::gamma(x)
stdlib/src/math.rs:494:13    - Unknown word (puruspe)    -- puruspe::ln_gamma(x)
stdlib/src/math.rs:550:39    - Unknown word (ufrexp)     -- m, exp) = float_ops::ufrexp(value);
stdlib/src/math.rs:622:17    - Unknown word (xsave)      -- let xsave = x;
stdlib/src/math.rs:643:22    - Unknown word (nonfinite)  -- // a nonfinite x could arise either
stdlib/src/math.rs:646:20    - Unknown word (summands)   -- // summands
stdlib/src/math.rs:647:20    - Unknown word (xsave)      -- if xsave.is_finite() {
stdlib/src/math.rs:650:20    - Unknown word (xsave)      -- if xsave.is_infinite() {
stdlib/src/math.rs:651:32    - Unknown word (xsave)      -- inf_sum += xsave;
stdlib/src/math.rs:653:32    - Unknown word (xsave)      -- special_sum += xsave;
stdlib/src/math.rs:859:17    - Unknown word (absx)       -- let absx = x.abs();
stdlib/src/math.rs:860:17    - Unknown word (absy)       -- let absy = y.abs();
stdlib/src/math.rs:861:27    - Unknown word (absx)       -- let modulus = absx % absy;
stdlib/src/math.rs:861:34    - Unknown word (absy)       -- let modulus = absx % absy;
stdlib/src/math.rs:863:21    - Unknown word (absy)       -- let c = absy - modulus;
stdlib/src/math.rs:867:50    - Unknown word (absx)       -- - 2.0 * fmod(0.5 * (absx - modulus), absy),
stdlib/src/math.rs:867:67    - Unknown word (absy)       -- * (absx - modulus), absy),
stdlib/src/mmap.rs:115:14    - Unknown word (DODUMP)     -- MADV_DODUMP, MADV_DOFORK, MADV_DONTDUMP
stdlib/src/mmap.rs:115:27    - Unknown word (DOFORK)     -- MADV_DODUMP, MADV_DOFORK, MADV_DONTDUMP, MADV
stdlib/src/mmap.rs:115:40    - Unknown word (DONTDUMP)   -- DODUMP, MADV_DOFORK, MADV_DONTDUMP, MADV_DONTFORK, MADV
stdlib/src/mmap.rs:115:55    - Unknown word (DONTFORK)   -- MADV_DONTDUMP, MADV_DONTFORK, MADV_HUGEPAGE, MADV
stdlib/src/mmap.rs:115:70    - Unknown word (HUGEPAGE)   -- MADV_DONTFORK, MADV_HUGEPAGE, MADV_HWPOISON,
stdlib/src/mmap.rs:115:85    - Unknown word (HWPOISON)   -- MADV_HUGEPAGE, MADV_HWPOISON,
stdlib/src/mmap.rs:116:30    - Unknown word (NOHUGEPAGE) -- MADV_MERGEABLE, MADV_NOHUGEPAGE, MADV_REMOVE, MADV_UNMERGEABL
stdlib/src/mmap.rs:158:22    - Unknown word (ALLOCATIONGRANULARITY) -- #[pyattr(name = "ALLOCATIONGRANULARITY", once)]
stdlib/src/mmap.rs:44:19     - Unknown word (MADV)       -- libc::MADV_DONTFORK => Advice:
stdlib/src/mmap.rs:44:24     - Unknown word (DONTFORK)   -- libc::MADV_DONTFORK => Advice::DontFork
stdlib/src/mmap.rs:46:19     - Unknown word (MADV)       -- libc::MADV_DOFORK => Advice::DoFork
stdlib/src/mmap.rs:46:24     - Unknown word (DOFORK)     -- libc::MADV_DOFORK => Advice::DoFork,
stdlib/src/mmap.rs:48:19     - Unknown word (MADV)       -- libc::MADV_MERGEABLE => Advice
stdlib/src/mmap.rs:50:19     - Unknown word (MADV)       -- libc::MADV_UNMERGEABLE => Advice
stdlib/src/mmap.rs:52:19     - Unknown word (MADV)       -- libc::MADV_HUGEPAGE => Advice:
stdlib/src/mmap.rs:52:24     - Unknown word (HUGEPAGE)   -- libc::MADV_HUGEPAGE => Advice::HugePage
stdlib/src/mmap.rs:54:24     - Unknown word (NOHUGEPAGE) -- libc::MADV_NOHUGEPAGE => Advice::NoHugePage
stdlib/src/mmap.rs:552:18    - Unknown word (resizeable)            -- fn check_resizeable(&self, vm: &VirtualMachine
stdlib/src/mmap.rs:58:24     - Unknown word (DONTDUMP)   -- libc::MADV_DONTDUMP => Advice::DontDump
stdlib/src/mmap.rs:60:24     - Unknown word (DODUMP)     -- libc::MADV_DODUMP => Advice::DoDump,
stdlib/src/mmap.rs:62:24     - Unknown word (HWPOISON)   -- libc::MADV_HWPOISON => Advice::HwPoison
stdlib/src/mmap.rs:636:46    - Unknown word (rposition)             -- buf.windows(sub.len()).rposition(|window| window == sub
stdlib/src/mmap.rs:816:24    - Unknown word (resizeable)            -- self.check_resizeable(vm)?;
stdlib/src/posixsubprocess.rs:238:43    - Unknown word (SIGXFZ)     -- restore signals SIGPIPE, SIGXFZ, SIGXFSZ to SIG_DFL
stdlib/src/random.rs:16:16     - Unknown word (rngs)       -- use rand::{rngs::StdRng, RngCore, SeedableRng
stdlib/src/random.rs:16:39     - Unknown word (Seedable)   -- rngs::StdRng, RngCore, SeedableRng};
stdlib/src/resource.rs:31:72     - Unknown word (emscripten) -- android", target_os = "emscripten"))]
stdlib/src/resource.rs:33:53     - Unknown word (RTPRIO)     -- RLIMIT_NICE, RLIMIT_RTPRIO, RLIMIT_SIGPENDING}
stdlib/src/resource.rs:37:22     - Unknown word (RTTIME)     -- use libc::RLIMIT_RTTIME;
stdlib/src/resource.rs:43:22     - Unknown word (illumos)    -- target_os = "illumos"
stdlib/src/resource.rs:46:22     - Unknown word (SBSIZE)     -- use libc::RLIMIT_SBSIZE;
stdlib/src/resource.rs:48:74     - Unknown word (illumos)    -- solaris", target_os = "illumos"))]
stdlib/src/resource.rs:50:23     - Unknown word (NPTS)       -- use libc::{RLIMIT_NPTS, RLIMIT_SWAP};
stdlib/src/resource.rs:52:51     - Unknown word (illumos)    -- solaris", target_os = "illumos"))]
stdlib/src/resource.rs:56:49     - Unknown word (emscripten) -- linux", target_os = "emscripten", target_os = "freebsd
stdlib/src/select.rs:234:9     - Unknown word (wlist)      -- wlist: PyObjectRef,
stdlib/src/select.rs:235:9     - Unknown word (xlist)      -- xlist: PyObjectRef,
stdlib/src/select.rs:260:14    - Unknown word (wlist)      -- let (wlist, mut w) = seq2set(&wlist
stdlib/src/select.rs:260:39    - Unknown word (wlist)      -- wlist, mut w) = seq2set(&wlist)?;
stdlib/src/select.rs:261:14    - Unknown word (xlist)      -- let (xlist, mut x) = seq2set(&xlist
stdlib/src/select.rs:261:39    - Unknown word (xlist)      -- xlist, mut x) = seq2set(&xlist)?;
stdlib/src/select.rs:263:32    - Unknown word (wlist)      -- rlist.is_empty() && wlist.is_empty() && xlist
stdlib/src/select.rs:263:52    - Unknown word (xlist)      -- wlist.is_empty() && xlist.is_empty() {
stdlib/src/select.rs:308:13    - Unknown word (wlist)      -- let wlist = set2list(wlist, w
stdlib/src/select.rs:309:13    - Unknown word (xlist)      -- let xlist = set2list(xlist, x
stdlib/src/select.rs:495:19    - Unknown word (EPOLLEXCLUSIVE) -- EPOLLERR, EPOLLEXCLUSIVE, EPOLLHUP, EPOLLIN,
stdlib/src/select.rs:495:35    - Unknown word (EPOLLHUP)       -- EPOLLERR, EPOLLEXCLUSIVE, EPOLLHUP, EPOLLIN, EPOLLMSG,
stdlib/src/select.rs:495:45    - Unknown word (EPOLLIN)        -- EPOLLEXCLUSIVE, EPOLLHUP, EPOLLIN, EPOLLMSG, EPOLLONESHOT
stdlib/src/select.rs:495:54    - Unknown word (EPOLLMSG)       -- EPOLLHUP, EPOLLIN, EPOLLMSG, EPOLLONESHOT, EPOLLOUT
stdlib/src/select.rs:495:64    - Unknown word (EPOLLONESHOT)   -- EPOLLIN, EPOLLMSG, EPOLLONESHOT, EPOLLOUT, EPOLLPRI
stdlib/src/select.rs:495:78    - Unknown word (EPOLLOUT)       -- EPOLLMSG, EPOLLONESHOT, EPOLLOUT, EPOLLPRI,
stdlib/src/select.rs:495:88    - Unknown word (EPOLLPRI)       -- EPOLLONESHOT, EPOLLOUT, EPOLLPRI,
stdlib/src/select.rs:495:9     - Unknown word (EPOLLERR)   -- EPOLLERR, EPOLLEXCLUSIVE, EPOLLHUP
stdlib/src/select.rs:496:22    - Unknown word (EPOLLRDHUP)     -- EPOLLRDBAND, EPOLLRDHUP, EPOLLRDNORM, EPOLLWAKEUP
stdlib/src/select.rs:496:34    - Unknown word (EPOLLRDNORM)    -- EPOLLRDBAND, EPOLLRDHUP, EPOLLRDNORM, EPOLLWAKEUP, EPOLLWRBAND
stdlib/src/select.rs:496:47    - Unknown word (EPOLLWAKEUP)    -- EPOLLRDHUP, EPOLLRDNORM, EPOLLWAKEUP, EPOLLWRBAND, EPOLLWRNORM
stdlib/src/select.rs:496:60    - Unknown word (EPOLLWRBAND)    -- EPOLLRDNORM, EPOLLWAKEUP, EPOLLWRBAND, EPOLLWRNORM, EPOLL
stdlib/src/select.rs:496:73    - Unknown word (EPOLLWRNORM)    -- EPOLLWAKEUP, EPOLLWRBAND, EPOLLWRNORM, EPOLL_CLOEXEC,
stdlib/src/select.rs:496:9     - Unknown word (EPOLLRDBAND)    -- EPOLLRDBAND, EPOLLRDHUP, EPOLLRDNORM
stdlib/src/select.rs:496:92    - Unknown word (CLOEXEC)        -- EPOLLWRNORM, EPOLL_CLOEXEC,
stdlib/src/select.rs:500:11    - Unknown word (EPOLLET)        -- const EPOLLET: u32 = libc::EPOLLET
stdlib/src/select.rs:500:32    - Unknown word (EPOLLET)        -- EPOLLET: u32 = libc::EPOLLET as u32;
stdlib/src/select.rs:514:13    - Unknown word (rustix)         -- use rustix::event::epoll::{self
stdlib/src/select.rs:539:58    - Unknown word (CLOEXEC)        -- flags, 0 | libc::EPOLL_CLOEXEC) {
stdlib/src/select.rs:560:66    - Unknown word (CLOEXEC)        -- epoll::CreateFlags::CLOEXEC)?;
stdlib/src/select.rs:59:24     - Unknown word (WSAFDIs)    -- use WinSock::__WSAFDIsSet;
stdlib/src/select.rs:60:11     - Unknown word (WSAFDIs)    -- __WSAFDIsSet(fd as _, set) !=
stdlib/src/select.rs:659:29    - Unknown word (rustix)         -- Err(rustix::io::Errno::INTR) =
stdlib/src/socket.rs:114:47    - Unknown word (NETROM)           -- SOL_AX25, SOL_IPX, SOL_NETROM, SOL_ROSE};
stdlib/src/socket.rs:118:15    - Unknown word (SETFIB)           -- use c::SO_SETFIB;
stdlib/src/socket.rs:123:78    - Unknown word (ISOTP)            -- FLAG, CAN_ERR_MASK, CAN_ISOTP, CAN_J1939,
stdlib/src/socket.rs:1327:13   - Unknown word (ancdata)          -- ancdata: OptionalArg,
stdlib/src/socket.rs:1354:41   - Unknown word (ancdata)          -- OptionalArg::Present(ancdata) = ancdata {
stdlib/src/socket.rs:1354:52   - Unknown word (ancdata)          -- :Present(ancdata) = ancdata {
stdlib/src/socket.rs:1356:22   - Unknown word (ancdata)          -- &ancdata,
stdlib/src/socket.rs:139:20    - Unknown word (VRRP)             -- use c::IPPROTO_VRRP;
stdlib/src/socket.rs:1412:21   - Unknown word (pmhdr)            -- let mut pmhdr: *mut libc::cmsghdr
stdlib/src/socket.rs:1414:20   - Unknown word (pmhdr)            -- if pmhdr.is_null() {
stdlib/src/socket.rs:1421:46   - Unknown word (pmhdr)            -- because we know that pmhdr is valid, and we initialized
stdlib/src/socket.rs:1424:23   - Unknown word (pmhdr)            -- (*pmhdr).cmsg_level = *lvl;
stdlib/src/socket.rs:1425:23   - Unknown word (pmhdr)            -- (*pmhdr).cmsg_type = *typ;
stdlib/src/socket.rs:1427:31   - Unknown word (nonoverlapping)   -- ptr::copy_nonoverlapping(data.as_ptr(), libc
stdlib/src/socket.rs:150:12    - Unknown word (EXCLUSIVEADDRUSE) -- SO_EXCLUSIVEADDRUSE,
stdlib/src/socket.rs:1698:25   - Unknown word (abstractpath)     -- if let Some(abstractpath) = addr.as_abstract
stdlib/src/socket.rs:1699:49   - Unknown word (abstractpath)     -- ctx.new_bytes([b"\0", abstractpath].concat()).into();
stdlib/src/socket.rs:170:54    - Unknown word (ASSOCLEN)         -- ENCRYPT, ALG_SET_AEAD_ASSOCLEN, ALG_SET_AEAD_AUTHSIZE
stdlib/src/socket.rs:173:85    - Unknown word (DNRTMSG)          -- NETLINK_CRYPTO, NETLINK_DNRTMSG,
stdlib/src/socket.rs:174:51    - Unknown word (NFLOG)            -- NETLINK_IP6_FW, NETLINK_NFLOG, NETLINK_ROUTE, NETLINK
stdlib/src/socket.rs:175:17    - Unknown word (XFRM)             -- NETLINK_XFRM, SOL_ALG, SO_PASSSEC
stdlib/src/socket.rs:213:28    - Unknown word (ATMPVC)           -- AF_ALG, AF_ASH, AF_ATMPVC, AF_ATMSVC, AF_AX25
stdlib/src/socket.rs:214:44    - Unknown word (NETROM)           -- NETBEUI, AF_NETLINK, AF_NETROM, AF_PACKET, AF_PPPOX
stdlib/src/socket.rs:2179:46   - Unknown word (Luid)             -- name(&entry.InterfaceLuid).map_err(|err| err.into
stdlib/src/socket.rs:217:89    - Unknown word (QUICKACK)         -- ACCEPT, TCP_LINGER2, TCP_QUICKACK,
stdlib/src/socket.rs:2187:17   - Unknown word (luid)             -- luid: &winapi::shared::ifdef
stdlib/src/socket.rs:2187:51   - Unknown word (LUID)             -- :shared::ifdef::NET_LUID,
stdlib/src/socket.rs:2191:47   - Unknown word (Luid)             -- netioapi::ConvertInterfaceLuidToNameW(luid, buf.as
stdlib/src/socket.rs:2191:59   - Unknown word (luid)             -- ConvertInterfaceLuidToNameW(luid, buf.as_mut_ptr(), buf
stdlib/src/socket.rs:2386:38   - Unknown word (gaierror)         -- SocketError::GaiError => gaierror(vm),
stdlib/src/socket.rs:304:24    - Unknown word (CSCOV)            -- const UDPLITE_SEND_CSCOV: i32 = 10;
stdlib/src/socket.rs:313:24    - Unknown word (CSCOV)            -- const UDPLITE_RECV_CSCOV: i32 = 11;
stdlib/src/socket.rs:341:32    - Unknown word (loongarch)        -- target_arch = "loongarch64",
stdlib/src/socket.rs:345:32    - Unknown word (riscv)            -- target_arch = "riscv64",
stdlib/src/socket.rs:391:32    - Unknown word (loongarch)        -- target_arch = "loongarch64",
stdlib/src/socket.rs:395:32    - Unknown word (riscv)            -- target_arch = "riscv64",
stdlib/src/socket.rs:443:15    - Unknown word (RECVTOS)          -- use c::IP_RECVTOS;
stdlib/src/socket.rs:44:16     - Unknown word (EXCLUSIVEADDRUSE) -- SO_EXCLUSIVEADDRUSE,
stdlib/src/socket.rs:541:22    - Unknown word (CLOEXEC)          -- use c::{MSG_CMSG_CLOEXEC, MSG_NOSIGNAL};
stdlib/src/socket.rs:578:18    - Unknown word (CLOEXEC)          -- use c::{SOCK_CLOEXEC, SOCK_NONBLOCK};
stdlib/src/socket.rs:674:11    - Unknown word (BDADDR)           -- const BDADDR_ANY: &str = "00:00:
stdlib/src/socket.rs:683:11    - Unknown word (BDADDR)           -- const BDADDR_LOCAL: &str = "00:0
stdlib/src/socket.rs:689:30    - Unknown word (ICLFXBM)          -- IPPROTO_CBT, IPPROTO_ICLFXBM, IPPROTO_IGP, IPPROTO
stdlib/src/socket.rs:68:13     - Unknown word (WSAEBADF)         -- WSAEBADF, WSAECONNRESET, WSAENOTSOCK
stdlib/src/socket.rs:712:8     - Unknown word (gaierror)         -- fn gaierror(vm: &VirtualMachine
stdlib/src/socket.rs:715:14    - Unknown word (gaierror)         -- "gaierror",
stdlib/src/socket.rs:71:52     - Unknown word (Ndis)             -- :NetworkManagement::Ndis::IF_MAX_STRING_SIZE
stdlib/src/ssl.rs:131:15    - Unknown word (ECDH)       -- const HAS_ECDH: bool = false;
stdlib/src/ssl.rs:1360:63   - Unknown word (cacerts)    -- system/etc/security/cacerts";
stdlib/src/ssl.rs:461:43    - Unknown word (SSLV)       -- options |= SslOptions::NO_SSLV2;
stdlib/src/ssl.rs:469:43    - Unknown word (ECDH)       -- SslOptions::SINGLE_ECDH_USE;
stdlib/src/ssl.rs:521:31    - Unknown word (cipherlist) -- fn set_ciphers(&self, cipherlist: PyStrRef, vm: &VirtualMachin
stdlib/src/ssl.rs:522:27    - Unknown word (cipherlist) -- let ciphers = cipherlist.as_str();
stdlib/src/ssl.rs:633:76    - Unknown word (cadata)     -- &args.capath, &args.cadata) {
stdlib/src/ssl.rs:635:59    - Unknown word (cadata)     -- "cafile, capath and cadata cannot be all omitted
stdlib/src/ssl.rs:640:24    - Unknown word (cadata)     -- fn invalid_cadata(vm: &VirtualMachine
stdlib/src/ssl.rs:642:22    - Unknown word (cadata)     -- "cadata should be an ASCII string
stdlib/src/ssl.rs:646:25    - Unknown word (cadata)     -- // validate cadata type and load cadata
stdlib/src/ssl.rs:72:33     - Unknown word (ECDH)       -- ifdef SSL_OP_SINGLE_ECDH_USE
stdlib/src/ssl.rs:73:26     - Unknown word (ECDH)       -- // SSL_OP_SINGLE_ECDH_USE as OP_SINGLE_ECDH
stdlib/src/ssl.rs:73:48     - Unknown word (ECDH)       -- ECDH_USE as OP_SINGLE_ECDH_USE
stdlib/src/termios.rs:107:18    - Unknown word (CBAUDEX)         -- B576000, CBAUDEX,
stdlib/src/termios.rs:112:22    - Unknown word (illumos)         -- target_os = "illumos",
stdlib/src/termios.rs:121:22    - Unknown word (illumos)         -- target_os = "illumos",
stdlib/src/termios.rs:133:22    - Unknown word (illumos)         -- target_os = "illumos",
stdlib/src/termios.rs:138:38    - Unknown word (CIBAUD)          -- os::target::{CBAUD, CIBAUD, IUCLC, OLCUC, XCASE
stdlib/src/termios.rs:138:46    - Unknown word (IUCLC)           -- target::{CBAUD, CIBAUD, IUCLC, OLCUC, XCASE};
stdlib/src/termios.rs:138:53    - Unknown word (OLCUC)           -- CBAUD, CIBAUD, IUCLC, OLCUC, XCASE};
stdlib/src/termios.rs:138:60    - Unknown word (XCASE)           -- CIBAUD, IUCLC, OLCUC, XCASE};
stdlib/src/termios.rs:14:58     - Unknown word (CIBAUD)     -- 0000, B4000000, and CIBAUD
stdlib/src/termios.rs:151:31    - Unknown word (VSWTC)           -- termios::os::target::{VSWTC, VSWTC as VSWTCH};
stdlib/src/termios.rs:151:38    - Unknown word (VSWTC)           -- os::target::{VSWTC, VSWTC as VSWTCH};
stdlib/src/termios.rs:151:47    - Unknown word (VSWTCH)          -- target::{VSWTC, VSWTC as VSWTCH};
stdlib/src/termios.rs:154:31    - Unknown word (VSWTCH)          -- termios::os::target::{VSWTCH, VSWTCH as VSWTC};
stdlib/src/termios.rs:154:39    - Unknown word (VSWTCH)          -- os::target::{VSWTCH, VSWTCH as VSWTC};
stdlib/src/termios.rs:154:49    - Unknown word (VSWTC)           -- :{VSWTCH, VSWTCH as VSWTC};
stdlib/src/termios.rs:18:14     - Unknown word (CNUL)       -- // CNUL, COMMON, CQUIT, CRPRNT
stdlib/src/termios.rs:18:65     - Unknown word (CSWTCH)     -- CSTART, CSTOP, CSUSP, CSWTCH, CWERASE
stdlib/src/termios.rs:21:14     - Unknown word (IOCSIZE)    -- // IOCSIZE_MASK, IOCSIZE_SHIFT
stdlib/src/termios.rs:21:28     - Unknown word (IOCSIZE)    -- IOCSIZE_MASK, IOCSIZE_SHIFT
stdlib/src/termios.rs:23:32     - Unknown word (NSWTCH)     -- NOTE: I have only found NSWTCH on cygwin, so please
stdlib/src/termios.rs:30:14     - Unknown word (TCSBRKP)    -- // TCSBRKP, TIOCGICOUNT, TIOCGLCKTRMIOS
stdlib/src/termios.rs:30:23     - Unknown word (TIOCGICOUNT) -- // TCSBRKP, TIOCGICOUNT, TIOCGLCKTRMIOS, TIOCSERCONFI
stdlib/src/termios.rs:30:36     - Unknown word (TIOCGLCKTRMIOS) -- TCSBRKP, TIOCGICOUNT, TIOCGLCKTRMIOS, TIOCSERCONFIG, TIOCSERGETLSR
stdlib/src/termios.rs:30:52     - Unknown word (TIOCSERCONFIG)  -- TIOCGICOUNT, TIOCGLCKTRMIOS, TIOCSERCONFIG, TIOCSERGETLSR, TIOCSERGETMUL
stdlib/src/termios.rs:30:67     - Unknown word (TIOCSERGETLSR)  -- IOCGLCKTRMIOS, TIOCSERCONFIG, TIOCSERGETLSR, TIOCSERGETMULTI,
stdlib/src/termios.rs:30:82     - Unknown word (TIOCSERGETMULTI) -- TIOCSERCONFIG, TIOCSERGETLSR, TIOCSERGETMULTI,
stdlib/src/termios.rs:31:14     - Unknown word (TIOCSERGSTRUCT)  -- // TIOCSERGSTRUCT, TIOCSERGWILD, TIOCSERSETMULT
stdlib/src/termios.rs:31:30     - Unknown word (TIOCSERGWILD)    -- TIOCSERGSTRUCT, TIOCSERGWILD, TIOCSERSETMULTI, TIOCSERSWIL
stdlib/src/termios.rs:31:44     - Unknown word (TIOCSERSETMULTI) -- TIOCSERGSTRUCT, TIOCSERGWILD, TIOCSERSETMULTI, TIOCSERSWILD, TIOCSER
stdlib/src/termios.rs:31:61     - Unknown word (TIOCSERSWILD)    -- IOCSERGWILD, TIOCSERSETMULTI, TIOCSERSWILD, TIOCSER_TEMT,
stdlib/src/termios.rs:31:75     - Unknown word (TIOCSER)         -- IOCSERSETMULTI, TIOCSERSWILD, TIOCSER_TEMT,
stdlib/src/termios.rs:31:83     - Unknown word (TEMT)            -- TIOCSERSWILD, TIOCSER_TEMT,
stdlib/src/termios.rs:32:14     - Unknown word (TIOCSLCKTRMIOS)  -- // TIOCSLCKTRMIOS, TIOCSSERIAL, TIOCTTYGSTRUCT
stdlib/src/termios.rs:32:30     - Unknown word (TIOCSSERIAL)     -- TIOCSLCKTRMIOS, TIOCSSERIAL, TIOCTTYGSTRUCT
stdlib/src/termios.rs:32:43     - Unknown word (TIOCTTYGSTRUCT)  -- TIOCSLCKTRMIOS, TIOCSSERIAL, TIOCTTYGSTRUCT
stdlib/src/termios.rs:33:28     - Unknown word (illumos)         -- cfg(any(target_os = "illumos", target_os = "solaris
stdlib/src/termios.rs:35:31     - Unknown word (CSWTCH)          -- libc::{CSTART, CSTOP, CSWTCH};
stdlib/src/termios.rs:65:34     - Unknown word (TCGETS)          -- IBSHIFT, TCFLSH, TCGETA, TCGETS, TCSBRK, TCSETA, TCSETAF
stdlib/src/termios.rs:65:42     - Unknown word (TCSBRK)          -- TCFLSH, TCGETA, TCGETS, TCSBRK, TCSETA, TCSETAF, TCSETAW
stdlib/src/termios.rs:65:76     - Unknown word (TCSETS)          -- TCSETA, TCSETAF, TCSETAW, TCSETS, TCSETSF,
stdlib/src/termios.rs:65:84     - Unknown word (TCSETSF)         -- TCSETAF, TCSETAW, TCSETS, TCSETSF,
stdlib/src/termios.rs:65:9      - Unknown word (IBSHIFT)         -- IBSHIFT, TCFLSH, TCGETA, TCGETS
stdlib/src/termios.rs:66:18     - Unknown word (TCXONC)          -- TCSETSW, TCXONC, TIOCGSERIAL, TIOCGSOFTCAR
stdlib/src/termios.rs:66:26     - Unknown word (TIOCGSERIAL)     -- TCSETSW, TCXONC, TIOCGSERIAL, TIOCGSOFTCAR, TIOCINQ
stdlib/src/termios.rs:66:39     - Unknown word (TIOCGSOFTCAR)    -- TCXONC, TIOCGSERIAL, TIOCGSOFTCAR, TIOCINQ, TIOCLINUX
stdlib/src/termios.rs:66:53     - Unknown word (TIOCINQ)         -- TIOCGSERIAL, TIOCGSOFTCAR, TIOCINQ, TIOCLINUX, TIOCSSOFTCAR
stdlib/src/termios.rs:66:62     - Unknown word (TIOCLINUX)       -- TIOCGSOFTCAR, TIOCINQ, TIOCLINUX, TIOCSSOFTCAR, XTABS
stdlib/src/termios.rs:66:73     - Unknown word (TIOCSSOFTCAR)    -- TIOCINQ, TIOCLINUX, TIOCSSOFTCAR, XTABS,
stdlib/src/termios.rs:66:9      - Unknown word (TCSETSW)         -- TCSETSW, TCXONC, TIOCGSERIAL
stdlib/src/termios.rs:86:22     - Unknown word (illumos)         -- target_os = "illumos",
vm/Cargo.toml:95:1      - Unknown word (rustix)     -- rustix = { workspace = true
vm/src/anystr.rs:183:9     - Unknown word (splitw)     -- splitw: SW,
vm/src/anystr.rs:199:13    - Unknown word (splitw)     -- splitw(self, maxsplit, vm)
vm/src/buffer.rs:456:24    - Unknown word (primint)    -- macro_rules! make_pack_primint {
vm/src/buffer.rs:505:11    - Unknown word (primint)    -- make_pack_primint!(i8);
vm/src/buffer.rs:506:11    - Unknown word (primint)    -- make_pack_primint!(u8);
vm/src/buffer.rs:507:11    - Unknown word (primint)    -- make_pack_primint!(i16);
vm/src/buffer.rs:508:11    - Unknown word (primint)    -- make_pack_primint!(u16);
vm/src/builtins/asyncgenerator.rs:18:12     - Unknown word (Coro)       -- inner: Coro,
vm/src/builtins/asyncgenerator.rs:31:15     - Unknown word (coro)       -- pub fn as_coro(&self) -> &Coro {
vm/src/builtins/asyncgenerator.rs:31:31     - Unknown word (Coro)       -- fn as_coro(&self) -> &Coro {
vm/src/builtins/asyncgenerator.rs:37:20     - Unknown word (Coro)       -- inner: Coro::new(frame, name),
vm/src/builtins/asyncgenerator.rs:5:16      - Unknown word (Coro)       -- coroutine::Coro,
vm/src/builtins/bytes.rs:544:45    - Unknown word (emplemented) -- 'utf-8' and 'ascii' emplemented
vm/src/builtins/code.rs:286:11    - Unknown word (kwonlyargcount) -- fn co_kwonlyargcount(&self) -> usize {
vm/src/builtins/code.rs:28:8      - Unknown word (kwonlyargcount) -- co_kwonlyargcount: OptionalArg<u32>,
vm/src/builtins/code.rs:358:45    - Unknown word (kwonlyargcount) -- count = match args.co_kwonlyargcount {
vm/src/builtins/complex.rs:56:61     - Unknown word (coereced)   -- complex originally or coereced into one
vm/src/builtins/coroutine.rs:126:5     - Unknown word (coro)       -- coro: PyRef<PyCoroutine>
vm/src/builtins/coroutine.rs:139:14    - Unknown word (coro)       -- self.coro.send(val, vm)
vm/src/builtins/coroutine.rs:14:6      - Unknown word (Coro)       -- // PyCoro_Type in CPython
vm/src/builtins/coroutine.rs:150:14    - Unknown word (coro)       -- self.coro.throw(exc_type, exc
vm/src/builtins/coroutine.rs:16:12     - Unknown word (Coro)       -- inner: Coro,
vm/src/builtins/coroutine.rs:27:15     - Unknown word (coro)       -- pub fn as_coro(&self) -> &Coro {
vm/src/builtins/coroutine.rs:27:31     - Unknown word (Coro)       -- fn as_coro(&self) -> &Coro {
vm/src/builtins/coroutine.rs:33:20     - Unknown word (Coro)       -- inner: Coro::new(frame, name),
vm/src/builtins/coroutine.rs:49:30     - Unknown word (coro)       -- PyCoroutineWrapper { coro: zelf }
vm/src/builtins/coroutine.rs:4:16      - Unknown word (Coro)       -- coroutine::Coro,
vm/src/builtins/dict.rs:285:13    - Unknown word (dicted)     -- let dicted: Result<PyDictRef,
vm/src/builtins/dict.rs:286:28    - Unknown word (dicted)     -- if let Ok(other) = dicted {
vm/src/builtins/dict.rs:401:13    - Unknown word (dicted)     -- let dicted: Result<PyDictRef,
vm/src/builtins/dict.rs:402:28    - Unknown word (dicted)     -- if let Ok(other) = dicted {
vm/src/builtins/frame.rs:57:10     - Unknown word (lasti)      -- fn f_lasti(&self) -> u32 {
vm/src/builtins/frame.rs:58:14     - Unknown word (lasti)      -- self.lasti()
vm/src/builtins/function.rs:111:40    - Unknown word (nexpected)  -- fastlocals.iter_mut().take(nexpected_args),
vm/src/builtins/function.rs:125:24    - Unknown word (nexpected)  -- if nargs > nexpected_args {
vm/src/builtins/function.rs:129:21    - Unknown word (nexpected)  -- nexpected_args,
vm/src/builtins/function.rs:188:30    - Unknown word (kwdefaults) -- let mut defaults_and_kwdefaults = None;
vm/src/builtins/function.rs:192:30    - Unknown word (kwdefaults) -- defaults_and_kwdefaults
vm/src/builtins/function.rs:199:20    - Unknown word (nexpected)  -- if nargs < nexpected_args {
vm/src/builtins/function.rs:343:16    - Unknown word (coro)       -- let is_coro = code.flags.contains
vm/src/builtins/function.rs:344:27    - Unknown word (coro)       -- match (is_gen, is_coro) {
vm/src/builtins/function.rs:35:18     - Unknown word (kwdefaults) -- defaults_and_kwdefaults: PyMutex<(Option<PyTupleRef
vm/src/builtins/function.rs:50:27     - Unknown word (kwdefaults) -- self.defaults_and_kwdefaults.traverse(tracer_fn)
vm/src/builtins/function.rs:73:26     - Unknown word (kwdefaults) -- defaults_and_kwdefaults: PyMutex::new((defaults
vm/src/builtins/function.rs:93:13     - Unknown word (nexpected)  -- let nexpected_args = code.arg_count
vm/src/builtins/function.rs:99:16     - Unknown word (starargs)   -- // and starargs and kwargs.
vm/src/builtins/function/jitfunc.rs:172:20    - Unknown word (kwdefaults) -- let (defaults, kwdefaults) = func.defaults_and
vm/src/builtins/function/jitfunc.rs:172:52    - Unknown word (kwdefaults) -- = func.defaults_and_kwdefaults.lock().clone();
vm/src/builtins/function/jitfunc.rs:185:37    - Unknown word (kwdefaults) -- kw_only_defaults) = kwdefaults {
vm/src/builtins/function/jitfunc.rs:89:14     - Unknown word (Jitting)    -- "Jitting function requires arguments
vm/src/builtins/generator.rs:19:12     - Unknown word (Coro)       -- inner: Coro,
vm/src/builtins/generator.rs:30:15     - Unknown word (coro)       -- pub fn as_coro(&self) -> &Coro {
vm/src/builtins/generator.rs:30:31     - Unknown word (Coro)       -- fn as_coro(&self) -> &Coro {
vm/src/builtins/generator.rs:36:20     - Unknown word (Coro)       -- inner: Coro::new(frame, name),
vm/src/builtins/generator.rs:63:11     - Unknown word (yieldfrom)  -- fn gi_yieldfrom(&self, _vm: &VirtualMachine
vm/src/builtins/generator.rs:8:16      - Unknown word (Coro)       -- coroutine::Coro,
vm/src/builtins/memory.rs:107:47    - Unknown word (memeoryview) -- function to create the memeoryview if the buffer is exporting
vm/src/builtins/memory.rs:47:37     - Unknown word (memeoryview) -- the possible another memeoryview is viewing from it
vm/src/builtins/memory.rs:644:18    - Unknown word (fortain)     -- // TODO: fortain order
vm/src/builtins/set.rs:463:48    - Unknown word (frozensets) -- patterns arising in nested frozensets
vm/src/builtins/slice.rs:204:15    - Unknown word (XXPRIME)    -- const XXPRIME_1: PyUHash = if cfg
vm/src/builtins/slice.rs:209:15    - Unknown word (XXPRIME)    -- const XXPRIME_2: PyUHash = if cfg
vm/src/builtins/slice.rs:214:15    - Unknown word (XXPRIME)    -- const XXPRIME_5: PyUHash = if cfg
vm/src/builtins/slice.rs:225:23    - Unknown word (XXPRIME)    -- let mut acc = XXPRIME_5;
vm/src/builtins/slice.rs:231:54    - Unknown word (XXPRIME)    -- add(lane.wrapping_mul(XXPRIME_2));
vm/src/builtins/str.rs:1611:21   - Unknown word (Ωppercases) -- ("Greek Ωppercases ...", "greek ωppercases
vm/src/builtins/str.rs:1611:45   - Unknown word (ωppercases) -- ppercases ...", "greek ωppercases ..."),
vm/src/builtins/str.rs:1612:21   - Unknown word (ῼitlecases) -- ("Greek ῼitlecases ...", "greek ῳitlecases
vm/src/builtins/str.rs:1612:45   - Unknown word (ῳitlecases) -- itlecases ...", "greek ῳitlecases ..."),
vm/src/builtins/str.rs:1623:16   - Unknown word (Titlecased) -- "A Titlecased Line",
vm/src/builtins/str.rs:1624:17   - Unknown word (Titlecased) -- "A\nTitlecased Line",
vm/src/builtins/str.rs:1625:16   - Unknown word (Titlecased) -- "A Titlecased, Line",
vm/src/builtins/str.rs:1626:20   - Unknown word (Ωppercases) -- "Greek Ωppercases ...",
vm/src/builtins/str.rs:1627:20   - Unknown word (ῼitlecases) -- "Greek ῼitlecases ...",
vm/src/builtins/str.rs:1770:33   - Unknown word (rmatch)     -- (offset, _) in self.rmatch_indices(|c: char| c
vm/src/builtins/str.rs:454:48    - Unknown word (cmpxchg)    -- len, we don't need a cmpxchg loop, since it'll always
vm/src/builtins/str.rs:775:18    - Unknown word (titlecased) -- /// Return a titlecased version of the string
vm/src/builtins/super.rs:239:4     - Unknown word (supercheck) -- fn supercheck(ty: PyTypeRef, obj:
vm/src/builtins/super.rs:273:26    - Unknown word (cmeth)      -- def cmeth(cls, arg):\n
vm/src/builtins/super.rs:274:30    - Unknown word (cmeth)      -- super().cmeth(arg)\n";
vm/src/builtins/super.rs:32:28     - Unknown word (supercheck) -- let obj_type = supercheck(typ.clone(), obj.clone
vm/src/builtins/traceback.rs:14:9      - Unknown word (lasti)      -- pub lasti: u32,
vm/src/builtins/traceback.rs:29:60     - Unknown word (lasti)      -- >, frame: FrameRef, lasti: u32, lineno: LineNumber
vm/src/builtins/traceback.rs:33:13     - Unknown word (lasti)      -- lasti,
vm/src/builtins/traceback.rs:44:11     - Unknown word (lasti)      -- fn tb_lasti(&self) -> u32 {
vm/src/builtins/traceback.rs:45:14     - Unknown word (lasti)      -- self.lasti
vm/src/builtins/tuple.rs:336:39    - Unknown word (tuplesubclass) -- just return tup, or tuplesubclass(tup), which'll copy
vm/src/builtins/type.rs:454:51    - Unknown word (stablized)  -- intrinsics::likely once it is stablized
vm/src/codecs.rs:158:18    - Unknown word (surrogatepass) -- "surrogatepass_errors" => surrogatepass
vm/src/codecs.rs:158:43    - Unknown word (surrogatepass) -- surrogatepass_errors" => surrogatepass_errors as EMPTY,
vm/src/codecs.rs:159:18    - Unknown word (surrogateescape) -- "surrogateescape_errors" => surrogateescape
vm/src/codecs.rs:159:45    - Unknown word (surrogateescape) -- surrogateescape_errors" => surrogateescape_errors as EMPTY
vm/src/codecs.rs:171:15    - Unknown word (surrogatepass)   -- ("surrogatepass", methods[6].build_function
vm/src/codecs.rs:172:15    - Unknown word (surrogateescape) -- ("surrogateescape", methods[7].build_function
vm/src/codecs.rs:562:4     - Unknown word (surrogatepass)   -- fn surrogatepass_errors(err: PyObjectRef
vm/src/codecs.rs:677:4     - Unknown word (surrogateescape) -- fn surrogateescape_errors(err: PyObjectRef
vm/src/coroutine.rs:100:35    - Unknown word (lasti)      -- value = if self.frame.lasti() > 0 {
vm/src/coroutine.rs:28:12     - Unknown word (Coro)       -- pub struct Coro {
vm/src/coroutine.rs:50:6      - Unknown word (Coro)       -- impl Coro {
vm/src/coroutine.rs:52:9      - Unknown word (Coro)       -- Coro {
vm/src/exceptions.rs:214:17    - Unknown word (rtext)      -- let rtext = text.as_str().trim
vm/src/exceptions.rs:215:17    - Unknown word (ltext)      -- let ltext = rtext.trim_start_matches
vm/src/exceptions.rs:215:25    - Unknown word (rtext)      -- let ltext = rtext.trim_start_matches(
vm/src/exceptions.rs:216:27    - Unknown word (rtext)      -- let spaces = (rtext.len() - ltext.len()
vm/src/exceptions.rs:216:41    - Unknown word (ltext)      -- spaces = (rtext.len() - ltext.len()) as isize;
vm/src/exceptions.rs:218:40    - Unknown word (ltext)      -- writeln!(output, "    {}", ltext)?;
vm/src/exceptions.rs:240:25    - Unknown word (caretspace) -- let caretspace = ltext.chars().collect
vm/src/exceptions.rs:240:38    - Unknown word (ltext)      -- let caretspace = ltext.chars().collect::<Vec
vm/src/exceptions.rs:253:25    - Unknown word (caretspace) -- caretspace,
vm/src/exceptions.rs:50:46     - Unknown word (excepthook) -- chain by calling sys.excepthook
vm/src/exceptions.rs:64:19     - Unknown word (excepthook) -- if let Ok(excepthook) = vm.sys_module.get
vm/src/exceptions.rs:64:57     - Unknown word (excepthook) -- sys_module.get_attr("excepthook", vm) {
vm/src/exceptions.rs:66:34     - Unknown word (excepthook) -- if let Err(eh_exc) = excepthook.call((exc_type, exc
vm/src/exceptions.rs:67:55     - Unknown word (excepthook) -- eh_exc, "Error in sys.excepthook:");
vm/src/exceptions.rs:851:13    - Unknown word (excs)       -- let excs = &ctx.exceptions;
vm/src/exceptions.rs:853:44    - Unknown word (excs)       -- eException::extend_class(ctx, excs.base_exception_type
vm/src/exceptions.rs:856:54    - Unknown word (excs)       -- PyBaseExceptionGroup, ctx, excs.base_exception_group
vm/src/exceptions.rs:857:61    - Unknown word (excs)       -- readonly_getset("message", excs.base_exception_group
vm/src/exceptions.rs:858:67    - Unknown word (excs)       -- getset("exceptions", excs.base_exception_group
vm/src/frame.rs:1022:27   - Unknown word (Coro)       -- // _PyCoro_GetAwaitableIter in
vm/src/frame.rs:105:64    - Unknown word (lasti)      -- duplicate of FrameState.lasti, but it's faster to
vm/src/frame.rs:108:16    - Unknown word (Lasti)      -- pub lasti: Lasti,
vm/src/frame.rs:108:9     - Unknown word (lasti)      -- pub lasti: Lasti,
vm/src/frame.rs:12:16     - Unknown word (Coro)       -- coroutine::Coro,
vm/src/frame.rs:150:13    - Unknown word (lasti)      -- lasti: 0,
vm/src/frame.rs:1544:66   - Unknown word (Coro)       -- PyObject) -> Option<&'a Coro> {
vm/src/frame.rs:160:13    - Unknown word (lasti)      -- lasti: Lasti::new(0),
vm/src/frame.rs:160:20    - Unknown word (Lasti)      -- lasti: Lasti::new(0),
vm/src/frame.rs:304:16    - Unknown word (Lasti)      -- lasti: &'a Lasti,
vm/src/frame.rs:432:39    - Unknown word (coro)       -- thrower = if let Some(coro) = self.builtin_coro
vm/src/frame.rs:432:60    - Unknown word (coro)       -- coro) = self.builtin_coro(gen) {
vm/src/frame.rs:433:32    - Unknown word (coro)       -- Some(Either::A(coro))
vm/src/frame.rs:440:31    - Unknown word (coro)       -- Either::A(coro) => coro
vm/src/frame.rs:440:40    - Unknown word (coro)       -- Either::A(coro) => coro
vm/src/frame.rs:87:5      - Unknown word (lasti)      -- lasti: u32,
vm/src/frame.rs:91:6      - Unknown word (Lasti)      -- type Lasti = atomic::AtomicU32
vm/src/frame.rs:93:6      - Unknown word (Lasti)      -- type Lasti = std::cell::Cell<u
vm/src/frame.rs:998:21    - Unknown word (aiterable)  -- let aiterable = self.pop_value();
vm/src/frame.rs:999:53    - Unknown word (aiterable)  -- call_special_method(&aiterable, identifier!(vm, __aiter
vm/src/function/argument.rs:121:13    - Unknown word (kwargc)     -- let kwargc = kwarg_names.len()
vm/src/function/argument.rs:122:36    - Unknown word (kwargc)     -- posargc = total_argc - kwargc;
vm/src/function/argument.rs:279:53    - Unknown word (keyqord)    -- error(format!("Required keyqord only argument {name
vm/src/function/builtin.rs:74:26     - Unknown word (sizedness)  -- requirements of zero-sizedness apply, see that documentation
vm/src/function/protocol.rs:108:13    - Unknown word (iterfn)     -- let iterfn = {
vm/src/function/protocol.rs:110:17    - Unknown word (iterfn)     -- let iterfn = cls.mro_find_map(
vm/src/function/protocol.rs:111:16    - Unknown word (iterfn)     -- if iterfn.is_none() && !cls.has
vm/src/function/protocol.rs:79:5      - Unknown word (iterfn)     -- iterfn: Option<crate::types
vm/src/function/protocol.rs:95:43     - Unknown word (iterfn)     -- PyIter::new(match self.iterfn {
vm/src/import.rs:197:27    - Unknown word (lasti)      -- traceback.lasti,
vm/src/object/core.rs:1297:35   - Unknown word (dfghjkl)    -- obj = ctx.new_bytes(b"dfghjkl".to_vec());
vm/src/object/traverse.rs:29:50     - Unknown word (Pyef)       -- a `PyObjectRef` or `Pyef<T>` in `traverse()`
vm/src/object/traverse_object.rs:54:56     - Unknown word (maintaince) -- pointer* to a struct for maintaince weak ref, so no ownership
vm/src/object/traverse_object.rs:74:56     - Unknown word (maintaince) -- pointer* to a struct for maintaince weak ref, so no ownership
vm/src/ospath.rs:184:13    - Unknown word (excp)       -- let excp = self.error.to_pyexception
vm/src/ospath.rs:187:13    - Unknown word (excp)       -- excp.as_object()
vm/src/ospath.rs:192:13    - Unknown word (excp)       -- excp.as_object()
vm/src/ospath.rs:196:9     - Unknown word (excp)       -- excp
vm/src/protocol/buffer.rs:134:32    - Unknown word (Manaully)   -- wrap PyBuffer in the ManaullyDrop to prevent drop
vm/src/protocol/buffer.rs:267:43    - Unknown word (conti)      -- segment<F>(&self, try_conti: bool, mut f: F)
vm/src/protocol/buffer.rs:275:16    - Unknown word (conti)      -- if try_conti && self.is_last_dim
vm/src/protocol/buffer.rs:282:35    - Unknown word (CONTI)      -- each_segment<F, const CONTI: bool>(&self, mut index
vm/src/protocol/buffer.rs:288:16    - Unknown word (CONTI)      -- if CONTI {
vm/src/protocol/buffer.rs:300:41    - Unknown word (CONTI)      -- for_each_segment::<F, CONTI>(index + suboffset,
vm/src/protocol/buffer.rs:306:47    - Unknown word (conti)      -- self, other: &Self, try_conti: bool, mut f: F)
vm/src/protocol/buffer.rs:314:16    - Unknown word (conti)      -- if try_conti && self.is_last_dim
vm/src/protocol/buffer.rs:321:25    - Unknown word (CONTI)      -- fn _zip_eq<F, const CONTI: bool>(
vm/src/protocol/buffer.rs:335:16    - Unknown word (CONTI)      -- if CONTI {
vm/src/protocol/buffer.rs:386:22    - Unknown word (fortain)    -- // TODO: support fortain order
vm/src/protocol/sequence.rs:119:30    - Unknown word (apear)      -- / if both arguments apear to be sequences, try
vm/src/protocol/sequence.rs:157:30    - Unknown word (apear)      -- / if both arguments apear to be sequences, try
vm/src/protocol/sequence.rs:231:59    - Unknown word (unsliceable) -- format!("'{}' object is unsliceable", self.obj.class())
vm/src/stdlib/ast.rs:380:26    - Unknown word (BDFL)       -- const CO_FUTURE_BARRY_AS_BDFL: i32 = 0x400000;
vm/src/stdlib/ast.rs:395:26    - Unknown word (BDFL)       -- CO_FUTURE_BARRY_AS_BDFL
vm/src/stdlib/builtins.rs:436:26    - Unknown word (normalish)  -- // everything is normalish, we can just rely on
vm/src/stdlib/builtins.rs:586:45    - Unknown word (iret)       -- iterator).next(vm).map(|iret| match iret {
vm/src/stdlib/builtins.rs:586:57    - Unknown word (iret)       -- vm).map(|iret| match iret {
vm/src/stdlib/codecs.rs:351:17    - Unknown word (pycodecs)   -- fn delegate_pycodecs(
vm/src/stdlib/codecs.rs:358:38    - Unknown word (pycodecs)   -- module = vm.import("_pycodecs", 0)?;
vm/src/stdlib/codecs.rs:363:27    - Unknown word (pycodecs)   -- macro_rules! delegate_pycodecs {
vm/src/stdlib/codecs.rs:368:22    - Unknown word (pycodecs)   -- delegate_pycodecs(&FUNC, stringify!($name
vm/src/stdlib/codecs.rs:374:18    - Unknown word (pycodecs)   -- delegate_pycodecs!(mbcs_encode, args,
vm/src/stdlib/errno.rs:30:13     - Unknown word (WSABASEERR) -- WSABASEERR, WSADESCRIPTION_LEN
vm/src/stdlib/errno.rs:30:25     - Unknown word (WSADESCRIPTION) -- WSABASEERR, WSADESCRIPTION_LEN, WSAEACCES, WSAEADDRINUSE
vm/src/stdlib/errno.rs:30:45     - Unknown word (WSAEACCES)      -- WSADESCRIPTION_LEN, WSAEACCES, WSAEADDRINUSE, WSAEADDRNOTAV
vm/src/stdlib/errno.rs:30:71     - Unknown word (WSAEADDRNOTAVAIL) -- WSAEACCES, WSAEADDRINUSE, WSAEADDRNOTAVAIL,
vm/src/stdlib/errno.rs:31:30     - Unknown word (WSAEALREADY)      -- WSAEAFNOSUPPORT, WSAEALREADY, WSAEBADF, WSAECANCELLED
vm/src/stdlib/errno.rs:31:43     - Unknown word (WSAEBADF)         -- WSAEAFNOSUPPORT, WSAEALREADY, WSAEBADF, WSAECANCELLED, WSAECONNABORT
vm/src/stdlib/errno.rs:31:53     - Unknown word (WSAECANCELLED)    -- WSAEALREADY, WSAEBADF, WSAECANCELLED, WSAECONNABORTED,
vm/src/stdlib/errno.rs:32:45     - Unknown word (WSAEDESTADDRREQ)  -- AECONNREFUSED, WSAECONNRESET, WSAEDESTADDRREQ, WSAEDISCON, WSAEDQUOT
vm/src/stdlib/errno.rs:32:62     - Unknown word (WSAEDISCON)       -- AECONNRESET, WSAEDESTADDRREQ, WSAEDISCON, WSAEDQUOT, WSAEFAULT
vm/src/stdlib/errno.rs:32:74     - Unknown word (WSAEDQUOT)        -- WSAEDESTADDRREQ, WSAEDISCON, WSAEDQUOT, WSAEFAULT,
vm/src/stdlib/errno.rs:32:85     - Unknown word (WSAEFAULT)        -- WSAEDISCON, WSAEDQUOT, WSAEFAULT,
vm/src/stdlib/errno.rs:33:13     - Unknown word (WSAEHOSTDOWN)     -- WSAEHOSTDOWN, WSAEHOSTUNREACH, WSAEINPROGR
vm/src/stdlib/errno.rs:33:70     - Unknown word (WSAEINVAL)        -- WSAEINPROGRESS, WSAEINTR, WSAEINVAL,
vm/src/stdlib/errno.rs:34:13     - Unknown word (WSAEINVALIDPROCTABLE) -- WSAEINVALIDPROCTABLE, WSAEINVALIDPROVIDER
vm/src/stdlib/errno.rs:34:35     - Unknown word (WSAEINVALIDPROVIDER)  -- WSAEINVALIDPROCTABLE, WSAEINVALIDPROVIDER, WSAEISCONN, WSAELOOP
vm/src/stdlib/errno.rs:34:56     - Unknown word (WSAEISCONN)           -- WSAEINVALIDPROVIDER, WSAEISCONN, WSAELOOP, WSAEMFILE
vm/src/stdlib/errno.rs:34:68     - Unknown word (WSAELOOP)             -- EINVALIDPROVIDER, WSAEISCONN, WSAELOOP, WSAEMFILE,
vm/src/stdlib/errno.rs:34:78     - Unknown word (WSAEMFILE)            -- WSAEISCONN, WSAELOOP, WSAEMFILE,
vm/src/stdlib/errno.rs:35:13     - Unknown word (WSAEMSGSIZE)          -- WSAEMSGSIZE, WSAENAMETOOLONG, WSAENETDOWN
vm/src/stdlib/errno.rs:35:56     - Unknown word (WSAENETRESET)         -- WSAENAMETOOLONG, WSAENETDOWN, WSAENETRESET, WSAENETUNREACH, WSAENOBUFS
vm/src/stdlib/errno.rs:35:86     - Unknown word (WSAENOBUFS)           -- WSAENETRESET, WSAENETUNREACH, WSAENOBUFS,
vm/src/stdlib/errno.rs:36:13     - Unknown word (WSAENOMORE)           -- WSAENOMORE, WSAENOPROTOOPT, WSAENOTCONN
vm/src/stdlib/errno.rs:36:25     - Unknown word (WSAENOPROTOOPT)       -- WSAENOMORE, WSAENOPROTOOPT, WSAENOTCONN, WSAENOTEMPTY
vm/src/stdlib/errno.rs:36:41     - Unknown word (WSAENOTCONN)          -- WSAENOMORE, WSAENOPROTOOPT, WSAENOTCONN, WSAENOTEMPTY, WSAENOTSOCK
vm/src/stdlib/errno.rs:36:54     - Unknown word (WSAENOTEMPTY)         -- WSAENOPROTOOPT, WSAENOTCONN, WSAENOTEMPTY, WSAENOTSOCK, WSAEOPNOTSUPP
vm/src/stdlib/errno.rs:36:81     - Unknown word (WSAEOPNOTSUPP)        -- WSAENOTEMPTY, WSAENOTSOCK, WSAEOPNOTSUPP,
vm/src/stdlib/errno.rs:37:13     - Unknown word (WSAEPFNOSUPPORT)      -- WSAEPFNOSUPPORT, WSAEPROCLIM, WSAEPROTONOSUPP
vm/src/stdlib/errno.rs:37:30     - Unknown word (WSAEPROCLIM)          -- WSAEPFNOSUPPORT, WSAEPROCLIM, WSAEPROTONOSUPPORT
vm/src/stdlib/errno.rs:37:43     - Unknown word (WSAEPROTONOSUPPORT)   -- WSAEPFNOSUPPORT, WSAEPROCLIM, WSAEPROTONOSUPPORT, WSAEPROTOTYPE,
vm/src/stdlib/errno.rs:37:63     - Unknown word (WSAEPROTOTYPE)        -- WSAEPROTONOSUPPORT, WSAEPROTOTYPE,
vm/src/stdlib/errno.rs:38:13     - Unknown word (WSAEPROVIDERFAILEDINIT) -- WSAEPROVIDERFAILEDINIT, WSAEREFUSED, WSAEREMOTE
vm/src/stdlib/errno.rs:38:37     - Unknown word (WSAEREFUSED)            -- WSAEPROVIDERFAILEDINIT, WSAEREFUSED, WSAEREMOTE, WSAESHUTDOWN
vm/src/stdlib/errno.rs:38:50     - Unknown word (WSAEREMOTE)             -- VIDERFAILEDINIT, WSAEREFUSED, WSAEREMOTE, WSAESHUTDOWN, WSAESOCKTNOSUP
vm/src/stdlib/errno.rs:38:62     - Unknown word (WSAESHUTDOWN)           -- WSAEREFUSED, WSAEREMOTE, WSAESHUTDOWN, WSAESOCKTNOSUPPORT
vm/src/stdlib/errno.rs:38:76     - Unknown word (WSAESOCKTNOSUPPORT)     -- WSAEREMOTE, WSAESHUTDOWN, WSAESOCKTNOSUPPORT,
vm/src/stdlib/errno.rs:39:13     - Unknown word (WSAESTALE)              -- WSAESTALE, WSAETIMEDOUT, WSAETOOMANYREF
vm/src/stdlib/errno.rs:39:38     - Unknown word (WSAETOOMANYREFS)        -- WSAESTALE, WSAETIMEDOUT, WSAETOOMANYREFS, WSAEUSERS, WSAEWOULDBLOCK
vm/src/stdlib/errno.rs:39:55     - Unknown word (WSAEUSERS)              -- SAETIMEDOUT, WSAETOOMANYREFS, WSAEUSERS, WSAEWOULDBLOCK, WSAHOST
vm/src/stdlib/errno.rs:39:82     - Unknown word (WSAHOST)                -- WSAEUSERS, WSAEWOULDBLOCK, WSAHOST_NOT_FOUND,
vm/src/stdlib/errno.rs:40:13     - Unknown word (WSAID)                  -- WSAID_ACCEPTEX, WSAID_CONNECTEX
vm/src/stdlib/errno.rs:40:19     - Unknown word (ACCEPTEX)               -- WSAID_ACCEPTEX, WSAID_CONNECTEX, WSAID
vm/src/stdlib/errno.rs:40:29     - Unknown word (WSAID)                  -- WSAID_ACCEPTEX, WSAID_CONNECTEX, WSAID_DISCONNECTEX
vm/src/stdlib/errno.rs:40:35     - Unknown word (CONNECTEX)              -- WSAID_ACCEPTEX, WSAID_CONNECTEX, WSAID_DISCONNECTEX
vm/src/stdlib/errno.rs:40:46     - Unknown word (WSAID)                  -- ACCEPTEX, WSAID_CONNECTEX, WSAID_DISCONNECTEX, WSAID
vm/src/stdlib/errno.rs:40:52     - Unknown word (DISCONNECTEX)           -- WSAID_CONNECTEX, WSAID_DISCONNECTEX, WSAID_GETACCEPTEXSOCKADDRS
vm/src/stdlib/errno.rs:40:66     - Unknown word (WSAID)                  -- WSAID_DISCONNECTEX, WSAID_GETACCEPTEXSOCKADDRS
vm/src/stdlib/errno.rs:40:72     - Unknown word (GETACCEPTEXSOCKADDRS)   -- DISCONNECTEX, WSAID_GETACCEPTEXSOCKADDRS,
vm/src/stdlib/errno.rs:41:13     - Unknown word (WSAID)                  -- WSAID_TRANSMITFILE, WSAID
vm/src/stdlib/errno.rs:41:62     - Unknown word (WSAPOLL)                -- TRANSMITPACKETS, WSAID_WSAPOLL, WSAID_WSARECVMSG,
vm/src/stdlib/errno.rs:41:77     - Unknown word (WSARECVMSG)             -- WSAID_WSAPOLL, WSAID_WSARECVMSG,
vm/src/stdlib/errno.rs:42:13     - Unknown word (WSANOTINITIALISED)      -- WSANOTINITIALISED, WSANO_DATA, WSANO_RECOVERY
vm/src/stdlib/errno.rs:42:32     - Unknown word (WSANO)                  -- WSANOTINITIALISED, WSANO_DATA, WSANO_RECOVERY
vm/src/stdlib/errno.rs:42:44     - Unknown word (WSANO)                  -- SANOTINITIALISED, WSANO_DATA, WSANO_RECOVERY, WSAPROTOCOL
vm/src/stdlib/errno.rs:42:60     - Unknown word (WSAPROTOCOL)            -- DATA, WSANO_RECOVERY, WSAPROTOCOL_LEN, WSASERVICE_NOT
vm/src/stdlib/errno.rs:42:77     - Unknown word (WSASERVICE)             -- RECOVERY, WSAPROTOCOL_LEN, WSASERVICE_NOT_FOUND,
vm/src/stdlib/errno.rs:43:13     - Unknown word (WSASYSCALLFAILURE)      -- WSASYSCALLFAILURE, WSASYSNOTREADY, WSASYS
vm/src/stdlib/errno.rs:43:32     - Unknown word (WSASYSNOTREADY)         -- WSASYSCALLFAILURE, WSASYSNOTREADY, WSASYS_STATUS_LEN,
vm/src/stdlib/errno.rs:43:48     - Unknown word (WSASYS)                 -- SCALLFAILURE, WSASYSNOTREADY, WSASYS_STATUS_LEN, WSATRY_AGAIN
vm/src/stdlib/errno.rs:43:67     - Unknown word (WSATRY)                 -- WSASYS_STATUS_LEN, WSATRY_AGAIN, WSATYPE_NOT_FOUND
vm/src/stdlib/errno.rs:43:81     - Unknown word (WSATYPE)                -- STATUS_LEN, WSATRY_AGAIN, WSATYPE_NOT_FOUND,
vm/src/stdlib/errno.rs:44:13     - Unknown word (WSAVERNOTSUPPORTED)     -- WSAVERNOTSUPPORTED,
vm/src/stdlib/errno.rs:531:31    - Unknown word (WSASY)                  -- TODO: e!(cfg(windows), WSASY),
vm/src/stdlib/errno.rs:532:22    - Unknown word (WSAEHOSTDOWN)           -- e!(cfg(windows), WSAEHOSTDOWN),
vm/src/stdlib/errno.rs:536:22    - Unknown word (WSAELOOP)               -- e!(cfg(windows), WSAELOOP),
vm/src/stdlib/errno.rs:537:22    - Unknown word (WSAEMFILE)              -- e!(cfg(windows), WSAEMFILE),
vm/src/stdlib/errno.rs:538:22    - Unknown word (WSAESTALE)              -- e!(cfg(windows), WSAESTALE),
vm/src/stdlib/errno.rs:539:22    - Unknown word (WSAVERNOTSUPPORTED)     -- e!(cfg(windows), WSAVERNOTSUPPORTED),
vm/src/stdlib/errno.rs:541:22    - Unknown word (WSAEPROCLIM)            -- e!(cfg(windows), WSAEPROCLIM),
vm/src/stdlib/errno.rs:542:22    - Unknown word (WSAEFAULT)              -- e!(cfg(windows), WSAEFAULT),
vm/src/stdlib/errno.rs:543:22    - Unknown word (WSANOTINITIALISED)      -- e!(cfg(windows), WSANOTINITIALISED),
vm/src/stdlib/errno.rs:544:22    - Unknown word (WSAEUSERS)              -- e!(cfg(windows), WSAEUSERS),
vm/src/stdlib/errno.rs:545:31    - Unknown word (WSAMAKEASYNCREPL)       -- TODO: e!(cfg(windows), WSAMAKEASYNCREPL),
vm/src/stdlib/errno.rs:546:22    - Unknown word (WSAENOPROTOOPT)         -- e!(cfg(windows), WSAENOPROTOOPT),
vm/src/stdlib/errno.rs:549:22    - Unknown word (WSAENOTEMPTY)           -- e!(cfg(windows), WSAENOTEMPTY),
vm/src/stdlib/errno.rs:550:22    - Unknown word (WSAESHUTDOWN)          -- e!(cfg(windows), WSAESHUTDOWN),
vm/src/stdlib/errno.rs:552:22    - Unknown word (WSAETOOMANYREFS)       -- e!(cfg(windows), WSAETOOMANYREFS),
vm/src/stdlib/errno.rs:553:22    - Unknown word (WSAEACCES)             -- e!(cfg(windows), WSAEACCES),
vm/src/stdlib/errno.rs:554:31    - Unknown word (WSATR)                 -- TODO: e!(cfg(windows), WSATR),
vm/src/stdlib/errno.rs:555:22    - Unknown word (WSABASEERR)            -- e!(cfg(windows), WSABASEERR),
vm/src/stdlib/errno.rs:556:31    - Unknown word (WSADESCRIPTIO)         -- TODO: e!(cfg(windows), WSADESCRIPTIO),
vm/src/stdlib/errno.rs:557:22    - Unknown word (WSAEMSGSIZE)           -- e!(cfg(windows), WSAEMSGSIZE),
vm/src/stdlib/errno.rs:558:22    - Unknown word (WSAEBADF)              -- e!(cfg(windows), WSAEBADF),
vm/src/stdlib/errno.rs:560:31    - Unknown word (WSAGETSELECTERRO)      -- TODO: e!(cfg(windows), WSAGETSELECTERRO),
vm/src/stdlib/errno.rs:562:22    - Unknown word (WSAENOBUFS)            -- e!(cfg(windows), WSAENOBUFS),
vm/src/stdlib/errno.rs:563:22    - Unknown word (WSAEDISCON)            -- e!(cfg(windows), WSAEDISCON),
vm/src/stdlib/errno.rs:565:22    - Unknown word (WSAEPROTOTYPE)         -- e!(cfg(windows), WSAEPROTOTYPE),
vm/src/stdlib/errno.rs:566:22    - Unknown word (WSAHOS)                -- e!(cfg(windows), WSAHOS),
vm/src/stdlib/errno.rs:568:22    - Unknown word (WSAEADDRNOTAVAIL)      -- e!(cfg(windows), WSAEADDRNOTAVAIL),
vm/src/stdlib/errno.rs:569:22    - Unknown word (WSAEALREADY)           -- e!(cfg(windows), WSAEALREADY),
vm/src/stdlib/errno.rs:570:22    - Unknown word (WSAEPROTONOSUPPORT)    -- e!(cfg(windows), WSAEPROTONOSUPPORT),
vm/src/stdlib/errno.rs:571:22    - Unknown word (WSASYSNOTREADY)        -- e!(cfg(windows), WSASYSNOTREADY),
vm/src/stdlib/errno.rs:573:22    - Unknown word (WSAEPFNOSUPPORT)       -- e!(cfg(windows), WSAEPFNOSUPPORT),
vm/src/stdlib/errno.rs:574:22    - Unknown word (WSAEOPNOTSUPP)         -- e!(cfg(windows), WSAEOPNOTSUPP),
vm/src/stdlib/errno.rs:575:22    - Unknown word (WSAEISCONN)            -- e!(cfg(windows), WSAEISCONN),
vm/src/stdlib/errno.rs:576:22    - Unknown word (WSAEDQUOT)             -- e!(cfg(windows), WSAEDQUOT),
vm/src/stdlib/errno.rs:577:22    - Unknown word (WSAENOTCONN)           -- e!(cfg(windows), WSAENOTCONN),
vm/src/stdlib/errno.rs:578:22    - Unknown word (WSAEREMOTE)            -- e!(cfg(windows), WSAEREMOTE),
vm/src/stdlib/errno.rs:579:22    - Unknown word (WSAEINVAL)             -- e!(cfg(windows), WSAEINVAL),
vm/src/stdlib/errno.rs:581:31    - Unknown word (WSAGETSELECTEVEN)      -- TODO: e!(cfg(windows), WSAGETSELECTEVEN),
vm/src/stdlib/errno.rs:582:22    - Unknown word (WSAESOCKTNOSUPPORT)    -- e!(cfg(windows), WSAESOCKTNOSUPPORT),
vm/src/stdlib/errno.rs:583:31    - Unknown word (WSAGETASYNCERRO)       -- TODO: e!(cfg(windows), WSAGETASYNCERRO),
vm/src/stdlib/errno.rs:584:31    - Unknown word (WSAMAKESELECTREPL)     -- TODO: e!(cfg(windows), WSAMAKESELECTREPL),
vm/src/stdlib/errno.rs:585:31    - Unknown word (WSAGETASYNCBUFLE)      -- TODO: e!(cfg(windows), WSAGETASYNCBUFLE),
vm/src/stdlib/errno.rs:586:22    - Unknown word (WSAEDESTADDRREQ)       -- e!(cfg(windows), WSAEDESTADDRREQ),
vm/src/stdlib/errno.rs:588:22    - Unknown word (WSAENETRESET)          -- e!(cfg(windows), WSAENETRESET),
vm/src/stdlib/errno.rs:589:31    - Unknown word (WSAN)                  -- TODO: e!(cfg(windows), WSAN),
vm/src/stdlib/errno.rs:62:70     - Unknown word (errnos)                 -- winerrs are translated to errnos but it messes up some
vm/src/stdlib/errno.rs:655:9     - Unknown word (ERFKILL)               -- ERFKILL
vm/src/stdlib/errno.rs:657:25    - Unknown word (errnos)                -- // Solaris-specific errnos
vm/src/stdlib/errno.rs:65:15     - Unknown word (WSAHOS)                 -- pub const WSAHOS: i32 = WSAHOST_NOT_FOUND
vm/src/stdlib/errno.rs:65:29     - Unknown word (WSAHOST)                -- const WSAHOS: i32 = WSAHOST_NOT_FOUND;
vm/src/stdlib/errno.rs:660:30    - Unknown word (illumos)               -- cfg(any(target_os = "illumos", target_os = "solaris
vm/src/stdlib/errno.rs:664:30    - Unknown word (illumos)               -- cfg(any(target_os = "illumos", target_os = "solaris
vm/src/stdlib/errno.rs:667:24    - Unknown word (errnos)                -- // MacOSX specific errnos
vm/src/stdlib/imp.rs:53:48     - Unknown word (unimportable) -- present but marked as unimportable, stops search).
vm/src/stdlib/imp.rs:89:25     - Unknown word (pycs)         -- fn check_hash_based_pycs(vm: &VirtualMachine
vm/src/stdlib/imp.rs:91:51     - Unknown word (pycs)         -- settings.check_hash_pycs_mode.to_string())
vm/src/stdlib/io.rs:2604:21   - Unknown word (ndecoded)   -- let ndecoded = decoder_decode(input
vm/src/stdlib/io.rs:2605:20   - Unknown word (ndecoded)   -- if ndecoded.chars <= num_to_skip
vm/src/stdlib/io.rs:2609:40   - Unknown word (ndecoded)   -- num_to_skip -= ndecoded;
vm/src/stdlib/io.rs:2629:25   - Unknown word (ndecoded)   -- let mut ndecoded = Utf8size::default
vm/src/stdlib/io.rs:2635:21   - Unknown word (ndecoded)   -- ndecoded += n;
vm/src/stdlib/io.rs:3169:12   - Unknown word (afaict)     -- // afaict, this is used for nothing
vm/src/stdlib/io.rs:3171:9    - Unknown word (pendingcr)  -- pendingcr: bool,
vm/src/stdlib/io.rs:3173:9    - Unknown word (seennl)     -- seennl: SeenNewline,
vm/src/stdlib/io.rs:3205:17   - Unknown word (pendingcr)  -- pendingcr: false,
vm/src/stdlib/io.rs:3206:17   - Unknown word (seennl)     -- seennl: SeenNewline::empty
vm/src/stdlib/io.rs:3220:76   - Unknown word (nldecoder)  -- reentrant call inside nldecoder".to_owned()))
vm/src/stdlib/io.rs:3229:68   - Unknown word (nldecoder)  -- operation on uninitialized nldecoder".to_owned())
vm/src/stdlib/io.rs:3248:44   - Unknown word (pendingcr)  -- (flag << 1) | (data.pendingcr as u64);
vm/src/stdlib/io.rs:3256:18   - Unknown word (pendingcr)  -- data.pendingcr = flag & 1 != 0;
vm/src/stdlib/io.rs:3266:18   - Unknown word (seennl)     -- data.seennl = SeenNewline::empty
vm/src/stdlib/io.rs:3267:18   - Unknown word (pendingcr)  -- data.pendingcr = false;
vm/src/stdlib/io.rs:3277:27   - Unknown word (seennl)     -- Ok(match data.seennl.bits() {
vm/src/stdlib/io.rs:3328:22   - Unknown word (seennl)     -- if (self.seennl == SeenNewline::LF
vm/src/stdlib/itertools.rs:1252:12   - Unknown word (teedata)    -- // teedata a python class
vm/src/stdlib/itertools.rs:90:59     - Unknown word (leat)       -- from("function takes at leat 1 arguments (0 given
vm/src/stdlib/marshal.rs:52:21     - Unknown word (pycomplex)  -- ref pycomplex @ PyComplex => {
vm/src/stdlib/marshal.rs:53:31     - Unknown word (pycomplex)  -- f(Complex(pycomplex.to_complex64()))
vm/src/stdlib/msvcrt.rs:19:65     - Unknown word (NOGPFAULTERRORBOX) -- NOALIGNMENTFAULTEXCEPT, SEM_NOGPFAULTERRORBOX,
vm/src/stdlib/msvcrt.rs:29:13     - Unknown word (getwch)            -- fn _getwch() -> u32;
vm/src/stdlib/msvcrt.rs:30:13     - Unknown word (getche)            -- fn _getche() -> i32;
vm/src/stdlib/msvcrt.rs:31:13     - Unknown word (getwche)           -- fn _getwche() -> u32;
vm/src/stdlib/msvcrt.rs:32:13     - Unknown word (putch)             -- fn _putch(c: u32) -> i32;
vm/src/stdlib/msvcrt.rs:33:13     - Unknown word (putwch)            -- fn _putwch(c: u16) -> u32;
vm/src/stdlib/msvcrt.rs:42:8      - Unknown word (getwch)            -- fn getwch() -> String {
vm/src/stdlib/msvcrt.rs:43:27     - Unknown word (getwch)            -- let c = unsafe { _getwch() };
vm/src/stdlib/msvcrt.rs:47:8      - Unknown word (getche)            -- fn getche() -> Vec<u8> {
vm/src/stdlib/msvcrt.rs:48:27     - Unknown word (getche)            -- let c = unsafe { _getche() };
vm/src/stdlib/msvcrt.rs:52:8      - Unknown word (getwche)           -- fn getwche() -> String {
vm/src/stdlib/msvcrt.rs:53:27     - Unknown word (getwche)           -- let c = unsafe { _getwche() };
vm/src/stdlib/msvcrt.rs:57:8      - Unknown word (putch)             -- fn putch(b: PyRef<PyBytes>, vm
vm/src/stdlib/msvcrt.rs:59:32     - Unknown word (putch)             -- vm.new_type_error("putch() argument must be a
vm/src/stdlib/msvcrt.rs:61:33     - Unknown word (putch)             -- unsafe { suppress_iph!(_putch(c.into())) };
vm/src/stdlib/msvcrt.rs:65:8      - Unknown word (putwch)            -- fn putwch(s: PyStrRef, vm: &VirtualMach
vm/src/stdlib/msvcrt.rs:67:32     - Unknown word (putch)             -- vm.new_type_error("putch() argument must be a
vm/src/stdlib/msvcrt.rs:69:33     - Unknown word (putwch)            -- unsafe { suppress_iph!(_putwch(c as u16)) };
vm/src/stdlib/nt.rs:175:21    - Unknown word (csbi)       -- let mut csbi = MaybeUninit::uninit
vm/src/stdlib/nt.rs:176:71    - Unknown word (csbi)       -- GetConsoleScreenBufferInfo(h, csbi.as_mut_ptr()) };
vm/src/stdlib/nt.rs:177:17    - Unknown word (csbi)       -- let csbi = unsafe { csbi.assume
vm/src/stdlib/nt.rs:177:33    - Unknown word (csbi)       -- let csbi = unsafe { csbi.assume_init() };
vm/src/stdlib/nt.rs:181:21    - Unknown word (csbi)       -- let w = csbi.srWindow;
vm/src/stdlib/nt.rs:192:13    - Unknown word (wexecv)     -- fn _wexecv(cmdname: *const u16
vm/src/stdlib/nt.rs:230:37    - Unknown word (wexecv)     -- unsafe { suppress_iph!(_wexecv(path.as_ptr(), argv
vm/src/stdlib/nt.rs:248:13    - Unknown word (wpath)      -- let wpath = path.to_widecstring
vm/src/stdlib/nt.rs:252:17    - Unknown word (wpath)      -- wpath.as_ptr(),
vm/src/stdlib/nt.rs:265:21    - Unknown word (wpath)      -- wpath.as_ptr(),
vm/src/stdlib/nt.rs:300:13    - Unknown word (backslashed) -- let backslashed: Vec<_> = orig
vm/src/stdlib/nt.rs:311:35    - Unknown word (PCWSTR)      -- wbuf = windows::core::PCWSTR::from_raw(backslashed
vm/src/stdlib/nt.rs:311:52    - Unknown word (backslashed) -- core::PCWSTR::from_raw(backslashed.as_ptr());
vm/src/stdlib/nt.rs:319:27    - Unknown word (backslashed) -- len < backslashed.len(), // backslashed
vm/src/stdlib/nt.rs:319:49    - Unknown word (backslashed) -- backslashed.len(), // backslashed is null-terminated
vm/src/stdlib/nt.rs:321:77    - Unknown word (backslashed) -- OsString::from_wide(&backslashed)),
vm/src/stdlib/nt.rs:336:13    - Unknown word (wpath)       -- let wpath = path.to_widecstring
vm/src/stdlib/nt.rs:341:42    - Unknown word (wpath)       -- GetDiskFreeSpaceExW(wpath.as_ptr(), &mut _free
vm/src/stdlib/os.rs:1062:19   - Unknown word (modif)      -- let (acc, modif) = match (args.times
vm/src/stdlib/os.rs:1107:36   - Unknown word (modif)      -- impl(args.path, acc, modif, args.dir_fd, args.follow
vm/src/stdlib/os.rs:1113:9    - Unknown word (modif)      -- modif: Duration,
vm/src/stdlib/os.rs:1128:42   - Unknown word (modif)      -- times = [ts(acc), ts(modif)];
vm/src/stdlib/os.rs:1131:27   - Unknown word (utimensat)  -- libc::utimensat(
vm/src/stdlib/os.rs:1156:76   - Unknown word (modif)      -- tv(acc).into(), &tv(modif).into())
vm/src/stdlib/os.rs:29:42     - Unknown word (rustix)     -- IntoPyException for rustix::io::Errno {
vm/src/stdlib/os.rs:763:34    - Unknown word (atim)       -- atime = (stat.st_atim.tv_sec, stat.st_atim
vm/src/stdlib/os.rs:763:55    - Unknown word (atim)       -- atim.tv_sec, stat.st_atim.tv_nsec);
vm/src/stdlib/os.rs:764:34    - Unknown word (mtim)       -- mtime = (stat.st_mtim.tv_sec, stat.st_mtim
vm/src/stdlib/os.rs:764:55    - Unknown word (mtim)       -- mtim.tv_sec, stat.st_mtim.tv_nsec);
vm/src/stdlib/os.rs:765:34    - Unknown word (ctim)       -- ctime = (stat.st_ctim.tv_sec, stat.st_ctim
vm/src/stdlib/os.rs:765:55    - Unknown word (ctim)       -- ctim.tv_sec, stat.st_ctim.tv_nsec);
vm/src/stdlib/os.rs:917:8     - Unknown word (getcwdb)    -- fn getcwdb(vm: &VirtualMachine
vm/src/stdlib/posix.rs:1829:26   - Unknown word (illumos)    -- target_os = "illumos",
vm/src/stdlib/posix.rs:1893:26   - Unknown word (illumos)    -- target_os = "illumos",
vm/src/stdlib/posix.rs:1911:12   - Unknown word (VDISABLE)   -- PC_VDISABLE = libc::_PC_VDISABLE
vm/src/stdlib/posix.rs:1916:26   - Unknown word (illumos)    -- target_os = "illumos",
vm/src/stdlib/posix.rs:1929:26   - Unknown word (illumos)    -- target_os = "illumos",
vm/src/stdlib/posix.rs:1942:26   - Unknown word (illumos)    -- target_os = "illumos",
vm/src/stdlib/posix.rs:2046:12   - Unknown word (GETGR)      -- SC_GETGR_R_SIZE_MAX = libc::
vm/src/stdlib/posix.rs:2047:12   - Unknown word (GETPW)      -- SC_GETPW_R_SIZE_MAX = libc::
vm/src/stdlib/posix.rs:2060:12   - Unknown word (NPROCESSORS) -- SC_NPROCESSORS_CONF = libc::_SC_NPROCESSORS
vm/src/stdlib/posix.rs:2061:12   - Unknown word (NPROCESSORS) -- SC_NPROCESSORS_ONLN = libc::_SC_NPROCESSORS
vm/src/stdlib/posix.rs:2061:24   - Unknown word (ONLN)        -- SC_NPROCESSORS_ONLN = libc::_SC_NPROCESSORS
vm/src/stdlib/posix.rs:2076:12   - Unknown word (RTSIG)       -- SC_RTSIG_MAX = libc::_SC_RTSIG
vm/src/stdlib/posix.rs:77:16     - Unknown word (GRND)       -- use libc::{GRND_NONBLOCK, GRND_RANDOM
vm/src/stdlib/posix.rs:77:31     - Unknown word (GRND)       -- libc::{GRND_NONBLOCK, GRND_RANDOM};
vm/src/stdlib/posix.rs:892:22    - Unknown word (emscripten) -- target_os = "emscripten",
vm/src/stdlib/posix_compat.rs:22:12     - Unknown word (unimpl)     -- os_unimpl("os.access", vm)
vm/src/stdlib/posix_compat.rs:38:12     - Unknown word (unimpl)     -- os_unimpl("os.symlink", vm)
vm/src/stdlib/posix_compat.rs:57:11     - Unknown word (unimpl)     -- fn os_unimpl<T>(func: &str, vm:
vm/src/stdlib/pwd.rs:93:8      - Unknown word (getpwall)   -- fn getpwall(vm: &VirtualMachine
vm/src/stdlib/pwd.rs:94:67     - Unknown word (fgetpwent)  -- thread safe. Could use fgetpwent_r, but this is easier
vm/src/stdlib/pwd.rs:95:16     - Unknown word (GETPWALL)   -- static GETPWALL: parking_lot::Mutex
vm/src/stdlib/pwd.rs:96:22     - Unknown word (GETPWALL)   -- let _guard = GETPWALL.lock();
vm/src/stdlib/signal.rs:106:16    - Unknown word (SIGPWR)     -- use libc::{SIGPWR, SIGSTKFLT};
vm/src/stdlib/signal.rs:106:24    - Unknown word (SIGSTKFLT)  -- use libc::{SIGPWR, SIGSTKFLT};
vm/src/stdlib/sre.rs:344:19    - Unknown word (subx)       -- Self::subx(zelf, sub_args, false
vm/src/stdlib/sre.rs:348:19    - Unknown word (subx)       -- Self::subx(zelf, sub_args, true
vm/src/stdlib/sre.rs:37:14     - Unknown word (iscased)    -- fn ascii_iscased(ch: i32) -> bool {
vm/src/stdlib/sre.rs:405:12    - Unknown word (subx)       -- fn subx(
vm/src/stdlib/sre.rs:41:16     - Unknown word (iscased)    -- fn unicode_iscased(ch: i32) -> bool {
vm/src/stdlib/sys.rs:1084:14   - Unknown word (ABIFLAGS)                  -- sys::ABIFLAGS,
vm/src/stdlib/sys.rs:111:8     - Unknown word (platlibdir) -- fn platlibdir(_vm: &VirtualMachine
vm/src/stdlib/sys.rs:112:33    - Unknown word (PLATLIBDIR) -- option_env!("RUSTPYTHON_PLATLIBDIR").unwrap_or("lib")
vm/src/stdlib/sys.rs:158:38    - Unknown word (PYVENV)     -- Ok(var) = env::var("__PYVENV_LAUNCHER__") {
vm/src/stdlib/sys.rs:280:9     - Unknown word (xoptions)   -- fn _xoptions(vm: &VirtualMachine
vm/src/stdlib/sys.rs:283:48    - Unknown word (xoptions)   -- in &vm.state.settings.xoptions {
vm/src/stdlib/sys.rs:335:28    - Unknown word (excepthook) -- pyfunction(name = "__excepthook__")]
vm/src/stdlib/sys.rs:337:8     - Unknown word (excepthook) -- fn excepthook(
vm/src/stdlib/sys.rs:351:38    - Unknown word (PYTHONBREAKPOINT) -- var = std::env::var("PYTHONBREAKPOINT")
vm/src/stdlib/sys.rs:365:19    - Unknown word (unimportable)     -- let print_unimportable_module_warn = || {
vm/src/stdlib/sys.rs:368:35    - Unknown word (unimportable)     -- format!("Ignoring unimportable $PYTHONBREAKPOINT:
vm/src/stdlib/sys.rs:368:49    - Unknown word (PYTHONBREAKPOINT) -- Ignoring unimportable $PYTHONBREAKPOINT: \"{env_var}\"",),
vm/src/stdlib/sys.rs:379:31    - Unknown word (unimportable)     -- _ => return print_unimportable_module_warn(),
vm/src/stdlib/sys.rs:391:30    - Unknown word (unimportable)     -- return print_unimportable_module_warn();
vm/src/stdlib/sys.rs:397:24    - Unknown word (unimportable)     -- _ => print_unimportable_module_warn(),
vm/src/stdlib/sys.rs:39:22     - Unknown word (abiflags)   -- #[pyattr(name = "abiflags")]
vm/src/stdlib/sys.rs:40:22     - Unknown word (ABIFLAGS)   -- pub(crate) const ABIFLAGS: &str = "";
vm/src/stdlib/sys.rs:462:10    - Unknown word (surrogateescape)  -- "surrogateescape".to_owned()
vm/src/stdlib/sys.rs:468:10    - Unknown word (surrogatepass)    -- "surrogatepass".to_owned()
vm/src/stdlib/sys.rs:498:28    - Unknown word (OSVERSIONINFOEXW) -- GetVersionExW, OSVERSIONINFOEXW, OSVERSIONINFOW,
vm/src/stdlib/sys.rs:498:46    - Unknown word (OSVERSIONINFOW)   -- VersionExW, OSVERSIONINFOEXW, OSVERSIONINFOW,
vm/src/stdlib/sys.rs:501:26    - Unknown word (OSVERSIONINFOEXW) -- let mut version: OSVERSIONINFOEXW = unsafe { std::mem
vm/src/stdlib/sys.rs:502:59    - Unknown word (OSVERSIONINFOEXW) -- std::mem::size_of::<OSVERSIONINFOEXW>() as u32;
vm/src/stdlib/sys.rs:504:17    - Unknown word (osvi)             -- let osvi = &mut version as *mut
vm/src/stdlib/sys.rs:504:45    - Unknown word (OSVERSIONINFOEXW) -- mut version as *mut OSVERSIONINFOEXW as *mut OSVERSIONINFOW
vm/src/stdlib/sys.rs:504:70    - Unknown word (OSVERSIONINFOW)   -- OSVERSIONINFOEXW as *mut OSVERSIONINFOW;
vm/src/stdlib/sys.rs:505:59    - Unknown word (OSVERSIONINFOW)   -- accepts a pointer of OSVERSIONINFOW, but windows-sys crate
vm/src/stdlib/sys.rs:507:27    - Unknown word (osvi)             -- GetVersionExW(osvi)
vm/src/stdlib/sys.rs:717:15    - Unknown word (Asyncgen)         -- struct SetAsyncgenHooksArgs {
vm/src/stdlib/sys.rs:725:12    - Unknown word (asyncgen)         -- fn set_asyncgen_hooks(args: SetAsyncgenHooksA
vm/src/stdlib/sys.rs:725:36    - Unknown word (Asyncgen)         -- asyncgen_hooks(args: SetAsyncgenHooksArgs, vm: &VirtualMachine
vm/src/stdlib/sys.rs:758:32    - Unknown word (asyncgen)         -- pyclass(no_attr, name = "asyncgen_hooks")]
vm/src/stdlib/sys.rs:760:25    - Unknown word (Asyncgen)         -- pub(super) struct PyAsyncgenHooks {
vm/src/stdlib/sys.rs:766:12    - Unknown word (Asyncgen)         -- impl PyAsyncgenHooks {}
vm/src/stdlib/sys.rs:769:12    - Unknown word (asyncgen)         -- fn get_asyncgen_hooks(vm: &VirtualMachine
vm/src/stdlib/sys.rs:769:53    - Unknown word (Asyncgen)         -- VirtualMachine) -> PyAsyncgenHooks {
vm/src/stdlib/sys.rs:816:18    - Unknown word (PYTHONSAFEPATH)   -- /// -P, `PYTHONSAFEPATH`
vm/src/stdlib/sys.rs:818:39    - Unknown word (PYTHONWARNDEFAULTENCODING) -- warn_default_encoding, PYTHONWARNDEFAULTENCODING
vm/src/stdlib/sys.rs:964:9     - Unknown word (releaselevel)              -- releaselevel: &'static str,
vm/src/stdlib/sys.rs:974:13    - Unknown word (releaselevel)              -- releaselevel: version::RELEASELEVEL
vm/src/stdlib/sys.rs:974:36    - Unknown word (RELEASELEVEL)              -- releaselevel: version::RELEASELEVEL,
vm/src/stdlib/thread.rs:29:69     - Unknown word (illumos)    -- solaris", target_os = "illumos"))] {
vm/src/stdlib/time.rs:103:30    - Unknown word (emscripten) -- not(any(target_os = "emscripten", target_os = "wasi
vm/src/stdlib/time.rs:112:30    - Unknown word (emscripten) -- not(any(target_os = "emscripten", target_os = "wasi
vm/src/stdlib/time.rs:129:30    - Unknown word (emscripten) -- not(any(target_os = "emscripten", target_os = "wasi
vm/src/stdlib/time.rs:24:19     - Unknown word (dstbias)    -- // pub static dstbias: std::ffi::c_int;
vm/src/stdlib/time.rs:255:11    - Unknown word (CFMT)       -- const CFMT: &str = "%a %b %e %H
vm/src/stdlib/time.rs:260:45    - Unknown word (CFMT)       -- time = instant.format(CFMT).to_string();
vm/src/stdlib/time.rs:267:27    - Unknown word (CFMT)       -- Ok(instant.format(CFMT).to_string())
vm/src/stdlib/time.rs:307:22    - Unknown word (emscripten) -- target_os = "emscripten",
vm/src/stdlib/time.rs:323:65    - Unknown word (emscripten) -- wasm32", target_os = "emscripten")))]
vm/src/stdlib/time.rs:324:24    - Unknown word (muldiv)     -- pub(super) fn time_muldiv(ticks: i64, mul: i6
vm/src/stdlib/time.rs:325:13    - Unknown word (intpart)    -- let intpart = ticks / div;
vm/src/stdlib/time.rs:328:10    - Unknown word (intpart)    -- (intpart * mul + remaining) as
vm/src/stdlib/time.rs:343:18    - Unknown word (muldiv)     -- time_muldiv(t.tms_utime, SEC_TO
vm/src/stdlib/time.rs:343:62    - Unknown word (muldiv)     -- TO_NS, freq) + time_muldiv(t.tms_stime, SEC_TO
vm/src/stdlib/time.rs:367:22    - Unknown word (illumos)    -- target_os = "illumos",
vm/src/stdlib/time.rs:475:22    - Unknown word (illumos)    -- target_os = "illumos",
vm/src/stdlib/time.rs:483:22    - Unknown word (illumos)    -- target_os = "illumos",
vm/src/stdlib/time.rs:645:22    - Unknown word (illumos)    -- target_os = "illumos",
vm/src/stdlib/time.rs:656:48    - Unknown word (gethrvtime) -- nanos(unsafe { libc::gethrvtime() }))
vm/src/stdlib/time.rs:660:22    - Unknown word (illumos)    -- target_os = "illumos",
vm/src/stdlib/time.rs:698:28    - Unknown word (muldiv)     -- use super::decl::{time_muldiv, MS_TO_NS, SEC_TO_NS
vm/src/stdlib/time.rs:751:38    - Unknown word (muldiv)     -- Duration::from_nanos(time_muldiv(
vm/src/stdlib/typing.rs:151:34    - Unknown word (gigity)     -- println!("gigity");
vm/src/stdlib/typing.rs:18:37     - Unknown word (pycodecs)   -- module = vm.import("_pycodecs", None, 0)?;
vm/src/stdlib/winapi.rs:167:60    - Unknown word (STARTUPINFOEXW) -- :System::Threading::STARTUPINFOEXW =
vm/src/stdlib/winapi.rs:17:15     - Unknown word (PCWSTR)     -- core::PCWSTR,
vm/src/stdlib/winapi.rs:195:22    - Unknown word (getenvironment) -- .map(|m| getenvironment(m, vm))
vm/src/stdlib/winapi.rs:275:8     - Unknown word (getenvironment) -- fn getenvironment(env: ArgMapping, vm
vm/src/stdlib/winapi.rs:427:65    - Unknown word (PCWSTR)         -- LibraryLoader::LoadLibraryW(PCWSTR::from_raw(path.as_ptr
vm/src/stdlib/winapi.rs:54:42     - Unknown word (STARTF)     -- REALTIME_PRIORITY_CLASS, STARTF_USESHOWWINDOW, STARTF
vm/src/stdlib/winapi.rs:54:64     - Unknown word (STARTF)     -- STARTF_USESHOWWINDOW, STARTF_USESTDHANDLES,
vm/src/types/slot.rs:138:28    - Unknown word (TPFLAGS)    -- CPython default: Py_TPFLAGS_HAVE_STACKLESS_EXTENSION
vm/src/types/slot.rs:138:66    - Unknown word (TPFLAGS)    -- STACKLESS_EXTENSION | Py_TPFLAGS_HAVE_VERSION_TAG
vm/src/types/slot.rs:142:43    - Unknown word (Subclassable) -- types created in Python. Subclassable and are a
vm/src/version.rs:11:11     - Unknown word (RELEASELEVEL) -- pub const RELEASELEVEL: &str = "alpha";
vm/src/version.rs:12:11     - Unknown word (RELEASELEVEL) -- pub const RELEASELEVEL_N: usize = 0xA;
vm/src/version.rs:16:53     - Unknown word (RELEASELEVEL) -- ) | (MICRO << 8) | (RELEASELEVEL_N << 4) | SERIAL;
vm/src/version.rs:28:38     - Unknown word (RELEASELEVEL) -- MAJOR}.{MINOR}.{MICRO}{RELEASELEVEL}")
vm/src/vm/mod.rs:228:17    - Unknown word (rustpythonpath) -- let rustpythonpath_env = std::env::var
vm/src/vm/mod.rs:228:53    - Unknown word (RUSTPYTHONPATH) -- env = std::env::var("RUSTPYTHONPATH").ok();
vm/src/vm/mod.rs:230:27    - Unknown word (rustpythonpath) -- let env_set = rustpythonpath_env.as_ref().is_some
vm/src/vm/mod.rs:232:37    - Unknown word (rustpythonpath) -- Some(s.as_str()) == rustpythonpath_env.as_deref() || Some
vm/src/vm/mod.rs:238:26    - Unknown word (RUSTPYTHONPATH) -- "Neither RUSTPYTHONPATH nor PYTHONPATH is set
vm/src/vm/mod.rs:240:18    - Unknown word (RUSTPYTHONPATH) -- "RUSTPYTHONPATH or PYTHONPATH is set
vm/src/vm/mod.rs:242:18    - Unknown word (RUSTPYTHONPATH) -- "RUSTPYTHONPATH or PYTHONPATH is set
vm/src/vm/mod.rs:54:28     - Unknown word (Pycs)       -- use setting::{CheckHashPycsMode, Settings};
vm/src/vm/mod.rs:771:17    - Unknown word (excs)           -- let mut excs = self.exceptions.borrow
vm/src/vm/mod.rs:772:41    - Unknown word (excs)           -- std::mem::take(&mut *excs);
vm/src/vm/mod.rs:773:9     - Unknown word (excs)           -- excs.prev = Some(Box::new
vm/src/vm/mod.rs:774:9     - Unknown word (excs)           -- excs.exc = exc
vm/src/vm/mod.rs:778:17    - Unknown word (excs)           -- let mut excs = self.exceptions.borrow
vm/src/vm/setting.rs:119:19    - Unknown word (Pycs)                      -- pub enum CheckHashPycsMode {
vm/src/vm/setting.rs:150:13    - Unknown word (xoptions)                  -- xoptions: vec![],
vm/src/vm/setting.rs:159:24    - Unknown word (pycs)                      -- check_hash_pycs_mode: CheckHashPycsMode
vm/src/vm/setting.rs:159:44    - Unknown word (Pycs)                      -- pycs_mode: CheckHashPycsMode::Default,
vm/src/vm/setting.rs:18:9      - Unknown word (PYTHONHASHSEED) -- /// PYTHONHASHSEED=x
vm/src/vm/setting.rs:39:10     - Unknown word (Xfoo)           -- /// -Xfoo[=bar]
vm/src/vm/setting.rs:40:9      - Unknown word (xoptions)       -- pub xoptions: Vec<(String, Option
vm/src/vm/setting.rs:42:10     - Unknown word (Wfoo)           -- /// -Wfoo
vm/src/vm/setting.rs:51:35     - Unknown word (PYTHONWARNDEFAULTENCODING) -- warn_default_encoding, PYTHONWARNDEFAULTENCODING
vm/src/vm/setting.rs:75:13     - Unknown word (PYTHONUNBUFFERED)          -- /// -u, PYTHONUNBUFFERED=x
vm/src/vm/setting.rs:81:28     - Unknown word (pycs)                      -- --check-hash-based-pycs
vm/src/vm/setting.rs:82:20     - Unknown word (pycs)                      -- pub check_hash_pycs_mode: CheckHashPycsMode
vm/src/vm/setting.rs:82:40     - Unknown word (Pycs)                      -- pycs_mode: CheckHashPycsMode,
vm/src/vm/setting.rs:94:37     - Unknown word (RUSTPYTHONPATH)            -- Environment PYTHONPATH (and RUSTPYTHONPATH)
vm/src/vm/setting.rs:98:17     - Unknown word (platlibdir)                -- // wchar_t *platlibdir;
vm/src/vm/vm_new.rs:171:28    - Unknown word (ternop)     -- pub fn new_unsupported_ternop_error(
vm/src/vm/vm_object.rs:18:34     - Unknown word (emscripten) -- not(any(target_os = "emscripten", target_os = "wasi
vm/src/vm/vm_object.rs:28:34     - Unknown word (emscripten) -- not(any(target_os = "emscripten", target_os = "wasi
vm/src/vm/vm_object.rs:46:34     - Unknown word (emscripten) -- not(any(target_os = "emscripten", target_os = "wasi
vm/src/windows.rs:86:55     - Unknown word (birthtime)  -- from 3.12, so we copy birthtime across
vm/sre_engine/Cargo.toml:3:13      - Unknown word (Kangzhi)    -- authors = ["Kangzhi Shi <shikangzhi@gmail
vm/sre_engine/src/engine.rs:1182:58   - Unknown word (atcode)     -- ctx: &MatchContext, atcode: SreAtCode) -> bool
vm/sre_engine/src/engine.rs:1183:11   - Unknown word (atcode)     -- match atcode {
vm/sre_engine/src/engine.rs:1273:51   - Unknown word (blockindices) -- BIGCHARSET> <blockcount> <256 blockindices> <blocks> */
vm/sre_engine/src/engine.rs:1278:29   - Unknown word (blockindices) -- let (_, blockindices, _) = unsafe { set.align
vm/sre_engine/src/engine.rs:1280:33   - Unknown word (blockindices) -- let block = blockindices[block_index as usize
vm/sre_engine/src/engine.rs:288:6     - Unknown word (coro)       -- 'coro: loop {
vm/sre_engine/src/engine.rs:552:37    - Unknown word (gctx)       -- let mut gctx = MatchContext {
vm/sre_engine/src/engine.rs:560:71    - Unknown word (gctx)       -- peek_char::<S>()) != $f(gctx.peek_char::<S>())
vm/sre_engine/src/engine.rs:565:33    - Unknown word (gctx)       -- gctx.advance_char::<S>()
vm/sre_engine/src/engine.rs:630:33    - Unknown word (atcode)     -- let atcode = SreAtCode::try_from
vm/sre_engine/src/engine.rs:631:46    - Unknown word (atcode)     -- if at(req, &ctx, atcode) {
vm/sre_engine/src/engine.rs:873:23    - Unknown word (coro)       -- continue 'coro;
vm/sre_engine/tests/tests.rs:107:31    - Unknown word (r'ababc)    -- pattern p = re.compile(r'ababc+')
vm/sre_engine/tests/tests.rs:111:38    - Unknown word (ababc)      -- mut state) = p.state("!ababc");
vm/sre_engine/tests/tests.rs:121:37    - Unknown word (pythonpython) -- mut state) = p.state("pythonpython");
vm/sre_engine/tests/tests.rs:141:37    - Unknown word (eeea)         -- mut state) = p.state("eeea");
vm/sre_engine/tests/tests.rs:64:37     - Unknown word (axxzaz)     -- mut state) = p.state("axxzaz");
wasm/README.md:1:16      - Unknown word (webassembly) -- # Compiling to webassembly
wasm/demo/package.json:33:21     - Unknown word (Liddle)     -- "author": "Ryan Liddle",
wasm/demo/snippets/asyncbrowser.py:15:5      - Unknown word (asyncweb)   -- asyncweb.run(main(delay))
wasm/demo/snippets/asyncbrowser.py:2:8       - Unknown word (asyncweb)   -- import asyncweb
wasm/demo/snippets/import_pypi.py:12:2      - Unknown word (asyncweb)   -- @asyncweb.main
wasm/demo/snippets/import_pypi.py:14:11     - Unknown word (whlimport)  -- await whlimport.load_package("pygments
wasm/demo/snippets/import_pypi.py:19:5      - Unknown word (fmter)      -- fmter = pygments.formatters
wasm/demo/snippets/import_pypi.py:1:8       - Unknown word (asyncweb)   -- import asyncweb
wasm/demo/snippets/import_pypi.py:20:58     - Unknown word (fmter)      -- hi, mom!')", lexer, fmter))
wasm/demo/snippets/import_pypi.py:2:8       - Unknown word (whlimport)  -- import whlimport
wasm/demo/snippets/import_pypi.py:4:1       - Unknown word (whlimport)  -- whlimport.setup()
wasm/demo/src/index.js:14:12     - Unknown word (rustpy)     -- .then((rustpy) => {
wasm/demo/src/index.js:15:14     - Unknown word (rustpy)     -- rp = rustpy;
wasm/demo/src/index.js:17:21     - Unknown word (rustpy)     -- window.rp = rustpy;
wasm/lib/Cargo.toml:12:26     - Unknown word (rlib)       -- crate-type = ["cdylib", "rlib"]
wasm/lib/Lib/_microdistlib.py:127:14    - Unknown word (distname)   -- rs = distname
wasm/lib/Lib/_microdistlib.py:129:25    - Unknown word (distname)   -- rs = '%s %s' % (distname, ', '.join(['%s %s'
wasm/lib/Lib/_microdistlib.py:130:27    - Unknown word (distname)   -- return Container(name=distname, extras=extras, constraints
wasm/lib/Lib/_microdistlib.py:24:5      - Unknown word (distname)   -- distname = m.groups()[0]
wasm/lib/Lib/asyncweb.py:14:9      - Unknown word (coro)       -- def run(coro):
wasm/lib/Lib/asyncweb.py:19:13     - Unknown word (coro)       -- _Runner(coro)
wasm/lib/Lib/asyncweb.py:204:18    - Unknown word (jsclosure)  -- @browser.jsclosure_once
wasm/lib/Lib/asyncweb.py:209:47    - Unknown word (jsfloat)    -- cb.detach(), browser.jsfloat(ms))
wasm/lib/Lib/asyncweb.py:22:11     - Unknown word (coro)       -- def spawn(coro):
wasm/lib/Lib/asyncweb.py:27:13     - Unknown word (coro)       -- return _coro_promise(coro)
wasm/lib/Lib/asyncweb.py:27:26     - Unknown word (coro)       -- return _coro_promise(coro)
wasm/lib/Lib/browser.py:14:6      - Unknown word (jsstr)      -- "jsstr",
wasm/lib/Lib/browser.py:15:6      - Unknown word (jsclosure)  -- "jsclosure",
wasm/lib/Lib/browser.py:16:6      - Unknown word (jsclosure)  -- "jsclosure_once",
wasm/lib/Lib/browser.py:17:6      - Unknown word (jsfloat)    -- "jsfloat",
wasm/lib/Lib/browser.py:34:1      - Unknown word (jsstr)      -- jsstr = window.new_from_str
wasm/lib/Lib/browser.py:35:1      - Unknown word (jsclosure)  -- jsclosure = window.new_closure
wasm/lib/Lib/browser.py:36:1      - Unknown word (jsclosure)  -- jsclosure_once = window.new_closure
wasm/lib/Lib/browser.py:37:2      - Unknown word (jsfloat)    -- _jsfloat = window.new_from_float
wasm/lib/Lib/browser.py:43:5      - Unknown word (jsfloat)    -- def jsfloat(n):
wasm/lib/Lib/browser.py:44:13     - Unknown word (jsfloat)    -- return _jsfloat(float(n))
wasm/lib/Lib/browser.py:53:17     - Unknown word (jsstr)      -- _alert.call(jsstr(msg))
wasm/lib/Lib/browser.py:62:26     - Unknown word (jsstr)      -- return _confirm.call(jsstr(msg)).as_bool()
wasm/lib/Lib/browser.py:75:9      - Unknown word (jsstr)      -- jsstr(msg), jsstr(default
wasm/lib/Lib/whlimport.py:106:13    - Unknown word (zname)        -- for zname, z in cls._packages
wasm/lib/Lib/whlimport.py:110:50    - Unknown word (zname)        -- cls, origin=f"zip:{zname}/{fullpath}", is_package
wasm/lib/Lib/whlimport.py:132:9     - Unknown word (zipname)      -- zipname, slash, path = origin
wasm/lib/Lib/whlimport.py:133:30    - Unknown word (zipname)      -- return cls._packages[zipname].read(path).decode(
wasm/lib/Lib/whlimport.py:33:11     - Unknown word (asyncweb)     -- await asyncweb.wait_all(_load_package
wasm/lib/Lib/whlimport.py:3:8       - Unknown word (asyncweb)   -- import asyncweb
wasm/lib/Lib/whlimport.py:53:12     - Unknown word (asyncweb)     -- deps = asyncweb.spawn(asyncweb.wait
wasm/lib/Lib/whlimport.py:53:27     - Unknown word (asyncweb)     -- deps = asyncweb.spawn(asyncweb.wait_all(_load_package
wasm/lib/Lib/whlimport.py:64:12     - Unknown word (microdistlib) -- pkg = _microdistlib.parse_requirement(pkg
wasm/lib/Lib/whlimport.py:9:9       - Unknown word (microdistlib) -- import _microdistlib
wasm/lib/src/convert.rs:119:33    - Unknown word (jsresult)   -- pyresult_to_jsresult(vm, result)
wasm/lib/src/convert.rs:167:20    - Unknown word (jsresult)   -- pub fn pyresult_to_jsresult(vm: &VirtualMachine
wasm/lib/src/convert.rs:36:9      - Unknown word (jserr)      -- let jserr = vm.try_class("_js
wasm/lib/src/convert.rs:37:21     - Unknown word (jserr)      -- let js_arg = if jserr.map_or(false, |jserr
wasm/lib/src/convert.rs:37:42     - Unknown word (jserr)      -- jserr.map_or(false, |jserr| py_err.fast_isinstance
wasm/lib/src/convert.rs:37:73     - Unknown word (jserr)      -- err.fast_isinstance(&jserr)) {
wasm/lib/src/js_module.rs:329:42    - Unknown word (jsresult)   -- convert::pyresult_to_jsresult(vm, res)
wasm/lib/src/js_module.rs:503:58    - Unknown word (jsresult)   -- convert::pyresult_to_jsresult(vm, res)
wasm/lib/src/js_module.rs:511:58    - Unknown word (jsresult)   -- convert::pyresult_to_jsresult(vm, res)
wasm/lib/src/js_module.rs:578:62    - Unknown word (awaitpromise) -- non-None value to an awaitpromise".to_owned(),
wasm/lib/src/vm_class.rs:343:34    - Unknown word (jsresult)   -- convert::pyresult_to_jsresult(vm, result)
wasm/notebook/package.json:36:21     - Unknown word (Liddle)     -- "author": "Ryan Liddle",
wasm/notebook/package.json:9:10      - Unknown word (katex)      -- "katex": "^0.12.0",
wasm/notebook/src/index.js:142:5     - Unknown word (pyvm)       -- let pyvm = null;
wasm/notebook/src/index.js:171:9     - Unknown word (pyvm)       -- if (pyvm) {
wasm/notebook/src/index.js:172:9     - Unknown word (pyvm)       -- pyvm.destroy();
wasm/notebook/src/index.js:173:9     - Unknown word (pyvm)       -- pyvm = null;
wasm/notebook/src/index.js:175:5     - Unknown word (pyvm)       -- pyvm = rp.vmStore.init('notebook
wasm/notebook/src/index.js:20:10     - Unknown word (iomd)       -- import { iomdParser } from './parse
wasm/notebook/src/index.js:230:22    - Unknown word (iomd)       -- let parsedCode = iomdParser(mainCode);
wasm/notebook/src/index.js:37:12     - Unknown word (rustpy)     -- .then((rustpy) => {
wasm/notebook/src/index.js:38:14     - Unknown word (rustpy)     -- rp = rustpy;
wasm/notebook/src/index.js:40:21     - Unknown word (rustpy)     -- window.rp = rustpy;
wasm/notebook/src/index.js:9:25      - Unknown word (stex)       -- import 'codemirror/mode/stex/stex';
wasm/notebook/src/index.js:9:30      - Unknown word (stex)       -- codemirror/mode/stex/stex';
wasm/notebook/src/parse.js:19:17     - Unknown word (iomd)       -- export function iomdParser(fullIomd) {
wasm/notebook/src/parse.js:19:32     - Unknown word (Iomd)       -- function iomdParser(fullIomd) {
wasm/notebook/src/parse.js:20:11     - Unknown word (iomd)       -- const iomdLines = fullIomd.split
wasm/notebook/src/parse.js:20:27     - Unknown word (Iomd)       -- const iomdLines = fullIomd.split('\n');
wasm/notebook/src/parse.js:51:29     - Unknown word (iomd)       -- (const [i, line] of iomdLines.entries()) {
wasm/notebook/src/parse.js:84:15     - Unknown word (iomd)       -- pushChunk(iomdLines.length);
wasm/notebook/src/process.js:20:21     - Unknown word (Katex)      -- // Render Math with Katex
wasm/notebook/src/process.js:23:12     - Unknown word (katex)      -- return katex.renderToString(math
wasm/notebook/src/process.js:28:20     - Unknown word (pyvm)       -- function runPython(pyvm, code, error) {
wasm/notebook/src/process.js:30:9      - Unknown word (pyvm)       -- pyvm.exec(code);
wasm/notebook/src/process.js:7:20      - Unknown word (katex)      -- import katex from 'katex';
wasm/notebook/src/process.js:7:8       - Unknown word (katex)      -- import katex from 'katex';
wasm/notebook/src/process.js:8:20      - Unknown word (katex)      -- import 'katex/dist/katex.min.css';
wasm/notebook/src/process.js:8:9       - Unknown word (katex)      -- import 'katex/dist/katex.min.css'
wasm/tests/conftest.py:92:5      - Unknown word (wdriver)    -- def wdriver(request):
wasm/tests/test_demo.py:19:15     - Unknown word (wdriver)    -- def test_demo(wdriver, script, output):
wasm/tests/test_demo.py:21:21     - Unknown word (wdriver)    -- script_output = wdriver.execute_script(script
wasm/tests/test_exec_mode.py:1:20      - Unknown word (wdriver)    -- def test_eval_mode(wdriver):
wasm/tests/test_exec_mode.py:2:12      - Unknown word (wdriver)    -- assert wdriver.execute_script("return
wasm/tests/test_exec_mode.py:5:20      - Unknown word (wdriver)    -- def test_exec_mode(wdriver):
wasm/tests/test_exec_mode.py:6:12      - Unknown word (wdriver)    -- assert wdriver.execute_script("return
wasm/tests/test_exec_mode.py:9:27      - Unknown word (wdriver)    -- test_exec_single_mode(wdriver):
wasm/tests/test_inject_module.py:1:30      - Unknown word (wdriver)    -- inject_module_basic(wdriver):
wasm/tests/test_inject_module.py:2:5       - Unknown word (wdriver)    -- wdriver.execute_script(
whats_left.py:100:18    - Unknown word (xxsubtype)  -- 'xxmodule', 'xxsubtype', 'xxlimited', '_xxtestfuzz
whats_left.py:100:31    - Unknown word (xxlimited)  -- xxmodule', 'xxsubtype', 'xxlimited', '_xxtestfuzz'
whats_left.py:100:45    - Unknown word (xxtestfuzz) -- xxsubtype', 'xxlimited', '_xxtestfuzz'
whats_left.py:100:6     - Unknown word (xxmodule)   -- 'xxmodule', 'xxsubtype', 'xxlimited
whats_left.py:101:22    - Unknown word (testcapi)   -- '_testbuffer', '_testcapi', '_testimportmultiple
whats_left.py:101:35    - Unknown word (testimportmultiple) -- testbuffer', '_testcapi', '_testimportmultiple', '_testinternalcapi
whats_left.py:101:58    - Unknown word (testinternalcapi)   -- testimportmultiple', '_testinternalcapi', '_testmultiphase'
whats_left.py:317:1     - Unknown word (cpymods)            -- cpymods = {gen_modules()!r}
whats_left.py:335:1     - Unknown word (cpymods)            -- cpymods = {}
whats_left.py:364:9     - Unknown word (implementeds)       -- not_implementeds = {}
whats_left.py:372:17    - Unknown word (implementeds)       -- not_implementeds[name] = missing_methods
whats_left.py:375:16    - Unknown word (implementeds)       -- if not_implementeds:
whats_left.py:387:5     - Unknown word (rustpymods)         -- rustpymods = {mod: dir_of_mod_or
whats_left.py:398:18    - Unknown word (cpymod)             -- for modname, cpymod in cpymods.items():
whats_left.py:398:28    - Unknown word (cpymods)            -- for modname, cpymod in cpymods.items():
whats_left.py:399:21    - Unknown word (rustpymods)         -- rustpymod = rustpymods.get(modname)
whats_left.py:399:9     - Unknown word (rustpymod)          -- rustpymod = rustpymods.get(modname
whats_left.py:400:12    - Unknown word (rustpymod)          -- if rustpymod is None:
whats_left.py:402:25    - Unknown word (rustpymod)          -- elif isinstance(rustpymod, Exception):
whats_left.py:403:51    - Unknown word (rustpymod)          -- import"][modname] = rustpymod.__class__.__name__
whats_left.py:403:86    - Unknown word (rustpymod)          -- class__.__name__ + str(rustpymod)
whats_left.py:405:44    - Unknown word (cpymod)             -- mplemented_items = sorted(set(cpymod) & set(rustpymod))
whats_left.py:406:37    - Unknown word (cpymod)             -- missing_items = set(cpymod) - set(rustpymod)
whats_left.py:411:63    - Unknown word (cpymod)             -- rustpymod[item]["sig"], cpymod[item]["sig"])
whats_left.py:413:46    - Unknown word (cpymod)             -- rustpymod[item]["sig"] != cpymod[item]["sig"]
whats_left.py:431:33    - Unknown word (cpymods)            -- cpython_modules"] = cpymods
whats_left.py:432:17    - Unknown word (implementeds)       -- result["not_implementeds"] = not_implementeds
whats_left.py:432:38    - Unknown word (implementeds)       -- implementeds"] = not_implementeds
whats_left.py:452:32    - Unknown word (RUSTPYTHONPATH)     -- os.environ.copy(), "RUSTPYTHONPATH": "Lib"},
whats_left.py:487:23    - Unknown word (rustpy)             -- for i, (item, rustpy_value, cpython_value
whats_left.py:490:16    - Unknown word (rustpy)             -- if rustpy_value is None or rustpy
whats_left.py:490:40    - Unknown word (rustpy)             -- rustpy_value is None or rustpy_value.startswith("ValueError
whats_left.py:491:17    - Unknown word (rustpy)             -- rustpy_value = f" {rustpy_value
whats_left.py:491:36    - Unknown word (rustpy)             -- rustpy_value = f" {rustpy_value}"
whats_left.py:5:3       - Unknown word (cpymods)    -- # cpymods - a dictionary mapping
whats_left.py:79:6      - Unknown word (fpectl)     -- "fpectl",

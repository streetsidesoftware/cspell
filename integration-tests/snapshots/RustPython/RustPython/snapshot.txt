
Repository: RustPython/RustPython
Url: "https://github.com/RustPython/RustPython.git"
Args: ["**"]
Lines:
 CSpell: Files checked: 1782, Issues found: 40842 in 1356 files
 exit code: 1
./Cargo.toml:17:60     - Unknown word (codegen)    -- compiler/core", "compiler/codegen", "compiler/parser"
./Cargo.toml:18:44     - Unknown word (pylib)      -- derive", "jit", "vm", "pylib", "stdlib", "wasm/lib
./Cargo.toml:18:53     - Unknown word (stdlib)     -- jit", "vm", "pylib", "stdlib", "wasm/lib", "derive
./Cargo.toml:22:44     - Unknown word (importlib)  -- "stdlib", "zlib", "importlib", "encodings", "rustpython
./Cargo.toml:22:88     - Unknown word (lalrpop)    -- "rustpython-parser/lalrpop"]
./Cargo.toml:26:49     - Unknown word (flamescope) -- flame-it", "flame", "flamescope"]
./Cargo.toml:45:82     - Unknown word (termcolor)  -- features = ["atty", "termcolor"] }
./Cargo.toml:48:1      - Unknown word (libc)       -- libc = "0.2.133"
./Cargo.toml:53:1      - Unknown word (rustyline)  -- rustyline = "10.0.0"
./Cargo.toml:89:16     - Unknown word (Uncommment) -- # REDOX START, Uncommment when you want to compile
./Cargo.toml:89:63     - Unknown word (redoxer)    -- to compile/check with redoxer
./DEVELOPMENT.md:110:5     - Unknown word (speedscope) -- The speedscope json format (default
./DEVELOPMENT.md:128:26    - Unknown word (subcrates)  -- src`: using the other subcrates to bring rustpython
./DEVELOPMENT.md:161:17    - Unknown word (structs)    -- tree are Rust structs and enums.
./DEVELOPMENT.md:24:20     - Unknown word (rustup)     -- - If you have `rustup` on your system, enter
./DEVELOPMENT.md:33:72     - Unknown word (automake)   -- make sure autoconf, automake,
./DEVELOPMENT.md:37:35     - Unknown word (pytest)     -- The Python package, `pytest`, is used for testing
./DEVELOPMENT.md:43:49     - Unknown word (codestyle)  -- com/rust-lang/rustfmt) codestyle. Please format your
./DEVELOPMENT.md:89:19     - Unknown word (cmath)      -- To run only `test_cmath` (located at `Lib/test
./LICENSE-logo:139:15    - Unknown word (sublicensable)   -- non-sublicensable, non-exclusive, irrevocable
./LICENSE-logo:205:34    - Unknown word (waivable)        -- under any voluntary or waivable statutory or compulsory
./LICENSE-logo:36:7      - Unknown word (creativecommons) -- wiki.creativecommons.org/Considerations_for
./Lib/PSF-LICENSE:11:4      - Unknown word (Reston)       -- in Reston, Virginia where he released
./Lib/PSF-LICENSE:4:62      - Unknown word (Stichting)  -- Guido van Rossum at Stichting
./Lib/PSF-LICENSE:50:26     - Unknown word (Stallman)     -- According to Richard Stallman, 1.6.1 is not GPL-compatible
./Lib/PSF-LICENSE:52:20     - Unknown word (Stallman's)   -- CNRI, however, Stallman's lawyer has told CNRI
./Lib/PSF-LICENSE:5:1       - Unknown word (Mathematisch) -- Mathematisch Centrum (CWI, see http
./Lib/__future__.py:41:22     - Unknown word (bitfield)   -- CompilerFlag is the (bitfield) flag that should be
./Lib/__future__.py:58:15     - Unknown word (FLUFL)      -- "barry_as_FLUFL",
./Lib/_collections_abc.py:210:27    - Unknown word (asend)           -- return await self.asend(None)
./Lib/_collections_abc.py:220:15    - Unknown word (athrow)          -- async def athrow(self, typ, val=None
./Lib/_collections_abc.py:37:19     - Unknown word (somebytearray) -- # it = iter(somebytearray)
./Lib/_collections_abc.py:417:39    - Unknown word (resulttype)      -- `Callable[argtypes, resulttype]`.
./Lib/_collections_abc.py:448:24    - Unknown word (typevarlike)     -- if _is_typevarlike(arg):
./Lib/_collections_abc.py:45:6      - Unknown word (keyiterator)   -- dict_keyiterator = type(iter({}.keys
./Lib/_collections_abc.py:46:6      - Unknown word (valueiterator) -- dict_valueiterator = type(iter({}.values
./Lib/_collections_abc.py:47:6      - Unknown word (itemiterator)  -- dict_itemiterator = type(iter({}.items
./Lib/_collections_abc.py:499:17    - Unknown word (subparams)       -- subparams = arg.__parameters_
./Lib/_collections_abc.py:49:6      - Unknown word (reverseiterator) -- list_reverseiterator = type(iter(reversed
./Lib/_collections_abc.py:501:21    - Unknown word (subargs)         -- subargs = tuple(subst[x] for
./Lib/_collections_abc.py:51:1      - Unknown word (longrange)       -- longrange_iterator = type(iter
./Lib/_collections_abc.py:61:1      - Unknown word (mappingproxy)    -- mappingproxy = type(type.__dict_
./Lib/_collections_abc.py:807:11    - Unknown word (tpflags)         -- __abc_tpflags__ = 1 << 6 # Py_TPFLAGS
./Lib/_compat_pickle.py:159:5     - Unknown word (excname)        -- for excname in PYTHON2_EXCEPTIONS
./Lib/_compat_pickle.py:187:6     - Unknown word (CGIHTTP)        -- 'CGIHTTPServer': 'http.server
./Lib/_compat_pickle.py:206:22    - Unknown word (basestring)     -- ('__builtin__', 'basestring'): ('builtins', 'str
./Lib/_compat_pickle.py:209:18    - Unknown word (socketobject)   -- ('socket', '_socketobject'): ('socket', 'SocketType
./Lib/_compat_pickle.py:20:6      - Unknown word (Tkdnd)      -- 'Tkdnd': 'tkinter.dnd',
./Lib/_compat_pickle.py:24:6      - Unknown word (Tkconstants) -- 'Tkconstants': 'tkinter.constants
./Lib/_compat_pickle.py:28:6      - Unknown word (markupbase)  -- 'markupbase': '_markupbase',
./Lib/_compat_pickle.py:32:6      - Unknown word (dbhash)      -- 'dbhash': 'dbm.bsd',
./Lib/_compat_pickle.py:33:6      - Unknown word (dumbdbm)     -- 'dumbdbm': 'dbm.dumb',
./Lib/_compat_pickle.py:35:6      - Unknown word (gdbm)        -- 'gdbm': 'dbm.gnu',
./Lib/_compat_pickle.py:36:6      - Unknown word (xmlrpclib)   -- 'xmlrpclib': 'xmlrpc.client',
./Lib/_compat_pickle.py:39:6      - Unknown word (htmlentitydefs) -- 'htmlentitydefs' : 'html.entities',
./Lib/_compat_pickle.py:42:6      - Unknown word (cookielib)      -- 'cookielib': 'http.cookiejar',
./Lib/_compat_pickle.py:49:6      - Unknown word (anydbm)         -- 'anydbm': 'dbm',
./Lib/_compat_pickle.py:50:7      - Unknown word (abcoll)         -- '_abcoll' : 'collections.abc
./Lib/_compat_pickle.py:61:22     - Unknown word (unichr)         -- ('__builtin__', 'unichr'): ('builtins',
./Lib/_compat_pickle.py:64:20     - Unknown word (izip)           -- ('itertools', 'izip'): ('builtins
./Lib/_compat_pickle.py:66:20     - Unknown word (ifilter)        -- ('itertools', 'ifilter'): ('builtins'
./Lib/_compat_pickle.py:67:20     - Unknown word (ifilterfalse)   -- ('itertools', 'ifilterfalse'): ('itertools', 'filterfalse
./Lib/_compat_pickle.py:78:17     - Unknown word (getproxies)     -- ('urllib', 'getproxies'): ('urllib.request
./Lib/_compression.py:34:19     - Unknown word (decompressor) -- """Adapts the decompressor API to a RawIOBase reader
./Lib/_compression.py:39:28     - Unknown word (decomp)       -- def __init__(self, fp, decomp_factory, trailing_error
./Lib/_compression.py:74:25     - Unknown word (readall)      -- return self.readall()
./Lib/_compression.py:83:17     - Unknown word (rawblock)     -- rawblock = (self._decompressor
./Lib/_dummy_thread.py:107:23    - Unknown word (waitflag)     -- def acquire(self, waitflag=None, timeout=-1):
./Lib/_dummy_thread.py:69:49     - Unknown word (threadmodule) -- should only be used when _threadmodule is not
./Lib/_markupbase.py:10:2      - Unknown word (declname)   -- _declname_match = re.compile(r
./Lib/_markupbase.py:11:2      - Unknown word (declstringlit) -- _declstringlit_match = re.compile(r
./Lib/_markupbase.py:129:36    - Unknown word (attlist)              -- elif decltype in {"attlist", "linktype", "link
./Lib/_markupbase.py:129:47    - Unknown word (linktype)             -- decltype in {"attlist", "linktype", "link", "element"
./Lib/_markupbase.py:13:2      - Unknown word (markedsectionclose) -- _markedsectionclose = re.compile(r']\s*
./Lib/_markupbase.py:152:64    - Unknown word (rcdata)               -- ignore", "include", "rcdata"}:
./Lib/_markupbase.py:182:40    - Unknown word (declstartpos)         -- doctype_subset(self, i, declstartpos):
./Lib/_markupbase.py:18:2      - Unknown word (msmarkedsectionclose) -- _msmarkedsectionclose = re.compile(r']\s*
./Lib/_markupbase.py:40:9      - Unknown word (getpos)               -- def getpos(self):
./Lib/_markupbase.py:48:9      - Unknown word (updatepos)            -- def updatepos(self, i, j):
./Lib/_markupbase.py:51:9      - Unknown word (rawdata)              -- rawdata = self.rawdata
./Lib/_markupbase.py:52:9      - Unknown word (nlines)               -- nlines = rawdata.count("\n
./Lib/_markupbase.py:61:11     - Unknown word (otherchars)           -- _decl_otherchars = ''
./Lib/_markupbase.py:85:63     - Unknown word (stringlit)            -- could look like: ((name|stringlit) S*) + '>'
./Lib/_osx_support.py:146:5     - Unknown word (oldvalue)      -- oldvalue = _config_vars.get(cv
./Lib/_osx_support.py:152:16    - Unknown word (sysroot)       -- _cache_default_sysroot = None
./Lib/_osx_support.py:15:21     - Unknown word (isdkroot)   -- # like "-arch" or "-isdkroot", that may need customization
./Lib/_osx_support.py:161:8     - Unknown word (incdirs)       -- in_incdirs = False
./Lib/_osx_support.py:182:30    - Unknown word (isysroot)      -- builds, in particular -isysroot and -arch arguments
./Lib/_osx_support.py:212:10    - Unknown word (miscompiles)   -- # miscompiles Python.
./Lib/_osx_support.py:220:10    - Unknown word (oldcc)         -- cc = oldcc = _config_vars['CC'
./Lib/_osx_support.py:274:25    - Unknown word (archs)         -- _remove_unsupported_archs(_config_vars):
./Lib/_osx_support.py:343:5     - Unknown word (cflags)        -- cflags = _config_vars.get(
./Lib/_osx_support.py:367:22    - Unknown word (Sysroot)       -- stripArch = stripSysroot = False
./Lib/_osx_support.py:416:5     - Unknown word (argvar)        -- argvar = cc_args
./Lib/_osx_support.py:499:36    - Unknown word (osname)        -- platform_osx(_config_vars, osname, release, machine):
./Lib/_osx_support.py:509:5     - Unknown word (macver)        -- macver = _config_vars.get(
./Lib/_osx_support.py:510:5     - Unknown word (macrelease)    -- macrelease = _get_system_version
./Lib/_osx_support.py:55:18     - Unknown word (commandstring) -- def _read_output(commandstring, capture_stderr=False
./Lib/_osx_support.py:77:22     - Unknown word (toolname)      -- def _find_build_tool(toolname):
./Lib/_osx_support.py:78:51     - Unknown word (xcrun)         -- current path or using xcrun"""
./Lib/_py_abc.py:136:13    - Unknown word (rcls)             -- for rcls in cls._abc_registry
./Lib/_py_abc.py:141:13    - Unknown word (scls)             -- for scls in cls.__subclasses
./Lib/_py_abc.py:1:7       - Unknown word (weakrefset) -- from _weakrefset import WeakSet
./Lib/_py_abc.py:40:43     - Unknown word (isabstractmethod) -- if getattr(value, "__isabstractmethod__", False)}
./Lib/_py_abc.py:42:42     - Unknown word (abstractmethods)  -- in getattr(base, "__abstractmethods__", set()):
./Lib/_pycodecs.py:1071:39   - Unknown word (Uxxxxxxxx)     -- bit characters to '\Uxxxxxxxx' */
./Lib/_pycodecs.py:1084:5    - Unknown word (charmapencode) -- def charmapencode_output(c, mapping):
./Lib/_pycodecs.py:1103:22   - Unknown word (xmlcharrefreplace) -- # * 3=ignore, 4=xmlcharrefreplace */
./Lib/_pycodecs.py:1110:5    - Unknown word (inpos)             -- inpos = 0
./Lib/_pycodecs.py:113:11    - Unknown word (unicodeescape) -- res = unicodeescape_string(obj, len(obj
./Lib/_pycodecs.py:1208:30   - Unknown word (rawunicodeescape)  -- errors, "rawunicodeescape", "truncated \\uXXXX
./Lib/_pycodecs.py:185:30    - Unknown word (unistr)        -- unicode_internal_decode( unistr, errors='strict'):
./Lib/_pycodecs.py:269:21    - Unknown word (hexa)          -- hexa = data[i+1:i+3]
./Lib/_pycodecs.py:40:23     - Unknown word (Lemburg)    -- Written by Marc-Andre Lemburg (mal@lemburg.com).
./Lib/_pycodecs.py:424:5     - Unknown word (errmsg)        -- errmsg = ""
./Lib/_pycodecs.py:426:5     - Unknown word (bitsleft)      -- bitsleft = 0
./Lib/_pycodecs.py:427:5     - Unknown word (charsleft)     -- charsleft = 0
./Lib/_pycodecs.py:473:58    - Unknown word (misencoded)    -- indicate the potential of a misencoded character. */
./Lib/_pycodecs.py:47:7      - Unknown word (unicodecodec) -- #from unicodecodec import *
./Lib/_pycodecs.py:494:13    - Unknown word (startinpos)    -- startinpos = i
./Lib/_pycodecs.py:50:46     - Unknown word (readbuffer)   -- encode', 'mbcs_decode', 'readbuffer_encode', 'escape_encode
./Lib/_pycodecs.py:511:19    - Unknown word (aint)          -- #XXX This aint right
./Lib/_pycodecs.py:512:9     - Unknown word (endinpos)      -- endinpos = size
./Lib/_pycodecs.py:543:66    - Unknown word (unshift)       -- BASE64 set implicitly unshift the sequence
./Lib/_pycodecs.py:621:40    - Unknown word (uxxxx)         -- bit characters to '\uxxxx' */
./Lib/_pycodecs.py:856:9     - Unknown word (newpos)        -- newpos = res[1]
./Lib/_pycodecs.py:899:17    - Unknown word (startpos)      -- #/* startpos for collecting unencodable
./Lib/_pycodecs.py:899:41    - Unknown word (unencodable)   -- startpos for collecting unencodable chars */
./Lib/_pycodecs.py:900:13    - Unknown word (collstart)     -- collstart = pos
./Lib/_pycodecs.py:901:13    - Unknown word (collend)       -- collend = pos+1
./Lib/_pycodecs.py:922:5     - Unknown word (hexescape)     -- def hexescape(s, pos, digits, message
./Lib/_pycodecs.py:973:17    - Unknown word (errmessage)    -- errmessage = "\\ at end of string
./Lib/_pydecimal.py:1084:9    - Unknown word (leftdigits)   -- leftdigits = self._exp + len(self
./Lib/_pydecimal.py:1086:11   - Unknown word (dotplace)     -- # dotplace is number of digits
./Lib/_pydecimal.py:1220:9    - Unknown word (negativezero) -- negativezero = 0
./Lib/_pydecimal.py:1316:9    - Unknown word (resultsign)   -- resultsign = self._sign ^ other
./Lib/_pydecimal.py:1333:9    - Unknown word (resultexp)    -- resultexp = self._exp + other
./Lib/_pydecimal.py:138:34    - Unknown word (localcontext) -- setcontext', 'getcontext', 'localcontext',
./Lib/_pydecimal.py:1395:13   - Unknown word (coeff)        -- coeff = 0
./Lib/_pydecimal.py:13:20     - Unknown word (backported) -- # bug) and will be backported. At this point the
./Lib/_pydecimal.py:1432:9    - Unknown word (expdiff)      -- expdiff = self.adjusted() -
./Lib/_pydecimal.py:147:3     - Unknown word (xname)        -- __xname__ = __name__    # sys
./Lib/_pydecimal.py:151:3     - Unknown word (libmpdec)     -- __libmpdec_version__ = "2.4.2"
./Lib/_pydecimal.py:1717:51   - Unknown word (Etop)         -- and between Etiny and Etop if clamp==1.
./Lib/_pydecimal.py:2038:23   - Unknown word (isinteger)    -- if not (self._isinteger() and
./Lib/_pydecimal.py:2069:19   - Unknown word (iseven)       -- if other._iseven():
./Lib/_pydecimal.py:2097:48   - Unknown word (nonspecial)   -- and other must both be nonspecial; self must
./Lib/_pydecimal.py:2124:28   - Unknown word (nbits)        -- # if |y| <= 1/nbits(xc) then xc < 2**nbits
./Lib/_pydecimal.py:2214:19   - Unknown word (emax)         -- # emax >= largest e such that
./Lib/_pydecimal.py:2378:24   - Unknown word (noninteger)   -- # -ve**noninteger = NaN
./Lib/_pydecimal.py:2480:69   - Unknown word (roundable)    -- result is unambiguously roundable
./Lib/_pydecimal.py:2483:31   - Unknown word (dpower)       -- coeff, exp = _dpower(xc, xe, yc, ye, p+extra
./Lib/_pydecimal.py:2512:13   - Unknown word (newcontext)   -- newcontext = context.copy()
./Lib/_pydecimal.py:2629:51   - Unknown word (folddown)     -- care of any necessary folddown, and
./Lib/_pydecimal.py:3107:58   - Unknown word (underflows)   -- either overflows or underflows.
./Lib/_pydecimal.py:3132:31   - Unknown word (dexp)         -- coeff, exp = _dexp(c, e, p+extra)
./Lib/_pydecimal.py:3266:22   - Unknown word (dlog)         -- coeff = _dlog(c, e, places)
./Lib/_pydecimal.py:3360:9    - Unknown word (logb)         -- def logb(self, context=None)
./Lib/_pydecimal.py:3390:10   - Unknown word (islogical)    -- def _islogical(self):
./Lib/_pydecimal.py:339:19    - Unknown word (Emin)         -- """Exponent < Emin before rounding.
./Lib/_pydecimal.py:355:53    - Unknown word (Emax)         -- implementation (the value Emax).
./Lib/_pydecimal.py:3693:9    - Unknown word (torot)        -- torot = int(other)
./Lib/_pydecimal.py:3694:9    - Unknown word (rotdig)       -- rotdig = self._int
./Lib/_pydecimal.py:3695:9    - Unknown word (topad)        -- topad = context.prec - len
./Lib/_pydecimal.py:3706:9    - Unknown word (scaleb)       -- def scaleb(self, other, context
./Lib/_pydecimal.py:3719:9    - Unknown word (liminf)       -- liminf = -2 * (context.Emax
./Lib/_pydecimal.py:3720:9    - Unknown word (limsup)       -- limsup =  2 * (context.Emax
./Lib/_pydecimal.py:3961:47   - Unknown word (vmin)         -- check(self, name, value, vmin, vmax):
./Lib/_pydecimal.py:3961:53   - Unknown word (vmax)         -- name, value, vmin, vmax):
./Lib/_pydecimal.py:396:54    - Unknown word (Etiny)        -- exponent is not less than Etiny. This may result
./Lib/_pydecimal.py:4066:33   - Unknown word (reraises)     -- trap_enabler is set, it reraises the exception.  Otherwise
./Lib/_pydecimal.py:40:5      - Unknown word (setcontext) -- >>> setcontext(ExtendedContext)
./Lib/_pydecimal.py:4:26      - Unknown word (eprice)     -- Written by Eric Price <eprice at tjhsst.edu>
./Lib/_pydecimal.py:4:36      - Unknown word (tjhsst)     -- Eric Price <eprice at tjhsst.edu>
./Lib/_pydecimal.py:5763:6    - Unknown word (ilog)         -- def _ilog(x, M, L = 8):
./Lib/_pydecimal.py:5764:65   - Unknown word (boundable)    -- with absolute error boundable
./Lib/_pydecimal.py:5804:5    - Unknown word (yshift)       -- yshift = _rshift_nearest(y
./Lib/_pydecimal.py:5838:13   - Unknown word (tenpower)     -- log_tenpower = f*M # exact
./Lib/_pydecimal.py:5896:9    - Unknown word (getdigits)    -- def getdigits(self, p):
./Lib/_pydecimal.py:58:5      - Unknown word (getcontext) -- >>> getcontext().prec = 18
./Lib/_pydecimal.py:5926:6    - Unknown word (iexp)         -- def _iexp(x, M, L=8):
./Lib/_pydecimal.py:5952:5    - Unknown word (Mshift)       -- Mshift = M<<R
./Lib/_pydecimal.py:5988:9    - Unknown word (cshift)       -- cshift = c*10**shift
./Lib/_pydecimal.py:5:10      - Unknown word (Facundo)    -- # and Facundo Batista <facundo at
./Lib/_pydecimal.py:5:27      - Unknown word (facundo)    -- and Facundo Batista <facundo at taniquetil.com.ar
./Lib/_pydecimal.py:5:38      - Unknown word (taniquetil) -- Batista <facundo at taniquetil.com.ar>
./Lib/_pydecimal.py:603:13    - Unknown word (intpart)      -- intpart = m.group('int')
./Lib/_pydecimal.py:606:17    - Unknown word (fracpart)     -- fracpart = m.group('frac') or
./Lib/_pydecimal.py:6185:31   - Unknown word (minimumwidth) -- fill]align][sign][#][0][minimumwidth][,][.precision][type
./Lib/_pydecimal.py:6194:5    - Unknown word (zeropad)      -- (?P<zeropad>0)?
./Lib/_pydecimal.py:6293:17   - Unknown word (unpadded)     -- """Given an unpadded, non-aligned numeric
./Lib/_pydecimal.py:6340:27   - Unknown word (unrecognised) -- raise ValueError('unrecognised format for grouping
./Lib/_pydecimal.py:6413:9    - Unknown word (echar)        -- echar = {'E': 'E', 'e': 'e
./Lib/_pydecimal.py:6:18      - Unknown word (Hettinger)  -- # and Raymond Hettinger <python at rcn.com>
./Lib/_pydecimal.py:769:10    - Unknown word (isinfinity)   -- def _isinfinity(self):
./Lib/_pydecimal.py:7:10      - Unknown word (Aahz)       -- # and Aahz <aahz at pobox.com>
./Lib/_pydecimal.py:7:16      - Unknown word (aahz)       -- # and Aahz <aahz at pobox.com>
./Lib/_pydecimal.py:7:24      - Unknown word (pobox)      -- and Aahz <aahz at pobox.com>
./Lib/_pydecimal.py:837:26    - Unknown word (qnan)         -- elif self.is_qnan():
./Lib/_pydecimal.py:970:39    - Unknown word (raiseit)      -- convert_other(other, raiseit=True)
./Lib/_pyio.py:1541:34   - Unknown word (xrwab)            -- not set(mode) <= set('xrwab+'):
./Lib/_pyio.py:1543:22   - Unknown word (rwax)             -- if sum(c in 'rwax' for c in mode) !=
./Lib/_pyio.py:1575:9    - Unknown word (noinherit)        -- noinherit_flag = (getattr(os,
./Lib/_pyio.py:1597:13   - Unknown word (fdfstat)          -- fdfstat = os.fstat(fd)
./Lib/_pyio.py:170:5     - Unknown word (closedfd)         -- closedfd is a bool. If closefd
./Lib/_pyio.py:1921:14   - Unknown word (seennl)           -- self.seennl = 0
./Lib/_pyio.py:1922:14   - Unknown word (pendingcr)        -- self.pendingcr = False
./Lib/_pyio.py:2000:52   - Unknown word (getpreferredencoding) -- It defaults to locale.getpreferredencoding(False).
./Lib/_pyio.py:2085:17   - Unknown word (cratio)               -- self._b2cratio = 0.0
./Lib/_pyio.py:2087:15   - Unknown word (readuniversal)        -- self._readuniversal = not newline
./Lib/_pyio.py:2088:15   - Unknown word (readtranslate)        -- self._readtranslate = newline is None
./Lib/_pyio.py:2089:15   - Unknown word (readnl)               -- self._readnl = newline
./Lib/_pyio.py:2090:15   - Unknown word (writetranslate)       -- self._writetranslate = newline != ''
./Lib/_pyio.py:2091:15   - Unknown word (writenl)              -- self._writenl = newline or os.linesep
./Lib/_pyio.py:209:21    - Unknown word (axrwb)            -- if modes - set("axrwb+tU") or len(mode) >
./Lib/_pyio.py:2237:9    - Unknown word (haslf)                -- haslf = (self._writetranslate
./Lib/_pyio.py:2388:32   - Unknown word (temptative)           -- # Decode up to temptative start point
./Lib/_pyio.py:258:25    - Unknown word (fstat)            -- bs = os.fstat(raw.fileno()).st_blksize
./Lib/_pyio.py:2594:15   - Unknown word (endpos)               -- pos = endpos = None
./Lib/_pyio.py:2610:17   - Unknown word (nlpos)                -- nlpos = line.find("\n", start
./Lib/_pyio.py:2611:17   - Unknown word (crpos)                -- crpos = line.find("\r", start
./Lib/_pyio.py:2681:48   - Unknown word (surrogatepass)        -- errors="surrogatepass",
./Lib/_pyio.py:26:18     - Unknown word (blksize)    -- # open() uses st_blksize whenever we can
./Lib/_pyio.py:300:23    - Unknown word (embedders)        -- in order to allow embedders more control over code
./Lib/_pyio.py:304:21    - Unknown word (pyio)             -- warnings.warn("_pyio.open_code() may not
./Lib/_pyio.py:346:54    - Unknown word (seeked)           -- be read, written or seeked.
./Lib/_pyio.py:36:18     - Unknown word (finalizer)  -- # Does io.IOBase finalizer log the exception if
./Lib/_pyio.py:38:43     - Unknown word (gettotalrefcount) -- UNRAISABLE = (hasattr(sys, "gettotalrefcount") or sys.flags.dev_mode
./Lib/_pyio.py:561:17    - Unknown word (nreadahead)       -- def nreadahead():
./Lib/_pyio.py:562:17    - Unknown word (readahead)        -- readahead = self.peek(1)
./Lib/_pyio.py:71:42     - Unknown word (pylifecycle)      -- builtins_open() in Python/pylifecycle.c.
./Lib/_pyio.py:893:9     - Unknown word (modname)          -- modname = self.__class__.__module
./Lib/_pyio.py:894:9     - Unknown word (clsname)          -- clsname = self.__class__.__qualname
./Lib/_pyio.py:938:9     - Unknown word (getbuffer)        -- def getbuffer(self):
./Lib/_pyio.py:982:22    - Unknown word (nbytes)           -- n = view.nbytes # Size of any bytes
./Lib/_sitebuiltins.py:59:16     - Unknown word (linecnt)    -- self.__linecnt = len(self.__lines)
./Lib/_threading_local.py:12:7      - Unknown word (mydata)     -- >>> mydata = local()
./Lib/_threading_local.py:151:8     - Unknown word (localimpl)  -- class _localimpl:
./Lib/_threading_local.py:153:34    - Unknown word (localargs)  -- = 'key', 'dicts', 'localargs', 'locallock', '__weakref
./Lib/_threading_local.py:153:47    - Unknown word (locallock)  -- dicts', 'localargs', 'locallock', '__weakref__'
./Lib/_threading_local.py:171:9     - Unknown word (localdict)  -- localdict = {}
./Lib/_threading_local.py:177:22    - Unknown word (wrthread)   -- thread = wrthread()
./Lib/_threading_local.py:185:21    - Unknown word (wrlocal)    -- local = wrlocal()
./Lib/_weakrefset.py:132:9     - Unknown word (newset)        -- newset = self.copy()
./Lib/_weakrefset.py:17:24     - Unknown word (weakcontainer) -- def __init__(self, weakcontainer):
./Lib/_weakrefset.py:65:17     - Unknown word (itemref)       -- for itemref in self.data:
./Lib/abc.py:29:40     - Unknown word (classmethods) -- indicating abstract classmethods.
./Lib/abc.py:49:40     - Unknown word (staticmethods) -- indicating abstract staticmethods.
./Lib/abc.py:7:20      - Unknown word (funcobj)    -- def abstractmethod(funcobj):
./Lib/aifc.py:112:41    - Unknown word (pathing)    -- audio frames without pathing up the
./Lib/aifc.py:141:30    - Unknown word (openfp)     -- ["Error", "open", "openfp"]
./Lib/aifc.py:185:5     - Unknown word (expon)      -- expon = _read_short(f) #
./Lib/aifc.py:190:5     - Unknown word (himant)     -- himant = _read_ulong(f) #
./Lib/aifc.py:191:5     - Unknown word (lomant)     -- lomant = _read_ulong(f) #
./Lib/aifc.py:233:9     - Unknown word (fmant)      -- fmant, expon = math.frexp
./Lib/aifc.py:240:39    - Unknown word (denormalized) -- expon < 0:           # denormalized
./Lib/aifc.py:245:13    - Unknown word (fsmant)       -- fsmant = math.floor(fmant)
./Lib/aifc.py:258:28    - Unknown word (nchannels)    -- 'nchannels sampwidth framerate
./Lib/aifc.py:258:38    - Unknown word (sampwidth)    -- 'nchannels sampwidth framerate nframes comptype
./Lib/aifc.py:258:58    - Unknown word (nframes)      -- sampwidth framerate nframes comptype compname')
./Lib/aifc.py:258:66    - Unknown word (comptype)     -- sampwidth framerate nframes comptype compname')
./Lib/aifc.py:258:75    - Unknown word (compname)     -- framerate nframes comptype compname')
./Lib/aifc.py:292:8     - Unknown word (soundpos)     -- # _soundpos -- the position in the
./Lib/aifc.py:301:8     - Unknown word (ssnd)         -- # _ssnd_seek_needed -- 1 iff
./Lib/aifc.py:304:8     - Unknown word (framesize)    -- # _framesize -- size of one frame
./Lib/aifc.py:317:9     - Unknown word (formdata)     -- formdata = chunk.read(4)
./Lib/aifc.py:332:13    - Unknown word (chunkname)    -- chunkname = chunk.getname()
./Lib/aifc.py:343:23    - Unknown word (readmark)     -- self._readmark(chunk)
./Lib/aifc.py:36:27     - Unknown word (pstring)    -- <marker name> ("pstring")
./Lib/aifc.py:403:9     - Unknown word (getversion)   -- ## def getversion(self):
./Lib/aifc.py:449:10    - Unknown word (alaw)         -- def _alaw2lin(self, data):
./Lib/aifc.py:453:10    - Unknown word (ulaw)         -- def _ulaw2lin(self, data):
./Lib/aifc.py:457:10    - Unknown word (adpcm)        -- def _adpcm2lin(self, data):
./Lib/aifc.py:459:32    - Unknown word (adpcmstate)   -- not hasattr(self, '_adpcmstate'):
./Lib/aifc.py:476:21    - Unknown word (SGI's)        -- #DEBUG: SGI's soundeditor produces
./Lib/aifc.py:476:27    - Unknown word (soundeditor)  -- #DEBUG: SGI's soundeditor produces a bad size
./Lib/aifc.py:478:22    - Unknown word (chunksize)    -- if chunk.chunksize == 18:
./Lib/aifc.py:508:9     - Unknown word (nmarkers)     -- nmarkers = _read_short(chunk
./Lib/aifc.py:553:8     - Unknown word (nframeswritten) -- # _nframeswritten -- the number of audio
./Lib/aifc.py:554:8     - Unknown word (datalength)     -- # _datalength -- the size of the audio
./Lib/aifc.py:555:8     - Unknown word (datawritten)    -- # _datawritten -- the size of the audio
./Lib/aifc.py:589:15    - Unknown word (marklength)     -- self._marklength = 0
./Lib/aifc.py:673:9     - Unknown word (setversion)     -- ## def setversion(self, version):
./Lib/aifc.py:739:19    - Unknown word (patchheader)    -- self._patchheader()
./Lib/aifc.py:750:19    - Unknown word (writemarkers)   -- self._writemarkers()
./Lib/aifc.py:781:38    - Unknown word (datasize)       -- header_written(self, datasize):
./Lib/aifc.py:805:29    - Unknown word (initlength)     -- _write_header(self, initlength):
./Lib/aifc.py:827:9     - Unknown word (commlength)     -- commlength = self._write_form_length
./Lib/aifc.py:861:13    - Unknown word (verslength)     -- verslength = 12
./Lib/aifc.py:870:9     - Unknown word (curpos)         -- curpos = self._file.tell()
./Lib/antigravity.py:7:34      - Unknown word (datedow)    -- latitude, longitude, datedow):
./Lib/antigravity.py:8:36      - Unknown word (Munroe)     -- geohash() using the Munroe algorithm.
./Lib/argparse.py:1214:9    - Unknown word (subnamespace) -- subnamespace, arg_strings = parser
./Lib/argparse.py:1583:9    - Unknown word (confl)        -- confl_optionals = []
./Lib/argparse.py:1709:9    - Unknown word (superinit)    -- superinit = super(ArgumentParser
./Lib/argparse.py:1:21      - Unknown word (Bethard)    -- # Author: Steven J. Bethard <steven.bethard@gmail
./Lib/argparse.py:2011:23   - Unknown word (Positionals)  -- # the list of Positionals left to be parsed; this
./Lib/argparse.py:263:17    - Unknown word (subaction)  -- for subaction in self._iter_indented
./Lib/argparse.py:263:50    - Unknown word (subactions) -- self._iter_indented_subactions(action):
./Lib/argparse.py:302:30    - Unknown word (positionals) -- if no optionals or positionals are available, usage
./Lib/argparse.py:328:36    - Unknown word (wrappable)   -- # break usage into wrappable parts
./Lib/ast.py:1047:47   - Unknown word (elifs)      -- ifs into equivalent elifs.
./Lib/ast.py:1175:9    - Unknown word (unparser)   -- unparser = type(self)(_avoid
./Lib/ast.py:1318:5    - Unknown word (unop)       -- unop = {"Invert": "~", "Not
./Lib/ast.py:134:13    - Unknown word (allsimple)  -- allsimple = True
./Lib/ast.py:1388:5    - Unknown word (cmpops)     -- cmpops = {
./Lib/ast.py:1409:5    - Unknown word (boolops)    -- boolops = {"And": "and", "Or
./Lib/ast.py:1457:20   - Unknown word (unparsing)  -- # when unparsing a non-empty tuple, the
./Lib/ast.py:1680:26   - Unknown word (infile)     -- parser.add_argument('infile', type=argparse.FileType
./Lib/ast.py:24:35     - Unknown word (Armin)      -- copyright: Copyright 2008 by Armin Ronacher.
./Lib/ast.py:24:41     - Unknown word (Ronacher)   -- Copyright 2008 by Armin Ronacher.
./Lib/ast.py:276:51    - Unknown word (docstrings) -- provided does not have docstrings a TypeError
./Lib/ast.py:381:21    - Unknown word (popleft)    -- node = todo.popleft()
./Lib/ast.py:870:31    - Unknown word (binop)      -- self.write(" " + self.binop[node.op.__class__._
./Lib/asynchat.py:196:9     - Unknown word (sabs)       -- sabs = self.ac_out_buffer
./Lib/asynchat.py:293:12    - Unknown word (qwertydkjf) -- # f_p_a_e("qwertydkjf", "\r\n") => 0
./Lib/asyncio/base_events.py:1019:25   - Unknown word (socktype)   -- af, socktype, proto, canonname, sa
./Lib/asyncio/base_events.py:1019:42   - Unknown word (canonname)  -- af, socktype, proto, canonname, sa = res
./Lib/asyncio/base_events.py:101:6     - Unknown word (ipaddr)     -- def _ipaddr_info(host, port, family
./Lib/asyncio/base_events.py:104:34    - Unknown word (pton)       -- hasattr(socket, 'inet_pton'):
./Lib/asyncio/base_events.py:1319:23   - Unknown word (signalsafe) -- def _add_callback_signalsafe(self, handle):
./Lib/asyncio/base_events.py:1376:13   - Unknown word (nevent)     -- nevent = len(event_list)
./Lib/asyncio/base_events.py:1408:9    - Unknown word (ntodo)      -- ntodo = len(self._ready)
./Lib/asyncio/base_events.py:257:30    - Unknown word (asyncgen)   -- if hasattr(sys, 'get_asyncgen_hooks'):
./Lib/asyncio/base_events.py:261:19    - Unknown word (asyncgens)  -- self._asyncgens = weakref.WeakSet()
./Lib/asyncio/base_events.py:314:35    - Unknown word (rawsock)    -- ssl_transport(self, rawsock, protocol, sslcontext
./Lib/asyncio/base_events.py:320:15    - Unknown word (datagram)   -- def _make_datagram_transport(self, sock
./Lib/asyncio/base_events.py:359:40    - Unknown word (agen)       -- finalizer_hook(self, agen):
./Lib/asyncio/base_events.py:367:19    - Unknown word (firstiter)  -- def _asyncgen_firstiter_hook(self, agen):
./Lib/asyncio/base_events.py:386:17    - Unknown word (agens)      -- closing_agens = list(self._asyncgens
./Lib/asyncio/base_events.py:656:9     - Unknown word (addrinfo)   -- addrinfo = socket.getaddrinfo
./Lib/asyncio/base_events.py:676:27    - Unknown word (sockaddr)   -- def getnameinfo(self, sockaddr, flags=0):
./Lib/asyncio/base_events.py:736:17    - Unknown word (laddr)      -- laddr_infos = f2.result()
./Lib/asyncio/base_events.py:76:10     - Unknown word (reuseport)  -- def _set_reuseport(sock):
./Lib/asyncio/base_events.py:88:32     - Unknown word (bitmask)    -- Linux's socket.type is a bitmask that can include extra
./Lib/asyncio/base_events.py:941:30    - Unknown word (Datagram)   -- logger.info("Datagram endpoint local_addr
./Lib/asyncio/base_events.py:94:9      - Unknown word (dgram)      -- def _is_dgram_socket(sock):
./Lib/asyncio/base_events.py:983:63    - Unknown word (hostnames)  -- indirectly e.g. when hostnames
./Lib/asyncio/coroutines.py:119:29    - Unknown word (lasti)      -- assert caller.f_lasti >= 0
./Lib/asyncio/coroutines.py:200:11    - Unknown word (defiend)    -- # defiend with "async def".
./Lib/asyncio/coroutines.py:22:26     - Unknown word (Coro)       -- generator objects in a CoroWrapper instance (defined
./Lib/asyncio/coroutines.py:277:44    - Unknown word (Cython)     -- a built-in type or a Cython coroutine.
./Lib/asyncio/events.py:360:44    - Unknown word (systsem)    -- representing a file systsem path to bind the
./Lib/asyncio/events.py:428:54    - Unknown word (nonblocking) -- already switched to nonblocking.
./Lib/asyncio/events.py:623:53    - Unknown word (asynciomodule) -- implemented in C (see _asynciomodule.c)
./Lib/asyncio/proactor_events.py:1:23      - Unknown word (proactor)   -- "Event loop using a proactor and related classes
./Lib/asyncio/proactor_events.py:21:8      - Unknown word (Proactor)   -- class _ProactorBasePipeTransport(transports
./Lib/asyncio/proactor_events.py:355:26    - Unknown word (sockname)   -- self._extra['sockname'] = sock.getsockname
./Lib/asyncio/proactor_events.py:360:13    - Unknown word (peername)   -- if 'peername' not in self._extra
./Lib/asyncio/proactor_events.py:455:10    - Unknown word (socketpair) -- def _socketpair(self):
./Lib/asyncio/proactor_events.py:462:15    - Unknown word (ssock)      -- self._ssock.close()
./Lib/asyncio/proactor_events.py:464:15    - Unknown word (csock)      -- self._csock.close()
./Lib/asyncio/selector_events.py:44:14     - Unknown word (nodelay)    -- def _set_nodelay(sock):
./Lib/asyncio/selector_events.py:686:23    - Unknown word (Nagle)      -- # Disable the Nagle algorithm -- small writes
./Lib/asyncio/selector_events.py:833:9     - Unknown word (sslsock)    -- sslsock = sslcontext.wrap_socket
./Lib/asyncio/selector_events.py:844:38    - Unknown word (peercert)   -- specific extra info.  (peercert is set later)
./Lib/asyncio/sslproto.py:442:15    - Unknown word (sslpipe)    -- self._sslpipe = None
./Lib/asyncio/sslproto.py:85:15     - Unknown word (sslobj)     -- self._sslobj = None
./Lib/asyncio/sslproto.py:86:20     - Unknown word (ssldata)    -- self._need_ssldata = False
./Lib/asyncio/streams.py:480:9     - Unknown word (seplen)     -- seplen = len(sep)
./Lib/asyncio/streams.py:526:41    - Unknown word (SEPARATO)   -- i.e buffer='some textSEPARATO'. In this case we
./Lib/asyncio/streams.py:529:21    - Unknown word (abcdefghijklmnopqr) -- # buffer='abcdefghijklmnopqrS'. We may safely consume
./Lib/asyncio/streams.py:533:58    - Unknown word (rescanning)         -- optimal, since require rescanning
./Lib/asyncio/streams.py:546:13    - Unknown word (buflen)             -- buflen = len(self._buffer)
./Lib/asyncio/streams.py:551:17    - Unknown word (isep)               -- isep = self._buffer.find
./Lib/asyncio/streams.py:568:20    - Unknown word (ater)               -- # EOF *ater* inspecting the buffer
./Lib/asyncio/tasks.py:600:13    - Unknown word (coros)      -- def gather(*coros_or_futures, loop=None
./Lib/asyncio/tasks.py:649:5     - Unknown word (nchildren)  -- nchildren = len(children)
./Lib/asyncio/tasks.py:651:5     - Unknown word (nfinished)  -- nfinished = 0
./Lib/asyncio/test_utils.py:109:7     - Unknown word (SSLWSGI)    -- class SSLWSGIServerMixin:
./Lib/asyncio/unix_events.py:100:29    - Unknown word (wakup)       -- # number in the wakup file descriptor. _process
./Lib/asyncio/unix_events.py:105:20    - Unknown word (siginterrupt) -- signal.siginterrupt(sig, False)
./Lib/asyncio/unix_events.py:111:49    - Unknown word (nexc)         -- ValueError, OSError) as nexc:
./Lib/asyncio/unix_events.py:37:6      - Unknown word (sighandler) -- def _sighandler_noop(signum, frame)
./Lib/asyncio/unix_events.py:669:10    - Unknown word (cloexec)      -- # cloexec_flag = getattr(fcntl
./Lib/asyncio/unix_events.py:723:9     - Unknown word (waitpid)      -- waitpid(-1), there should be
./Lib/asyncio/unix_events.py:77:61     - Unknown word (uncatchable) -- number is invalid or uncatchable.
./Lib/asyncio/unix_events.py:802:63    - Unknown word (chld)         -- signal.SIGCHLD, self._sig_chld)
./Lib/asyncio/unix_events.py:951:59    - Unknown word (pids)         -- termination from unknown pids: %s",
./Lib/asyncio/windows_events.py:3:9       - Unknown word (winapi)     -- import _winapi
./Lib/asyncio/windows_events.py:403:15    - Unknown word (iocp)       -- self._iocp = _overlapped.CreateIoComplet
./Lib/asyncio/windows_events.py:443:27    - Unknown word (getresult)  -- return ov.getresult()
./Lib/asyncio/windows_events.py:711:18    - Unknown word (unregisted) -- # Remove unregisted futures
./Lib/asyncio/windows_utils.py:103:19    - Unknown word (attribs)    -- flags_and_attribs = _winapi.FILE_FLAG
./Lib/asyncio/windows_utils.py:152:35    - Unknown word (operatioon) -- raise ValueError("I/O operatioon on closed pipe")
./Lib/asyncio/windows_utils.py:40:53     - Unknown word (Geert)      -- github.com/4325783, by Geert Jansen.
./Lib/asyncio/windows_utils.py:57:9      - Unknown word (lsock)      -- lsock = socket.socket(family
./Lib/asyncio/windows_utils.py:89:9      - Unknown word (openmode)   -- openmode = _winapi.PIPE_ACCESS
./Lib/asyncio/windows_utils.py:91:17     - Unknown word (ibsize)     -- obsize, ibsize = bufsize, bufsize
./Lib/asyncio/windows_utils.py:91:9      - Unknown word (obsize)     -- obsize, ibsize = bufsize, bufsize
./Lib/asyncore.py:380:15    - Unknown word (winsock)    -- # winsock sometimes raises ENOTCONN
./Lib/asyncore.py:457:20    - Unknown word (tbinfo)     -- nil, t, v, tbinfo = compact_traceback
./Lib/asyncore.py:466:14    - Unknown word (uncaptured) -- 'uncaptured python exception, closing
./Lib/asyncore.py:573:57    - Unknown word (unixen)     -- man pages on various unixen, and
./Lib/asyncore.py:576:41    - Unknown word (filemap)    -- though - reading linux/mm/filemap.c shows that linux
./Lib/asyncore.py:58:6      - Unknown word (errorcode)  -- errorcode
./Lib/asyncore.py:605:37    - Unknown word (optname)    -- getsockopt(self, level, optname, buflen=None):
./Lib/asyncore.py:79:2      - Unknown word (reraised)   -- _reraised_exceptions = (ExitNow
./Lib/base64.py:220:5     - Unknown word (padchars)   -- padchars = l - len(s)
./Lib/base64.py:279:44    - Unknown word (foldnuls)   -- chars2, pad=False, foldnuls=False, foldspaces=False
./Lib/base64.py:279:60    - Unknown word (foldspaces) -- False, foldnuls=False, foldspaces=False):
./Lib/base64.py:303:39    - Unknown word (wrapcol)    -- , foldspaces=False, wrapcol=0, pad=False, adobe
./Lib/base64.py:344:52    - Unknown word (ignorechars) -- False, adobe=False, ignorechars=b' \t\n\r\v'):
./Lib/base64.py:518:10    - Unknown word (ndim)        -- if m.ndim != 1:
./Lib/base64.py:51:18     - Unknown word (altchars)   -- def b64encode(s, altchars=None):
./Lib/bdb.py:134:17    - Unknown word (stopframe)  -- if self.stopframe and frame.f_code.co
./Lib/bdb.py:147:51    - Unknown word (returnframe) -- frame) or frame == self.returnframe:
./Lib/bdb.py:158:49    - Unknown word (stoplineno)  -- stopframe is frame and self.stoplineno != -1:
./Lib/bdb.py:172:30    - Unknown word (subiterator) -- # triggered by a subiterator run with the 'yield
./Lib/bdb.py:237:18    - Unknown word (currentbp)   -- self.currentbp = bp.number
./Lib/bdb.py:279:38    - Unknown word (stopline)    -- than or equal to the stopline. If stoplineno is
./Lib/bdb.py:34:14     - Unknown word (fncache)    -- self.fncache = {}
./Lib/bdb.py:372:12    - Unknown word (linenos)     -- bp_linenos = self.breaks.setdefault
./Lib/bdb.py:377:19    - Unknown word (funcname)    -- funcname=None):
./Lib/bdb.py:455:13    - Unknown word (blist)       -- blist = Breakpoint.bplist
./Lib/bdb.py:475:59    - Unknown word (bybpnumber)  -- index in Breakpoint.bybpnumber.
./Lib/bdb.py:551:48    - Unknown word (lprefix)     -- self, frame_lineno, lprefix=': '):
./Lib/bdb.py:60:14     - Unknown word (botframe)   -- self.botframe = None
./Lib/bdb.py:61:19     - Unknown word (stopinfo)   -- self._set_stopinfo(None, None)
./Lib/bdb.py:748:13    - Unknown word (disp)        -- disp = 'del  '
./Lib/bdb.py:755:19    - Unknown word (dbreakpoint) -- ret = '%-4dbreakpoint %s at %s:%d' % (self
./Lib/binhex.py:101:14    - Unknown word (hqxdata)        -- self.hqxdata = b''
./Lib/binhex.py:102:14    - Unknown word (linelen)        -- self.linelen = LINELEN - 1
./Lib/binhex.py:106:9     - Unknown word (datalen)        -- datalen = len(self.data)
./Lib/binhex.py:135:8     - Unknown word (Rlecoderengine) -- class _Rlecoderengine:
./Lib/binhex.py:13:25     - Unknown word (textfiles)      -- XXXX Note: currently, textfiles appear in mac-form on
./Lib/binhex.py:147:13    - Unknown word (rledata)        -- rledata = binascii.rlecode_hqx
./Lib/binhex.py:147:32    - Unknown word (rlecode)        -- rledata = binascii.rlecode_hqx(self.data)
./Lib/binhex.py:160:35    - Unknown word (dlen)           -- init__(self, name_finfo_dlen_rlen, ofp):
./Lib/binhex.py:160:40    - Unknown word (rlen)           -- self, name_finfo_dlen_rlen, ofp):
./Lib/binhex.py:164:13    - Unknown word (ofname)         -- ofname = ofp
./Lib/binhex.py:169:13    - Unknown word (hqxer)          -- hqxer = _Hqxcoderengine(ofp
./Lib/binhex.py:176:19    - Unknown word (writeinfo)      -- self._writeinfo(name, finfo)
./Lib/binhex.py:200:15    - Unknown word (writecrc)       -- self._writecrc()
./Lib/binhex.py:228:15    - Unknown word (rsrc)           -- def write_rsrc(self, data):
./Lib/binhex.py:254:15    - Unknown word (infilename)     -- """binhex(infilename, outfilename): create
./Lib/binhex.py:254:27    - Unknown word (outfilename)    -- "binhex(infilename, outfilename): create binhex-encoded
./Lib/binhex.py:274:8     - Unknown word (Hqxdecoderengine) -- class _Hqxdecoderengine:
./Lib/binhex.py:281:20    - Unknown word (totalwtd)         -- def read(self, totalwtd):
./Lib/binhex.py:283:9     - Unknown word (decdata)          -- decdata = b''
./Lib/binhex.py:300:25    - Unknown word (decdatacur)       -- decdatacur, self.eof = binascii
./Lib/binhex.py:304:17    - Unknown word (newdata)          -- newdata = self.ifp.read(1)
./Lib/binhex.py:317:8     - Unknown word (Rledecoderengine) -- class _Rledecoderengine:
./Lib/binhex.py:338:30    - Unknown word (rledecode)        -- binascii.rledecode_hqx(self.pre_buffer
./Lib/binhex.py:391:9     - Unknown word (hqxifp)           -- hqxifp = _Hqxdecoderengine
./Lib/binhex.py:394:15    - Unknown word (readheader)       -- self._readheader()
./Lib/binhex.py:401:10    - Unknown word (checkcrc)         -- def _checkcrc(self):
./Lib/binhex.py:402:9     - Unknown word (filecrc)          -- filecrc = struct.unpack('>h
./Lib/binhex.py:478:49    - Unknown word (binhexed)         -- outfilename) - Decode binhexed file"""
./Lib/binhex.py:4:23      - Unknown word (outputfilename) -- binhex(inputfilename, outputfilename)
./Lib/binhex.py:4:8       - Unknown word (inputfilename) -- binhex(inputfilename, outputfilename)
./Lib/binhex.py:59:5      - Unknown word (getfileinfo)    -- def getfileinfo(name):
./Lib/binhex.py:5:1       - Unknown word (hexbin)         -- hexbin(inputfilename, outputfilename
./Lib/binhex.py:60:5      - Unknown word (finfo)          -- finfo = FInfo()
./Lib/binhex.py:67:9      - Unknown word (dsize)          -- dsize = fp.tell()
./Lib/binhex.py:72:7      - Unknown word (openrsrc)       -- class openrsrc:
./Lib/binhex.py:95:8      - Unknown word (Hqxcoderengine) -- class _Hqxcoderengine:
./Lib/bz2.py:10:15     - Unknown word (Nadeem)       -- __author__ = "Nadeem Vawda <nadeem.vawda
./Lib/bz2.py:10:22     - Unknown word (Vawda)        -- _author__ = "Nadeem Vawda <nadeem.vawda@gmail
./Lib/bz2.py:1:21      - Unknown word (libbzip)    -- """Interface to the libbzip2 compression library
./Lib/bz2.py:37:47     - Unknown word (compresslevel) -- filename, mode="r", *, compresslevel=9):
./Lib/bz2.py:56:15     - Unknown word (closefp)       -- self._closefp = False
./Lib/bz2.py:7:44      - Unknown word (Decompressor) -- BZ2Compressor", "BZ2Decompressor",
./Lib/calendar.py:126:5     - Unknown word (ndays)      -- ndays = mdays[month] + (month
./Lib/calendar.py:130:6     - Unknown word (monthlen)   -- def _monthlen(year, month):
./Lib/calendar.py:134:6     - Unknown word (prevmonth)  -- def _prevmonth(year, month):
./Lib/calendar.py:141:6     - Unknown word (nextmonth)  -- def _nextmonth(year, month):
./Lib/calendar.py:299:22    - Unknown word (theweek)    -- def prweek(self, theweek, width):
./Lib/calendar.py:337:31    - Unknown word (theyear)    -- formatmonthname(self, theyear, themonth, width, withyear
./Lib/calendar.py:337:40    - Unknown word (themonth)   -- ormatmonthname(self, theyear, themonth, width, withyear=True
./Lib/calendar.py:337:57    - Unknown word (withyear)   -- theyear, themonth, width, withyear=True):
./Lib/calendar.py:375:9     - Unknown word (colwidth)   -- colwidth = (w + 1) * 7 - 1
./Lib/calendar.py:422:23    - Unknown word (noday)      -- cssclass_noday = "noday"
./Lib/calendar.py:484:46    - Unknown word (cellspacing) -- "0" cellpadding="0" cellspacing="0" class="%s">' %
./Lib/calendar.py:527:28    - Unknown word (getdefaultencoding) -- encoding = sys.getdefaultencoding()
./Lib/calendar.py:551:14    - Unknown word (oldlocale)          -- self.oldlocale = _locale.getlocale
./Lib/calendar.py:59:9      - Unknown word (funcs)      -- funcs = self._months[i]
./Lib/calendar.py:668:5     - Unknown word (textgroup)          -- textgroup = parser.add_argument
./Lib/calendar.py:669:5     - Unknown word (htmlgroup)          -- htmlgroup = parser.add_argument
./Lib/calendar.py:738:9     - Unknown word (optdict)            -- optdict = dict(encoding=encoding
./Lib/cgi.py:159:13    - Unknown word (clength)    -- clength = int(environ['CONTENT
./Lib/cgi.py:208:6     - Unknown word (parseparam) -- def _parseparam(s):
./Lib/cgi.py:21:45     - Unknown word (Majewski)   -- this module.  Steve Majewski changed the
./Lib/cgi.py:23:45     - Unknown word (Andreas)    -- by code submitted by Andreas Paepcke.  Guido van
./Lib/cgi.py:23:53     - Unknown word (Paepcke)    -- submitted by Andreas Paepcke. Guido van
./Lib/cgi.py:305:18    - Unknown word (subclassable) -- The class is subclassable, mostly for the purpose
./Lib/cgi.py:312:47    - Unknown word (outerboundary) -- None, headers=None, outerboundary=b'',
./Lib/cgi.py:373:60    - Unknown word (surrogateescape) -- getpreferredencoding(), 'surrogateescape')
./Lib/cgi.py:416:9     - Unknown word (cdisp)           -- cdisp, pdict = "", {}
./Lib/cgi.py:450:18    - Unknown word (innerboundary)   -- self.innerboundary = pdict['boundary']
./Lib/cgi.py:455:9     - Unknown word (clen)            -- clen = -1
./Lib/cgi.py:56:14     - Unknown word (allargs)    -- def initlog(*allargs):
./Lib/cgi.py:736:19    - Unknown word (lfend)           -- last_line_lfend = True
./Lib/cgi.py:751:17    - Unknown word (strippedline)    -- strippedline = line.rstrip()
./Lib/cgi.py:757:13    - Unknown word (odelim)          -- odelim = delim
./Lib/cgitb.py:101:10    - Unknown word (einfo)      -- def html(einfo, context=5):
./Lib/cgitb.py:106:5     - Unknown word (pyver)      -- pyver = 'Python ' + sys.version
./Lib/cgitb.py:10:5      - Unknown word (logdir)     -- logdir - if set, tracebacks
./Lib/cgitb.py:118:22    - Unknown word (lnum)       -- for frame, file, lnum, func, lines, index
./Lib/cgitb.py:124:24    - Unknown word (varkw)      -- args, varargs, varkw, locals = inspect.getargvalue
./Lib/cgitb.py:20:15     - Unknown word (etype)      -- 3-item tuple (etype, evalue, etb) just like
./Lib/cgitb.py:20:22     - Unknown word (evalue)     -- -item tuple (etype, evalue, etb) just like the
./Lib/cgitb.py:42:47     - Unknown word (blockquote) -- script> </object> </blockquote> </pre>
./Lib/cgitb.py:82:11     - Unknown word (lasttoken)  -- vars, lasttoken, parent, prefix, value
./Lib/chunk.py:33:5      - Unknown word (chunktype)  -- chunktype = chunk.getname()
./Lib/chunk.py:52:42     - Unknown word (bigendian)  -- self, file, align=True, bigendian=True, inclheader=False
./Lib/chunk.py:52:58     - Unknown word (inclheader) -- True, bigendian=True, inclheader=False):
./Lib/chunk.py:57:13     - Unknown word (strflag)    -- strflag = '>'
./Lib/cmd.py:20:26     - Unknown word (begidx)     -- arguments text, line, begidx, endidx.  text is string
./Lib/cmd.py:20:34     - Unknown word (endidx)     -- text, line, begidx, endidx. text is string we
./Lib/cmd.py:22:16     - Unknown word (lstripped)  -- input line (lstripped), begidx and endidx
./Lib/cmd.py:248:9     - Unknown word (dotext)      -- dotext = 'do_'+text
./Lib/cmd.py:259:13    - Unknown word (origline)    -- origline = readline.get_line
./Lib/cmd.py:267:21    - Unknown word (compfunc)    -- compfunc = self.completedefault
./Lib/cmd.py:311:13    - Unknown word (cmds)        -- cmds_doc = []
./Lib/cmd.py:312:18    - Unknown word (undoc)       -- cmds_undoc = []
./Lib/cmd.py:319:13    - Unknown word (prevname)    -- prevname = ''
./Lib/cmd.py:338:42    - Unknown word (cmdlen)      -- self, header, cmds, cmdlen, maxcol):
./Lib/cmd.py:338:50    - Unknown word (maxcol)      -- header, cmds, cmdlen, maxcol):
./Lib/cmd.py:346:31    - Unknown word (displaywidth) -- columnize(self, list, displaywidth=80):
./Lib/cmd.py:356:9     - Unknown word (nonstrings)   -- nonstrings = [i for i in range
./Lib/cmd.py:366:13    - Unknown word (nrows)        -- for nrows in range(1, len(list
./Lib/cmd.py:367:13    - Unknown word (ncols)        -- ncols = (size+nrows-1) //
./Lib/cmd.py:368:13    - Unknown word (colwidths)    -- colwidths = []
./Lib/cmd.py:369:13    - Unknown word (totwidth)     -- totwidth = -2
./Lib/cmd.py:76:24     - Unknown word (completekey) -- def __init__(self, completekey='tab', stdin=None, stdout
./Lib/cmd.py:95:14     - Unknown word (cmdqueue)    -- self.cmdqueue = []
./Lib/code.py:189:37    - Unknown word (exitmsg)    -- interact(self, banner=None, exitmsg=None):
./Lib/code.py:279:27    - Unknown word (readfunc)   -- interact(banner=None, readfunc=None, local=None, exitmsg
./Lib/code.py:5:36      - Unknown word (Epler)      -- similar code by Jeff Epler and Fredrik Lundh.
./Lib/code.py:5:54      - Unknown word (Lundh)      -- Jeff Epler and Fredrik Lundh.
./Lib/codecs.py:131:45    - Unknown word (backslashed)      -- slashreplace' - Replace with backslashed escape sequences.
./Lib/codecs.py:162:59    - Unknown word (getreadbuf)       -- which provides the bf_getreadbuf
./Lib/codecs.py:311:11    - Unknown word (undecoded)        -- # undecoded input that is kept between
./Lib/codecs.py:32:13     - Unknown word (backslashreplace) -- "backslashreplace_errors", "namereplace
./Lib/codecs.py:32:40     - Unknown word (namereplace)      -- backslashreplace_errors", "namereplace_errors",
./Lib/codecs.py:393:49    - Unknown word (rescan)           -- data without having to rescan the whole
./Lib/codecs.py:443:14    - Unknown word (bytebuffer)       -- self.bytebuffer = b""
./Lib/codecs.py:444:21    - Unknown word (charbuffer)       -- self._empty_charbuffer = self.charbuffertype
./Lib/codecs.py:446:14    - Unknown word (linebuffer)       -- self.linebuffer = None
./Lib/codecs.py:451:39    - Unknown word (firstline)        -- size=-1, chars=-1, firstline=False):
./Lib/codecs.py:504:17    - Unknown word (newchars)         -- newchars, decodedbytes = self
./Lib/codecs.py:504:27    - Unknown word (decodedbytes)     -- newchars, decodedbytes = self.decode(data,
./Lib/codecs.py:554:9     - Unknown word (readsize)         -- readsize = size or 72
./Lib/codecs.py:586:22    - Unknown word (withend)          -- line0withend = lines[0]
./Lib/codecs.py:587:22    - Unknown word (withoutend)       -- line0withoutend = lines[0].splitlines
./Lib/codecs.py:606:25    - Unknown word (sizehint)         -- def readlines(self, sizehint=None, keepends=True
./Lib/codecs.py:60:22     - Unknown word (endianness)       -- # UTF-16, native endianness
./Lib/codecs.py:806:15    - Unknown word (bytesencoded)     -- data, bytesencoded = self.encode(data,
./Lib/codecs.py:836:15    - Unknown word (bytesdecoded)     -- data, bytesdecoded = self.decode(data,
./Lib/codeop.py:148:9     - Unknown word (codeob)     -- codeob = compile(source, filename
./Lib/codeop.py:67:51     - Unknown word (pythonrun)  -- # Matches pythonrun.h
./Lib/collections/__init__.py:1185:24   - Unknown word (initlist)        -- def __init__(self, initlist=None):
./Lib/collections/__init__.py:211:23    - Unknown word (getsizeof)  -- sizeof = _sys.getsizeof
./Lib/collections/__init__.py:328:31    - Unknown word (tuplegetter) -- collections import _tuplegetter
./Lib/collections/__init__.py:520:8     - Unknown word (multiset)    -- or multiset. Elements are stored
./Lib/collections/__init__.py:523:22    - Unknown word (abcdeabcdabcaba) -- >>> c = Counter('abcdeabcdabcaba') # count elements
./Lib/collections/__init__.py:52:10     - Unknown word (coolreader) -- # I (coolreader18) couldn't figure out
./Lib/collections/__init__.py:530:6     - Unknown word (aaaaabbbbcccdde) -- 'aaaaabbbbcccdde'
./Lib/collections/__init__.py:536:22    - Unknown word (shazam)          -- >>> for elem in 'shazam': # update
./Lib/collections/__init__.py:544:22    - Unknown word (simsalabim)      -- >>> d = Counter('simsalabim') # make another
./Lib/collections/__init__.py:556:22    - Unknown word (aaabbc)          -- >>> c = Counter('aaabbc')
./Lib/collections/__init__.py:575:26    - Unknown word (gallahad)        -- >>> c = Counter('gallahad') #
./Lib/collections/__init__.py:627:45    - Unknown word (Multiset)        -- do from Smalltalk and Multiset.begin from C++.
./Lib/collections/__init__.py:659:61    - Unknown word (mismash)         -- the other counts for a mismash that
./Lib/collections/__init__.py:780:25    - Unknown word (multisets)       -- # Given counter multisets such as:
./Lib/collections/__init__.py:801:22    - Unknown word (abbb)            -- >>> Counter('abbb') + Counter('bcc')
./Lib/collections/__init__.py:809:13    - Unknown word (newcount)        -- newcount = count + other[elem
./Lib/collections/__init__.py:820:22    - Unknown word (abbbc)           -- >>> Counter('abbbc') - Counter('bccd')
./Lib/collections/__init__.py:820:41    - Unknown word (bccd)            -- 'abbbc') - Counter('bccd')
./Lib/collections/__init__.py:894:9     - Unknown word (nonpositive)     -- nonpositive = [elem for elem, count
./Lib/collections/__init__.py:92:33     - Unknown word (hardroot)   -- sentinel is in self.__hardroot with a weakref proxy
./Lib/collections/__init__.py:962:25    - Unknown word (updateable)      -- to create a single, updateable view.
./Lib/colorsys.py:72:5      - Unknown word (maxc)       -- maxc = max(r, g, b)
./Lib/colorsys.py:73:5      - Unknown word (minc)       -- minc = min(r, g, b)
./Lib/compileall.py:123:13    - Unknown word (cfile)      -- cfile = fullname + 'c'
./Lib/compileall.py:139:47    - Unknown word (chandle)    -- open(cfile, 'rb') as chandle:
./Lib/compileall.py:231:53    - Unknown word (flist)      -- metavar='FILE', dest='flist',
./Lib/compileall.py:243:13    - Unknown word (dests)      -- compile_dests = args.compile_dest
./Lib/compileall.py:27:20     - Unknown word (ddir)       -- def _walk_dir(dir, ddir=None, maxlevels=10,
./Lib/compileall.py:27:31     - Unknown word (maxlevels)  -- dir(dir, ddir=None, maxlevels=10, quiet=0):
./Lib/compileall.py:44:13     - Unknown word (dfile)      -- dfile = os.path.join(ddir
./Lib/concurrent/futures/__init__.py:1:24      - Unknown word (Quinlan)    -- Copyright 2009 Brian Quinlan. All Rights Reserved
./Lib/concurrent/futures/process.py:116:17    - Unknown word (stringification) -- # Hack to embed stringification of remote traceback
./Lib/concurrent/futures/process.py:208:6     - Unknown word (sendback)        -- def _sendback_result(result_queue
./Lib/concurrent/futures/process.py:218:60    - Unknown word (initargs)        -- queue, initializer, initargs):
./Lib/concurrent/futures/process.py:547:24    - Unknown word (sysconf)         -- nsems_max = os.sysconf("SC_SEM_NSEMS_MAX")
./Lib/concurrent/futures/process.py:547:9     - Unknown word (nsems)           -- nsems_max = os.sysconf("SC
./Lib/concurrent/futures/process.py:552:11    - Unknown word (indetermined)    -- # indetermined limit, assume that limit
./Lib/concurrent/futures/process.py:62:10     - Unknown word (wakeups)    -- _threads_wakeups = weakref.WeakKeyDictionary
./Lib/concurrent/futures/process.py:665:34    - Unknown word (epipe)           -- _call_queue._ignore_epipe = True
./Lib/concurrent/futures/process.py:686:42    - Unknown word (codepath)        -- Assertion disabled as this codepath is also used to replace
./Lib/concurrent/futures/process.py:99:22     - Unknown word (subinterpreters) -- compatibility with subinterpreters, which no longer support
./Lib/concurrent/futures/thread.py:42:71     - Unknown word (reinit)     -- shutdown_lock._at_fork_reinit,
./Lib/configparser.py:1006:9    - Unknown word (cursect)    -- cursect = None
./Lib/configparser.py:1007:9    - Unknown word (sectname)   -- sectname = None
./Lib/configparser.py:1048:19   - Unknown word (nonspace)   -- first_nonspace = self.NONSPACECRE.search
./Lib/configparser.py:1082:38   - Unknown word (optval)     -- optname, vi, optval = mo.group('option'
./Lib/configparser.py:1133:9    - Unknown word (sectiondict) -- sectiondict = {}
./Lib/configparser.py:1140:9    - Unknown word (vardict)     -- vardict = {}
./Lib/configparser.py:265:41    - Unknown word (rawval)     -- self, option, section, rawval, reference):
./Lib/configparser.py:404:49    - Unknown word (accum)      -- self, parser, option, accum, rest, section, map
./Lib/configparser.py:448:9     - Unknown word (buildout)   -- `zc.buildout'. Enables interpolation
./Lib/configparser.py:61:62     - Unknown word (buildbot)   -- also provides a ``zc.buildbot``
./Lib/configparser.py:684:25    - Unknown word (systemwide) -- home directory, systemwide directory), and all
./Lib/configparser.py:719:9     - Unknown word (sfile)      -- sfile = io.StringIO(string
./Lib/configparser.py:870:27    - Unknown word (optionstr)  -- def optionxform(self, optionstr):
./Lib/configparser.py:893:13    - Unknown word (sectdict)   -- sectdict = self._defaults
./Lib/configparser.py:988:25    - Unknown word (fpname)     -- def _read(self, fp, fpname):
./Lib/contextlib.py:199:42    - Unknown word (actully)    -- the RuntimeError is actully Stop(Async)Iteration
./Lib/contextlib.py:315:24    - Unknown word (exctype)    -- def __exit__(self, exctype, excinst, exctb):
./Lib/contextlib.py:315:33    - Unknown word (excinst)    -- exit__(self, exctype, excinst, exctb):
./Lib/contextlib.py:315:42    - Unknown word (exctb)      -- self, exctype, excinst, exctb):
./Lib/contextlib.py:348:24    - Unknown word (somefile)   -- os.remove(somefile)
./Lib/contextlib.py:676:25    - Unknown word (excinfo)    -- def __exit__(self, *excinfo):
./Lib/copy.py:259:30    - Unknown word (listiter)    -- state=None, listiter=None, dictiter=None
./Lib/copy.py:259:45    - Unknown word (dictiter)    -- None, listiter=None, dictiter=None,
./Lib/copy.py:275:24    - Unknown word (slotstate)   -- state, slotstate = state
./Lib/copy.py:46:55     - Unknown word (getinitargs) -- define methods called __getinitargs__(),
./Lib/copy.py:86:5      - Unknown word (reductor)    -- reductor = dispatch_table.get
./Lib/copyreg.py:204:35    - Unknown word (Zope)          -- 64 Reserved for Zope
./Lib/copyreg.py:41:6      - Unknown word (reconstructor) -- def _reconstructor(cls, base, state):
./Lib/copyreg.py:99:6      - Unknown word (slotnames)     -- def _slotnames(cls):
./Lib/csv.py:126:51    - Unknown word (extrasaction) -- fieldnames, restval="", extrasaction="raise",
./Lib/csv.py:140:29    - Unknown word (rowdict)      -- _dict_to_list(self, rowdict):
./Lib/csv.py:151:25    - Unknown word (rowdicts)     -- def writerows(self, rowdicts):
./Lib/csv.py:212:13    - Unknown word (restr)        -- for restr in (r'(?P<delim>[^\w
./Lib/csv.py:227:9     - Unknown word (groupindex)   -- groupindex = regexp.groupindex
./Lib/csv.py:76:44     - Unknown word (restkey)    -- f, fieldnames=None, restkey=None, restval=None,
./Lib/csv.py:76:58     - Unknown word (restval)    -- None, restkey=None, restval=None,
./Lib/dataclasses.py:1110:39   - Unknown word (slighly)        -- slots. These could be slighly more performant if we
./Lib/dataclasses.py:1263:13   - Unknown word (namedtuples)    -- # namedtuples to lists.  Admittedly
./Lib/dataclasses.py:454:23    - Unknown word (dflt)       -- default_name = f'_dflt_{f.name}'
./Lib/dataclasses.py:469:54    - Unknown word (defaultvalue) -- initialized with a default=defaultvalue, the
./Lib/dataclasses.py:577:28    - Unknown word (concatenting) -- # (instead of just concatenting the lists together)
./Lib/dataclasses.py:844:5     - Unknown word (flds)         -- flds = [f for f in fields
./Lib/dataclasses.py:895:41    - Unknown word (introspectable) -- dataclass won't be fully introspectable
./Lib/datetime.py:1145:9    - Unknown word (dtoff)           -- dtoff = dt.utcoffset()
./Lib/datetime.py:1152:9    - Unknown word (dtdst)           -- dtdst = dt.dst()
./Lib/datetime.py:1344:9    - Unknown word (mytz)            -- mytz = self._tzinfo
./Lib/datetime.py:1345:9    - Unknown word (ottz)            -- ottz = other._tzinfo
./Lib/datetime.py:1346:17   - Unknown word (otoff)           -- myoff = otoff = None
./Lib/datetime.py:1346:9    - Unknown word (myoff)           -- myoff = otoff = None
./Lib/datetime.py:1365:9    - Unknown word (myhhmm)          -- myhhmm = self._hour * 60 +
./Lib/datetime.py:1366:9    - Unknown word (othhmm)          -- othhmm = other._hour * 60
./Lib/datetime.py:136:5     - Unknown word (leapyear)   -- leapyear = n1 == 3 and (n4 !
./Lib/datetime.py:1377:13   - Unknown word (tzoff)           -- tzoff = t.utcoffset()
./Lib/datetime.py:1530:9    - Unknown word (basestate)       -- basestate = bytes([h, self._minute
./Lib/datetime.py:156:45    - Unknown word (dstflag)    -- y, m, d, hh, mm, ss, dstflag):
./Lib/datetime.py:158:5     - Unknown word (dnum)       -- dnum = _days_before_month
./Lib/datetime.py:161:34    - Unknown word (timespec)   -- time(hh, mm, ss, us, timespec='auto'):
./Lib/datetime.py:1663:56   - Unknown word (datetimemodule's) -- fold. See comments in _datetimemodule's
./Lib/datetime.py:1727:9    - Unknown word (dstr)             -- dstr = date_string[0:10]
./Lib/datetime.py:1853:9    - Unknown word (localtm)          -- localtm = _time.localtime(ts
./Lib/datetime.py:1856:9    - Unknown word (gmtoff)           -- gmtoff = localtm.tm_gmtoff
./Lib/datetime.py:1869:13   - Unknown word (myoffset)         -- myoffset = mytz.utcoffset(self
./Lib/datetime.py:203:5     - Unknown word (freplace)   -- freplace = None  # the string
./Lib/datetime.py:204:5     - Unknown word (zreplace)   -- zreplace = None  # the string
./Lib/datetime.py:205:5     - Unknown word (Zreplace)   -- Zreplace = None  # the string
./Lib/datetime.py:208:5     - Unknown word (newformat)  -- newformat = []
./Lib/datetime.py:2177:5    - Unknown word (firstday)         -- firstday = _ymd2ord(year, 1,
./Lib/datetime.py:2199:21   - Unknown word (minoffset)        -- if not cls._minoffset <= offset <= cls._maxoffset
./Lib/datetime.py:2199:49   - Unknown word (maxoffset)        -- minoffset <= offset <= cls._maxoffset:
./Lib/datetime.py:2414:29   - Unknown word (endcase)          -- spelling we wanted in the endcase described above.  We
./Lib/datetime.py:2480:53   - Unknown word (unspellable)      -- behavior when mapping the "unspellable" UTC hour into
./Lib/datetime.py:265:27    - Unknown word (dtstr)      -- parse_isoformat_date(dtstr):
./Lib/datetime.py:27:68     - Unknown word (Dershowitz) -- Gregorian" calendar in Dershowitz
./Lib/datetime.py:281:24    - Unknown word (tstr)       -- def _parse_hh_mm_ss_ff(tstr):
./Lib/datetime.py:28:7      - Unknown word (Reingold's) -- # and Reingold's "Calendrical Calculations
./Lib/datetime.py:334:9     - Unknown word (tzstr)      -- tzstr = tstr[tz_pos:]
./Lib/datetime.py:348:13    - Unknown word (tzsign)     -- tzsign = -1 if tstr[tz_pos
./Lib/datetime.py:418:6     - Unknown word (cmperror)   -- def _cmperror(x, y):
./Lib/datetime.py:429:18    - Unknown word (longobject) -- # in Objects/longobject.c.
./Lib/datetime.py:459:57    - Unknown word (hashcode)   -- '_microseconds', '_hashcode'
./Lib/datetime.py:485:13    - Unknown word (dayfrac)    -- dayfrac, days = _math.modf(days
./Lib/datetime.py:486:13    - Unknown word (daysecondsfrac) -- daysecondsfrac, daysecondswhole =
./Lib/datetime.py:486:29    - Unknown word (daysecondswhole) -- daysecondsfrac, daysecondswhole = _math.modf(dayfrac
./Lib/datetime.py:501:13    - Unknown word (secondsfrac)     -- secondsfrac, seconds = _math.modf
./Lib/datetime.py:520:9     - Unknown word (usdouble)        -- usdouble = secondsfrac * 1e6
./Lib/datetime.py:658:13    - Unknown word (usec)            -- usec = self._to_microseconds
./Lib/datetime.py:776:37    - Unknown word (radd)            -- radd__, __sub__ (add/radd only with timedelta
./Lib/datetime.py:829:39    - Unknown word (jday)            -- hh, mm, ss, weekday, jday, dst = _time.localtime
./Lib/datetime.py:890:18    - Unknown word (isoweek)         -- day_1 = _isoweek1monday(year)
./Lib/dbm/__init__.py:42:2      - Unknown word (defaultmod) -- _defaultmod = None
./Lib/dbm/dumb.py:157:10    - Unknown word (addval)       -- def _addval(self, val):
./Lib/dbm/dumb.py:171:10    - Unknown word (setval)       -- def _setval(self, pos, val):
./Lib/dbm/dumb.py:205:13    - Unknown word (oldblocks)    -- oldblocks = (siz + _BLOCKSIZE
./Lib/dbm/dumb.py:206:13    - Unknown word (newblocks)    -- newblocks = (len(val) + _BLOCKSIZE
./Lib/dbm/dumb.py:48:24     - Unknown word (filebasename) -- def __init__(self, filebasename, mode, flag='c'):
./Lib/dbm/dumb.py:57:15     - Unknown word (dirfile)      -- self._dirfile = filebasename + '.dir
./Lib/dbm/dumb.py:63:15     - Unknown word (datfile)      -- self._datfile = filebasename + '.dat
./Lib/dbm/dumb.py:64:15     - Unknown word (bakfile)      -- self._bakfile = filebasename + '.bak
./Lib/decimal.py:8:11      - Unknown word (pydecimal)  -- from _pydecimal import *
./Lib/difflib.py:1012:30   - Unknown word (qformat)     -- yield from self._qformat(aelt, belt, atags, btags
./Lib/difflib.py:1032:31   - Unknown word (bline)       -- qformat(self, aline, bline, atags, btags):
./Lib/difflib.py:1065:11   - Unknown word (volatil)     -- # that "e volatil" was inserted between
./Lib/difflib.py:107:58    - Unknown word (differencer) -- human-friendly file differencer, which
./Lib/difflib.py:1128:37   - Unknown word (tofile)      -- diff(a, b, fromfile='', tofile='', fromfiledate=''
./Lib/difflib.py:1128:48   - Unknown word (fromfiledate) -- fromfile='', tofile='', fromfiledate='',
./Lib/difflib.py:1129:18   - Unknown word (tofiledate)   -- tofiledate='', n=3, lineterm='
./Lib/difflib.py:1129:38   - Unknown word (lineterm)     -- tofiledate='', n=3, lineterm='\n'):
./Lib/difflib.py:1146:9    - Unknown word (unidiff)      -- The unidiff format normally has
./Lib/difflib.py:1174:13   - Unknown word (fromdate)     -- fromdate = '\t{}'.format(fromfiledate
./Lib/difflib.py:1175:13   - Unknown word (todate)       -- todate = '\t{}'.format(tofiledate
./Lib/difflib.py:121:14    - Unknown word (isjunk)      -- __init__(isjunk=None, a='', b='')
./Lib/difflib.py:1293:15   - Unknown word (oldfile)      -- # --- b'oldfile.txt'
./Lib/difflib.py:1294:15   - Unknown word (newfile)      -- # +++ b'newfile.txt'
./Lib/difflib.py:1306:16   - Unknown word (dfunc)        -- def diff_bytes(dfunc, a, b, fromfile=b''
./Lib/difflib.py:1311:50   - Unknown word (losslessly)   -- context_diff(). Inputs are losslessly converted to
./Lib/difflib.py:1373:12   - Unknown word (fromlines)    -- def _mdiff(fromlines, tolines, context=None
./Lib/difflib.py:1373:23   - Unknown word (tolines)      -- def _mdiff(fromlines, tolines, context=None, linejunk
./Lib/difflib.py:1373:6    - Unknown word (mdiff)        -- def _mdiff(fromlines, tolines,
./Lib/difflib.py:1428:17   - Unknown word (indice)       -- side -- indice into the num_lines list
./Lib/difflib.py:152:49    - Unknown word (autojunk)    -- isjunk=None, a='', b='', autojunk=True):
./Lib/difflib.py:1675:10   - Unknown word (colgroup)     -- <colgroup></colgroup> <colgroup
./Lib/difflib.py:1693:34   - Unknown word (irst)         -- <tr><td>(f)irst change</td> </tr>
./Lib/difflib.py:1721:33   - Unknown word (wrapcolumn)   -- init__(self,tabsize=8,wrapcolumn=None,linejunk=None,
./Lib/difflib.py:1738:45   - Unknown word (fromdesc)     -- fromlines, tolines, fromdesc='', todesc='',
./Lib/difflib.py:1738:58   - Unknown word (todesc)       -- tolines, fromdesc='', todesc='',
./Lib/difflib.py:1739:34   - Unknown word (numlines)     -- context=False, numlines=5, *, charset='utf-
./Lib/difflib.py:1847:13   - Unknown word (fromdata)     -- for fromdata,todata,flag in diffs
./Lib/difflib.py:1847:22   - Unknown word (todata)       -- for fromdata,todata,flag in diffs:
./Lib/difflib.py:1852:14   - Unknown word (fromline)     -- (fromline,fromtext),(toline,totext
./Lib/difflib.py:1852:23   - Unknown word (fromtext)     -- (fromline,fromtext),(toline,totext) = fromdata
./Lib/difflib.py:1852:34   - Unknown word (toline)       -- fromline,fromtext),(toline,totext) = fromdata,todata
./Lib/difflib.py:1852:41   - Unknown word (totext)       -- fromline,fromtext),(toline,totext) = fromdata,todata
./Lib/difflib.py:185:11    - Unknown word (fullbcount)  -- # fullbcount
./Lib/difflib.py:1878:25   - Unknown word (flaglist)     -- fromlist,tolist,flaglist = [],[],[]
./Lib/difflib.py:1892:37   - Unknown word (linenum)      -- line(self,side,flag,linenum,text):
./Lib/difflib.py:1920:9    - Unknown word (fromprefix)   -- fromprefix = "from%d_" % HtmlDiff
./Lib/difflib.py:1921:9    - Unknown word (toprefix)     -- toprefix = "to%d_" % HtmlDiff
./Lib/difflib.py:2031:28   - Unknown word (thead)        -- header_row = '<thead><tr>%s%s%s%s</tr></thead
./Lib/difflib.py:205:68    - Unknown word (bjunk)       -- this. Use "in self.bjunk".
./Lib/difflib.py:208:11    - Unknown word (bpopular)    -- # bpopular
./Lib/difflib.py:209:16    - Unknown word (nonjunk)     -- # nonjunk items in b treated as
./Lib/difflib.py:220:33    - Unknown word (bcde)        -- s.set_seqs("abcd", "bcde")
./Lib/difflib.py:303:15    - Unknown word (Roskind)     -- # Jim Roskind, thank him again for
./Lib/difflib.py:330:13    - Unknown word (ntest)       -- ntest = n // 100 + 1
./Lib/difflib.py:331:22    - Unknown word (idxs)        -- for elt, idxs in b2j.items():
./Lib/difflib.py:384:14    - Unknown word (acab)        -- # acab
./Lib/difflib.py:390:11    - Unknown word (Windiff)     -- # Windiff ends up at the same
./Lib/difflib.py:393:20    - Unknown word (isbjunk)     -- a, b, b2j, isbjunk = self.a, self.b, self
./Lib/difflib.py:394:16    - Unknown word (bestj)       -- besti, bestj, bestsize = alo, blo
./Lib/difflib.py:394:23    - Unknown word (bestsize)    -- besti, bestj, bestsize = alo, blo, 0
./Lib/difflib.py:394:9     - Unknown word (besti)       -- besti, bestj, bestsize = alo
./Lib/difflib.py:403:15    - Unknown word (lenget)      -- j2lenget = j2len.get
./Lib/difflib.py:404:13    - Unknown word (newj)        -- newj2len = {}
./Lib/difflib.py:461:40    - Unknown word (abxcd)       -- SequenceMatcher(None, "abxcd", "abcd")
./Lib/difflib.py:50:37     - Unknown word (Ratcliff)   -- in the late 1980's by Ratcliff and Obershelp under
./Lib/difflib.py:50:50     - Unknown word (Obershelp)  -- 0's by Ratcliff and Obershelp under the
./Lib/difflib.py:534:18    - Unknown word (qabxcd)      -- >>> a = "qabxcd"
./Lib/difflib.py:535:18    - Unknown word (abycdf)      -- >>> b = "abycdf"
./Lib/difflib.py:61:45     - Unknown word (windiff)    -- eyes. The Windows(tm) windiff has another interesting
./Lib/difflib.py:666:9     - Unknown word (availhas)    -- availhas, matches = avail.__contains
./Lib/difflib.py:763:59    - Unknown word (intraline)   -- to guide the eye to intraline
./Lib/difflib.py:836:14    - Unknown word (linejunk)    -- __init__(linejunk=None, charjunk=None
./Lib/difflib.py:836:29    - Unknown word (charjunk)    -- init__(linejunk=None, charjunk=None)
./Lib/difflib.py:873:63    - Unknown word (writeline)   -- printed as-is via the writeline()
./Lib/difflib.py:937:48    - Unknown word (Ghijkl)      -- ['abcdefGhijkl\n'], 0, 1)
./Lib/difflib.py:993:9     - Unknown word (aelt)        -- aelt, belt = a[best_i], b
./Lib/difflib.py:996:13    - Unknown word (atags)       -- atags = btags = ""
./Lib/difflib.py:996:21    - Unknown word (btags)       -- atags = btags = ""
./Lib/distutils/_msvccompiler.py:10:20     - Unknown word (Stoll)      -- # Written by Perry Stoll
./Lib/distutils/_msvccompiler.py:114:5     - Unknown word (vcvarsall)  -- vcvarsall = os.path.join(best
./Lib/distutils/_msvccompiler.py:13:46     - Unknown word (Heimes)     -- VS 2008 by Christian Heimes
./Lib/distutils/_msvccompiler.py:263:60    - Unknown word (libucrt)    -- statically, then switch from libucrt[d].lib to ucrt[d].lib
./Lib/distutils/_msvccompiler.py:263:78    - Unknown word (ucrt)       -- from libucrt[d].lib to ucrt[d].lib
./Lib/distutils/_msvccompiler.py:264:40    - Unknown word (ucrtbase)   -- dynamically link to ucrtbase but not vcruntime.
./Lib/distutils/_msvccompiler.py:266:15    - Unknown word (nologo)     -- '/nologo', '/Ox', '/W3', '/GL
./Lib/distutils/_msvccompiler.py:274:9     - Unknown word (ldflags)    -- ldflags = [
./Lib/distutils/_msvccompiler.py:278:31    - Unknown word (nodefaultlib) -- ldflags.extend(('/nodefaultlib:libucrt.lib', 'ucrt
./Lib/distutils/_msvccompiler.py:342:23    - Unknown word (preargs)      -- extra_preargs=None, extra_postargs
./Lib/distutils/_msvccompiler.py:342:43    - Unknown word (postargs)     -- preargs=None, extra_postargs=None, depends=None)
./Lib/distutils/_msvccompiler.py:432:34    - Unknown word (libname)      -- output_libname,
./Lib/distutils/_msvccompiler.py:505:17    - Unknown word (implib)       -- implib_file = os.path.join
./Lib/distutils/_msvccompiler.py:569:17    - Unknown word (libfile)      -- libfile = os.path.join(dir,
./Lib/distutils/_msvccompiler.py:59:23     - Unknown word (findvs)     -- import _distutils_findvs
./Lib/distutils/_msvccompiler.py:68:10     - Unknown word (getall)     -- def _getall():
./Lib/distutils/_msvccompiler.py:93:5      - Unknown word (vcruntime)  -- vcruntime = None
./Lib/distutils/_msvccompiler.py:96:56     - Unknown word (redist)     -- best_dir, "..", "..", "redist", "MSVC", "**",
./Lib/distutils/_msvccompiler.py:96:9      - Unknown word (vcredist)   -- vcredist = os.path.join(best
./Lib/distutils/archive_util.py:100:21    - Unknown word (gname)      -- tarinfo.gname = group
./Lib/distutils/archive_util.py:143:13    - Unknown word (zipoptions) -- zipoptions = "-r"
./Lib/distutils/archive_util.py:188:6     - Unknown word (gztar)      -- 'gztar': (make_tarball, [(
./Lib/distutils/archive_util.py:189:6     - Unknown word (bztar)      -- 'bztar': (make_tarball, [(
./Lib/distutils/archive_util.py:190:6     - Unknown word (xztar)      -- 'xztar': (make_tarball, [(
./Lib/distutils/archive_util.py:191:6     - Unknown word (ztar)       -- 'ztar': (make_tarball, [
./Lib/distutils/archive_util.py:22:21     - Unknown word (getpwnam)   -- from pwd import getpwnam
./Lib/distutils/archive_util.py:27:21     - Unknown word (getgrnam)   -- from grp import getgrnam
./Lib/distutils/bcppcompiler.py:113:35    - Unknown word (brcc)       -- self.spawn (["brcc32", "-fo", obj, src
./Lib/distutils/bcppcompiler.py:260:22    - Unknown word (Arghghh)    -- # them.  Arghghh!. Apparently it works
./Lib/distutils/bcppcompiler.py:30:22     - Unknown word (bcpp)       -- compiler_type = 'bcpp'
./Lib/distutils/bcppcompiler.py:319:13    - Unknown word (dlib)       -- dlib = (lib + "_d")
./Lib/distutils/bcppcompiler.py:3:10      - Unknown word (Borland)    -- Contains BorlandCCompiler, an implementation
./Lib/distutils/bcppcompiler.py:65:24     - Unknown word (ilink)      -- self.linker = "ilink32.exe"
./Lib/distutils/bcppcompiler.py:66:21     - Unknown word (tlib)       -- self.lib = "tlib.exe"
./Lib/distutils/ccompiler.py:1099:51   - Unknown word (lbar)          -- have to say "-lfoo -lbar -lfoo" in order to
./Lib/distutils/ccompiler.py:129:11    - Unknown word (archiver)      -- archiver static library
./Lib/distutils/ccompiler.py:161:13    - Unknown word (defn)          -- for defn in self.macros:
./Lib/distutils/ccompiler.py:214:9     - Unknown word (undefn)        -- undefn = (name,)
./Lib/distutils/ccompiler.py:251:29    - Unknown word (libnames)      -- set_libraries(self, libnames):
./Lib/distutils/ccompiler.py:310:30    - Unknown word (outdir)        -- setup_compile(self, outdir, macros, incdirs, sources
./Lib/distutils/ccompiler.py:363:12    - Unknown word (Typecheck)     -- """Typecheck and fix-up some of the
./Lib/distutils/ccompiler.py:395:25    - Unknown word (souce)         -- """Decide which souce files must be recompiled
./Lib/distutils/ccompiler.py:45:60     - Unknown word (searchg)    -- the include or library searchg
./Lib/distutils/ccompiler.py:46:32     - Unknown word (Idir)       -- path, ie. no "cc -I -Idir1 -Idir2" or "cc -L
./Lib/distutils/ccompiler.py:46:57     - Unknown word (Ldir)       -- -Idir2" or "cc -L -Ldir1 -Ldir2".
./Lib/distutils/ccompiler.py:484:13    - Unknown word (extlang)       -- extlang = self.language_map
./Lib/distutils/ccompiler.py:486:17    - Unknown word (extindex)      -- extindex = self.language_order
./Lib/distutils/ccompiler.py:534:62    - Unknown word (undefines)     -- value. The 1-tuple case undefines a
./Lib/distutils/ccompiler.py:548:35    - Unknown word (prepand)       -- command-line arguments to prepand/append to the compiler
./Lib/distutils/ccompiler.py:54:31     - Unknown word (lfoo)       -- dirs, e.g. "-Ldir1 -lfoo -Ldir2 -lfoo" to link
./Lib/distutils/ccompiler.py:55:33     - Unknown word (libfoo)     -- different versions of libfoo.a in different locations
./Lib/distutils/ccompiler.py:81:31     - Unknown word (objc)       -- ".m" : "objc",
./Lib/distutils/ccompiler.py:926:67    - Unknown word (Xish)          -- like an ordinary UNIXish
./Lib/distutils/ccompiler.py:94:53     - Unknown word (undefinitions) -- macro definitions (or undefinitions). A
./Lib/distutils/ccompiler.py:97:11     - Unknown word (undefinition)  -- # undefinition is a 1-tuple (name,
./Lib/distutils/cmd.py:166:31    - Unknown word (d'etre)     -- "A command's raison d'etre: carry out the action
./Lib/distutils/cmd.py:207:17    - Unknown word (stringlike) -- def _ensure_stringlike(self, option, what,
./Lib/distutils/cmd.py:373:25    - Unknown word (infiles)    -- def make_file(self, infiles, outfile, func, args
./Lib/distutils/cmd.py:419:14    - Unknown word (outfiles)   -- self.outfiles = []
./Lib/distutils/cmd.py:97:13     - Unknown word (myval)      -- myval = getattr(self, "_"
./Lib/distutils/command/__init__.py:22:19     - Unknown word (wininst)    -- 'bdist_wininst',
./Lib/distutils/command/__init__.py:26:20     - Unknown word (sdux)       -- #'bdist_sdux',
./Lib/distutils/command/__init__.py:27:20     - Unknown word (pkgtool)    -- #'bdist_pkgtool',
./Lib/distutils/command/bdist.py:71:48     - Unknown word (xz'ed)      -- xztar': ('bdist_dumb', "xz'ed tar file"),
./Lib/distutils/command/bdist_dumb.py:101:58    - Unknown word (platbase)      -- base != install.install_platbase)):
./Lib/distutils/command/bdist_dumb.py:116:13    - Unknown word (pyversion)     -- pyversion = get_python_version
./Lib/distutils/command/bdist_dumb.py:96:9      - Unknown word (pseudoinstall) -- pseudoinstall_root = os.path.join
./Lib/distutils/command/bdist_msi.py:109:46    - Unknown word (deinstallation) -- installation or before deinstallation"),
./Lib/distutils/command/bdist_msi.py:1:39      - Unknown word (Löwis)      -- 05, 2006 Martin von Löwis
./Lib/distutils/command/bdist_msi.py:234:9     - Unknown word (sversion)       -- sversion = "%d.%d.%d" % StrictVersion
./Lib/distutils/command/bdist_msi.py:271:27    - Unknown word (distfiles)      -- cab = msilib.CAB("distfiles")
./Lib/distutils/command/bdist_msi.py:272:9     - Unknown word (rootdir)        -- rootdir = os.path.abspath(self
./Lib/distutils/command/bdist_msi.py:300:21    - Unknown word (afile)          -- afile = os.path.join(dir.absolute
./Lib/distutils/command/bdist_msi.py:304:25    - Unknown word (newdir)         -- newdir = Directory(db, cab
./Lib/distutils/command/bdist_msi.py:30:9      - Unknown word (bmwidth)    -- bmwidth = 152*ruler/328
./Lib/distutils/command/bdist_msi.py:347:25    - Unknown word (msidb)          -- # type: msidbLocatorTypeRawValue
./Lib/distutils/command/bdist_msi.py:38:20     - Unknown word (Verdana)    -- # text, in VerdanaBold10
./Lib/distutils/command/bdist_msi.py:392:13    - Unknown word (scriptfn)       -- scriptfn = os.path.join(self
./Lib/distutils/command/bdist_msi.py:392:54    - Unknown word (preinstall)     -- join(self.bdist_dir, "preinstall.bat")
./Lib/distutils/command/bdist_msi.py:424:9     - Unknown word (modeless)       -- modeless = 1   # visible
./Lib/distutils/command/bdist_msi.py:442:33    - Unknown word (Tahoma)         -- [("DlgFont8", "Tahoma", 9, None, 0),
./Lib/distutils/command/bdist_msi.py:501:9     - Unknown word (inuse)          -- inuse = PyDialog(db, "FilesInUse
./Lib/distutils/command/bdist_msi.py:503:51    - Unknown word (Modeless)       -- # KeepModeless|Modal|Visible
./Lib/distutils/command/bdist_msi.py:578:9     - Unknown word (seldlg)         -- seldlg = PyDialog(db, "SelectFeature
./Lib/distutils/command/bdist_msi.py:650:9     - Unknown word (whichusers)     -- whichusers = PyDialog(db, "WhichUsersDlg
./Lib/distutils/command/bdist_msi.py:653:43    - Unknown word (allusers)       -- group with two options: allusers, justme
./Lib/distutils/command/bdist_msi.py:653:53    - Unknown word (justme)         -- two options: allusers, justme
./Lib/distutils/command/bdist_msi.py:695:9     - Unknown word (maint)          -- maint = PyDialog(db, "MaintenanceTy
./Lib/distutils/command/bdist_msi.py:75:42     - Unknown word (xpos)       -- name, title, next, xpos):
./Lib/distutils/command/bdist_msi.py:75:9      - Unknown word (xbutton)    -- def xbutton(self, name, title, next
./Lib/distutils/command/bdist_rpm.py:313:37    - Unknown word (rpmbuild)   -- path.exists('/usr/bin/rpmbuild') or \
./Lib/distutils/command/bdist_rpm.py:326:32    - Unknown word (topdir)     -- '_topdir %s' % os.path.abspath
./Lib/distutils/command/bdist_rpm.py:341:43    - Unknown word (specfile)   -- -q --qf '%s %s\n' --specfile '%s'" % (
./Lib/distutils/command/bdist_rpm.py:346:20    - Unknown word (rpms)       -- binary_rpms = []
./Lib/distutils/command/bdist_rpm.py:375:17    - Unknown word (srpm)       -- srpm = os.path.join(rpm_dir
./Lib/distutils/command/bdist_rpm.py:403:22    - Unknown word (unmangled)  -- '%define unmangled_version ' + self.distribution
./Lib/distutils/command/bdist_rpm.py:414:36    - Unknown word (bytecompile) -- invocation of brp-python-bytecompile passes in __python)
./Lib/distutils/command/bdist_rpm.py:447:28    - Unknown word (tmppath)     -- 'BuildRoot: %{_tmppath}/%{name}-%{version}
./Lib/distutils/command/bdist_rpm.py:447:67    - Unknown word (buildroot)   -- version}-%{release}-buildroot',
./Lib/distutils/command/bdist_rpm.py:451:15    - Unknown word (noarch)      -- # noarch if no extension modules
./Lib/distutils/command/bdist_rpm.py:524:15    - Unknown word (verifyscript) -- ('verifyscript', 'verify_script', None
./Lib/distutils/command/bdist_rpm.py:527:15    - Unknown word (preun)        -- ('preun', 'pre_uninstall', None
./Lib/distutils/command/bdist_rpm.py:528:15    - Unknown word (postun)       -- ('postun', 'post_uninstall',
./Lib/distutils/command/bdist_rpm.py:549:15    - Unknown word (defattr)      -- '%defattr(-,root,root)',
./Lib/distutils/command/bdist_rpm.py:79:14     - Unknown word (autoreq)    -- ('no-autoreq', None,
./Lib/distutils/command/bdist_wininst.py:152:22    - Unknown word (purelib)    -- for key in ('purelib', 'platlib', 'headers
./Lib/distutils/command/bdist_wininst.py:152:33    - Unknown word (platlib)    -- key in ('purelib', 'platlib', 'headers', 'scripts
./Lib/distutils/command/bdist_wininst.py:176:9     - Unknown word (arcname)    -- arcname = self.make_archive
./Lib/distutils/command/bdist_wininst.py:193:13    - Unknown word (inidata)    -- def get_inidata(self):
./Lib/distutils/command/bdist_wininst.py:244:9     - Unknown word (cfgdata)    -- cfgdata = self.get_inidata(
./Lib/distutils/command/bdist_wininst.py:250:13    - Unknown word (bitmapdata) -- bitmapdata = open(bitmap, "rb"
./Lib/distutils/command/bdist_wininst.py:251:13    - Unknown word (bitmaplen)  -- bitmaplen = len(bitmapdata)
./Lib/distutils/command/bdist_wininst.py:349:51    - Unknown word (borland)    -- XXX What about mingw, borland, and so on?
./Lib/distutils/command/bdist_wininst.py:355:13    - Unknown word (sfix)       -- sfix = self.plat_name[3:
./Lib/distutils/command/build.py:86:60     - Unknown word (pydebug)    -- Python 2.x with --with-pydebug don't
./Lib/distutils/command/build_clib.py:33:17     - Unknown word (clib)       -- ('build-clib=', 'b',
./Lib/distutils/command/build_clib.py:98:11     - Unknown word (Yech)       -- # Yech -- this is cut 'n pasted
./Lib/distutils/command/build_ext.py:148:65    - Unknown word (pyconfig)   -- directories (for Python.h, pyconfig.h,
./Lib/distutils/command/build_ext.py:218:43    - Unknown word (Athe)       -- extensions under Cygwin and AtheOS Python's library directory
./Lib/distutils/command/build_ext.py:220:65    - Unknown word (atheos)     -- sys.platform[:6] == 'atheos':
./Lib/distutils/command/build_ext.py:602:27    - Unknown word (commandline) -- # Do not override commandline arguments
./Lib/distutils/command/build_ext.py:645:9     - Unknown word (modpath)     -- modpath = fullname.split('.
./Lib/distutils/command/build_ext.py:690:9     - Unknown word (initfunc)    -- initfunc_name = "PyInit_" + ext
./Lib/distutils/command/build_ext.py:711:17    - Unknown word (pythonlib)   -- pythonlib = (template %
./Lib/distutils/command/build_ext.py:712:29    - Unknown word (hexversion)  -- (sys.hexversion >> 24, (sys.hexversion
./Lib/distutils/command/build_ext.py:77:11     - Unknown word (rpath)      -- ('rpath=', 'R',
./Lib/distutils/command/build_py.py:114:36    - Unknown word (globbed)    -- Strip directory from globbed filenames
./Lib/distutils/command/build_py.py:136:9     - Unknown word (lastdir)    -- lastdir = None
./Lib/distutils/command/build_py.py:159:21    - Unknown word (pdir)       -- pdir = self.package_dir[
./Lib/distutils/command/build_scripts.py:129:49    - Unknown word (outf)       -- open(outfile, "wb") as outf:
./Lib/distutils/command/build_scripts.py:145:21    - Unknown word (oldmode)    -- oldmode = os.stat(file)[ST_MODE
./Lib/distutils/command/build_scripts.py:146:21    - Unknown word (newmode)    -- newmode = (oldmode | 0o555)
./Lib/distutils/command/clean.py:5:26      - Unknown word (Kleineidam) -- contributed by Bastian Kleineidam <calvin@cs.uni-sb.de
./Lib/distutils/command/command_template:1:4       - Unknown word (distutils)  -- """distutils.command.x
./Lib/distutils/command/command_template:3:16      - Unknown word (Distutils)  -- Implements the Distutils 'x' command.
./Lib/distutils/command/config.py:108:22    - Unknown word (configtest) -- filename = "_configtest" + LANG_EXT[lang]
./Lib/distutils/command/config.py:197:9     - Unknown word (preprocesses) -- preprocesses an empty file -- which
./Lib/distutils/command/install.py:206:41    - Unknown word (packagized) -- are for putting non-packagized distributions into their
./Lib/distutils/command/install.py:34:59     - Unknown word (abiflags)   -- python$py_version_short$abiflags/$dist_name',
./Lib/distutils/command/install.py:381:22    - Unknown word (libbase)    -- self.install_libbase = self.install_lib
./Lib/distutils/command/install.py:508:13    - Unknown word (attrname)   -- attrname = 'install_' + key
./Lib/distutils/command/install.py:67:22     - Unknown word (userbase)   -- 'headers': '$userbase/Python$py_version_nodot
./Lib/distutils/command/install.py:67:49     - Unknown word (nodot)      -- userbase/Python$py_version_nodot/Include/$dist_name'
./Lib/distutils/command/install_lib.py:59:14     - Unknown word (multiarch)  -- self.multiarch = None # if we should
./Lib/distutils/command/register.py:117:27    - Unknown word (sekrit)     -- password: sekrit
./Lib/distutils/command/register.py:272:65    - Unknown word (lurve)      -- write an extra newline (lurve Macs)
./Lib/distutils/command/register.py:71:29     - Unknown word (pypirc)     -- config = self._read_pypirc()
./Lib/distutils/command/sdist.py:320:51    - Unknown word (darcs)      -- svn, .hg, .git, .bzr, _darcs directories
./Lib/distutils/command/sdist.py:335:13    - Unknown word (ptrn)       -- vcs_ptrn = r'(^|%s)(%s)(%s).
./Lib/distutils/core.py:21:13     - Unknown word (barebones)  -- # This is a barebones help message generated
./Lib/distutils/core.py:42:20     - Unknown word (distclass)  -- setup_keywords = ('distclass', 'script_name', 'script
./Lib/distutils/core.py:68:49     - Unknown word (cmdclass)   -- setup' (except for 'cmdclass') are used to set
./Lib/distutils/cygwinccompiler.py:123:17    - Unknown word (dllwraps)   -- # Older dllwraps had own version numbers
./Lib/distutils/cygwinccompiler.py:140:45    - Unknown word (mcygwin)    -- executables(compiler='gcc -mcygwin -O -Wall',
./Lib/distutils/cygwinccompiler.py:160:52    - Unknown word (windres)    -- by spawning GCC and windres if needed."""
./Lib/distutils/cygwinccompiler.py:16:15     - Unknown word (dlltool)    -- # dlltool --dllname python15.dll
./Lib/distutils/cygwinccompiler.py:16:25     - Unknown word (dllname)    -- dlltool --dllname python15.dll --def python
./Lib/distutils/cygwinccompiler.py:17:38     - Unknown word (libpython)  -- --output-lib libpython15.a
./Lib/distutils/cygwinccompiler.py:238:13    - Unknown word (unstripped) -- # unstripped_file = stripped_file
./Lib/distutils/cygwinccompiler.py:28:33     - Unknown word (dllwrap)    -- gcc 2.91.57/ld 2.9.4/dllwrap 0.2.4 works
./Lib/distutils/cygwinccompiler.py:309:40    - Unknown word (mthreads)   -- should also append -mthreads, but then the finished
./Lib/distutils/cygwinccompiler.py:310:34    - Unknown word (mingwm)     -- dlls need another dll (mingwm10.dll see Mingw32 docs
./Lib/distutils/cygwinccompiler.py:34:51     - Unknown word (binutils)   -- work, there is a bug in binutils 2.10.90
./Lib/distutils/cygwinccompiler.py:36:18     - Unknown word (mdll)       -- # - using gcc -mdll instead dllwrap doesn
./Lib/distutils/cygwinccompiler.py:399:23    - Unknown word (dumpversion) -- commands = ['gcc -dumpversion', 'ld -v', 'dllwrap
./Lib/distutils/cygwinccompiler.py:404:41    - Unknown word (dumpmachine) -- check_output(['gcc', '-dumpmachine'])
./Lib/distutils/cygwinccompiler.py:72:22     - Unknown word (msvcr)      -- return ['msvcr70']
./Lib/distutils/dir_util.py:181:12    - Unknown word (cmdtuple)   -- def _build_cmdtuple(path, cmdtuples):
./Lib/distutils/dir_util.py:181:27    - Unknown word (cmdtuples)  -- build_cmdtuple(path, cmdtuples):
./Lib/distutils/dist.py:184:53    - Unknown word (metainfo)    -- Python versions; use the metainfo for that
./Lib/distutils/dist.py:58:21     - Unknown word (pydistutils) -- 'ignore pydistutils.cfg in your home directory
./Lib/distutils/dist.py:812:13    - Unknown word (pkgname)     -- for pkgname in self.get_command
./Lib/distutils/dist.py:906:12    - Unknown word (Reinitializes) -- """Reinitializes a command to the state
./Lib/distutils/dist.py:916:44    - Unknown word (reinitializes) -- subcommands' is true, also reinitializes the command's
./Lib/distutils/dist.py:96:11     - Unknown word (licence)     -- ('licence', None,
./Lib/distutils/extension.py:153:43    - Unknown word (cpparg)     -- <sourcefile> ...] [<cpparg> ...] [<library> ..
./Lib/distutils/extension.py:175:15    - Unknown word (makesetup)  -- # makesetup script: here, there
./Lib/distutils/extension.py:219:32    - Unknown word (Xlinker)    -- elif word == "-Xlinker":
./Lib/distutils/extension.py:221:32    - Unknown word (Xcompiler)  -- elif word == "-Xcompiler":
./Lib/distutils/extension.py:22:49     - Unknown word (unportable) -- hooks that let you be as unportable as you need).
./Lib/distutils/extension.py:231:50    - Unknown word (Hmmmm)      -- append it to sources.  Hmmmm.
./Lib/distutils/fancy_getopt.py:304:34    - Unknown word (foonabulation) -- -foo controls foonabulation
./Lib/distutils/fancy_getopt.py:306:33    - Unknown word (flim)          -- --flimflam set the flim-flam level
./Lib/distutils/fancy_getopt.py:373:18    - Unknown word (wschar)        -- WS_TRANS = {ord(_wschar) : ' ' for _wschar in
./Lib/distutils/file_util.py:155:30    - Unknown word (Ascher)     -- According to David Ascher <da@ski.org>, utime
./Lib/distutils/file_util.py:25:5      - Unknown word (fsrc)       -- fsrc = None
./Lib/distutils/file_util.py:26:5      - Unknown word (fdst)       -- fdst = None
./Lib/distutils/file_util.py:83:30     - Unknown word (hardlink)   -- linking is available. If hardlink fails, falls back to
./Lib/distutils/file_util.py:86:57     - Unknown word (macostools) -- file copy function in macostools; on
./Lib/distutils/filelist.py:21:10     - Unknown word (allfiles)   -- 'allfiles' not supplied to constructor
./Lib/distutils/filelist.py:252:48    - Unknown word (followlinks) -- files in os.walk(path, followlinks=True)
./Lib/distutils/msvc9compiler.py:127:14    - Unknown word (vsbase)     -- self.vsbase = VS_BASE % version
./Lib/distutils/msvc9compiler.py:134:69    - Unknown word (productdir) -- vsbase + r"\Setup\VC", "productdir")
./Lib/distutils/msvc9compiler.py:136:51    - Unknown word (installroot) -- FrameworkDir", NET_BASE, "installroot")
./Lib/distutils/msvc9compiler.py:140:33    - Unknown word (sdkinstallrootv) -- "sdkinstallrootv2.0")
./Lib/distutils/msvc9compiler.py:152:59    - Unknown word (currentinstallfolder) -- WindowsSdkDir", WINSDK_BASE, "currentinstallfolder")
./Lib/distutils/msvc9compiler.py:203:15    - Unknown word (nnorwitz)             -- # XXX(nnorwitz): O(n**2), if reduced
./Lib/distutils/msvc9compiler.py:234:28    - Unknown word (COMNTOOLS)            -- toolskey = "VS%0.f0COMNTOOLS" % version
./Lib/distutils/msvc9compiler.py:234:9     - Unknown word (toolskey)             -- toolskey = "VS%0.f0COMNTOOLS
./Lib/distutils/msvc9compiler.py:235:9     - Unknown word (toolsdir)             -- toolsdir = os.environ.get(toolskey
./Lib/distutils/msvc9compiler.py:258:43    - Unknown word (libpath)              -- ("include", "lib", "libpath", "path"))
./Lib/distutils/msvc9compiler.py:361:24    - Unknown word (vcvars)               -- # On x86, 'vcvars32.bat amd64' creates
./Lib/distutils/msvc9compiler.py:651:13    - Unknown word (mfinfo)               -- mfinfo = self.manifest_get
./Lib/distutils/msvc9compiler.py:653:17    - Unknown word (mffilename)           -- mffilename, mfid = mfinfo
./Lib/distutils/msvc9compiler.py:653:29    - Unknown word (mfid)                 -- mffilename, mfid = mfinfo
./Lib/distutils/msvc9compiler.py:654:29    - Unknown word (outputresource)       -- out_arg = '-outputresource:%s;%s' % (output_filename
./Lib/distutils/msvc9compiler.py:704:15    - Unknown word (runtimes)             -- # runtimes are not in WinSxS folder
./Lib/distutils/msvc9compiler.py:706:21    - Unknown word (pyd's)                -- # with .pyd's.
./Lib/distutils/msvccompiler.py:124:57    - Unknown word (sdkinstallroot) -- FrameworkSDKDir", net, "sdkinstallroot")
./Lib/distutils/msvccompiler.py:240:52    - Unknown word (Devstudio)      -- r"Software\Microsoft\Devstudio"
./Lib/distutils/msvccompiler.py:588:26    - Unknown word (devstudio)      -- """Get a list of devstudio directories (include
./Lib/distutils/spawn.py:114:56    - Unknown word (execve)     -- and os.execvpe or os.execve
./Lib/distutils/spawn.py:69:21     - Unknown word (spawnv)     -- rc = os.spawnv(os.P_WAIT, executable
./Lib/distutils/spawn.py:93:47     - Unknown word (execv)      -- and os.execvp or os.execv
./Lib/distutils/sysconfig.py:105:25    - Unknown word (srcdir)     -- # must use "srcdir" from the makefile to
./Lib/distutils/sysconfig.py:110:17    - Unknown word (incdir)     -- incdir = os.path.join(get_config
./Lib/distutils/sysconfig.py:151:13    - Unknown word (libdir)     -- libdir = sys.platlibdir
./Lib/distutils/sysconfig.py:151:26    - Unknown word (platlibdir) -- libdir = sys.platlibdir
./Lib/distutils/sysconfig.py:178:19    - Unknown word (Unices)     -- varies across Unices and is stored in Python
./Lib/distutils/sysconfig.py:197:27    - Unknown word (ccshared)   -- (cc, cxx, cflags, ccshared, ldshared, shlib_suffix
./Lib/distutils/sysconfig.py:197:37    - Unknown word (ldshared)   -- cxx, cflags, ccshared, ldshared, shlib_suffix, ar, ar
./Lib/distutils/sysconfig.py:197:47    - Unknown word (shlib)      -- ccshared, ldshared, shlib_suffix, ar, ar_flags
./Lib/distutils/sysconfig.py:202:13    - Unknown word (newcc)      -- newcc = os.environ['CC']
./Lib/distutils/sysconfig.py:300:3     - Unknown word (Regexes)    -- # Regexes needed for parsing Makefile
./Lib/distutils/sysconfig.py:303:2     - Unknown word (findvar)    -- _findvar1_rx = re.compile(r"
./Lib/distutils/sysconfig.py:319:5     - Unknown word (notdone)    -- notdone = {}
./Lib/distutils/sysconfig.py:330:13    - Unknown word (tmpv)       -- tmpv = v.replace('$$', '
./Lib/distutils/sysconfig.py:441:8     - Unknown word (sysconfigdata) -- # _sysconfigdata is generated at build
./Lib/distutils/sysconfig.py:51:14     - Unknown word (pcbuild)    -- def _fix_pcbuild(d):
./Lib/distutils/sysconfig.py:81:21     - Unknown word (patchlevel) -- leaving off the patchlevel. Sample return values
./Lib/distutils/text_file.py:106:12    - Unknown word (linebuf)    -- # 'linebuf' is a stack of lines
./Lib/distutils/text_file.py:128:9     - Unknown word (outmsg)     -- outmsg = []
./Lib/distutils/unixccompiler.py:12:65     - Unknown word (ranlib)     -- command (possibly with 'ranlib')
./Lib/distutils/unixccompiler.py:158:60    - Unknown word (explicitely) -- paths, which are not explicitely needed
./Lib/distutils/unixccompiler.py:160:16    - Unknown word (libdirs)     -- system_libdirs = ['/lib', '/lib64'
./Lib/distutils/unixccompiler.py:226:51    - Unknown word (atid)        -- 45902&group_id=5470&atid=105470
./Lib/distutils/unixccompiler.py:247:35    - Unknown word (irix)        -- sys.platform[:7] == "irix646" or sys.platform
./Lib/distutils/unixccompiler.py:258:46    - Unknown word (dtags)       -- return "-Wl,--enable-new-dtags,-R" + dir
./Lib/distutils/unixccompiler.py:292:29    - Unknown word (libedit)     -- # usr/lib/libedit.tbd
./Lib/distutils/unixccompiler.py:32:42     - Unknown word (GNUC)       -- bunch of subclasses GNUCCompiler, SGICCompiler
./Lib/distutils/unixccompiler.py:32:56     - Unknown word (SGIC)       -- subclasses GNUCCompiler, SGICCompiler,
./Lib/distutils/unixccompiler.py:5:26      - Unknown word (Dname)      -- macros defined with -Dname[=value]
./Lib/distutils/unixccompiler.py:8:31      - Unknown word (lllib)      -- libraries specified with -lllib
./Lib/distutils/util.py:354:46    - Unknown word (posixsubprocess) -- a bootstrap issue: _posixsubprocess is built by
./Lib/distutils/util.py:421:32    - Unknown word (optim)           -- cmd.extend(subprocess._optim_args_from_interpreter
./Lib/distutils/util.py:532:9     - Unknown word (outname)         -- outname = os.path.join(dest
./Lib/distutils/util.py:80:25     - Unknown word (sunos)      -- elif osname[:5] == "sunos":
./Lib/distutils/util.py:87:13     - Unknown word (bitness)    -- bitness = {2147483647:"32bit
./Lib/distutils/version.py:38:25     - Unknown word (vstring)    -- def __init__ (self, vstring=None):
./Lib/distutils/version.py:95:35     - Unknown word (retentives) -- Version numbering for anal retentives and software idealists
./Lib/distutils/versionpredicate.py:149:26    - Unknown word (mypkg)      -- >> split_provision('mypkg')
./Lib/distutils/versionpredicate.py:34:31     - Unknown word (pyepat)     -- = VersionPredicate('pyepat.abc (>1.0, <3333.3a
./Lib/doctest.py:1010:17   - Unknown word (valname)     -- for valname, val in obj.__dict_
./Lib/doctest.py:1235:15   - Unknown word (fakeout)     -- self._fakeout = _SpoofOut()
./Lib/doctest.py:1296:27   - Unknown word (compileflags) -- def __run(self, test, compileflags, out):
./Lib/doctest.py:1318:13   - Unknown word (examplenum)   -- for examplenum, example in enumerate
./Lib/doctest.py:1328:22   - Unknown word (optionflag)   -- for (optionflag, val) in example.options
./Lib/doctest.py:1528:9    - Unknown word (notests)      -- notests = []
./Lib/doctest.py:1531:18   - Unknown word (totalf)       -- totalt = totalf = 0
./Lib/doctest.py:1531:9    - Unknown word (totalt)       -- totalt = totalf = 0
./Lib/doctest.py:1577:45   - Unknown word (buildbots)    -- so breaks some of the buildbots
./Lib/doctest.py:2135:11   - Unknown word (reportflags)  -- _unittest_reportflags = 0
./Lib/doctest.py:253:5     - Unknown word (excout)     -- excout = StringIO()
./Lib/doctest.py:2630:5    - Unknown word (testsrc)      -- testsrc = script_from_examples
./Lib/doctest.py:2785:5    - Unknown word (testfiles)    -- testfiles = args.file
./Lib/doctest.py:367:44    - Unknown word (nosigint)   -- _(self, stdout=out, nosigint=True)
./Lib/doctest.py:41:42     - Unknown word (doctests)   -- of other ways to run doctests, including integration
./Lib/doctest.py:473:25    - Unknown word (optionflags) -- DocTestRunner's optionflags). By default, no options
./Lib/doctest.py:48:3      - Unknown word (docformat)  -- __docformat__ = 'reStructuredText
./Lib/doctest.py:624:57    - Unknown word (alphanum)    -- a line *starts* with alphanum.
./Lib/doctest.py:646:9     - Unknown word (charno)      -- charno, lineno = 0, 0
./Lib/doctest.py:822:15    - Unknown word (Doctests)    -- objects. Doctests can currently be extracted
./Lib/doctest.py:849:61    - Unknown word (extraglobs)  -- module=None, globs=None, extraglobs=None):
./Lib/doctest.py:963:35    - Unknown word (objclass)    -- if hasattr(object, '__objclass__'):
./Lib/email/__init__.py:30:34     - Unknown word (cascadingly) -- importing email since those cascadingly import most of the rest
./Lib/email/_encoded_words.py:155:56    - Unknown word (FDFF)       -- unknown' character \\uFDFF.
./Lib/email/_encoded_words.py:214:9     - Unknown word (qlen)       -- qlen = _cte_encode_length
./Lib/email/_encoded_words.py:215:9     - Unknown word (blen)       -- blen = _cte_encode_length
./Lib/email/_encoded_words.py:64:9      - Unknown word (subber)     -- _q_byte_subber = functools.partial
./Lib/email/_encoded_words.py:89:14     - Unknown word (bstring)    -- def encode_q(bstring):
./Lib/email/_encoded_words.py:8:6       - Unknown word (ecoded)     -- # An ecoded word looks like this
./Lib/email/_header_value_parser.py:1059:43   - Unknown word (attrtext)    -- token_type.endswith('attrtext'):
./Lib/email/_header_value_parser.py:108:14    - Unknown word (lastlen)    -- self.lastlen = 0
./Lib/email/_header_value_parser.py:109:14    - Unknown word (stickyspace) -- self.stickyspace = None
./Lib/email/_header_value_parser.py:127:22    - Unknown word (stoken)      -- def append(self, stoken):
./Lib/email/_header_value_parser.py:1369:15   - Unknown word (xtext)       -- def _validate_xtext(xtext):
./Lib/email/_header_value_parser.py:1370:42   - Unknown word (printables)  -- token contains ASCII non-printables, register a defect.
./Lib/email/_header_value_parser.py:1379:19   - Unknown word (endchars)    -- def _get_ptext_to_endchars(value, endchars):
./Lib/email/_header_value_parser.py:1382:34   - Unknown word (qcontent)    -- function turns a run of qcontent, ccontent-without-comments
./Lib/email/_header_value_parser.py:1382:44   - Unknown word (ccontent)    -- turns a run of qcontent, ccontent-without-comments, or
./Lib/email/_header_value_parser.py:1383:5    - Unknown word (dtext)       -- dtext-with-quoted-printables
./Lib/email/_header_value_parser.py:1389:5    - Unknown word (vchars)      -- vchars = []
./Lib/email/_header_value_parser.py:13:40     - Unknown word (Postel's)   -- following the spirit of Postel's Law, which RFC 5322
./Lib/email/_header_value_parser.py:1433:5    - Unknown word (remstr)      -- remstr = ''.join(remainder
./Lib/email/_header_value_parser.py:1457:9    - Unknown word (vtext)       -- vtext = ValueTerminal(chars
./Lib/email/_header_value_parser.py:1464:32   - Unknown word (vchar)       -- unstructured = (*([FWS] vchar) *WSP) / obs-unstruct
./Lib/email/_header_value_parser.py:1464:51   - Unknown word (unstruct)    -- vchar) *WSP) / obs-unstruct
./Lib/email/_header_value_parser.py:1465:40   - Unknown word (utext)       -- unstruct = *((*LF *CR *(obs-utext) *LF *CR)) / FWS)
./Lib/email/_header_value_parser.py:1551:9    - Unknown word (atext)       -- def get_atext(value):
./Lib/email/_header_value_parser.py:2471:9    - Unknown word (ttext)       -- def get_ttext(value):
./Lib/email/_header_value_parser.py:2493:69   - Unknown word (ctls)        -- chars except space, ctls, or
./Lib/email/_header_value_parser.py:2499:5    - Unknown word (mtoken)      -- mtoken = Token()
./Lib/email/_header_value_parser.py:2687:5    - Unknown word (appendto)    -- appendto = param
./Lib/email/_header_value_parser.py:2692:9    - Unknown word (qstring)     -- qstring, remainder = get_quoted
./Lib/email/_header_value_parser.py:275:36    - Unknown word (cfws)        -- self[-1].token_type == 'cfws':
./Lib/email/_header_value_parser.py:2794:53   - Unknown word (reminaing)   -- because it consumes the reminaing value, but it
./Lib/email/_header_value_parser.py:2838:27   - Unknown word (tokenlist)   -- find_mime_parameters(tokenlist, value):
./Lib/email/_header_value_parser.py:2857:22   - Unknown word (substype)    -- The maintype and substype are tokens.  Theoretically
./Lib/email/_header_value_parser.py:2876:7    - Unknown word (mantype)     -- # mantype and subtype specialized
./Lib/email/_header_value_parser.py:2902:45   - Unknown word (postel)      -- Perhaps we should postel this, but we should
./Lib/email/_header_value_parser.py:326:13    - Unknown word (tlen)        -- tlen = len(tstr)
./Lib/email/_header_value_parser.py:360:9     - Unknown word (ppstr)       -- def ppstr(self, indent=''):
./Lib/email/_header_value_parser.py:415:21    - Unknown word (oldlastlen)  -- oldlastlen = sum(len(x) for x in
./Lib/email/_header_value_parser.py:416:21    - Unknown word (schunk)      -- schunk = str(chunk)
./Lib/email/_header_value_parser.py:417:21    - Unknown word (lchunk)      -- lchunk = len(schunk)
./Lib/email/_header_value_parser.py:453:13    - Unknown word (spart)       -- spart = str(part)
./Lib/email/_header_value_parser.py:4:64      - Unknown word (followon)   -- RFC 5322, which is the followon
./Lib/email/_header_value_parser.py:568:7     - Unknown word (CFWS)        -- class CFWSList(WhiteSpaceTokenList
./Lib/email/_header_value_parser.py:63:19     - Unknown word (ptext)      -- may be produced: 'ptext'. A 'ptext' is a string
./Lib/email/_header_value_parser.py:64:38     - Unknown word (ctext)      -- in place of lists of (ctext/quoted-pair) and
./Lib/email/_header_value_parser.py:65:2      - Unknown word (qtext)      -- (qtext/quoted-pair).
./Lib/email/_header_value_parser.py:908:9     - Unknown word (nameset)     -- nameset = set(self.local_part
./Lib/email/_parseaddr.py:11:6      - Unknown word (parsedate)  -- 'parsedate',
./Lib/email/_parseaddr.py:151:5     - Unknown word (tzoffset)   -- tzoffset = None
./Lib/email/_parseaddr.py:203:7     - Unknown word (Addrlist)   -- class AddrlistClass:
./Lib/email/_parseaddr.py:204:36    - Unknown word (Escoto)     -- parser class by Ben Escoto.
./Lib/email/_parseaddr.py:224:14    - Unknown word (atomends)   -- self.atomends = self.specials + self
./Lib/email/_parseaddr.py:228:14    - Unknown word (phraseends) -- self.phraseends = self.atomends.replace
./Lib/email/_parseaddr.py:230:14    - Unknown word (commentlist) -- self.commentlist = []
./Lib/email/_parseaddr.py:232:9     - Unknown word (gotonext)    -- def gotonext(self):
./Lib/email/_parseaddr.py:234:9     - Unknown word (wslist)      -- wslist = []
./Lib/email/_parseaddr.py:23:2      - Unknown word (monthnames) -- _monthnames = ['jan', 'feb', 'mar
./Lib/email/_parseaddr.py:241:46    - Unknown word (getcomment)  -- commentlist.append(self.getcomment())
./Lib/email/_parseaddr.py:246:9     - Unknown word (getaddrlist) -- def getaddrlist(self):
./Lib/email/_parseaddr.py:253:23    - Unknown word (getaddress)  -- ad = self.getaddress()
./Lib/email/_parseaddr.py:265:9     - Unknown word (oldpos)      -- oldpos = self.pos
./Lib/email/_parseaddr.py:266:9     - Unknown word (oldcl)       -- oldcl = self.commentlist
./Lib/email/_parseaddr.py:267:22    - Unknown word (getphraselist) -- plist = self.getphraselist()
./Lib/email/_parseaddr.py:270:9     - Unknown word (returnlist)    -- returnlist = []
./Lib/email/_parseaddr.py:278:40    - Unknown word (addrspec)      -- email address is just an addrspec
./Lib/email/_parseaddr.py:282:29    - Unknown word (getaddrspec)   -- addrspec = self.getaddrspec()
./Lib/email/_parseaddr.py:289:13    - Unknown word (fieldlen)      -- fieldlen = len(self.field)
./Lib/email/_parseaddr.py:28:2      - Unknown word (daynames)   -- _daynames = ['mon', 'tue', 'wed
./Lib/email/_parseaddr.py:300:13    - Unknown word (routeaddr)     -- routeaddr = self.getrouteaddr
./Lib/email/_parseaddr.py:300:30    - Unknown word (getrouteaddr)  -- routeaddr = self.getrouteaddr()
./Lib/email/_parseaddr.py:327:9     - Unknown word (expectroute)   -- expectroute = False
./Lib/email/_parseaddr.py:330:9     - Unknown word (adlist)        -- adlist = ''
./Lib/email/_parseaddr.py:333:22    - Unknown word (getdomain)     -- self.getdomain()
./Lib/email/_parseaddr.py:353:9     - Unknown word (aslist)        -- aslist = []
./Lib/email/_parseaddr.py:365:51    - Unknown word (getquote)      -- '"%s"' % quote(self.getquote()))
./Lib/email/_parseaddr.py:371:36    - Unknown word (getatom)       -- aslist.append(self.getatom())
./Lib/email/_parseaddr.py:386:9     - Unknown word (sdlist)        -- sdlist = []
./Lib/email/_parseaddr.py:393:36    - Unknown word (getdomainliteral) -- sdlist.append(self.getdomainliteral())
./Lib/email/_parseaddr.py:403:28    - Unknown word (beginchar)        -- def getdelimited(self, beginchar, endchars, allowcomments
./Lib/email/_parseaddr.py:403:49    - Unknown word (allowcomments)    -- beginchar, endchars, allowcomments=True):
./Lib/email/_parseaddr.py:403:9     - Unknown word (getdelimited)     -- def getdelimited(self, beginchar, endchars
./Lib/email/_parseaddr.py:419:9     - Unknown word (slist)            -- slist = ['']
./Lib/email/_parseaddr.py:459:9     - Unknown word (atomlist)         -- atomlist = ['']
./Lib/email/_parseaddr.py:476:47    - Unknown word (canonicalized)    -- strings. Phrases are canonicalized by squeezing all
./Lib/email/_parseaddr.py:500:18    - Unknown word (addresslist)      -- self.addresslist = self.getaddrlist(
./Lib/email/_parseaddr.py:509:9     - Unknown word (newaddr)          -- newaddr = AddressList(None)
./Lib/email/_parseaddr.py:73:21     - Unknown word (dayname)    -- # There's a dayname here. Skip it
./Lib/email/_policybase.py:221:35    - Unknown word (sourcelines) -- header_source_parse(self, sourcelines):
./Lib/email/_policybase.py:226:9     - Unknown word (surrogateescaped) -- surrogateescaped binary data.
./Lib/email/_policybase.py:353:48    - Unknown word (multibyte)        -- ascii split, but if it's multibyte then we could break
./Lib/email/_policybase.py:67:9      - Unknown word (newpolicy)  -- newpolicy = self.__class__.__new
./Lib/email/architecture.rst:107:21    - Unknown word (setitem)    -- `Message` object `__setitem__` interface), the name
./Lib/email/architecture.rst:157:34    - Unknown word (Compat)     -- email.policy.Policy.Compat32` Policy provides backward
./Lib/email/architecture.rst:164:37    - Unknown word (linesep)    -- lines, preserving the linesep characters to obtain
./Lib/email/architecture.rst:69:13     - Unknown word (lifecyle)   -- The general lifecyle of a message is:
./Lib/email/base64mime.py:106:33    - Unknown word (bmlo)       -- like =?iso-8859-1?b?bmloISBuaWgh?=) -- please
./Lib/email/base64mime.py:2:15      - Unknown word (Gertzfield) -- # Author: Ben Gertzfield
./Lib/email/base64mime.py:89:5      - Unknown word (encvec)     -- encvec = []
./Lib/email/charset.py:128:67    - Unknown word (codecname)  -- use add_codec(charset, codecname)
./Lib/email/charset.py:229:15    - Unknown word (benc)       -- henc, benc, conv = CHARSETS.get
./Lib/email/charset.py:229:9     - Unknown word (henc)       -- henc, benc, conv = CHARSETS
./Lib/email/charset.py:300:43    - Unknown word (maxlengths) -- lines(self, string, maxlengths):
./Lib/email/charset.py:369:13    - Unknown word (lenqp)      -- lenqp = email.quoprimime.header
./Lib/email/charset.py:393:15    - Unknown word (quopromime) -- # quopromime.body_encode takes a
./Lib/email/charset.py:55:6      - Unknown word (viscii)     -- 'viscii': (QP,        QP
./Lib/email/charset.py:98:21     - Unknown word (eucgb)      -- 'gb2312': 'eucgb2312_cn',
./Lib/email/contentmanager.py:137:9     - Unknown word (thisline)   -- thisline = data[i:i+unencoded
./Lib/email/contentmanager.py:160:54    - Unknown word (lineseps)   -- unfair to qp; it includes lineseps, base64 doesn't.
./Lib/email/contentmanager.py:238:38    - Unknown word (istext)     -- binascii.b2a_qp(data, istext=False, header=False
./Lib/email/contentmanager.py:238:66    - Unknown word (quotetabs)  -- False, header=False, quotetabs=True)
./Lib/email/contentmanager.py:27:31     - Unknown word (typekey)    -- add_set_handler(self, typekey, handler):
./Lib/email/encoders.py:15:36     - Unknown word (bencode)    -- import encodebytes as _bencode
./Lib/email/encoders.py:20:6      - Unknown word (qencode)    -- def _qencode(s):
./Lib/email/encoders.py:32:5      - Unknown word (encdata)    -- encdata = str(_bencode(orig
./Lib/email/feedparser.py:163:15    - Unknown word (msgstack)   -- self._msgstack = []
./Lib/email/feedparser.py:164:29    - Unknown word (parsegen)   -- self._parse = self._parsegen().__next__
./Lib/email/feedparser.py:167:15    - Unknown word (headersonly) -- self._headersonly = False
./Lib/email/feedparser.py:27:13     - Unknown word (policybase) -- from email._policybase import compat32
./Lib/email/feedparser.py:2:20      - Unknown word (Wouters)    -- # Authors: Baxter, Wouters and Warsaw
./Lib/email/feedparser.py:332:13    - Unknown word (boundaryre)  -- boundaryre = re.compile(
./Lib/email/feedparser.py:35:37     - Unknown word (ftext)      -- 8 Optional fields.  ftext is %d33-57 / %d59-1
./Lib/email/feedparser.py:361:29    - Unknown word (lastline)    -- lastline = preamble[-1]
./Lib/email/feedparser.py:362:29    - Unknown word (eolmo)       -- eolmo = NLCRE_eol.search(lastline
./Lib/email/feedparser.py:456:17    - Unknown word (bolmo)       -- bolmo = NLCRE_bol.match(firstline
./Lib/email/feedparser.py:473:9     - Unknown word (lastheader)  -- lastheader = ''
./Lib/email/feedparser.py:474:9     - Unknown word (lastvalue)   -- lastvalue = []
./Lib/email/feedparser.py:60:15     - Unknown word (eofstack)   -- self._eofstack = []
./Lib/email/feedparser.py:89:13     - Unknown word (ateof)      -- for ateof in reversed(self._eofstack
./Lib/email/generator.py:104:11    - Unknown word (submessages)  -- # submessages will automatically get
./Lib/email/generator.py:112:17    - Unknown word (ufrom)        -- ufrom = msg.get_unixfrom(
./Lib/email/generator.py:177:9     - Unknown word (oldfp)        -- oldfp = self._fp
./Lib/email/generator.py:179:19    - Unknown word (munge)        -- self._munge_cte = None
./Lib/email/generator.py:258:9     - Unknown word (msgtexts)     -- msgtexts = []
./Lib/email/generator.py:279:13    - Unknown word (alltext)      -- alltext = self._encoded_NL.join
./Lib/email/generator.py:354:11    - Unknown word (Groupwise)    -- # Groupwise when forwarding unadorned
./Lib/email/generator.py:36:24     - Unknown word (outfp)      -- def __init__(self, outfp, mangle_from_=None,
./Lib/email/generator.py:36:50     - Unknown word (maxheaderlen) -- mangle_from_=None, maxheaderlen=None, *,
./Lib/email/generator.py:81:23     - Unknown word (subobjects)   -- Note that for subobjects, no From_ line is printed
./Lib/email/header.py:103:5     - Unknown word (droplist)   -- droplist = []
./Lib/email/header.py:122:13    - Unknown word (paderr)     -- paderr = len(encoded_string
./Lib/email/header.py:222:19    - Unknown word (headerlen)  -- self._headerlen = 0
./Lib/email/header.py:230:9     - Unknown word (uchunks)    -- uchunks = []
./Lib/email/header.py:231:9     - Unknown word (lastcs)     -- lastcs = None
./Lib/email/header.py:232:9     - Unknown word (lastspace)  -- lastspace = None
./Lib/email/header.py:240:13    - Unknown word (nextcs)     -- nextcs = charset
./Lib/email/header.py:245:17    - Unknown word (hasspace)   -- hasspace = string and self._nonctext
./Lib/email/header.py:245:45    - Unknown word (nonctext)   -- hasspace = string and self._nonctext(string[0])
./Lib/email/header.py:313:22    - Unknown word (splitchars) -- def encode(self, splitchars=';, \t', maxlinelen
./Lib/email/header.py:334:56    - Unknown word (splitchar)  -- points preceded by a splitchar are preferred
./Lib/email/header.py:339:23    - Unknown word (Splitchars) -- being split.  Splitchars does not affect RFC
./Lib/email/header.py:434:38    - Unknown word (onlyws)     -- self._current_line.is_onlyws():
./Lib/email/header.py:519:21    - Unknown word (prevpart)   -- prevpart = self._current_line
./Lib/email/header.py:568:21    - Unknown word (startval)   -- def reset(self, startval=None):
./Lib/email/headerregistry.py:148:9     - Unknown word (adrstr)     -- adrstr = ", ".join(str(x) for
./Lib/email/message.py:1016:14   - Unknown word (prio)           -- best_prio = len(preferencelist
./Lib/email/message.py:144:50    - Unknown word (mesasge)      -- used to serialize the mesasge; if it is not
./Lib/email/message.py:14:3      - Unknown word (Intrapackage) -- # Intrapackage imports
./Lib/email/message.py:227:54    - Unknown word (uuencoded)    -- i.e. bogus base64 or uuencoded data), the
./Lib/email/message.py:264:17    - Unknown word (bpayload)     -- bpayload = payload.encode('ascii
./Lib/email/message.py:290:25    - Unknown word (uuencode)     -- elif cte in ('x-uuencode', 'uuencode', 'uue'
./Lib/email/message.py:29:6      - Unknown word (splitparam)   -- def _splitparam(param):
./Lib/email/message.py:39:6      - Unknown word (formatparam)  -- def _formatparam(param, value=None, quote
./Lib/email/message.py:462:25    - Unknown word (failobj)      -- def get(self, name, failobj=None):
./Lib/email/message.py:531:47    - Unknown word (Fußballer)    -- filename=('utf-8', '', Fußballer.ppt'))
./Lib/email/message.py:687:13    - Unknown word (rawparam)     -- rawparam = msg.get_param('foo
./Lib/email/message.py:701:62    - Unknown word (requote)      -- header='Content-Type', requote=True,
./Lib/email/message.py:851:9     - Unknown word (newparams)    -- newparams = []
./Lib/email/message.py:852:9     - Unknown word (foundp)       -- foundp = False
./Lib/email/message.py:894:13    - Unknown word (pcharset)     -- pcharset = charset[0] or 'us
./Lib/email/message.py:93:6      - Unknown word (unquotevalue) -- def _unquotevalue(value):
./Lib/email/message.py:977:32    - Unknown word (preferencelist) -- find_body(self, part, preferencelist):
./Lib/email/mime/audio.py:24:53     - Unknown word (realaudio)  -- to sndhdr? midi, mp3, realaudio, wma??
./Lib/email/mime/audio.py:25:6      - Unknown word (whatsnd)    -- def _whatsnd(data):
./Lib/email/mime/audio.py:33:5      - Unknown word (fakefile)   -- fakefile = BytesIO(hdr)
./Lib/email/mime/audio.py:34:9      - Unknown word (testfn)     -- for testfn in sndhdr.tests:
./Lib/email/mime/audio.py:45:25     - Unknown word (audiodata)  -- def __init__(self, _audiodata, _subtype=None,
./Lib/email/mime/image.py:19:25     - Unknown word (imagedata)  -- def __init__(self, _imagedata, _subtype=None,
./Lib/email/quoprimime.py:176:13    - Unknown word (speacial)   -- # quote speacial characters
./Lib/email/quoprimime.py:189:9     - Unknown word (laststart)  -- laststart = len(line) - 1 - maxlinelen
./Lib/email/utils.py:111:52    - Unknown word (fieldvalue) -- REALNAME, EMAIL) for each fieldvalue."""
./Lib/email/utils.py:138:16    - Unknown word (timeval)    -- def formatdate(timeval=None, localtime=False
./Lib/email/utils.py:138:47    - Unknown word (usegmt)     -- None, localtime=False, usegmt=False):
./Lib/email/utils.py:186:16    - Unknown word (idstring)   -- def make_msgid(idstring=None, domain=None):
./Lib/email/utils.py:210:6     - Unknown word (dtuple)     -- *dtuple, tz = _parsedate_tz
./Lib/email/utils.py:218:5     - Unknown word (addrs)      -- addrs = _AddressList(addr
./Lib/email/utils.py:331:5     - Unknown word (rawbytes)   -- rawbytes = bytes(text, 'raw-unicode
./Lib/email/utils.py:377:25    - Unknown word (altzone)    -- gmtoff = -(time.altzone if dst else time.timezone
./Lib/email/utils.py:78:6      - Unknown word (realname)   -- (realname, email_address) and
./Lib/encodings/__init__.py:144:9     - Unknown word (codecaliases) -- codecaliases = mod.getaliases()
./Lib/encodings/__init__.py:20:7      - Unknown word (getaliases) -- * getaliases() -> sequence of encoding
./Lib/encodings/__init__.py:59:5      - Unknown word (punct)      -- punct = False
./Lib/encodings/__init__.py:89:9      - Unknown word (modnames)   -- modnames = [aliased_encoding
./Lib/encodings/aliases.py:125:11    - Unknown word (codepage)   -- 'cspc8codepage437' : 'cp437',
./Lib/encodings/aliases.py:125:6     - Unknown word (cspc)       -- 'cspc8codepage437' : 'cp
./Lib/encodings/aliases.py:147:6     - Unknown word (cspcp)      -- 'cspcp852' : 'cp
./Lib/encodings/aliases.py:178:13    - Unknown word (latinhebrew) -- 'cspc862latinhebrew' : 'cp862',
./Lib/encodings/aliases.py:210:6     - Unknown word (mskanji)     -- 'mskanji' : 'cp93
./Lib/encodings/aliases.py:223:6     - Unknown word (jisx)        -- 'jisx0213' : 'euc
./Lib/encodings/aliases.py:224:6     - Unknown word (eucjis)      -- 'eucjis2004' : 'euc
./Lib/encodings/aliases.py:228:6     - Unknown word (eucjisx)     -- 'eucjisx0213' : 'euc_jisx
./Lib/encodings/aliases.py:231:6     - Unknown word (eucjp)       -- 'eucjp' : 'euc
./Lib/encodings/aliases.py:232:6     - Unknown word (ujis)        -- 'ujis' : 'euc
./Lib/encodings/aliases.py:236:6     - Unknown word (euckr)       -- 'euckr' : 'euc
./Lib/encodings/aliases.py:249:6     - Unknown word (csiso)       -- 'csiso58gb231280' : 'gb
./Lib/encodings/aliases.py:251:6     - Unknown word (euccn)       -- 'euccn' : 'gb
./Lib/encodings/aliases.py:273:6     - Unknown word (hzgb)        -- 'hzgb' : 'hz
./Lib/encodings/aliases.py:28:6      - Unknown word (csascii)    -- 'csascii' : 'ascii
./Lib/encodings/aliases.py:308:6     - Unknown word (csisolatin)  -- 'csisolatin6' : 'iso8859
./Lib/encodings/aliases.py:370:6     - Unknown word (csisolatincyrillic) -- 'csisolatincyrillic' : 'iso8859_5',
./Lib/encodings/aliases.py:378:6     - Unknown word (asmo)               -- 'asmo_708' : 'iso
./Lib/encodings/aliases.py:379:6     - Unknown word (csisolatinarabic)   -- 'csisolatinarabic' : 'iso8859_6',
./Lib/encodings/aliases.py:386:6     - Unknown word (csisolatingreek)    -- 'csisolatingreek' : 'iso8859_7',
./Lib/encodings/aliases.py:388:6     - Unknown word (elot)               -- 'elot_928' : 'iso
./Lib/encodings/aliases.py:396:6     - Unknown word (csisolatinhebrew)   -- 'csisolatinhebrew' : 'iso8859_8',
./Lib/encodings/aliases.py:415:6     - Unknown word (cskoi)              -- 'cskoi8r' : 'koi
./Lib/encodings/aliases.py:420:6     - Unknown word (strk)               -- 'strk1048_2002' : 'kz
./Lib/encodings/aliases.py:42:6      - Unknown word (csbig)      -- 'csbig5' : 'big
./Lib/encodings/aliases.py:443:6     - Unknown word (maccyrillic)        -- 'maccyrillic' : 'mac_cyrillic
./Lib/encodings/aliases.py:446:6     - Unknown word (macgreek)           -- 'macgreek' : 'mac_greek
./Lib/encodings/aliases.py:449:6     - Unknown word (maciceland)         -- 'maciceland' : 'mac_iceland
./Lib/encodings/aliases.py:452:6     - Unknown word (maccentraleurope)   -- 'maccentraleurope' : 'mac_latin2',
./Lib/encodings/aliases.py:453:10    - Unknown word (centeuro)           -- 'mac_centeuro' : 'mac_latin
./Lib/encodings/aliases.py:454:6     - Unknown word (maclatin)           -- 'maclatin2' : 'mac_latin
./Lib/encodings/aliases.py:458:6     - Unknown word (macroman)           -- 'macroman' : 'mac_roman
./Lib/encodings/aliases.py:45:11     - Unknown word (hkscs)      -- 'big5_hkscs' : 'big5hkscs
./Lib/encodings/aliases.py:461:6     - Unknown word (macturkish)         -- 'macturkish' : 'mac_turkish
./Lib/encodings/aliases.py:465:6     - Unknown word (dbcs)               -- 'dbcs' : 'mbcs
./Lib/encodings/aliases.py:468:6     - Unknown word (csptcp)             -- 'csptcp154' : 'ptcp
./Lib/encodings/aliases.py:476:6     - Unknown word (quotedprintable)    -- 'quotedprintable' : 'quopri_codec
./Lib/encodings/aliases.py:482:6     - Unknown word (csshiftjis)         -- 'csshiftjis' : 'shift_jis
./Lib/encodings/aliases.py:483:6     - Unknown word (shiftjis)           -- 'shiftjis' : 'shift
./Lib/encodings/aliases.py:484:6     - Unknown word (sjis)               -- 'sjis' : 'shift
./Lib/encodings/aliases.py:493:6     - Unknown word (shiftjisx)          -- 'shiftjisx0213' : 'shift_jisx
./Lib/encodings/aliases.py:494:6     - Unknown word (sjisx)              -- 'sjisx0213' : 'shift
./Lib/encodings/aliases.py:509:6     - Unknown word (unicodebigunmarked) -- 'unicodebigunmarked' : 'utf_16_be',
./Lib/encodings/aliases.py:513:6     - Unknown word (unicodelittleunmarked) -- 'unicodelittleunmarked' : 'utf_16_le',
./Lib/encodings/aliases.py:53:6      - Unknown word (csibm)      -- 'csibm037' : 'cp
./Lib/encodings/aliases.py:70:6      - Unknown word (ruscii)     -- 'ruscii' : 'cp
./Lib/encodings/big5.py:10:20     - Unknown word (getcodec)       -- codec = _codecs_tw.getcodec('big5')
./Lib/encodings/big5.py:16:30     - Unknown word (Multibyte)      -- IncrementalEncoder(mbc.MultibyteIncrementalEncoder,
./Lib/encodings/big5.py:4:18      - Unknown word (Shik)       -- # Written by Hye-Shik Chang <perky@FreeBSD
./Lib/encodings/big5.py:8:9       - Unknown word (multibytecodec) -- import _multibytecodec as mbc
./Lib/encodings/bz2_codec.py:33:14     - Unknown word (compressobj) -- self.compressobj = bz2.BZ2Compressor
./Lib/encodings/bz2_codec.py:49:14     - Unknown word (decompressobj) -- self.decompressobj = bz2.BZ2Decompressor
./Lib/encodings/bz2_codec.py:4:29      - Unknown word (untransform) -- transform() and bytes.untransform().
./Lib/encodings/cp037.py:1:105     - Unknown word (gencodec)   -- EBCDIC/CP037.TXT' with gencodec.py.
./Lib/encodings/cp1006.py:242:7     - Unknown word (ufea)       -- '\ufea1' #  0xC2 -> ARABIC
./Lib/encodings/cp1006.py:248:7     - Unknown word (ufeab)      -- '\ufeab' #  0xC8 -> ARABIC
./Lib/encodings/cp1006.py:249:7     - Unknown word (ufead)      -- '\ufead' #  0xC9 -> ARABIC
./Lib/encodings/cp1006.py:251:7     - Unknown word (ufeaf)      -- '\ufeaf' #  0xCB -> ARABIC
./Lib/encodings/cp1006.py:258:7     - Unknown word (ufebb)      -- '\ufebb' #  0xD2 -> ARABIC
./Lib/encodings/cp1006.py:259:7     - Unknown word (ufebd)      -- '\ufebd' #  0xD3 -> ARABIC
./Lib/encodings/cp1006.py:260:7     - Unknown word (ufebf)      -- '\ufebf' #  0xD4 -> ARABIC
./Lib/encodings/cp1006.py:264:7     - Unknown word (ufeca)      -- '\ufeca' #  0xD8 -> ARABIC
./Lib/encodings/cp1006.py:265:7     - Unknown word (ufecb)      -- '\ufecb' #  0xD9 -> ARABIC
./Lib/encodings/cp1006.py:266:7     - Unknown word (ufecc)      -- '\ufecc' #  0xDA -> ARABIC
./Lib/encodings/cp1006.py:267:7     - Unknown word (ufecd)      -- '\ufecd' #  0xDB -> ARABIC
./Lib/encodings/cp1006.py:268:7     - Unknown word (ufece)      -- '\ufece' #  0xDC -> ARABIC
./Lib/encodings/cp1006.py:269:7     - Unknown word (ufecf)      -- '\ufecf' #  0xDD -> ARABIC
./Lib/encodings/cp1006.py:276:7     - Unknown word (ufedb)      -- '\ufedb' #  0xE4 -> ARABIC
./Lib/encodings/cp1006.py:279:7     - Unknown word (ufedd)      -- '\ufedd' #  0xE7 -> ARABIC
./Lib/encodings/cp1006.py:280:7     - Unknown word (ufedf)      -- '\ufedf' #  0xE8 -> ARABIC
./Lib/encodings/cp1006.py:289:7     - Unknown word (ufba)       -- '\ufba6' #  0xF1 -> ARABIC
./Lib/encodings/cp1006.py:292:7     - Unknown word (ufbaa)      -- '\ufbaa' #  0xF4 -> ARABIC
./Lib/encodings/cp1006.py:297:7     - Unknown word (ufef)       -- '\ufef1' #  0xF9 -> ARABIC
./Lib/encodings/cp1006.py:300:7     - Unknown word (ufbb)       -- '\ufbb0' #  0xFC -> ARABIC
./Lib/encodings/cp1006.py:301:7     - Unknown word (ufbae)      -- '\ufbae' #  0xFD -> ARABIC
./Lib/encodings/cp1250.py:177:7     - Unknown word (ufffe)      -- '\ufffe' #  0x81 -> UNDEFINED
./Lib/encodings/cp720.py:3:24      - Unknown word (genwincodec) -- python Tools/unicode/genwincodec.py 720
./Lib/encodings/cp864.py:336:7     - Unknown word (ufefb)      -- '\ufefb' #  0x009d -> ARABIC
./Lib/encodings/cp864.py:337:7     - Unknown word (ufefc)      -- '\ufefc' #  0x009e -> ARABIC
./Lib/encodings/cp864.py:410:7     - Unknown word (ufeeb)      -- '\ufeeb' #  0x00e7 -> ARABIC
./Lib/encodings/cp864.py:412:7     - Unknown word (ufeef)      -- '\ufeef' #  0x00e9 -> ARABIC
./Lib/encodings/cp864.py:423:7     - Unknown word (ufeec)      -- '\ufeec' #  0x00f4 -> ARABIC
./Lib/encodings/hp_roman8.py:3:64      - Unknown word (Keld)       -- charmaps/HP-ROMAN8 (Keld Simonsen)
./Lib/encodings/hp_roman8.py:3:69      - Unknown word (Simonsen)   -- charmaps/HP-ROMAN8 (Keld Simonsen)
./Lib/encodings/hp_roman8.py:6:18      - Unknown word (Hewlet)     -- 33471-90901, Hewlet-Packard, June 1989.
./Lib/encodings/idna.py:16:5      - Unknown word (newlabel)   -- newlabel = []
./Lib/encodings/palmos.py:3:12      - Unknown word (Sjoerd)     -- Written by Sjoerd Mullender (sjoerd@acm
./Lib/encodings/palmos.py:3:19      - Unknown word (Mullender)  -- Written by Sjoerd Mullender (sjoerd@acm.org); based
./Lib/encodings/punycode.py:106:23    - Unknown word (baselen)    -- def generate_integers(baselen, deltas):
./Lib/encodings/punycode.py:127:41    - Unknown word (extpos)     -- generalized_number(extended, extpos, bias, errors):
./Lib/encodings/punycode.py:137:48    - Unknown word (punicode)   -- UnicodeError("incomplete punicode string")
./Lib/encodings/punycode.py:1:19      - Unknown word (Punicode)   -- """ Codec for the Punicode encoding, as specified
./Lib/encodings/punycode.py:49:22     - Unknown word (unsort)     -- """3.2 Insertion unsort coding"""
./Lib/encodings/punycode.py:50:5      - Unknown word (oldchar)    -- oldchar = 0x80
./Lib/encodings/punycode.py:52:5      - Unknown word (oldindex)   -- oldindex = -1
./Lib/encodings/punycode.py:56:9      - Unknown word (curlen)     -- curlen = selective_len(str
./Lib/encodings/punycode.py:71:28     - Unknown word (tmin)       -- Punycode parameters: tmin = 1, tmax = 26, base
./Lib/encodings/punycode.py:71:38     - Unknown word (tmax)       -- parameters: tmin = 1, tmax = 26, base = 36
./Lib/encodings/punycode.py:91:25     - Unknown word (numchars)   -- adapt(delta, first, numchars):
./Lib/encodings/utf_16.py:85:9      - Unknown word (addstate)   -- addstate = int((sys.byteorder
./Lib/encodings/uu_codec.py:60:37     - Unknown word (uuencoders)  -- Workaround for broken uuencoders by /Fredrik Lundh
./Lib/encodings/uu_codec.py:6:47      - Unknown word (Ellinghouse) -- was written by Lance Ellinghouse and
./Lib/ensurepip/__init__.py:117:15    - Unknown word (altinstall)   -- altinstall=False, default_pip=False
./Lib/ensurepip/__init__.py:82:15     - Unknown word (bootstraping) -- # Run the bootstraping in a subprocess to avoid
./Lib/ensurepip/__init__.py:83:31     - Unknown word (Particulary)  -- after pip has executed. Particulary, this avoids the case
./Lib/ensurepip/_uninstall.py:1:14      - Unknown word (uninstallation) -- """Basic pip uninstallation support, helper for
./Lib/enum.py:144:21    - Unknown word (metacls)    -- def __prepare__(metacls, cls, bases):
./Lib/enum.py:46:29     - Unknown word (picklable)  -- Make the given class un-picklable.
./Lib/enum.py:77:30     - Unknown word (dundered)   -- Changes anything not dundered or not a descriptor
./Lib/fileinput.py:12:1      - Unknown word (openhook)   -- openhook are ignored.  To specify
./Lib/fileinput.py:200:15    - Unknown word (savestdout) -- self._savestdout = None
./Lib/fileinput.py:203:15    - Unknown word (startlineno) -- self._startlineno = 0
./Lib/fileinput.py:207:15    - Unknown word (backupfilename) -- self._backupfilename = None
./Lib/fileinput.py:49:11     - Unknown word (fileline)   -- lineno(), fileline(), isfirstline(), isstdin
./Lib/fnmatch.py:171:32    - Unknown word (backreference) -- consume that group via a backreference. If the overall match
./Lib/fnmatch.py:195:13    - Unknown word (groupnum)      -- groupnum = _nextgroupnum()
./Lib/fnmatch.py:22:2      - Unknown word (nextgroupnum) -- _nextgroupnum = count().__next__
./Lib/formatter.py:182:9     - Unknown word (prespace)   -- prespace = data[:1].isspace(
./Lib/formatter.py:183:9     - Unknown word (postspace)  -- postspace = data[-1:].isspace
./Lib/formatter.py:241:13    - Unknown word (csize)      -- csize, ci, cb, ctt = self
./Lib/formatter.py:261:9     - Unknown word (fstack)     -- fstack = [m for m in self.margin
./Lib/formatter.py:380:14    - Unknown word (atbreak)    -- self.atbreak = 0
./Lib/formatter.py:51:15     - Unknown word (softspace)  -- def flush_softspace(self): pass
./Lib/formatter.py:89:14     - Unknown word (parskip)    -- self.parskip = 0
./Lib/fractions.py:247:11    - Unknown word (semiconvergent) -- # semiconvergent of the (unique shortest
./Lib/fractions.py:2:37      - Unknown word (Yasskin)    -- modified by Jeffrey Yasskin <jyasskin at gmail.com
./Lib/fractions.py:2:46      - Unknown word (jyasskin)   -- by Jeffrey Yasskin <jyasskin at gmail.com>.
./Lib/fractions.py:567:11    - Unknown word (dinv)           -- # dinv is the inverse of self
./Lib/fractions.py:599:10    - Unknown word (richcmp)        -- def _richcmp(self, other, op):
./Lib/ftplib.py:13:1      - Unknown word (drwxr)      -- drwxr-xr-x 8 root     wheel
./Lib/ftplib.py:17:3      - Unknown word (wxrwxr)     -- d-wxrwxr-x 2 ftp      wheel
./Lib/ftplib.py:228:17    - Unknown word (nextline)   -- nextline = self.getline()
./Lib/ftplib.py:241:14    - Unknown word (lastresp)   -- self.lastresp = resp[:3]
./Lib/ftplib.py:286:9     - Unknown word (hbytes)     -- hbytes = host.split('.')
./Lib/ftplib.py:287:9     - Unknown word (pbytes)     -- pbytes = [repr(port//256),
./Lib/ftplib.py:330:25    - Unknown word (pasv)       -- passive, send a pasv command, connect to
./Lib/ftplib.py:34:15     - Unknown word (Siebren)    -- # Modified by Siebren to support docstrings
./Lib/ftplib.py:36:15     - Unknown word (Giampaolo)  -- # Modified by Giampaolo Rodola' to add TLS support
./Lib/ftplib.py:36:25     - Unknown word (Rodola)     -- Modified by Giampaolo Rodola' to add TLS support
./Lib/ftplib.py:3:55      - Unknown word (Postel)     -- Protocol (FTP), by J. Postel and J. Reynolds
./Lib/ftplib.py:588:22    - Unknown word (fromname)   -- def rename(self, fromname, toname):
./Lib/ftplib.py:588:32    - Unknown word (toname)     -- rename(self, fromname, toname):
./Lib/ftplib.py:867:17    - Unknown word (directoryname) -- Returns the directoryname in the 257 reply.''
./Lib/ftplib.py:872:56    - Unknown word (ftpd)          -- to RFC 959, but UNIX ftpd does this
./Lib/ftplib.py:892:19    - Unknown word (sourcename)    -- def ftpcp(source, sourcename, target, targetname
./Lib/ftplib.py:892:39    - Unknown word (targetname)    -- sourcename, target, targetname = '', type = 'I'):
./Lib/ftplib.py:899:17    - Unknown word (sourceport)    -- sourcehost, sourceport = parse227(source.sendcmd
./Lib/ftplib.py:899:5     - Unknown word (sourcehost)    -- sourcehost, sourceport = parse
./Lib/ftplib.py:904:5     - Unknown word (treply)        -- treply = target.sendcmd('STOR
./Lib/ftplib.py:907:5     - Unknown word (sreply)        -- sreply = source.sendcmd('RETR
./Lib/ftplib.py:930:5     - Unknown word (rcfile)        -- rcfile = None
./Lib/ftplib.py:941:5     - Unknown word (userid)        -- userid = passwd = acct = '
./Lib/ftplib.py:943:9     - Unknown word (netrcobj)      -- netrcobj = netrc.netrc(rcfile
./Lib/functools.py:191:17    - Unknown word (opfunc)     -- for opname, opfunc in _convert[root]:
./Lib/functools.py:202:16    - Unknown word (mycmp)      -- def cmp_to_key(mycmp):
./Lib/functools.py:441:69    - Unknown word (currsize)   -- misses", "maxsize", "currsize"])
./Lib/functools.py:450:18    - Unknown word (hashvalue)  -- __slots__ = 'hashvalue'
./Lib/functools.py:461:14    - Unknown word (fasttypes)  -- fasttypes = {int, str},
./Lib/functools.py:545:40    - Unknown word (linkedlist) -- # because linkedlist updates aren't threadsafe
./Lib/functools.py:545:66    - Unknown word (threadsafe) -- linkedlist updates aren't threadsafe
./Lib/functools.py:603:21    - Unknown word (oldroot)    -- oldroot = root
./Lib/functools.py:613:21    - Unknown word (oldkey)     -- oldkey = root[KEY]
./Lib/functools.py:614:21    - Unknown word (oldresult)  -- oldresult = root[RESULT]
./Lib/functools.py:688:63    - Unknown word (linearization) -- order using extended C3 linearization.
./Lib/functools.py:6:19      - Unknown word (Coghlan)    -- # Written by Nick Coghlan <ncoghlan at gmail.com
./Lib/functools.py:6:28      - Unknown word (ncoghlan)   -- Written by Nick Coghlan <ncoghlan at gmail.com>,
./Lib/functools.py:723:17    - Unknown word (mros)          -- explicit_c3_mros = [_c3_mro(base, abcs
./Lib/functools.py:768:17    - Unknown word (subcls)        -- for subcls in sub:
./Lib/functools.py:803:5     - Unknown word (behaviours)    -- behaviours depending upon the type
./Lib/functools.py:861:13    - Unknown word (argname)       -- argname, cls = next(iter(get
./Lib/functools.py:8:14      - Unknown word (Langa)      -- # and Łukasz Langa <lukasz at langa.pl
./Lib/functools.py:8:21      - Unknown word (lukasz)     -- # and Łukasz Langa <lukasz at langa.pl>.
./Lib/functools.py:8:31      - Unknown word (langa)      -- ukasz Langa <lukasz at langa.pl>.
./Lib/functools.py:8:7       - Unknown word (Łukasz)     -- # and Łukasz Langa <lukasz at langa
./Lib/genericpath.py:148:14    - Unknown word (hasbytes)   -- hasstr = hasbytes = False
./Lib/genericpath.py:148:5     - Unknown word (hasstr)     -- hasstr = hasbytes = False
./Lib/genericpath.py:73:22     - Unknown word (pathnames)  -- "Given a list of pathnames, returns the longest
./Lib/genericpath.py:78:68     - Unknown word (sublists)   -- PathLike object in the sublists.
./Lib/getopt.py:153:9     - Unknown word (optarg)     -- optarg = None
./Lib/getopt.py:17:37     - Unknown word (Wirzenius)  -- support added by Lars Wirzenius <liw@iki.fi>.
./Lib/getopt.py:192:21    - Unknown word (optstring)  -- def do_shorts(opts, optstring, shortopts, args):
./Lib/getopt.py:19:10     - Unknown word (Holl)       -- # Gerrit Holl <gerrit@nl.linux.org
./Lib/getopt.py:19:3      - Unknown word (Gerrit)     -- # Gerrit Holl <gerrit@nl.linux
./Lib/getopt.py:22:9      - Unknown word (Åstrand)    -- # Peter Åstrand <astrand@lysator.liu
./Lib/getopt.py:56:18     - Unknown word (shortopts)  -- def getopt(args, shortopts, longopts = []):
./Lib/getopt.py:56:29     - Unknown word (longopts)   -- getopt(args, shortopts, longopts = []):
./Lib/getpass.py:103:16    - Unknown word (putwch)     -- msvcrt.putwch(c)
./Lib/getpass.py:145:36    - Unknown word (flockfile)  -- The Python C API calls flockfile() (and unlock) during
./Lib/getpass.py:69:31     - Unknown word (tcgetattr)  -- old = termios.tcgetattr(fd) # a copy to
./Lib/getpass.py:71:50     - Unknown word (lflags)     -- termios.ECHO # 3 == 'lflags'
./Lib/getpass.py:72:17     - Unknown word (tcsetattr)  -- tcsetattr_flags = termios.TCSAFLUSH
./Lib/getpass.py:98:57     - Unknown word (getwch)     -- echo off, using Windows getwch()."""
./Lib/gettext.py:116:5     - Unknown word (nexttok)       -- nexttok = next(tokens)
./Lib/gettext.py:16:14     - Unknown word (Loewis)     -- # Martin von Loewis, who wrote the initial
./Lib/gettext.py:17:11     - Unknown word (libintlmodule) -- # C-based libintlmodule (later renamed _gettext
./Lib/gettext.py:20:25     - Unknown word (fintl)         -- Peter Funk, who wrote fintl.py, a fairly complete
./Lib/gettext.py:20:68     - Unknown word (intlmodule)    -- complete wrapper around intlmodule,
./Lib/gettext.py:24:9      - Unknown word (Henstridge)    -- # James Henstridge, who also wrote a gettext
./Lib/gettext.py:295:13    - Unknown word (tmsg)          -- tmsg = msgid1
./Lib/gettext.py:32:12     - Unknown word (Pinard)        -- # Francois Pinard and Marc-Andre Lemburg
./Lib/gettext.py:355:22    - Unknown word (msgcount)      -- version, msgcount, masteridx, transidx
./Lib/gettext.py:355:32    - Unknown word (masteridx)     -- version, msgcount, masteridx, transidx = unpack(
./Lib/gettext.py:355:43    - Unknown word (transidx)      -- msgcount, masteridx, transidx = unpack('<4I', buf
./Lib/gettext.py:35:12     - Unknown word (Ibanez)        -- # J. David Ibanez implemented plural forms
./Lib/gettext.py:35:51     - Unknown word (Haible)        -- plural forms. Bruno Haible fixed some bugs.
./Lib/gettext.py:371:13    - Unknown word (mlen)          -- mlen, moff = unpack(ii, buf
./Lib/gettext.py:371:19    - Unknown word (moff)          -- mlen, moff = unpack(ii, buf[masteridx
./Lib/gettext.py:383:17    - Unknown word (lastk)         -- lastk = None
./Lib/gettext.py:403:53    - Unknown word (msgids)        -- unconditionally convert both msgids and msgstrs to
./Lib/gettext.py:403:64    - Unknown word (msgstrs)       -- convert both msgids and msgstrs to
./Lib/gettext.py:407:51    - Unknown word (Zope's)        -- alternative encodings (e.g. Zope's ZCML and ZPT).  For
./Lib/gettext.py:480:13    - Unknown word (envar)         -- for envar in ('LANGUAGE', 'LC
./Lib/gettext.py:488:5     - Unknown word (nelangs)       -- nelangs = []
./Lib/gettext.py:490:13    - Unknown word (nelang)        -- for nelang in _expand_lang(lang
./Lib/gettext.py:501:9     - Unknown word (mofile)        -- mofile = os.path.join(localedir
./Lib/gettext.py:518:5     - Unknown word (mofiles)       -- mofiles = find(domain, localedir
./Lib/gettext.py:558:29    - Unknown word (codesets)      -- mapping b/w domains and codesets
./Lib/gettext.py:559:2     - Unknown word (localecodesets) -- _localecodesets = {}
./Lib/gettext.py:57:29     - Unknown word (codeset)       -- 'bind_textdomain_codeset',
./Lib/gettext.py:58:49     - Unknown word (lgettext)      -- dngettext', 'gettext', 'lgettext', 'ldgettext',
./Lib/gettext.py:58:61     - Unknown word (ldgettext)     -- gettext', 'lgettext', 'ldgettext',
./Lib/gettext.py:59:13     - Unknown word (ldngettext)    -- 'ldngettext', 'lngettext', 'ngettext
./Lib/gettext.py:59:27     - Unknown word (lngettext)     -- 'ldngettext', 'lngettext', 'ngettext',
./Lib/gettext.py:636:3     - Unknown word (dcgettext)      -- # dcgettext() has been deemed unnecessary
./Lib/gettext.py:638:9     - Unknown word (Henstridge's)   -- # James Henstridge's Catalog constructor
./Lib/gettext.py:88:19     - Unknown word (lastgroup)     -- kind = mo.lastgroup
./Lib/glob.py:124:17    - Unknown word (rlistdir)   -- yield from _rlistdir(dirname, dir_fd, dironly
./Lib/glob.py:1:13      - Unknown word (globbing)   -- """Filename globbing utility."""
./Lib/glob.py:53:51     - Unknown word (dironly)    -- dir_fd, recursive, dironly):
./Lib/glob.py:90:25     - Unknown word (basenames)  -- They return a list of basenames. _glob1 accepts a pattern
./Lib/glob.py:95:13     - Unknown word (ishidden)   -- if not _ishidden(pattern):
./Lib/gzip.py:181:9     - Unknown word (origmode)   -- origmode = mode
./Lib/gzip.py:236:14    - Unknown word (writebuf)   -- self.writebuf = []
./Lib/gzip.py:405:26    - Unknown word (wbits)      -- wbits=-zlib.MAX_WBITS)
./Lib/gzip.py:412:55    - Unknown word (unconcatenated) -- Decompressed size of unconcatenated stream
./Lib/gzip.py:496:13    - Unknown word (uncompress)     -- uncompress = self._decompressor
./Lib/gzip.py:523:16    - Unknown word (isize)          -- crc32, isize = struct.unpack("<II
./Lib/gzip.py:6:19      - Unknown word (Kuchling's) -- # based on Andrew Kuchling's minigzip.py distributed
./Lib/gzip.py:6:30      - Unknown word (minigzip)   -- on Andrew Kuchling's minigzip.py distributed with
./Lib/heapq.py:133:6     - Unknown word (siftdown)   -- _siftdown(heap, 0, len(heap)-
./Lib/heapq.py:137:5     - Unknown word (lastelt)    -- lastelt = heap.pop()    # raises
./Lib/heapq.py:139:9     - Unknown word (returnitem) -- returnitem = heap[0]
./Lib/heapq.py:141:10    - Unknown word (siftup)     -- _siftup(heap, 0)
./Lib/heapq.py:180:8     - Unknown word (Maxheap)    -- """Maxheap version of a heappop
./Lib/heapq.py:197:30    - Unknown word (maxheap)    -- Transform list into a maxheap, in-place, in O(len
./Lib/heapq.py:206:5     - Unknown word (newitem)    -- newitem = heap[pos]
./Lib/heapq.py:210:9     - Unknown word (parentpos)  -- parentpos = (pos - 1) >> 1
./Lib/heapq.py:243:58    - Unknown word (heappops)   -- Compares needed by 1000 heappops
./Lib/heapq.py:263:5     - Unknown word (childpos)   -- childpos = 2*pos + 1    # leftmost
./Lib/heapq.py:266:9     - Unknown word (rightpos)   -- rightpos = childpos + 1
./Lib/heapq.py:94:15     - Unknown word (organised)  -- very cleverly organised[1]. It is very important
./Lib/hmac.py:26:41     - Unknown word (digestmod)  -- self, key, msg = None, digestmod = None):
./Lib/html/__init__.py:102:23    - Unknown word (FFFD)       -- return '\uFFFD'
./Lib/html/__init__.py:30:10     - Unknown word (charrefs)   -- _invalid_charrefs = {
./Lib/html/__init__.py:31:13     - Unknown word (ufffd)      -- 0x00: '\ufffd', # REPLACEMENT CHARACTER
./Lib/html/__init__.py:67:10     - Unknown word (codepoints) -- _invalid_codepoints = {
./Lib/html/parser.py:116:7     - Unknown word (starttag)          -- __starttag_text = None
./Lib/html/parser.py:147:21    - Unknown word (amppos)            -- amppos = rawdata.rfind('&'
./Lib/html/parser.py:266:13    - Unknown word (gtpos)             -- gtpos = rawdata.find('>',
./Lib/html/parser.py:318:29    - Unknown word (attrvalue)         -- attrname, rest, attrvalue = m.group(1, 2, 3)
./Lib/html/parser.py:31:21     - Unknown word (tagfind)    -- # 1) if you change tagfind/attrfind remember to
./Lib/html/parser.py:31:29     - Unknown word (attrfind)   -- if you change tagfind/attrfind remember to update locatestar
./Lib/html/parser.py:31:57     - Unknown word (locatestarttagend) -- attrfind remember to update locatestarttagend too;
./Lib/html/parser.py:384:25    - Unknown word (endtag)            -- # Internal -- parse endtag, return end or -1 if
./Lib/html/parser.py:398:13    - Unknown word (namematch)         -- namematch = tagfind_tolerant.match
./Lib/html/parser.py:3:25      - Unknown word (sgmllib)    -- This file is based on sgmllib.py, but the API is slightly
./Lib/html/parser.py:98:14     - Unknown word (lasttag)           -- self.lasttag = '???'
./Lib/http/client.py:128:22    - Unknown word (tchar)      -- token = 1*tchar
./Lib/http/client.py:149:20    - Unknown word (pchars)     -- # _is_allowed_url_pchars_re = re.compile(r"^
./Lib/http/client.py:235:5     - Unknown word (hstring)    -- hstring = b''.join(headers)
./Lib/http/client.py:405:9     - Unknown word (pconn)      -- pconn = self.headers.get(
./Lib/http/client.py:534:48    - Unknown word (synchronisation) -- connection as protocol synchronisation is
./Lib/http/client.py:748:45    - Unknown word (mimetools)       -- instance of the class mimetools.Message containing
./Lib/http/client.py:851:44    - Unknown word (hostport)        -- self.port) = self._get_hostport(host, port)
./Lib/http/client.py:988:17    - Unknown word (datablock)       -- datablock = data.read(self.blocksize
./Lib/http/cookiejar.py:1031:20   - Unknown word (kcookiejar)  -- # (kcookiejar.cpp) and Mozilla implementati
./Lib/http/cookiejar.py:1040:41   - Unknown word (mobi)        -- "info", "jobs", "mobi", "museum", "name",
./Lib/http/cookiejar.py:1046:17   - Unknown word (undotted)    -- undotted_domain = domain[1:]
./Lib/http/cookiejar.py:10:26     - Unknown word (BSDDB)      -- Class diagram (note that BSDDBCookieJar and the MSIE
./Lib/http/cookiejar.py:1169:13   - Unknown word (dotdomain)   -- dotdomain = "." + domain
./Lib/http/cookiejar.py:1220:9    - Unknown word (pathlen)     -- pathlen = len(path)
./Lib/http/cookiejar.py:1230:24   - Unknown word (adict)       -- def vals_sorted_by_key(adict):
./Lib/http/cookiejar.py:1398:45   - Unknown word (normalised)  -- of tuples containing normalised cookie information.
./Lib/http/cookiejar.py:1416:36   - Unknown word (commenturl)  -- "comment", "commenturl")
./Lib/http/cookiejar.py:1427:41   - Unknown word (mish)        -- V0 cookies may be a mish-mash of Netscape and
./Lib/http/cookiejar.py:1611:17   - Unknown word (hdrs)        -- rfc2965_hdrs = headers.get_all("Set
./Lib/http/cookiejar.py:166:13    - Unknown word (imon)        -- imon = int(mon)
./Lib/http/cookiejar.py:1787:39   - Unknown word (delayload)   -- self, filename=None, delayload=False, policy=None)
./Lib/http/cookiejar.py:20:26     - Unknown word (MSIE)       -- | ---MSIEBase |       \
./Lib/http/cookiejar.py:22:25     - Unknown word (MSIEDB)     -- | /   MSIEDBCookieJar BSDDBCookieJar
./Lib/http/cookiejar.py:375:35    - Unknown word (qdtext)      -- string = ( <"> *(qdtext | quoted-pair ) <">
./Lib/http/cookiejar.py:3:49      - Unknown word (Gisle)      -- distant) origins in Gisle Aas' Perl module
./Lib/http/cookiejar.py:478:51    - Unknown word (Tschalar's)  -- headers contain.  Ronald Tschalar's HTTPClient
./Lib/http/cookiejar.py:4:25      - Unknown word (libwww)     -- HTTP::Cookies, from the libwww-perl library.
./Lib/http/cookiejar.py:61:36     - Unknown word (initialised) -- "instance initialised with one)")
./Lib/http/cookiejar.py:646:5     - Unknown word (erhn)        -- erhn = req_host = request
./Lib/http/cookiejar.py:689:46    - Unknown word (duerst)      -- specification: draft-duerst-iri-05)
./Lib/http/cookiejar.py:6:1       - Unknown word (Docstrings) -- Docstrings, comments and debug
./Lib/http/cookiejar.py:756:5     - Unknown word (normalising) -- normalising to the representation
./Lib/http/cookiejar.py:788:11    - Unknown word (normalise)   -- # normalise case, as per RFC 29
./Lib/http/cookiejar.py:825:13    - Unknown word (namevalue)   -- namevalue = "%s=%s" % (self.name
./Lib/http/cookies.py:108:11    - Unknown word (twix)        -- >>> C["twix"] = "none for you"
./Lib/http/cookies.py:138:2     - Unknown word (nulljoin)    -- _nulljoin = ''.join
./Lib/http/cookies.py:139:2     - Unknown word (semispacejoin) -- _semispacejoin = '; '.join
./Lib/http/cookies.py:140:2     - Unknown word (spacejoin)     -- _spacejoin = ' '.join
./Lib/http/cookies.py:178:48    - Unknown word (doublequotes)  -- surround the string in doublequotes and quote
./Lib/http/cookies.py:187:7     - Unknown word (Patt)          -- _OctalPatt = re.compile(r"\\[0
./Lib/http/cookies.py:233:8     - Unknown word (getdate)       -- # The _getdate() routine is used to
./Lib/http/cookies.py:26:44     - Unknown word (timo)       -- 2000/08/23 05:28:49 timo Exp
./Lib/http/cookies.py:2:29      - Unknown word (O'Malley)   -- Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>
./Lib/http/cookies.py:35:21     - Unknown word (nscookie)   -- # first version of nscookie.py.
./Lib/http/cookies.py:445:46    - Unknown word (doublequoted)  -- # Any doublequoted string
./Lib/http/cookies.py:497:13    - Unknown word (rval)          -- rval, cval = self.value_encode
./Lib/http/cookies.py:497:19    - Unknown word (cval)          -- rval, cval = self.value_encode
./Lib/http/cookies.py:539:35    - Unknown word (patt)          -- parse_string(self, str, patt=_CookiePattern):
./Lib/http/cookies.py:85:27     - Unknown word (tootin)     -- load() method is darn-tootin smart about identifying
./Lib/http/cookies.py:90:16     - Unknown word (keebler)    -- >>> C.load('keebler="E=everybody; L=\\"Loves
./Lib/http/cookies.py:99:21     - Unknown word (doublestuff) -- >>> C["oreo"] = "doublestuff"
./Lib/http/server.py:101:21    - Unknown word (gethostbyaddr) -- import socket # For gethostbyaddr()
./Lib/http/server.py:1023:38   - Unknown word (htbin)          -- directories = ['/cgi-bin', '/htbin']
./Lib/http/server.py:1040:13   - Unknown word (nextdir)        -- nextdir = path[:i]
./Lib/http/server.py:1041:13   - Unknown word (nextrest)       -- nextrest = path[i+1:]
./Lib/http/server.py:1043:13   - Unknown word (scriptdir)      -- scriptdir = self.translate_path
./Lib/http/server.py:1061:9    - Unknown word (scriptname)     -- scriptname = dir + '/' + script
./Lib/http/server.py:1062:9    - Unknown word (scriptfile)     -- scriptfile = self.translate_path
./Lib/http/server.py:1073:9    - Unknown word (ispy)           -- ispy = self.is_python(scriptname
./Lib/http/server.py:1090:9    - Unknown word (uqrest)         -- uqrest = urllib.parse.unquote
./Lib/http/server.py:1121:9    - Unknown word (referer)        -- referer = self.headers.get(
./Lib/http/server.py:1184:55   - Unknown word (pythonw)        -- use python.exe, not pythonw.exe
./Lib/http/server.py:202:16    - Unknown word (responsecode)  -- <version> <responsecode> <responsestring>
./Lib/http/server.py:202:31    - Unknown word (responsestring) -- version> <responsecode> <responsestring>
./Lib/http/server.py:270:50    - Unknown word (requestline)    -- be stored in self.raw_requestline; the results
./Lib/http/server.py:351:9     - Unknown word (conntype)       -- conntype = self.headers.get(
./Lib/http/server.py:37:64     - Unknown word (Berners)    -- T. Berners-Lee
./Lib/http/server.py:39:60     - Unknown word (Frystyk)    -- H. Frystyk Nielsen
./Lib/http/server.py:448:13    - Unknown word (shortmsg)       -- shortmsg, longmsg = self.responses
./Lib/http/server.py:448:23    - Unknown word (longmsg)        -- shortmsg, longmsg = self.responses[code
./Lib/http/server.py:60:17     - Unknown word (authuser)   -- # | host rfc931 authuser [DD/Mon/YYYY:hh:mm:ss
./Lib/http/server.py:613:48    - Unknown word (keepalive)      -- to enable automatic keepalive
./Lib/http/server.py:63:48     - Unknown word (identd)     -- information returned by identd for this person,
./Lib/http/server.py:674:16    - Unknown word (outputfile)     -- to the outputfile by the caller unless
./Lib/http/server.py:705:11    - Unknown word (parseing)       -- # parseing and rejection of filenames
./Lib/http/server.py:734:30    - Unknown word (modif)          -- last_modif = datetime.datetime
./Lib/http/server.py:774:13    - Unknown word (displaypath)    -- displaypath = urllib.parse.unquote
./Lib/http/server.py:791:13    - Unknown word (displayname)    -- displayname = linkname = name
./Lib/http/server.py:791:27    - Unknown word (linkname)       -- displayname = linkname = name
./Lib/http/server.py:929:5     - Unknown word (splitpath)      -- splitpath = ('/' + '/'.join(head
./Lib/imghdr.py:40:29     - Unknown word (Exif)       -- JPEG data in JFIF or Exif format"""
./Lib/imghdr.py:82:22     - Unknown word (graymap)    -- """PGM (portable graymap)"""
./Lib/imghdr.py:90:22     - Unknown word (pixmap)     -- """PPM (portable pixmap)"""
./Lib/importlib/__init__.py:162:17    - Unknown word (pkgpath)       -- pkgpath = parent.__path__
./Lib/importlib/__init__.py:55:37     - Unknown word (minimisation)  -- and startup overhead minimisation permitting :)
./Lib/importlib/__init__.py:9:24      - Unknown word (uninitialised) -- modules would get an uninitialised copy of the source version
./Lib/importlib/_adapters.py:33:36     - Unknown word (existant)   -- for an existing or non-existant resource reader
./Lib/importlib/_bootstrap.py:54:34     - Unknown word (weakrefs)   -- mapping module names to weakrefs of _ModuleLock instances
./Lib/importlib/_bootstrap.py:93:41     - Unknown word (fixpoint)   -- eventually leads to a fixpoint or a cycle, but
./Lib/importlib/_bootstrap_external.py:104:45    - Unknown word (splitroot)  -- tail in map(_os._path_splitroot, path_parts):
./Lib/importlib/_bootstrap_external.py:10:9      - Unknown word (regen)      -- # `make regen-importlib` followed
./Lib/importlib/_bootstrap_external.py:1175:22   - Unknown word (unitialized) -- """Create an unitialized extension module"""
./Lib/importlib/_bootstrap_external.py:1531:55   - Unknown word (smsl)        -- class, fullname, path, smsl, target):
./Lib/importlib/_bootstrap_external.py:1642:40   - Unknown word (cpathname)   -- ns, name, pathname, cpathname=None):
./Lib/importlib/_bootstrap_external.py:313:34    - Unknown word (wordcode)   -- 3.6a2 3370 (16 bit wordcode #26647)
./Lib/importlib/_bootstrap_external.py:327:50    - Unknown word (pycs)       -- PEP 552: Deterministic pycs #31650)
./Lib/importlib/_bootstrap_external.py:348:55    - Unknown word (oparg)      -- restores f_lasti if oparg != 0)
./Lib/importlib/_bootstrap_external.py:352:101   - Unknown word (devs)       -- to dance among core devs!)
./Lib/importlib/_bootstrap_external.py:423:12    - Unknown word (pycache)    -- if sys.pycache_prefix is not None:
./Lib/importlib/_bootstrap_external.py:50:2      - Unknown word (pathseps)   -- _pathseps_with_colon = {f':{s
./Lib/importlib/_bootstrap_external.py:759:15    - Unknown word (fileattr)   -- spec._set_fileattr = True
./Lib/importlib/_common.py:55:13     - Unknown word (cand)       -- def resolve(cand):
./Lib/importlib/abc.py:371:33    - Unknown word (strm)              -- with self.open('rb') as strm:
./Lib/importlib/abc.py:37:5      - Unknown word (reimplementations) -- reimplementations of the import system
./Lib/importlib/metadata/__init__.py:21:32     - Unknown word (everseen)   -- itertools import unique_everseen
./Lib/importlib/metadata/__init__.py:246:19    - Unknown word (getfixture) -- >>> recwarn = getfixture('recwarn')
./Lib/importlib/metadata/__init__.py:246:9     - Unknown word (recwarn)    -- >>> recwarn = getfixture('recwarn
./Lib/importlib/metadata/__init__.py:650:39    - Unknown word (distinfo)   -- lines = self._read_files_distinfo() or self._read_files
./Lib/importlib/metadata/__init__.py:650:70    - Unknown word (egginfo)    -- or self._read_files_egginfo()
./Lib/importlib/metadata/__init__.py:679:9     - Unknown word (reqs)       -- reqs = self._read_dist_info
./Lib/importlib/metadata/_adapters.py:43:13     - Unknown word (redent)     -- def redent(value):
./Lib/importlib/metadata/_collections.py:4:8       - Unknown word (jaraco)     -- # from jaraco.collections 3.3
./Lib/importlib/readers.py:53:37     - Unknown word (multihomed) -- packages which may be multihomed at a single
./Lib/importlib/resources.py:172:5     - Unknown word (transversable) -- transversable = _common.from_package
./Lib/inspect.py:1083:49   - Unknown word (kwonlydefaults)     -- defaults, kwonlyargs, kwonlydefaults, ann = \
./Lib/inspect.py:1129:40   - Unknown word (sigcls)             -- sigcls=Signature)
./Lib/inspect.py:114:40    - Unknown word (getsets)    -- defined in Python) and getsets and members (defined
./Lib/inspect.py:1213:5    - Unknown word (formatargspec)      -- def formatargspec(args, varargs=None,
./Lib/inspect.py:1215:19   - Unknown word (formatarg)          -- formatarg=str,
./Lib/inspect.py:1216:19   - Unknown word (formatvarargs)      -- formatvarargs=lambda name: '*' + name
./Lib/inspect.py:1217:19   - Unknown word (formatvarkw)        -- formatvarkw=lambda name: '**' +
./Lib/inspect.py:1219:19   - Unknown word (formatreturns)      -- formatreturns=lambda text: ' -> '
./Lib/inspect.py:1240:9    - Unknown word (formatargandannotation) -- def formatargandannotation(arg):
./Lib/inspect.py:1247:9    - Unknown word (firstdefault)           -- firstdefault = len(args) - len(defaults
./Lib/inspect.py:126:9     - Unknown word (ismemberdescriptor) -- def ismemberdescriptor(object):
./Lib/inspect.py:1294:32   - Unknown word (argnames)               -- missing_arguments(f_name, argnames, pos, values):
./Lib/inspect.py:1310:29   - Unknown word (kwonly)                 -- too_many(f_name, args, kwonly, varargs, defcount,
./Lib/inspect.py:1310:46   - Unknown word (defcount)               -- args, kwonly, varargs, defcount, given, values):
./Lib/inspect.py:1311:5    - Unknown word (atleast)                -- atleast = len(args) - defcount
./Lib/inspect.py:143:9     - Unknown word (isgetsetdescriptor) -- def isgetsetdescriptor(object):
./Lib/inspect.py:1492:5    - Unknown word (framelist)              -- framelist = []
./Lib/inspect.py:1841:19   - Unknown word (functionlike)           -- def _signature_is_functionlike(obj):
./Lib/inspect.py:1880:5    - Unknown word (cpos)                   -- cpos = spec.find(':')
./Lib/inspect.py:2087:14   - Unknown word (isbound)                -- self_isbound = _self is not None
./Lib/inspect.py:2271:37   - Unknown word (boundmethods)           -- automatically (as for boundmethods)
./Lib/inspect.py:271:53    - Unknown word (newlocals)          -- bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg
./Lib/inspect.py:272:61    - Unknown word (nofree)             -- | 32=generator | 64=nofree | 128=coroutine
./Lib/inspect.py:275:12    - Unknown word (posonlyargcount)    -- co_posonlyargcount number of positional
./Lib/inspect.py:3107:33   - Unknown word (analysed)               -- help="The object to be analysed. "
./Lib/inspect.py:32:16     - Unknown word (Yury)       -- 'Yury Selivanov <yselivanov
./Lib/inspect.py:32:21     - Unknown word (Selivanov)  -- 'Yury Selivanov <yselivanov@sprymix
./Lib/inspect.py:393:12    - Unknown word (metaclasses)        -- metaclasses) then the object is
./Lib/inspect.py:402:5     - Unknown word (metamro)            -- metamro = getmro(type(cls))
./Lib/inspect.py:427:9     - Unknown word (homecls)            -- homecls = None
./Lib/inspect.py:445:25    - Unknown word (srch)               -- for srch_cls in class_bases:
./Lib/inspect.py:534:5     - Unknown word (expline)            -- expline = line.expandtabs()
./Lib/inspect.py:537:6     - Unknown word (findclass)          -- def _findclass(func):
./Lib/inspect.py:547:6     - Unknown word (finddoc)            -- def _finddoc(obj):
./Lib/inspect.py:690:9     - Unknown word (neglen)             -- for neglen, suffix in suffixes
./Lib/inspect.py:727:2     - Unknown word (filesbymodname)     -- _filesbymodname = {}
./Lib/inspect.py:765:9     - Unknown word (mainobject)         -- mainobject = getattr(main, object
./Lib/inspect.py:771:9     - Unknown word (builtinobject)      -- builtinobject = getattr(builtin, object
./Lib/inspect.py:790:21    - Unknown word (monkeypatches)      -- # `doctest` monkeypatches `linecache` module to
./Lib/inspect.py:899:14    - Unknown word (islambda)           -- self.islambda = False
./Lib/inspect.py:901:14    - Unknown word (passline)           -- self.passline = False
./Lib/inspect.py:902:14    - Unknown word (indecorator)        -- self.indecorator = False
./Lib/inspect.py:903:14    - Unknown word (decoratorhasargs)   -- self.decoratorhasargs = False
./Lib/inspect.py:906:39    - Unknown word (srowcol)            -- tokeneater(self, type, token, srowcol, erowcol, line):
./Lib/inspect.py:906:48    - Unknown word (erowcol)            -- type, token, srowcol, erowcol, line):
./Lib/io.py:38:21     - Unknown word (Verdone)    -- "Mike Verdone <mike.verdone@gmail
./Lib/io.py:40:24     - Unknown word (Pitrou)     -- "Antoine Pitrou <solipsis@pitrou.net
./Lib/io.py:41:16     - Unknown word (Amaury)     -- "Amaury Forgeot d'Arc <amauryfa
./Lib/io.py:41:23     - Unknown word (Forgeot)    -- "Amaury Forgeot d'Arc <amauryfa@gmail
./Lib/ipaddress.py:1380:41   - Unknown word (linklocal)  -- in self._constants._linklocal_network
./Lib/ipaddress.py:1478:25   - Unknown word (subnetmask) -- provide a subnetmask will create an object
./Lib/ipaddress.py:1681:58   - Unknown word (hextet)     -- be empty, but _parse_hextet() will check
./Lib/ipaddress.py:1697:30   - Unknown word (hextets)    -- # Now, parse the hextets into a 128-bit integer
./Lib/ipaddress.py:1753:14   - Unknown word (doublecolon) -- best_doublecolon_start = -1
./Lib/ipaddress.py:184:12    - Unknown word (righthand)  -- def _count_righthand_zero_bits(number, bits
./Lib/ipaddress.py:1994:41   - Unknown word (sitelocal)   -- in self._constants._sitelocal_network
./Lib/ipaddress.py:242:26    - Unknown word (prefixlen)  -- ip_bits = first._max_prefixlen
./Lib/ipaddress.py:256:59    - Unknown word (netblocks)  -- collapsing concurrent netblocks.
./Lib/ipaddress.py:284:9     - Unknown word (supernet)   -- supernet = net.supernet()
./Lib/ipaddress.py:347:16    - Unknown word (dedup)      -- # sort and dedup
./Lib/ipaddress.py:403:32    - Unknown word (arpa)       -- '1.0.0.127.in-addr.arpa'
./Lib/ipaddress.py:463:13    - Unknown word (byteslen)   -- byteslen = cls._max_prefixlen
./Lib/ipaddress.py:520:22    - Unknown word (netmasks)   -- # treated as netmasks.
./Lib/ipaddress.py:658:13    - Unknown word (padlen)     -- padlen = self._max_prefixlen
./Lib/ipaddress.py:972:55    - Unknown word (netblock)   -- diff %d is invalid for netblock %s' % (
./Lib/json/__init__.py:104:19    - Unknown word (Ippolito)   -- __author__ = 'Bob Ippolito <bob@redivi.com>'
./Lib/json/__init__.py:111:5     - Unknown word (skipkeys)   -- skipkeys=False,
./Lib/json/__init__.py:178:9     - Unknown word (debuggability) -- # a debuggability cost
./Lib/json/__init__.py:245:5     - Unknown word (bstartswith)   -- bstartswith = b.startswith
./Lib/json/__init__.py:31:9      - Unknown word (mydict)     -- >>> mydict = {'4': 5, '6': 7}
./Lib/json/__init__.py:334:27    - Unknown word (ufeff)         -- if s.startswith('\ufeff'):
./Lib/json/__init__.py:7:38      - Unknown word (simplejson) -- externally maintained simplejson library.
./Lib/json/decoder.py:162:5     - Unknown word (nextchar)   -- nextchar = s[end:end + 1]
./Lib/json/decoder.py:305:9     - Unknown word (deserializations) -- deserializations (e.g. to support JSON
./Lib/json/decoder.py:88:5      - Unknown word (Unescapes)  -- Unescapes all valid JSON string
./Lib/json/encoder.py:210:51    - Unknown word (bigobject)  -- JSONEncoder().iterencode(bigobject):
./Lib/json/encoder.py:211:17    - Unknown word (mysocket)   -- mysocket.write(chunk)
./Lib/json/encoder.py:223:13    - Unknown word (floatstr)   -- def floatstr(o, allow_nan=self.allow
./Lib/json/encoder.py:271:10    - Unknown word (intstr)     -- _intstr=int.__repr__,
./Lib/json/encoder.py:282:13    - Unknown word (markerid)   -- markerid = id(lst)
./Lib/keyword.py:8:47      - Unknown word (pegen)      -- generator python3 -m pegen.keywordgen \
./Lib/keyword.py:8:53      - Unknown word (keywordgen) -- generator python3 -m pegen.keywordgen \
./Lib/linecache.py:100:11    - Unknown word (Realise)    -- # Realise a lazy loader based
./Lib/locale.py:1059:12   - Unknown word (isiri)              -- 'fa_ir.isiri3342':
./Lib/locale.py:1083:6    - Unknown word (galego)             -- 'galego':
./Lib/locale.py:1106:12   - Unknown word (isciidev)           -- 'hi_in.isciidev':
./Lib/locale.py:1112:6    - Unknown word (hrvatski)           -- 'hrvatski':
./Lib/locale.py:1119:12   - Unknown word (armscii)            -- 'hy_am.armscii8':
./Lib/locale.py:1143:12   - Unknown word (nunacom)            -- 'iu_ca.nunacom8':
./Lib/locale.py:1150:12   - Unknown word (mscode)             -- 'ja_jp.mscode':
./Lib/locale.py:1159:12   - Unknown word (georgianacademy)    -- 'ka_ge.georgianacademy': 'ka
./Lib/locale.py:1160:12   - Unknown word (georgianps)         -- 'ka_ge.georgianps':
./Lib/locale.py:1161:12   - Unknown word (georgianrs)         -- 'ka_ge.georgianrs':
./Lib/locale.py:1193:12   - Unknown word (ibmcp)              -- 'lo_la.ibmcp1133':
./Lib/locale.py:1194:12   - Unknown word (mulelao)            -- 'lo_la.mulelao1':
./Lib/locale.py:119:15    - Unknown word (Georg)      -- # improved by Georg Brandl
./Lib/locale.py:119:21    - Unknown word (Brandl)     -- # improved by Georg Brandl
./Lib/locale.py:1316:6    - Unknown word (sinhala)            -- 'sinhala':
./Lib/locale.py:1369:12   - Unknown word (tscii)              -- 'ta_in.tscii':
./Lib/locale.py:1400:12   - Unknown word (tatarcyr)           -- 'tt_ru.tatarcyr':
./Lib/locale.py:1401:12   - Unknown word (iqtelif)            -- 'tt_ru@iqtelif':
./Lib/locale.py:1420:12   - Unknown word (tcvn)               -- 'vi_vn.tcvn':
./Lib/locale.py:1446:12   - Unknown word (euctw)              -- 'zh_tw.euctw':
./Lib/locale.py:1487:24   - Unknown word (Azeri)              -- 0x042c: "az_AZ", # Azeri - Latin
./Lib/locale.py:1492:24   - Unknown word (Begali)             -- 0x0445: "bn_IN", # Begali
./Lib/locale.py:1511:24   - Unknown word (Dari)               -- 0x048c: "gbz_AF",# Dari - Afghanistan
./Lib/locale.py:1512:24   - Unknown word (Divehi)             -- 0x0465: "div_MV",# Divehi - Maldives
./Lib/locale.py:1532:24   - Unknown word (Faroese)            -- 0x0438: "fo_FO", # Faroese
./Lib/locale.py:1567:24   - Unknown word (K'iche)             -- 0x0486: "qut_GT",# K'iche - Guatemala
./Lib/locale.py:1568:24   - Unknown word (Kinyarwanda)        -- 0x0487: "rw_RW", # Kinyarwanda - Rwanda
./Lib/locale.py:1569:24   - Unknown word (Konkani)            -- 0x0457: "kok_IN",# Konkani
./Lib/locale.py:1576:24   - Unknown word (Luxembourgish)      -- 0x046e: "lb_LU", # Luxembourgish
./Lib/locale.py:1579:39   - Unknown word (Darussalam)         -- BN", # Malay - Brunei Darussalam
./Lib/locale.py:1583:24   - Unknown word (Mapudungun)         -- 0x047a: "arn_CL",# Mapudungun
./Lib/locale.py:1589:36   - Unknown word (Bokmal)             -- nb_NO", # Norwegian - Bokmal
./Lib/locale.py:1591:24   - Unknown word (Occitan)            -- 0x0482: "oc_FR", # Occitan - France
./Lib/locale.py:1605:24   - Unknown word (Sami)               -- 0x243b: "smn_FI",# Sami Finland
./Lib/locale.py:1611:29   - Unknown word (Skolt)              -- 3b: "sms_FI",# Sami Skolt
./Lib/locale.py:1619:24   - Unknown word (Sinhala)            -- 0x045b: "si_LK", # Sinhala - Sri Lanka
./Lib/locale.py:1620:33   - Unknown word (Sotho)              -- "ns_ZA", # Northern Sotho
./Lib/locale.py:1621:24   - Unknown word (Setswana)           -- 0x0432: "tn_ZA", # Setswana - Southern Africa
./Lib/locale.py:1628:40   - Unknown word (Rica)               -- , # Spanish - Costa Rica
./Lib/locale.py:1645:20   - Unknown word (Sutu)               -- # 0x0430: "", # Sutu - Not supported
./Lib/locale.py:1651:24   - Unknown word (Tamazight)          -- 0x085f: "tmz_DZ",# Tamazight - Latin
./Lib/locale.py:170:5     - Unknown word (lpos)       -- lpos = 0
./Lib/locale.py:174:5     - Unknown word (rpos)       -- rpos = len(s) - 1
./Lib/locale.py:181:65    - Unknown word (Gdioux)     -- 0-9 +*.hlL]*?)[eEfFgGdiouxXcrs%]')
./Lib/locale.py:181:71    - Unknown word (Xcrs)       -- .hlL]*?)[eEfFgGdiouxXcrs%]')
./Lib/locale.py:219:13    - Unknown word (perc)       -- for perc in percents:
./Lib/locale.py:233:17    - Unknown word (starcount)  -- starcount = perc.group('modifiers
./Lib/locale.py:28:55     - Unknown word (strcoll)    -- resetlocale", "localeconv", "strcoll", "strxfrm",
./Lib/locale.py:28:66     - Unknown word (strxfrm)    -- localeconv", "strcoll", "strxfrm",
./Lib/locale.py:352:9     - Unknown word (langname)   -- langname = code[:code.index(
./Lib/locale.py:384:15    - Unknown word (localename) -- def normalize(localename):
./Lib/locale.py:461:23    - Unknown word (defmod)     -- code, defmod = code.split('@', 1
./Lib/locale.py:497:23    - Unknown word (localetuple) -- def _build_localename(localetuple):
./Lib/locale.py:622:17    - Unknown word (bootlocale)  -- import _bootlocale
./Lib/locale.py:629:26    - Unknown word (getandroidapilevel) -- if hasattr(sys, 'getandroidapilevel'):
./Lib/locale.py:630:26    - Unknown word (langinfo)           -- # On Android langinfo.h and CODESET are missing
./Lib/locale.py:631:30    - Unknown word (mbstowcs)           -- # always used in mbstowcs() and wcstombs().
./Lib/locale.py:631:45    - Unknown word (wcstombs)           -- used in mbstowcs() and wcstombs().
./Lib/locale.py:654:17    - Unknown word (oldloc)             -- oldloc = setlocale(LC_CTYPE
./Lib/locale.py:688:6     - Unknown word (ajec)               -- 'ajec':
./Lib/locale.py:690:6     - Unknown word (microsoftcp)        -- 'microsoftcp1251':
./Lib/locale.py:70:25     - Unknown word (posn)       -- 'n_sign_posn': 127,
./Lib/locale.py:718:6     - Unknown word (tactis)             -- 'tactis':
./Lib/locale.py:752:33    - Unknown word (makelocalealias)    -- org distribution using makelocalealias.py.
./Lib/locale.py:788:15    - Unknown word (serbocroatian)      -- # updated 'serbocroatian' -> 'sh_YU.ISO8859-
./Lib/locale.py:863:12    - Unknown word (koic)               -- 'a3_az.koic':
./Lib/locale.py:924:6     - Unknown word (bokmal)             -- 'bokmal':
./Lib/locale.py:925:6     - Unknown word (bokm)               -- 'bokm\xe5l':
./Lib/locale.py:949:6     - Unknown word (cextend)            -- 'cextend':
./Lib/locale.py:970:6     - Unknown word (dansk)              -- 'dansk':
./Lib/locale.py:979:6     - Unknown word (deutsch)            -- 'deutsch':
./Lib/locale.py:987:6     - Unknown word (eesti)              -- 'eesti':
./Lib/logging/__init__.py:1255:24   - Unknown word (alogger)      -- def __init__(self, alogger):
./Lib/logging/__init__.py:1396:9    - Unknown word (namelen)      -- namelen = len(name)
./Lib/logging/__init__.py:1428:26   - Unknown word (Gnumeric)     -- XLS files" and "read Gnumeric files"). To cater for
./Lib/logging/__init__.py:1636:26   - Unknown word (hdlr)         -- def addHandler(self, hdlr):
./Lib/logging/__init__.py:170:4     - Unknown word (srcfile)    -- # _srcfile is used when walking
./Lib/logging/__init__.py:1907:39   - Unknown word (proxied)      -- log implementation, proxied to allow nested logger
./Lib/logging/__init__.py:1:26      - Unknown word (Vinay)      -- Copyright 2001-2019 by Vinay Sajip. All Rights Reserved
./Lib/logging/__init__.py:1:32      - Unknown word (Sajip)      -- Copyright 2001-2019 by Vinay Sajip. All Rights Reserved
./Lib/logging/__init__.py:2231:23   - Unknown word (showwarnings) -- Implementation of showwarnings which redirects to logging
./Lib/logging/__init__.py:245:26    - Unknown word (weakset)    -- at_fork_reinit_lock_weakset = weakref.WeakSet()
./Lib/logging/__init__.py:284:50    - Unknown word (sinfo)      -- exc_info, func=None, sinfo=None, **kwargs):
./Lib/logging/__init__.py:295:31    - Unknown word (Behnel)     -- Suggested by Stefan Behnel.
./Lib/logging/__init__.py:313:14    - Unknown word (levelname)  -- self.levelname = getLevelName(level
./Lib/logging/__init__.py:314:14    - Unknown word (levelno)    -- self.levelno = level
./Lib/logging/__init__.py:328:14    - Unknown word (msecs)      -- self.msecs = (ct - int(ct)) *
./Lib/logging/__init__.py:417:78    - Unknown word (diouxefgcrsa) -- |\d+)?(\.(\*|\d+))?[diouxefgcrsa%]', re.I)
./Lib/logging/__init__.py:44:29     - Unknown word (vinay)      -- author__ = "Vinay Sajip <vinay_sajip@red-dove.com>
./Lib/logging/__init__.py:44:35     - Unknown word (sajip)      -- "Vinay Sajip <vinay_sajip@red-dove.com>"
./Lib/logging/__init__.py:450:85    - Unknown word (bcdefgnosx)   -- _]?(\.(\d+|{\w+}))?[bcdefgnosx%]?$', re.I)
./Lib/logging/__init__.py:706:24    - Unknown word (linefmt)      -- def __init__(self, linefmt=None):
./Lib/logging/__init__.py:764:14    - Unknown word (nlen)         -- self.nlen = len(name)
./Lib/logging/__init__.py:808:34    - Unknown word (loggable)     -- Determine if a record is loggable by consulting all the
./Lib/logging/__init__.py:842:11    - Unknown word (emptively)    -- # pre-emptively grab the necessary globals
./Lib/logging/config.py:100:19    - Unknown word (alist)      -- def _strip_spaces(alist):
./Lib/logging/config.py:189:5     - Unknown word (llist)      -- llist = cp["loggers"]["keys
./Lib/logging/config.py:235:13    - Unknown word (pflen)      -- pflen = len(prefixed)
./Lib/logging/config.py:669:13    - Unknown word (dfmt)       -- dfmt = config.get('datefmt
./Lib/logging/config.py:737:18    - Unknown word (mailhost)   -- 'mailhost' in config:
./Lib/logging/config.py:912:28    - Unknown word (rcvr)       -- def __init__(self, rcvr, hdlr, port, verify
./Lib/logging/handlers.py:1019:33   - Unknown word (mailport)       -- self.mailhost, self.mailport = mailhost
./Lib/logging/handlers.py:1085:24   - Unknown word (appname)        -- def __init__(self, appname, dllname=None, logtype
./Lib/logging/handlers.py:1085:47   - Unknown word (logtype)        -- appname, dllname=None, logtype="Application"):
./Lib/logging/handlers.py:1088:25   - Unknown word (evtlogutil)     -- import win32evtlogutil, win32evtlog
./Lib/logging/handlers.py:1088:42   - Unknown word (evtlog)         -- win32evtlogutil, win32evtlog
./Lib/logging/handlers.py:1090:19   - Unknown word (welu)           -- self._welu = win32evtlogutil
./Lib/logging/handlers.py:1098:18   - Unknown word (deftype)        -- self.deftype = win32evtlog.EVENTLOG
./Lib/logging/handlers.py:1099:18   - Unknown word (typemap)        -- self.typemap = {
./Lib/logging/handlers.py:1202:30   - Unknown word (Glasner)        -- Contributed by Franz Glasner.
./Lib/logging/handlers.py:1400:37   - Unknown word (centralise)     -- multiprocessing Queue to centralise logging to file in one
./Lib/logging/handlers.py:1431:36   - Unknown word (unpickleable)   -- arguments, and removes unpickleable items from the record
./Lib/logging/handlers.py:1443:58   - Unknown word (pickleable)     -- will typically not be pickleable.
./Lib/logging/handlers.py:455:31    - Unknown word (newsyslog)  -- of programs such as newsyslog and logrotate which
./Lib/logging/handlers.py:479:15    - Unknown word (statstream) -- self._statstream()
./Lib/logging/handlers.py:483:13    - Unknown word (sres)       -- sres = os.fstat(self.stream
./Lib/logging/handlers.py:495:25    - Unknown word (fstat'ing)  -- # once and then fstat'ing our new fd if we opened
./Lib/logging/handlers.py:557:23    - Unknown word (backoff)    -- # Exponential backoff parameters.
./Lib/logging/handlers.py:739:28    - Unknown word (Untz)       -- Contributed by Nicolas Untz (after which minor refactorin
./Lib/logging/handlers.py:748:44    - Unknown word (syslogd)    -- one to strings in the syslogd(8) source code.  This
./Lib/logging/handlers.py:795:10    - Unknown word (emerg)      -- "emerg": LOG_EMERG,
./Lib/logging/handlers.py:807:10    - Unknown word (authpriv)   -- "authpriv": LOG_AUTHPRIV,
./Lib/logging/handlers.py:821:10    - Unknown word (uucp)       -- "uucp": LOG_UUCP,
./Lib/logging/handlers.py:864:18    - Unknown word (unixsocket) -- self.unixsocket = True
./Lib/logging/handlers.py:865:63    - Unknown word (initialisation) -- unavailable during handler initialisation.
./Lib/logging/handlers.py:866:19    - Unknown word (openlog)        -- # C's openlog() function also ignores
./Lib/logging/handlers.py:878:13    - Unknown word (ress)           -- ress = socket.getaddrinfo
./Lib/logging/handlers.py:999:34    - Unknown word (fromaddr)       -- init__(self, mailhost, fromaddr, toaddrs, subject,
./Lib/logging/handlers.py:999:44    - Unknown word (toaddrs)        -- mailhost, fromaddr, toaddrs, subject,
./Lib/mailbox.py:1241:11   - Unknown word (Rmail)         -- """An Rmail-style Babyl mailbox
./Lib/mailbox.py:1668:23   - Unknown word (xstatus)       -- status_flags, xstatus_flags = '', ''
./Lib/mailbox.py:200:16    - Unknown word (mojibake)   -- # lies mojibake.
./Lib/mailbox.py:2064:26   - Unknown word (lockf)         -- ""Lock file f using lockf and dot locking."""
./Lib/mailbox.py:2082:63   - Unknown word (dotlocking)    -- write access, just skip dotlocking.
./Lib/mailbox.py:268:10    - Unknown word (qmail)      -- """A qmail-style Maildir mailbox
./Lib/mailbox.py:288:19    - Unknown word (mtimes)     -- self._toc_mtimes = {'cur': 0, 'new':
./Lib/mailbox.py:290:15    - Unknown word (skewfactor) -- self._skewfactor = 0.1      # Adjust
./Lib/mailbox.py:455:9     - Unknown word (maildirfolder) -- maildirfolder_path = os.path.join
./Lib/mailbox.py:473:48    - Unknown word (topdown)       -- files in os.walk(path, topdown=False):
./Lib/mailbox.py:493:27    - Unknown word (gethostname)   -- hostname = socket.gethostname()
./Lib/mailbox.py:577:8     - Unknown word (singlefile)    -- class _singlefileMailbox(Mailbox):
./Lib/mailbox.py:714:36    - Unknown word (dotlock)       -- lock_file(self._file, dotlock=False)
./Lib/mimetypes.py:120:15    - Unknown word (dataurl)    -- # dataurl := "data:" [ mediatype
./Lib/mimetypes.py:120:38    - Unknown word (mediatype)  -- dataurl := "data:" [ mediatype ] [ ";base64" ] ","
./Lib/mimetypes.py:122:29    - Unknown word (urlchar)    -- # data      := *urlchar
./Lib/mimetypes.py:228:17    - Unknown word (suff)       -- for suff in suffixes:
./Lib/mimetypes.py:244:24    - Unknown word (mimedb)     -- def enum_types(mimedb):
./Lib/mimetypes.py:256:64    - Unknown word (hkcr)       -- CLASSES_ROOT, '') as hkcr:
./Lib/mimetypes.py:257:17    - Unknown word (subkeyname) -- for subkeyname in enum_types(hkcr)
./Lib/mimetypes.py:259:63    - Unknown word (subkey)     -- hkcr, subkeyname) as subkey:
./Lib/mimetypes.py:391:11    - Unknown word (svgz)       -- '.svgz': '.svg.gz',
./Lib/mimetypes.py:418:34    - Unknown word (msword)     -- doc' : 'application/msword',
./Lib/mimetypes.py:430:34    - Unknown word (pkcs)       -- c' : 'application/pkcs7-mime',
./Lib/mimetypes.py:434:44    - Unknown word (mpegurl)    -- application/vnd.apple.mpegurl',
./Lib/mimetypes.py:444:11    - Unknown word (bcpio)      -- '.bcpio' : 'application/x-bcpio
./Lib/mimetypes.py:445:11    - Unknown word (cpio)       -- '.cpio' : 'application/x
./Lib/mimetypes.py:448:11    - Unknown word (gtar)       -- '.gtar' : 'application/x
./Lib/mimetypes.py:461:11    - Unknown word (shar)       -- '.shar' : 'application/x
./Lib/mimetypes.py:468:11    - Unknown word (texi)       -- '.texi' : 'application/x
./Lib/mimetypes.py:470:11    - Unknown word (roff)       -- '.roff' : 'application/x
./Lib/mimetypes.py:470:36    - Unknown word (troff)      -- : 'application/x-troff',
./Lib/mimetypes.py:476:11    - Unknown word (ustar)      -- '.ustar' : 'application/x-ustar
./Lib/mimetypes.py:477:36    - Unknown word (wais)       -- : 'application/x-wais-source',
./Lib/mimetypes.py:505:39    - Unknown word (anymap)     -- : 'image/x-portable-anymap',
./Lib/mimetypes.py:510:30    - Unknown word (xbitmap)    -- .xbm' : 'image/x-xbitmap',
./Lib/mimetypes.py:511:30    - Unknown word (xpixmap)    -- .xpm' : 'image/x-xpixmap',
./Lib/mimetypes.py:512:30    - Unknown word (xwindowdump) -- .xwd' : 'image/x-xwindowdump',
./Lib/mimetypes.py:515:11    - Unknown word (mhtml)       -- '.mhtml' : 'message/rfc822
./Lib/mimetypes.py:530:29    - Unknown word (setext)      -- '.etx' : 'text/x-setext',
./Lib/mimetypes.py:533:29    - Unknown word (vcard)       -- '.vcf' : 'text/x-vcard',
./Lib/mimetypes.py:541:28    - Unknown word (quicktime)   -- '.mov' : 'video/quicktime',
./Lib/mimetypes.py:544:30    - Unknown word (msvideo)     -- .avi' : 'video/x-msvideo',
./Lib/multiprocessing/__init__.py:11:30     - Unknown word (Oudkerk)    -- Copyright (c) 2006-2008, R Oudkerk
./Lib/multiprocessing/connection.py:191:41    - Unknown word (bytewise)   -- byte-indexing of non-bytewise buffers (e.g. array
./Lib/multiprocessing/connection.py:234:19    - Unknown word (bytesize)   -- # Get bytesize of arbitrary buffer
./Lib/multiprocessing/connection.py:288:21    - Unknown word (waitres)    -- waitres = _winapi.WaitForMultipleObje
./Lib/multiprocessing/connection.py:295:17    - Unknown word (nwritten)   -- nwritten, err = ov.GetOverlappedResult
./Lib/multiprocessing/connection.py:304:17    - Unknown word (bsize)      -- bsize = 128 if maxsize is
./Lib/multiprocessing/connection.py:317:25    - Unknown word (nread)      -- nread, err = ov.GetOverlappedResult
./Lib/multiprocessing/connection.py:346:13    - Unknown word (rbytes)     -- rbytes, err = ov.GetOverlappedResult
./Lib/multiprocessing/connection.py:360:50    - Unknown word (closesocket) -- close=_multiprocessing.closesocket):
./Lib/multiprocessing/connection.py:407:43    - Unknown word (Nagle's)     -- payload is large so Nagle's algorithm won't be triggered
./Lib/multiprocessing/connection.py:608:51    - Unknown word (exitpriority) -- unlink, args=(address,), exitpriority=0
./Lib/multiprocessing/connection.py:846:9     - Unknown word (waithandle)   -- waithandle_to_obj = {}
./Lib/multiprocessing/connection.py:915:33    - Unknown word (epoll)        -- descriptor, contrarily to epoll/kqueue (also, they require
./Lib/multiprocessing/connection.py:915:39    - Unknown word (kqueue)       -- contrarily to epoll/kqueue (also, they require
./Lib/multiprocessing/connection.py:916:7     - Unknown word (syscall)      -- # syscall).
./Lib/multiprocessing/context.py:116:14    - Unknown word (maxtasksperchild) -- maxtasksperchild=None):
./Lib/multiprocessing/context.py:122:24    - Unknown word (typecode)         -- def RawValue(self, typecode_or_type, *args):
./Lib/multiprocessing/context.py:45:67     - Unknown word (cpus)       -- determine number of cpus')
./Lib/multiprocessing/forkserver.py:188:9     - Unknown word (sigchld)    -- def sigchld_handler(*_unused):
./Lib/multiprocessing/forkserver.py:218:21    - Unknown word (rfds)       -- rfds = [key.fileobj for
./Lib/multiprocessing/forkserver.py:258:41    - Unknown word (recvfds)    -- fds = reduction.recvfds(s, MAXFDS_TO_SEND +
./Lib/multiprocessing/forkserver.py:91:13     - Unknown word (allfds)     -- allfds = [child_r, child_w
./Lib/multiprocessing/forkserver.py:95:27     - Unknown word (sendfds)    -- reduction.sendfds(client, allfds)
./Lib/multiprocessing/heap.py:124:15    - Unknown word (lastpid)    -- self._lastpid = os.getpid()
./Lib/multiprocessing/heap.py:149:17    - Unknown word (mallocs)    -- self._n_mallocs = 0
./Lib/multiprocessing/heap.py:206:58    - Unknown word (neighbours) -- try to merge with its neighbours in the arena
./Lib/multiprocessing/heap.py:236:60    - Unknown word (neighbour)  -- can be merged with a neighbour
./Lib/multiprocessing/heap.py:273:11    - Unknown word (trylock)    -- # trylock is used instead, and
./Lib/multiprocessing/heap.py:95:25     - Unknown word (statvfs)    -- st = os.statvfs(d)
./Lib/multiprocessing/heap.py:96:25     - Unknown word (bavail)     -- if st.f_bavail * st.f_frsize >= size
./Lib/multiprocessing/heap.py:96:39     - Unknown word (frsize)     -- if st.f_bavail * st.f_frsize >= size:  # enough free
./Lib/multiprocessing/managers.py:1070:13   - Unknown word (endtime)     -- endtime = time.monotonic()
./Lib/multiprocessing/managers.py:1073:13   - Unknown word (waittime)    -- waittime = None
./Lib/multiprocessing/managers.py:1344:26   - Unknown word (monkeypatching) -- 'Better than monkeypatching for now; merge into
./Lib/multiprocessing/managers.py:256:35    - Unknown word (gettypeid)  -- obj, exposed, gettypeid = id_to_obj[ident]
./Lib/multiprocessing/managers.py:279:33    - Unknown word (rexposed)   -- rident, rexposed = self.create(conn,
./Lib/multiprocessing/managers.py:339:59    - Unknown word (refcounting) -- to spot problems with refcounting
./Lib/multiprocessing/managers.py:378:50    - Unknown word (proxytype)   -- exposed, method_to_typeid, proxytype = \
./Lib/multiprocessing/managers.py:758:17    - Unknown word (idset)       -- tls_idset = BaseProxy._address
./Lib/multiprocessing/managers.py:805:10    - Unknown word (callmethod)  -- def _callmethod(self, methodname, args
./Lib/multiprocessing/managers.py:899:28    - Unknown word (isauto)      -- if getattr(self, '_isauto', False):
./Lib/multiprocessing/pool.py:101:31    - Unknown word (Maxtasks)   -- raise AssertionError("Maxtasks {!r} is not valid".format
./Lib/multiprocessing/pool.py:192:15    - Unknown word (taskqueue)  -- self._taskqueue = queue.SimpleQueue
./Lib/multiprocessing/pool.py:409:22    - Unknown word (Chunksize)  -- "Chunksize must be 1+, not {0:n
./Lib/multiprocessing/pool.py:528:13    - Unknown word (taskseq)    -- for taskseq, set_length in iter
./Lib/multiprocessing/pool.py:696:48    - Unknown word (hander)     -- have cache with result_hander not alive")
./Lib/multiprocessing/pool.py:97:12     - Unknown word (inqueue)    -- def worker(inqueue, outqueue, initializer
./Lib/multiprocessing/pool.py:97:21     - Unknown word (outqueue)   -- def worker(inqueue, outqueue, initializer=None, initargs
./Lib/multiprocessing/pool.py:97:62     - Unknown word (maxtasks)   -- nitializer=None, initargs=(), maxtasks=None,
./Lib/multiprocessing/popen_spawn_win32.py:19:47     - Unknown word (pythonservice) -- executable.lower().endswith("pythonservice.exe")
./Lib/multiprocessing/popen_spawn_win32.py:53:18     - Unknown word (whandle)       -- rhandle, whandle = _winapi.CreatePipe
./Lib/multiprocessing/popen_spawn_win32.py:53:9      - Unknown word (rhandle)       -- rhandle, whandle = _winapi.CreatePipe
./Lib/multiprocessing/process.py:123:19    - Unknown word (refcycle)   -- # Avoid a refcycle if the target function
./Lib/multiprocessing/process.py:400:26    - Unknown word (semprefix)  -- 'semprefix': '/mp'}
./Lib/multiprocessing/queues.py:121:11    - Unknown word (unserialize)   -- # unserialize the data after having
./Lib/multiprocessing/queues.py:212:45    - Unknown word (writelock)     -- notempty, send_bytes, writelock, reader_close,
./Lib/multiprocessing/queues.py:215:9     - Unknown word (nacquire)      -- nacquire = notempty.acquire
./Lib/multiprocessing/queues.py:216:9     - Unknown word (nrelease)      -- nrelease = notempty.release
./Lib/multiprocessing/queues.py:217:9     - Unknown word (nwait)         -- nwait = notempty.wait
./Lib/multiprocessing/queues.py:218:9     - Unknown word (bpopleft)      -- bpopleft = buffer.popleft
./Lib/multiprocessing/queues.py:221:13    - Unknown word (wacquire)      -- wacquire = writelock.acquire
./Lib/multiprocessing/queues.py:222:13    - Unknown word (wrelease)      -- wrelease = writelock.release
./Lib/multiprocessing/queues.py:44:15     - Unknown word (opid)       -- self._opid = os.getpid()
./Lib/multiprocessing/queues.py:46:19     - Unknown word (wlock)      -- self._wlock = None
./Lib/multiprocessing/queues.py:78:15     - Unknown word (jointhread) -- self._jointhread = None
./Lib/multiprocessing/queues.py:79:15     - Unknown word (joincancelled) -- self._joincancelled = False
./Lib/multiprocessing/reduction.py:157:14    - Unknown word (ancdata)    -- msg, ancdata, flags, addr = sock
./Lib/multiprocessing/reduction.py:166:13    - Unknown word (cmsg)       -- cmsg_level, cmsg_type, cmsg
./Lib/multiprocessing/reduction.py:30:3      - Unknown word (Pickler)    -- # Pickler subclass
./Lib/multiprocessing/resource_sharer.py:134:29    - Unknown word (pthread)    -- if hasattr(signal, 'pthread_sigmask'):
./Lib/multiprocessing/resource_sharer.py:134:37    - Unknown word (sigmask)    -- hasattr(signal, 'pthread_sigmask'):
./Lib/multiprocessing/resource_sharer.py:40:31     - Unknown word (fromshare)  -- return socket.fromshare(share)
./Lib/multiprocessing/resource_sharer.py:70:57     - Unknown word (afterfork)  -- self, _ResourceSharer._afterfork)
./Lib/multiprocessing/resource_tracker.py:153:30    - Unknown word (rtype)      -- register(self, name, rtype):
./Lib/multiprocessing/resource_tracker.py:15:35     - Unknown word (killall)    -- resource tracker process, "killall python" would probably
./Lib/multiprocessing/resource_tracker.py:38:13     - Unknown word (posixshmem) -- import _posixshmem
./Lib/multiprocessing/shared_memory.py:36:25     - Unknown word (wnsm)       -- _SHM_NAME_PREFIX = 'wnsm_'
./Lib/multiprocessing/sharedctypes.py:229:11    - Unknown word (getslice)   -- def __getslice__(self, start, stop
./Lib/multiprocessing/sharedctypes.py:31:43     - Unknown word (ulonglong)  -- longlong, 'Q': ctypes.c_ulonglong,
./Lib/multiprocessing/synchronize.py:277:47    - Unknown word (rezero)     -- from sleeping_count and rezero woken_count
./Lib/multiprocessing/synchronize.py:50:37     - Unknown word (maxvalue)   -- (self, kind, value, maxvalue, *, ctx):
./Lib/multiprocessing/util.py:146:44    - Unknown word (pymp)         -- tempfile.mkdtemp(prefix='pymp-')
./Lib/multiprocessing/util.py:156:15    - Unknown word (reinitialization) -- # Support for reinitialization of objects when bootstrapping
./Lib/multiprocessing/util.py:189:18    - Unknown word (Exitpriority)     -- "Exitpriority ({0!r}) must be None
./Lib/multiprocessing/util.py:268:10    - Unknown word (finalizers)       -- def _run_finalizers(minpriority=None):
./Lib/multiprocessing/util.py:268:21    - Unknown word (minpriority)      -- def _run_finalizers(minpriority=None):
./Lib/multiprocessing/util.py:272:5     - Unknown word (Finalizers)       -- Finalizers with highest priority
./Lib/multiprocessing/util.py:405:12    - Unknown word (closerange)       -- os.closerange(fds[i]+1, fds[i+1])
./Lib/multiprocessing/util.py:447:32    - Unknown word (passfds)          -- passfds(path, args, passfds):
./Lib/multiprocessing/util.py:450:5     - Unknown word (errpipe)          -- errpipe_read, errpipe_write
./Lib/multiprocessing/util.py:79:25     - Unknown word (exithandlers) -- atexit._exithandlers.remove((_exit_function
./Lib/netrc.py:39:15     - Unknown word (commenters) -- lexer.commenters = lexer.commenters.replace
./Lib/netrc.py:41:47     - Unknown word (macdef)     -- machine, default, or macdef top-level keyword
./Lib/netrc.py:48:27     - Unknown word (instream)   -- lexer.instream.readline()
./Lib/netrc.py:51:17     - Unknown word (entryname)  -- entryname = lexer.get_token()
./Lib/netrc.py:54:71     - Unknown word (macdefs)    -- Just skip to end of macdefs
./Lib/netrc.py:96:33     - Unknown word (fowner)     -- fowner = pwd.getpwuid(prop
./Lib/nntplib.py:1047:51   - Unknown word (gmane)             -- '--group', default='gmane.comp.python.general
./Lib/nntplib.py:1082:9    - Unknown word (artnum)            -- for artnum, over in overviews:
./Lib/nntplib.py:30:20     - Unknown word (Kantor)     -- # RFC 977 by Brian Kantor and Phil Lapsley.
./Lib/nntplib.py:30:36     - Unknown word (Lapsley)    -- Brian Kantor and Phil Lapsley.
./Lib/nntplib.py:313:18    - Unknown word (readermode) -- readermode=None, usenetrc=False
./Lib/nntplib.py:313:35    - Unknown word (usenetrc)   -- readermode=None, usenetrc=False,
./Lib/nntplib.py:31:10     - Unknown word (xgtitle)    -- # xover, xgtitle, xpath, date methods
./Lib/nntplib.py:31:42     - Unknown word (Kevan)      -- xpath, date methods by Kevan Heydon
./Lib/nntplib.py:31:48     - Unknown word (Heydon)     -- date methods by Kevan Heydon
./Lib/nntplib.py:360:57    - Unknown word (setreadermode) -- some NNTP servers. If _setreadermode() fails
./Lib/nntplib.py:365:25    - Unknown word (afterauth)     -- self.readermode_afterauth = False
./Lib/nntplib.py:490:10    - Unknown word (getlongresp)   -- def _getlongresp(self, file=None):
./Lib/nntplib.py:536:10    - Unknown word (shortcmd)      -- def _shortcmd(self, line):
./Lib/nntplib.py:542:10    - Unknown word (longcmd)       -- def _longcmd(self, line, file=None
./Lib/nntplib.py:548:10    - Unknown word (longcmdstring) -- def _longcmdstring(self, line, file=None
./Lib/nntplib.py:558:10    - Unknown word (getoverviewfmt) -- def _getoverviewfmt(self):
./Lib/nntplib.py:562:26    - Unknown word (cachedoverviewfmt) -- return self._cachedoverviewfmt
./Lib/nntplib.py:575:10    - Unknown word (grouplist)         -- def _grouplist(self, lines):
./Lib/nntplib.py:640:10    - Unknown word (getdescriptions)   -- def _getdescriptions(self, group_pattern
./Lib/nntplib.py:716:10    - Unknown word (statparse)         -- def _statparse(self, resp):
./Lib/nntplib.py:726:10    - Unknown word (statcmd)           -- def _statcmd(self, line):
./Lib/nntplib.py:753:10    - Unknown word (artcmd)            -- def _artcmd(self, line, file=None
./Lib/nntplib.py:957:32    - Unknown word (authinfo)          -- resp = self._shortcmd('authinfo user ' + user)
./Lib/ntpath.py:149:26    - Unknown word (drivespec)  -- is always true that drivespec + pathspec == p
./Lib/ntpath.py:149:38    - Unknown word (pathspec)   -- true that drivespec + pathspec == p
./Lib/ntpath.py:179:9     - Unknown word (normp)      -- normp = p.replace(altsep,
./Lib/ntpath.py:183:25    - Unknown word (mountpoint) -- # \\machine\mountpoint\directory\etc\...
./Lib/ntpath.py:281:43    - Unknown word (reparse)    -- volumes (querying the reparse tag) fails for the most
./Lib/ntpath.py:285:21    - Unknown word (getvolumepathname) -- from nt import _getvolumepathname
./Lib/ntpath.py:331:9     - Unknown word (userhome)          -- userhome = os.environ['USERPROFILE
./Lib/ntpath.py:35:10     - Unknown word (bothseps)   -- def _get_bothseps(path):
./Lib/ntpath.py:385:9     - Unknown word (varchars)          -- varchars = bytes(string.ascii
./Lib/ntpath.py:391:32    - Unknown word (environb)          -- environ = getattr(os, 'environb', None)
./Lib/ntpath.py:541:10    - Unknown word (getfullpathname)   -- `nt._getfullpathname` is not available or
./Lib/ntpath.py:549:22    - Unknown word (getcwdb)           -- cwd = os.getcwdb()
./Lib/ntpath.py:571:21    - Unknown word (getfinalpathname)  -- from nt import _getfinalpathname, readlink as _nt_readlink
./Lib/ntpath.py:618:27    - Unknown word (nonstrict)         -- def _getfinalpathname_nonstrict(path):
./Lib/ntpath.py:632:54    - Unknown word (unfollowable)      -- RESOLVE_FILENAME (implies unfollowable symlink)
./Lib/ntpath.py:700:17    - Unknown word (spath)             -- spath = new_unc_prefix + path
./Lib/ntpath.py:792:9     - Unknown word (drivesplits)       -- drivesplits = [splitdrive(p.replace
./Lib/opcode.py:397:6     - Unknown word (deopt)      -- "deopt",
./Lib/opcode.py:39:1      - Unknown word (oplists)    -- oplists = [hasarg, hasconst
./Lib/opcode.py:429:10    - Unknown word (descr)      -- "descr": 4,
./Lib/opcode.py:67:9      - Unknown word (oplist)     -- for oplist in oplists:
./Lib/opcode.py:7:23      - Unknown word (hasarg)     -- all__ = ["cmp_op", "hasarg", "hasconst", "hasname
./Lib/opcode.py:8:50      - Unknown word (hasexc)     -- hascompare", "hasfree", "hasexc", "opname", "opmap"
./Lib/operator.py:188:24    - Unknown word (presizing)  -- This is useful for presizing containers when building
./Lib/optparse.py:1138:12   - Unknown word (ablah)         -- -ablah foo bar -bboo baz
./Lib/optparse.py:1138:27   - Unknown word (bboo)          -- -ablah foo bar -bboo baz
./Lib/optparse.py:1156:7    - Unknown word (rargs)         -- rargs : [string]
./Lib/optparse.py:1161:7    - Unknown word (largs)         -- largs : [string]
./Lib/optparse.py:1652:22   - Unknown word (wordmap)       -- def _match_abbrev(s, wordmap):
./Lib/optparse.py:298:35    - Unknown word (metavars)   -- the opt strings and metavars
./Lib/optparse.py:350:62    - Unknown word (metavariables) -- of option strings & metavariables."""
./Lib/optparse.py:353:50    - Unknown word (sopt)          -- self._short_opt_fmt % (sopt, metavar)
./Lib/optparse.py:355:48    - Unknown word (lopt)          -- self._long_opt_fmt % (lopt, metavar)
./Lib/optparse.py:5:27      - Unknown word (Optik)      -- Originally distributed as Optik.
./Lib/optparse.py:852:17    - Unknown word (dval)          -- dval = dict[attr]
./Lib/optparse.py:85:44     - Unknown word (gward)      -- 006-06-11 16:22:03Z gward
./Lib/os.py:116:30    - Unknown word (mkfifo)     -- "HAVE_MKFIFOAT", "mkfifo")
./Lib/os.py:117:30    - Unknown word (mknod)      -- "HAVE_MKNODAT", "mknod")
./Lib/os.py:142:30    - Unknown word (pathconf)   -- "HAVE_FPATHCONF", "pathconf")
./Lib/os.py:143:40    - Unknown word (fstatvfs)   -- statvfs") and _exists("fstatvfs"): # mac os x10.3
./Lib/os.py:156:7     - Unknown word (fchmodat)   -- # fchmodat(). (Examples: Linux
./Lib/os.py:172:30    - Unknown word (chflags)    -- "HAVE_LCHFLAGS", "chflags")
./Lib/os.py:174:17    - Unknown word (lchown)     -- if _exists("lchown"): # mac os x10.3
./Lib/os.py:191:39    - Unknown word (posixmodule) -- constants if necessary in posixmodule.c
./Lib/os.py:20:5      - Unknown word (opendir)    -- and opendir), and leave all pathname
./Lib/os.py:219:9     - Unknown word (cdir)        -- cdir = curdir
./Lib/os.py:346:5     - Unknown word (nondirs)     -- nondirs = []
./Lib/os.py:430:9     - Unknown word (fwalk)       -- def fwalk(top=".", topdown=True
./Lib/os.py:435:43    - Unknown word (dirfd)       -- dirnames, filenames, dirfd
./Lib/os.py:455:32    - Unknown word (rootfd)      -- for root, dirs, files, rootfd in os.fwalk('python
./Lib/os.py:470:9     - Unknown word (topfd)       -- topfd = open(top, O_RDONLY
./Lib/os.py:479:23    - Unknown word (toppath)     -- def _fwalk(topfd, toppath, isbytes, topdown, onerror
./Lib/os.py:479:32    - Unknown word (isbytes)     -- fwalk(topfd, toppath, isbytes, topdown, onerror, follow
./Lib/os.py:590:9     - Unknown word (argrest)     -- argrest = (args, env)
./Lib/os.py:646:22    - Unknown word (listb)       -- path_listb = env[b'PATH']
./Lib/os.py:667:30    - Unknown word (encodekey)   -- _init__(self, data, encodekey, decodekey, encodevalue
./Lib/os.py:667:41    - Unknown word (decodekey)   -- self, data, encodekey, decodekey, encodevalue, decodevalue
./Lib/os.py:667:52    - Unknown word (encodevalue) -- encodekey, decodekey, encodevalue, decodevalue):
./Lib/os.py:667:65    - Unknown word (decodevalue) -- decodekey, encodevalue, decodevalue):
./Lib/os.py:689:9     - Unknown word (encodedkey)  -- encodedkey = self.encodekey(key
./Lib/os.py:737:6     - Unknown word (createenviron) -- def _createenviron():
./Lib/os.py:792:9     - Unknown word (getenvb)       -- def getenvb(key, default=None):
./Lib/os.py:800:6     - Unknown word (fscodec)       -- def _fscodec():
./Lib/os.py:845:10    - Unknown word (spawnvef)      -- def _spawnvef(mode, file, args, env
./Lib/os.py:866:17    - Unknown word (wpid)          -- wpid, sts = waitpid(pid,
./Lib/os.py:881:9     - Unknown word (spawnve)       -- def spawnve(mode, file, args, env
./Lib/os.py:891:13    - Unknown word (spawnvp)       -- # Note: spawnvp[e] isn't currently supported
./Lib/os.py:903:9     - Unknown word (spawnvpe)      -- def spawnvpe(mode, file, args, env
./Lib/os.py:921:9     - Unknown word (spawnl)        -- def spawnl(mode, file, *args):
./Lib/os.py:930:9     - Unknown word (spawnle)       -- def spawnle(mode, file, *args):
./Lib/os.py:947:24    - Unknown word (spawnlp)       -- # so it won't have spawnlp[e] either.
./Lib/os.py:958:9     - Unknown word (spawnlpe)      -- def spawnlpe(mode, file, *args):
./Lib/os.py:974:21    - Unknown word (vxworks)       -- if sys.platform != 'vxworks':
./Lib/pathlib.py:1074:19   - Unknown word (eloop)      -- def check_eloop(e):
./Lib/pathlib.py:122:5     - Unknown word (pathmod)    -- pathmod = ntpath
./Lib/pathlib.py:140:38    - Unknown word (Harddisk)   -- \??\C:' => '\Device\HarddiskVolume2'.
./Lib/pathlib.py:272:9     - Unknown word (bpath)      -- bpath = bytes(path)
./Lib/pathlib.py:323:19    - Unknown word (utimensat)  -- # the utimensat() / futimens() functions
./Lib/pathlib.py:323:33    - Unknown word (futimens)   -- # the utimensat() / futimens() functions.
./Lib/pathlib.py:353:24    - Unknown word (getgrgid)   -- return grp.getgrgid(self.stat(path).st_gid
./Lib/pathlib.py:368:3     - Unknown word (Globbing)   -- # Globbing helpers
./Lib/pathlib.py:513:20    - Unknown word (pathcls)    -- __slots__ = ('_pathcls', '_drv', '_root',
./Lib/pathlib.py:554:28    - Unknown word (pparts)     -- '_str', '_hash', '_pparts', '_cached_cparts',
./Lib/pathlib.py:554:46    - Unknown word (cparts)     -- '_pparts', '_cached_cparts',
./Lib/pathlib.py:659:18    - Unknown word (casefolded) -- # Cached casefolded parts, for hashing and
./Lib/pdb.py:1036:14   - Unknown word (eturn)        -- """r(eturn)
./Lib/pdb.py:1044:18   - Unknown word (inue)         -- """c(ont(inue))
./Lib/pdb.py:116:5     - Unknown word (linestarts) -- linestarts = list(dis.findlinestarts
./Lib/pdb.py:1240:9    - Unknown word (breaklist)    -- breaklist = self.get_file_breaks
./Lib/pdb.py:124:8     - Unknown word (rstr)       -- class _rstr(str):
./Lib/pdb.py:1253:12   - Unknown word (longlist)     -- """longlist | ll
./Lib/pdb.py:1305:12   - Unknown word (whatis)       -- """whatis arg
./Lib/pdb.py:1359:12   - Unknown word (undisplay)    -- """undisplay [expression]
./Lib/pdb.py:1422:12   - Unknown word (unalias)      -- """unalias name
./Lib/pdb.py:151:14    - Unknown word (mainpyfile) -- self.mainpyfile = ''
./Lib/pdb.py:1530:10   - Unknown word (runmodule)    -- def _runmodule(self, module_name):
./Lib/pdb.py:161:20    - Unknown word (kbdint)     -- self.allow_kbdint = False
./Lib/pdb.py:1647:45   - Unknown word (pyfile)       -- command] ... [-m module | pyfile] [arg] ...
./Lib/pdb.py:179:23    - Unknown word (doprompt)   -- self.commands_doprompt = {} # for each bp num
./Lib/pdb.py:180:59    - Unknown word (execing)    -- must be disp. after execing the cmd list
./Lib/pdb.py:185:23    - Unknown word (bnum)       -- self.commands_bnum = None # The breakpoint
./Lib/pdb.py:202:14    - Unknown word (curindex)   -- self.curindex = 0
./Lib/pdb.py:203:14    - Unknown word (curframe)   -- self.curframe = None
./Lib/pdb.py:304:53    - Unknown word (subgenerator) -- interpreter when handling a subgenerator run with
./Lib/pdb.py:307:25    - Unknown word (debuggee)     -- # stop when the debuggee is returning from such
./Lib/pdb.py:332:34    - Unknown word (getval)       -- newvalue = self._getval_except(expr)
./Lib/pdb.py:437:9     - Unknown word (cmdlist)      -- cmdlist = self.commands[self
./Lib/pdb.py:466:62    - Unknown word (tbreak)       -- function location for break/tbreak/clear.
./Lib/pdb.py:484:19    - Unknown word (bpnumber)     -- def _complete_bpnumber(self, text, line, begidx
./Lib/pdb.py:51:13     - Unknown word (pdbrc)      -- If a file ".pdbrc" exists in your home
./Lib/pdb.py:56:26     - Unknown word (readrc)     -- disabled by passing the "readrc=False" argument to the
./Lib/pdb.py:600:14    - Unknown word (reak)         -- """b(reak) [ ([filename:]lineno
./Lib/pdb.py:616:48    - Unknown word (Disp)         -- message("Num Type         Disp Enb   Where")
./Lib/pdb.py:663:50    - Unknown word (bkpt)         -- name to identify the bkpt (function names
./Lib/pdb.py:855:21    - Unknown word (countstr)     -- countstr = '%d crossings' % count
./Lib/pdb.py:903:9     - Unknown word (numberlist)   -- numberlist = arg.split()
./Lib/pdb.py:949:13    - Unknown word (newframe)     -- newframe = 0
./Lib/pickle.py:1197:15   - Unknown word (unframer)     -- self._unframer = _Unframer(self._file
./Lib/pickle.py:1201:14   - Unknown word (metastack)    -- self.metastack = []
./Lib/pickle.py:1214:25   - Unknown word (stopinst)     -- except _Stop as stopinst:
./Lib/pickle.py:125:45    - Unknown word (argtuple)   -- # apply callable to argtuple, both on stack
./Lib/pickle.py:1411:36   - Unknown word (toreadonly)   -- self.stack[-1] = m.toreadonly()
./Lib/pickle.py:1505:35   - Unknown word (classobject)  -- Stack is ... markobject classobject arg1 arg2 ...
./Lib/pickle.py:171:2     - Unknown word (tuplesize)  -- _tuplesize2code = [EMPTY_TUPLE
./Lib/pickle.py:263:8     - Unknown word (Unframer)   -- class _Unframer:
./Lib/pickle.py:3:59      - Unknown word (picklers)   -- for registering custom picklers.
./Lib/pickle.py:467:23    - Unknown word (pickler's)  -- """Clears the pickler's "memo".
./Lib/pickle.py:497:26    - Unknown word (Unpickler's) -- # the key in the Unpickler's memo.  The object is
./Lib/pickle.py:541:23    - Unknown word (pers)        -- self.save_pers(pid)
./Lib/pickle.py:621:51    - Unknown word (listitems)   -- func, args, state=None, listitems=None,
./Lib/pickle.py:622:21    - Unknown word (dictitems)   -- dictitems=None, state_setter=None
./Lib/pickle.py:825:18    - Unknown word (picklebuffer) -- def save_picklebuffer(self, obj):
./Lib/pickle.py:9:5       - Unknown word (Unpickler)  -- Unpickler
./Lib/pickletools.py:1178:19   - Unknown word (unpicklers)  -- (and later) unpicklers special-case these and
./Lib/pickletools.py:1230:7    - Unknown word (unpickles)   -- unpickles to a Python long.  There
./Lib/pickletools.py:1725:20   - Unknown word (frozensets)  -- # Way to build frozensets
./Lib/pickletools.py:2232:9    - Unknown word (picklecode)  -- picklecode = getattr(pickle, name
./Lib/pickletools.py:2332:5    - Unknown word (oldids)      -- oldids = set()          # set
./Lib/pickletools.py:2333:5    - Unknown word (newids)      -- newids = {}             # set
./Lib/pickletools.py:2336:5    - Unknown word (protoheader) -- protoheader = b''
./Lib/pickletools.py:2372:9    - Unknown word (frameless)   -- frameless = False
./Lib/pickletools.py:2443:5    - Unknown word (maxproto)    -- maxproto = -1       # max protocol
./Lib/pickletools.py:2444:5    - Unknown word (markstack)   -- markstack = []      # bytecode
./Lib/pickletools.py:2445:5    - Unknown word (indentchunk) -- indentchunk = ' ' * indentlevel
./Lib/pickletools.py:2446:5    - Unknown word (errormsg)    -- errormsg = None
./Lib/pickletools.py:2447:5    - Unknown word (annocol)     -- annocol = annotate  # column
./Lib/pickletools.py:2459:9    - Unknown word (numtopop)    -- numtopop = len(before)
./Lib/pickletools.py:2462:9    - Unknown word (markmsg)     -- markmsg = None
./Lib/pickletools.py:2471:17   - Unknown word (markpos)     -- markpos = markstack.pop()
./Lib/pickletools.py:26:10     - Unknown word (formedness)  -- # well-formedness. dis() does a lot of
./Lib/pickletools.py:315:35    - Unknown word (stripquotes) -- stringnl(f, decode=True, stripquotes=True):
./Lib/pickletools.py:351:39    - Unknown word (strinq)      -- raise ValueError("strinq quote %r not found at
./Lib/pickletools.py:50:62     - Unknown word (bytestream)  -- opcode in the pickle bytestream. Other
./Lib/pickletools.py:541:9     - Unknown word (bigsize)     -- >>> bigsize8 = struct.pack("<Q"
./Lib/pickletools.py:955:10    - Unknown word (obtype)      -- 'obtype',
./Lib/pickletools.py:9:34      - Unknown word (indentlevel) -- out=None, memo=None, indentlevel=4)
./Lib/pkgutil.py:168:17    - Unknown word (dircontents)   -- dircontents = os.listdir(path)
./Lib/pkgutil.py:173:17    - Unknown word (subname)       -- subname = inspect.getmodulename
./Lib/pkgutil.py:22:59     - Unknown word (ispkg)         -- 'module_finder name ispkg')
./Lib/pkgutil.py:4:41      - Unknown word (simplegeneric) -- import singledispatch as simplegeneric
./Lib/pkgutil.py:543:5     - Unknown word (sname)         -- sname_pkg = name + ".pkg"
./Lib/pkgutil.py:579:43    - Unknown word (subpackages)   -- the right thing for subpackages like zope.app?
./Lib/pkgutil.py:579:60    - Unknown word (zope)          -- for subpackages like zope.app?
./Lib/pkgutil.py:581:9     - Unknown word (pkgfile)       -- pkgfile = os.path.join(dir,
./Lib/pkgutil.py:650:42    - Unknown word (regexes)       -- period in these pseudo-regexes:
./Lib/pkgutil.py:671:39    - Unknown word (recognised)    -- if `name` isn't in a recognised format
./Lib/platform.py:1186:17   - Unknown word (parseable)    -- machine parseable. It may look different
./Lib/platform.py:1228:19   - Unknown word (libcversion)  -- libcname, libcversion = libc_ver()
./Lib/platform.py:1228:9    - Unknown word (libcname)     -- libcname, libcversion = libc
./Lib/platform.py:1254:5    - Unknown word (freedesktop)  -- ### freedesktop.org os-release standard
./Lib/platform.py:1316:21   - Unknown word (nonaliased)   -- aliased = (not 'nonaliased' in sys.argv and not
./Lib/platform.py:13:70     - Unknown word (lemburg)    -- and assign them to "lemburg".
./Lib/platform.py:179:22    - Unknown word (confstr)    -- ver = os.confstr('CS_GNU_LIBC_VERSION
./Lib/platform.py:212:13    - Unknown word (libcinit)   -- libcinit, glibc, glibcversion
./Lib/platform.py:212:30    - Unknown word (glibcversion) -- libcinit, glibc, glibcversion, so, threads, soversion
./Lib/platform.py:212:57    - Unknown word (soversion)    -- glibcversion, so, threads, soversion = [
./Lib/platform.py:23:18     - Unknown word (Waldman)    -- # Charles G Waldman, David Arnold, Gordon
./Lib/platform.py:24:45     - Unknown word (Laningham)  -- Cliff Crawford, Ivan Van Laningham, Josef
./Lib/platform.py:25:41     - Unknown word (Putland)    -- Randall Hopper, Karl Putland, John Farrell, Greg
./Lib/platform.py:25:8      - Unknown word (Betancourt) -- # Betancourt, Randall Hopper, Karl
./Lib/platform.py:26:56     - Unknown word (Levinson)   -- Thomas Heller, Mark R. Levinson, Mark
./Lib/platform.py:26:8      - Unknown word (Andruk)     -- # Andruk, Just van Rossum, Thomas
./Lib/platform.py:27:22     - Unknown word (Tutt)       -- Hammond, Bill Tutt, Hans Nowak, Uwe Zessin
./Lib/platform.py:27:33     - Unknown word (Nowak)      -- Hammond, Bill Tutt, Hans Nowak, Uwe Zessin (OpenVMS
./Lib/platform.py:27:44     - Unknown word (Zessin)     -- Tutt, Hans Nowak, Uwe Zessin (OpenVMS support),
./Lib/platform.py:33:23     - Unknown word (checkin)    -- <see CVS and SVN checkin messages for history
./Lib/platform.py:340:35    - Unknown word (TUAP)         -- win32_edition() in ('IoTUAP', 'NanoServer', 'WindowsCoreH
./Lib/platform.py:352:13    - Unknown word (cvkey)        -- cvkey = r'SOFTWARE\Microsoft
./Lib/platform.py:424:5     - Unknown word (versioninfo)  -- versioninfo = ('', '', '')
./Lib/platform.py:452:11    - Unknown word (getprop)      -- def _java_getprop(name, default):
./Lib/platform.py:463:37    - Unknown word (vminfo)       -- release='', vendor='', vminfo=('', '', ''), osinfo
./Lib/platform.py:463:58    - Unknown word (osinfo)       -- vminfo=('', '', ''), osinfo=('', '', '')):
./Lib/platform.py:48:36     - Unknown word (untabified) -- some fixes for WinCE; untabified the source file
./Lib/platform.py:50:22     - Unknown word (getsyi)     -- vms_lib.getsyi() configured
./Lib/platform.py:59:30     - Unknown word (syscmd)     -- workarounds in _syscmd_ver() -- still not
./Lib/platform.py:670:9     - Unknown word (fileout)      -- fileout = _syscmd_file(executable
./Lib/platform.py:744:13    - Unknown word (csid)         -- csid, cpu_number = vms_lib
./Lib/platform.py:949:50    - Unknown word (amdk)         -- processor name, e.g. 'amdk6'
./Lib/platform.py:963:26    - Unknown word (buildno)      -- r'\(#?([^,]+)' # "(#buildno"
./Lib/platform.py:964:30    - Unknown word (builddate)    -- ,\s*([\w ]*)'  # ", builddate"
./Lib/platform.py:965:40    - Unknown word (buildtime)    -- ]*))?)?\)\s*' # ", buildtime)<space>"
./Lib/platform.py:968:2     - Unknown word (ironpython)   -- _ironpython_sys_version_parser
./Lib/plistlib.py:112:23    - Unknown word (maxlinelength) -- def _encode_base64(s, maxlinelength=76):
./Lib/plistlib.py:181:68    - Unknown word (vulnerabilies) -- declarations to avoid XML vulnerabilies in expat.
./Lib/plistlib.py:182:51    - Unknown word (declerations)  -- don't contain those declerations, and Apple's plutil
./Lib/plistlib.py:182:77    - Unknown word (plutil)        -- declerations, and Apple's plutil tool does not
./Lib/plistlib.py:31:35     - Unknown word (ssig)       -- aUnicodeValue = "M\xe4ssig, Ma\xdf",
./Lib/plistlib.py:463:15    - Unknown word (refid)         -- # refid->offset...
./Lib/plistlib.py:473:35    - Unknown word (BBQQQ)         -- = struct.unpack('>6xBBQQQ', trailer)
./Lib/plistlib.py:548:37    - Unknown word (plists)        -- timestamp 0 of binary plists corresponds to 1/1/
./Lib/plistlib.py:574:27    - Unknown word (Archiver)      -- # used by Key-Archiver plist files
./Lib/plistlib.py:584:44    - Unknown word (ordset)        -- xB0 is documented as 'ordset', but is not actually
./Lib/plistlib.py:631:15    - Unknown word (objlist)       -- self._objlist = []
./Lib/plistlib.py:637:15    - Unknown word (objtable)      -- self._objtable = {}
./Lib/plistlib.py:638:15    - Unknown word (objidtable)    -- self._objidtable = {}
./Lib/plistlib.py:658:17    - Unknown word (refnum)        -- # Write refnum->object offset table
./Lib/plistlib.py:659:28    - Unknown word (getrefnum)     -- top_object = self._getrefnum(value)
./Lib/plistlib.py:671:40    - Unknown word (BBBQQQ)        -- write(struct.pack('>5xBBBQQQ', *trailer))
./Lib/plistlib.py:675:41    - Unknown word (subcontainers) -- containers to ensure that two subcontainers with the same contents
./Lib/plistlib.py:684:18    - Unknown word (objectreference) -- # Add to objectreference map
./Lib/posixpath.py:262:13    - Unknown word (pwent)      -- pwent = pwd.getpwnam(name
./Lib/posixpath.py:284:2     - Unknown word (varprog)    -- _varprog = None
./Lib/posixpath.py:285:2     - Unknown word (varprogb)   -- _varprogb = None
./Lib/posixpath.py:347:9     - Unknown word (dotdot)     -- dotdot = b'..'
./Lib/posixpath.py:398:17    - Unknown word (joinrealpath) -- path, ok = _joinrealpath(filename[:0], filename
./Lib/posixpath.py:431:9     - Unknown word (newpath)      -- newpath = join(path, name)
./Lib/pprint.py:246:9     - Unknown word (endchar)     -- endchar = ',)' if len(object
./Lib/pprint.py:381:9     - Unknown word (delimnl)     -- delimnl = ',\n' + ' ' * indent
./Lib/pprint.py:532:32    - Unknown word (smaxlen)     -- stream.write('],\n%smaxlen=%s)' % (' ' * indent
./Lib/pprint.py:584:17    - Unknown word (krepr)       -- krepr, kreadable, krecur
./Lib/pprint.py:584:24    - Unknown word (kreadable)   -- krepr, kreadable, krecur = self.format
./Lib/pprint.py:584:35    - Unknown word (krecur)      -- krepr, kreadable, krecur = self.format(
./Lib/pprint.py:586:17    - Unknown word (vrepr)       -- vrepr, vreadable, vrecur
./Lib/pprint.py:586:24    - Unknown word (vreadable)   -- vrepr, vreadable, vrecur = self.format
./Lib/pprint.py:586:35    - Unknown word (vrecur)      -- vrepr, vreadable, vrecur = self.format(
./Lib/pprint.py:619:17    - Unknown word (orepr)       -- orepr, oreadable, orecur
./Lib/pprint.py:619:24    - Unknown word (oreadable)   -- orepr, oreadable, orecur = self.format
./Lib/pprint.py:619:35    - Unknown word (orecur)      -- orepr, oreadable, orecur = self.format(
./Lib/pprint.py:81:55     - Unknown word (unorderable) -- functions when sorting unorderable objects.
./Lib/pty.py:124:6     - Unknown word (writen)         -- def _writen(fd, data):
./Lib/pty.py:141:16    - Unknown word (wfds)           -- rfds, _wfds, _xfds = select(fds
./Lib/pty.py:141:23    - Unknown word (xfds)           -- rfds, _wfds, _xfds = select(fds, [], [
./Lib/pty.py:56:15     - Unknown word (pqrstuvwxyz) -- for x in 'pqrstuvwxyzPQRST':
./Lib/pty.py:56:26     - Unknown word (PQRST)       -- for x in 'pqrstuvwxyzPQRST':
./Lib/pty.py:69:12     - Unknown word (filedescriptor) -- opened filedescriptor.
./Lib/pty.py:78:32     - Unknown word (ptem)           -- ioctl(result, I_PUSH, "ptem")
./Lib/pty.py:79:32     - Unknown word (ldterm)         -- ioctl(result, I_PUSH, "ldterm")
./Lib/pty.py:7:17      - Unknown word (Lumholt)    -- # Author: Steen Lumholt -- with additions by
./Lib/pty.py:89:22     - Unknown word (forkpty)        -- pid, fd = os.forkpty()
./Lib/pty.py:95:20     - Unknown word (setsid)         -- os.setsid()
./Lib/py_compile.py:49:13     - Unknown word (tbtext)     -- tbtext = ''.join(traceback
./Lib/py_compile.py:79:43     - Unknown word (doraise)    -- cfile=None, dfile=None, doraise=False, optimize=-1,
./Lib/pydoc.py:1064:39   - Unknown word (overstriking)     -- a string in bold by overstriking."""
./Lib/pydoc.py:1204:13   - Unknown word (makename)         -- def makename(c, m=object.__module
./Lib/pydoc.py:1507:9    - Unknown word (getchar)          -- getchar = lambda: sys.stdin
./Lib/pydoc.py:1579:9    - Unknown word (nextmodule)       -- nextmodule = safeimport('.'.join
./Lib/pydoc.py:1670:15   - Unknown word (seealso)          -- # (label, seealso-items). The "label
./Lib/pydoc.py:1675:51   - Unknown word (pyspecific)       -- labels in Doc/tools/pyspecific.py and
./Lib/pydoc.py:1717:6    - Unknown word (strprefixes)      -- _strprefixes = [p + q for p in (
./Lib/pydoc.py:1938:9    - Unknown word (colw)             -- colw = width // columns
./Lib/pydoc.py:194:7     - Unknown word (Namedtuples) -- # Namedtuples have public fields and
./Lib/pydoc.py:2003:10   - Unknown word (gettopic)         -- def _gettopic(self, topic, more_xrefs
./Lib/pydoc.py:2066:11   - Unknown word (interruptible)    -- """An interruptible scanner that searches
./Lib/pydoc.py:2140:19   - Unknown word (urlhandler)       -- def _start_server(urlhandler, port):
./Lib/pydoc.py:2160:26   - Unknown word (serverthread)     -- You can then use serverthread.port to get the port
./Lib/pydoc.py:221:5     - Unknown word (keyfunc)     -- keyfunc = lambda attr: (field
./Lib/pydoc.py:2260:17   - Unknown word (docsvr)           -- docsvr = DocServer(self.port
./Lib/pydoc.py:2351:13   - Unknown word (bltinlink)        -- def bltinlink(name):
./Lib/pydoc.py:2447:14   - Unknown word (topicpage)        -- def html_topicpage(topic):
./Lib/pydoc.py:2450:9    - Unknown word (htmlhelp)         -- htmlhelp = Helper(buf, buf)
./Lib/pydoc.py:2473:14   - Unknown word (getobj)           -- def html_getobj(url):
./Lib/pydoc.py:254:5     - Unknown word (lastupdate)  -- lastupdate, result = cache.get
./Lib/pydoc.py:2558:48   - Unknown word (rowser)           -- Server commands: [b]rowser, [q]uit'
./Lib/pydoc.py:318:22    - Unknown word (forceload)   -- def safeimport(path, forceload=0, cache={}):
./Lib/pydoc.py:408:9     - Unknown word (docloc)      -- docloc = os.environ.get("PYTHONDOCS
./Lib/pydoc.py:42:41     - Unknown word (manpy)      -- original creator of manpy.
./Lib/pydoc.py:42:7      - Unknown word (Burnette)   -- Tommy Burnette, the original creator
./Lib/pydoc.py:432:14    - Unknown word (maxlist)     -- self.maxlist = self.maxtuple = 2
./Lib/pydoc.py:432:29    - Unknown word (maxtuple)    -- self.maxlist = self.maxtuple = 20
./Lib/pydoc.py:433:14    - Unknown word (maxdict)     -- self.maxdict = 10
./Lib/pydoc.py:434:14    - Unknown word (maxstring)   -- self.maxstring = self.maxother = 1
./Lib/pydoc.py:434:31    - Unknown word (maxother)    -- self.maxstring = self.maxother = 100
./Lib/pydoc.py:43:35     - Unknown word (onlinehelp) -- for all his work on onlinehelp.
./Lib/pydoc.py:43:6      - Unknown word (Prescod)    -- Paul Prescod, for all his work on
./Lib/pydoc.py:451:9     - Unknown word (testrepr)    -- testrepr = repr(test)
./Lib/pydoc.py:456:32    - Unknown word (abfnrtv)     -- return re.sub(r'((\\[\\abfnrtv\'"]|\\[0-9]..|\\x..
./Lib/pydoc.py:489:30    - Unknown word (fgcol)       -- heading(self, title, fgcol, bgcol, extras=''):
./Lib/pydoc.py:489:37    - Unknown word (bgcol)       -- self, title, fgcol, bgcol, extras=''):
./Lib/pydoc.py:494:5     - Unknown word (valign)      -- <td valign=bottom>&nbsp;<br>
./Lib/pydoc.py:513:22    - Unknown word (rowspan)     -- tr bgcolor="%s"><td rowspan=2>%s</td>
./Lib/pydoc.py:566:26    - Unknown word (modpkginfo)  -- def modpkglink(self, modpkginfo):
./Lib/pydoc.py:601:36    - Unknown word (selfdot)     -- all, scheme, rfc, pep, selfdot, name = match.groups
./Lib/pydoc.py:660:9     - Unknown word (linkedname)  -- linkedname = '.'.join(links + parts
./Lib/pydoc.py:689:18    - Unknown word (cdict)       -- classes, cdict = [], {}
./Lib/pydoc.py:705:16    - Unknown word (fdict)       -- funcs, fdict = [], {}
./Lib/pydoc.py:724:13    - Unknown word (modpkgs)     -- modpkgs = []
./Lib/pydoc.py:781:22    - Unknown word (needone)     -- self.needone = 0
./Lib/pydoc.py:809:36    - Unknown word (docdescriptor) -- push(self._docdescriptor(name, value, mod))
./Lib/pydoc.py:80:5      - Unknown word (normdirs)   -- normdirs = []
./Lib/pydoc.py:812:57    - Unknown word (mdict)         -- funcs, classes, mdict, object))
./Lib/pydoc.py:816:13    - Unknown word (spilldescriptors) -- def spilldescriptors(msg, attrs, predicate
./Lib/pydoc.py:825:13    - Unknown word (spilldata)        -- def spilldata(msg, attrs, predicate
./Lib/pydoc.py:83:9      - Unknown word (normdir)    -- normdir = os.path.normcase(dir
./Lib/pydoc.py:928:9     - Unknown word (skipdocs)         -- skipdocs = 0
./Lib/pydoc.py:930:13    - Unknown word (imclass)          -- imclass = object.__self__._
./Lib/pydoc.py:945:17    - Unknown word (reallink)         -- reallink = '<a href="#%s">%s
./Lib/pydoc.py:952:9     - Unknown word (argspec)          -- argspec = None
./Lib/pydoc_data/_pydoc.css:2:18      - Unknown word (pydoc)      -- CSS file for pydoc.
./Lib/pydoc_data/topics.py:10123:28  - Unknown word (uppercasing)     -- ' The uppercasing algorithm used is described
./Lib/pydoc_data/topics.py:10150:52  - Unknown word (shortstring)     -- ::= [stringprefix](shortstring | longstring)\n'
./Lib/pydoc_data/topics.py:10150:66  - Unknown word (longstring)      -- stringprefix](shortstring | longstring)\n'
./Lib/pydoc_data/topics.py:10154:42  - Unknown word (shortstringitem) -- shortstring ::= "\'" shortstringitem* "\'" | \'"\' '
./Lib/pydoc_data/topics.py:10156:46  - Unknown word (longstringitem)  -- longstring ::= "\'\'\'" longstringitem* "\'\'\'" | '
./Lib/pydoc_data/topics.py:10158:37  - Unknown word (shortstringchar) -- shortstringitem ::= shortstringchar | stringescapeseq\n
./Lib/pydoc_data/topics.py:10158:55  - Unknown word (stringescapeseq) -- = shortstringchar | stringescapeseq\n'
./Lib/pydoc_data/topics.py:10159:37  - Unknown word (longstringchar)  -- longstringitem ::= longstringchar | stringescapeseq\n
./Lib/pydoc_data/topics.py:10165:36  - Unknown word (bytesprefix)     -- bytesliteral ::= bytesprefix(shortbytes | longbytes
./Lib/pydoc_data/topics.py:10165:48  - Unknown word (shortbytes)      -- ytesliteral ::= bytesprefix(shortbytes | longbytes)\n'
./Lib/pydoc_data/topics.py:10165:61  - Unknown word (longbytes)       -- bytesprefix(shortbytes | longbytes)\n'
./Lib/pydoc_data/topics.py:10168:41  - Unknown word (shortbytesitem)  -- shortbytes ::= "\'" shortbytesitem* "\'" | \'"\' '
./Lib/pydoc_data/topics.py:10170:45  - Unknown word (longbytesitem)   -- longbytes ::= "\'\'\'" longbytesitem* "\'\'\'" | \'"""\'
./Lib/pydoc_data/topics.py:10172:36  - Unknown word (shortbyteschar)  -- shortbytesitem ::= shortbyteschar | bytesescapeseq\n'
./Lib/pydoc_data/topics.py:10172:53  - Unknown word (bytesescapeseq)  -- := shortbyteschar | bytesescapeseq\n'
./Lib/pydoc_data/topics.py:10173:36  - Unknown word (longbyteschar)   -- longbytesitem ::= longbyteschar | bytesescapeseq\n'
./Lib/pydoc_data/topics.py:10227:33  - Unknown word (codebases)       -- 'Python 2.x and 3.x codebases. See **PEP 414** for
./Lib/pydoc_data/topics.py:1091:3    - Unknown word (bltin)         -- 'bltin-code-objects': 'Code
./Lib/pydoc_data/topics.py:11172:55  - Unknown word (aiterator)       -- asynchronous iterator’s "aiterator.__anext__()"\n'
./Lib/pydoc_data/topics.py:1118:28   - Unknown word (Slicings)      -- 'Slicings). It supports\n'
./Lib/pydoc_data/topics.py:11607:3   - Unknown word (typesfunctions)  -- 'typesfunctions': 'Functions\n'
./Lib/pydoc_data/topics.py:11624:3   - Unknown word (typesmapping)    -- 'typesmapping': 'Mapping Types —
./Lib/pydoc_data/topics.py:11657:20  - Unknown word (sjoerd)          -- "'sjoerd':\n"
./Lib/pydoc_data/topics.py:11895:23  - Unknown word (dictview)        -- 'len(dictview)\n'
./Lib/pydoc_data/topics.py:11981:3   - Unknown word (typesmethods)    -- 'typesmethods': 'Methods\n'
./Lib/pydoc_data/topics.py:12038:3   - Unknown word (typesmodules)    -- 'typesmodules': 'Modules\n'
./Lib/pydoc_data/topics.py:12075:3   - Unknown word (typesseq)        -- 'typesseq': 'Sequence Types —
./Lib/pydoc_data/topics.py:12179:64  - Unknown word (specialised)     -- the general case, some specialised '
./Lib/pydoc_data/topics.py:12273:50  - Unknown word (overallocation)  -- and have an efficient overallocation mechanism\n'
./Lib/pydoc_data/topics.py:12716:25  - Unknown word (subranges)       -- 'items and subranges as needed).\n'
./Lib/pydoc_data/topics.py:12769:23  - Unknown word (linspace)        -- ' * The linspace recipe shows how to
./Lib/pydoc_data/topics.py:1376:17   - Unknown word (unpackings)    -- '"**" unpackings, positional arguments
./Lib/pydoc_data/topics.py:1431:54   - Unknown word (Metaclasses)   -- of base classes (see Metaclasses for more\n'
./Lib/pydoc_data/topics.py:1745:33   - Unknown word (supersets)     -- ' another, nor supersets of one another).  Accordingly
./Lib/pydoc_data/topics.py:2388:46   - Unknown word (defparameter)  -- parameter_list ::= defparameter ("," defparameter)*
./Lib/pydoc_data/topics.py:2389:36   - Unknown word (starargs)      -- "," [parameter_list_starargs]]\n'
./Lib/pydoc_data/topics.py:2744:18   - Unknown word (aexit)         -- ' aexit = type(mgr).__aexit
./Lib/pydoc_data/topics.py:2745:18   - Unknown word (aenter)        -- ' aenter = type(mgr).__aenter
./Lib/pydoc_data/topics.py:291:50    - Unknown word (augtarget)    -- assignment_stmt ::= augtarget augop '
./Lib/pydoc_data/topics.py:291:60    - Unknown word (augop)        -- assignment_stmt ::= augtarget augop '
./Lib/pydoc_data/topics.py:3219:24   - Unknown word (ssize)         -- '"Py_ssize_t". This\n'
./Lib/pydoc_data/topics.py:3377:33   - Unknown word (myscript)      -- ' python3 -m pdb myscript.py\n'
./Lib/pydoc_data/topics.py:4010:62   - Unknown word (slicings)      -- references, subscriptions and slicings is '
./Lib/pydoc_data/topics.py:4183:3    - Unknown word (execmodel)     -- 'execmodel': 'Execution model\n
./Lib/pydoc_data/topics.py:4504:3    - Unknown word (exprlists)     -- 'exprlists': 'Expression lists
./Lib/pydoc_data/topics.py:4547:49   - Unknown word (exponentfloat) -- loatnumber ::= pointfloat | exponentfloat\n'
./Lib/pydoc_data/topics.py:4548:37   - Unknown word (digitpart)     -- pointfloat ::= [digitpart] fraction | digitpart
./Lib/pydoc_data/topics.py:459:35    - Unknown word (stringliteral) -- ' literal ::= stringliteral | bytesliteral\n'
./Lib/pydoc_data/topics.py:459:51    - Unknown word (bytesliteral)  -- ::= stringliteral | bytesliteral\n'
./Lib/pydoc_data/topics.py:4642:3    - Unknown word (formatstrings) -- 'formatstrings': 'Format String Syntax
./Lib/pydoc_data/topics.py:4813:20   - Unknown word (formattable)   -- 'formattable type may define how
./Lib/pydoc_data/topics.py:5169:49   - Unknown word (uppercased)    -- | and NaN are uppercased, '
./Lib/pydoc_data/topics.py:5232:47   - Unknown word (abra)          -- '{0}{1}{0}'.format('abra', 'cad')   # arguments
./Lib/pydoc_data/topics.py:55:33     - Unknown word (attributeref) -- ' | attributeref\n'
./Lib/pydoc_data/topics.py:5673:27   - Unknown word (titlecase)     -- '* *Lt* - titlecase letters\n'
./Lib/pydoc_data/topics.py:5681:27   - Unknown word (nonspacing)    -- '* *Mn* - nonspacing marks\n'
./Lib/pydoc_data/topics.py:5702:34   - Unknown word (loewis)        -- 'potsdam.de/home/loewis/table-3131.html.\n'
./Lib/pydoc_data/topics.py:5953:64   - Unknown word (subpkg)        -- you execute "from ..subpkg2 import '
./Lib/pydoc_data/topics.py:6107:35   - Unknown word (decinteger)    -- integer ::= decinteger | bininteger | octinteger
./Lib/pydoc_data/topics.py:6107:48   - Unknown word (bininteger)    -- ::= decinteger | bininteger | octinteger | '
./Lib/pydoc_data/topics.py:6107:61   - Unknown word (octinteger)    -- decinteger | bininteger | octinteger | '
./Lib/pydoc_data/topics.py:6108:15   - Unknown word (hexinteger)    -- 'hexinteger\n'
./Lib/pydoc_data/topics.py:6109:35   - Unknown word (nonzerodigit)  -- decinteger ::= nonzerodigit (["_"] digit)* | "0
./Lib/pydoc_data/topics.py:6111:58   - Unknown word (bindigit)      -- ("b" | "B") (["_"] bindigit)+\n'
./Lib/pydoc_data/topics.py:6112:58   - Unknown word (octdigit)      -- ("o" | "O") (["_"] octdigit)+\n'
./Lib/pydoc_data/topics.py:6113:58   - Unknown word (hexdigit)      -- ("x" | "X") (["_"] hexdigit)+\n'
./Lib/pydoc_data/topics.py:6152:28   - Unknown word (nocond)        -- ' lambda_expr_nocond ::= "lambda" [parameter
./Lib/pydoc_data/topics.py:6635:49   - Unknown word (Neumann’s)     -- in conformance to Von Neumann’s model of a “stored\n
./Lib/pydoc_data/topics.py:6849:65   - Unknown word (roundoff)      -- true numerically due to roundoff. For '
./Lib/pydoc_data/topics.py:6890:28   - Unknown word (precomposed)   -- ' *precomposed character* at code position
./Lib/pydoc_data/topics.py:6955:24   - Unknown word (unparenthesized) -- 'Thus, in an unparenthesized sequence of power and
./Lib/pydoc_data/topics.py:7011:62   - Unknown word (tracebackobj)    -- occurred").with_traceback(tracebackobj)\n'
./Lib/pydoc_data/topics.py:7425:3    - Unknown word (specialattrs)    -- 'specialattrs': 'Special Attributes
./Lib/pydoc_data/topics.py:7510:3    - Unknown word (specialnames)    -- 'specialnames': 'Special method names
./Lib/pydoc_data/topics.py:8625:19   - Unknown word (customisation)   -- 'customisation steps are invoked after
./Lib/pydoc_data/topics.py:9312:47   - Unknown word (optimisations)   -- significant scope for speed optimisations within the '
./Lib/pydoc_data/topics.py:9353:64   - Unknown word (Casefolded)      -- copy of the string. Casefolded '
./Lib/pydoc_data/topics.py:9355:33   - Unknown word (caseless)        -- ' used for caseless matching.\n'
./Lib/pydoc_data/topics.py:9357:24   - Unknown word (Casefolding)     -- ' Casefolding is similar to lowercasing
./Lib/pydoc_data/topics.py:9367:28   - Unknown word (casefolding)     -- ' The casefolding algorithm is described
./Lib/pydoc_data/topics.py:9373:40   - Unknown word (fillchar)        -- 'str.center(width[, fillchar])\n'
./Lib/pydoc_data/topics.py:9594:69   - Unknown word (Kharosthi)       -- in base 10, like the Kharosthi '
./Lib/pydoc_data/topics.py:9637:59   - Unknown word (Nonprintable)    -- empty, false otherwise.  Nonprintable '
./Lib/pydoc_data/topics.py:9665:55   - Unknown word (titlecased)      -- true if the string is a titlecased string and '
./Lib/pydoc_data/topics.py:9725:57   - Unknown word (cmowz)           -- example.com'.lstrip('cmowz.')\n"
./Lib/pydoc_data/topics.py:9839:28   - Unknown word (mississ)         -- " 'mississ'\n"
./Lib/quopri.py:110:5     - Unknown word (infp)       -- infp = BytesIO(s)
./Lib/quopri.py:55:9      - Unknown word (odata)      -- odata = b2a_qp(data, quotetabs
./Lib/quopri.py:69:5      - Unknown word (prevline)   -- prevline = None
./Lib/random.py:191:22    - Unknown word (internalstate) -- version, internalstate, self.gauss_next = state
./Lib/random.py:23:12     - Unknown word (lognormal)  -- lognormal
./Lib/random.py:28:12     - Unknown word (Weibull)    -- Weibull
./Lib/random.py:316:13    - Unknown word (istart)        -- istart = _index(start)
./Lib/random.py:338:13    - Unknown word (istop)         -- istop = _index(stop)
./Lib/random.py:33:16     - Unknown word (Mises)      -- von Mises
./Lib/random.py:351:13    - Unknown word (istep)         -- istep = _index(step)
./Lib/random.py:35:33     - Unknown word (Mersenne)   -- notes on the underlying Mersenne Twister core generator
./Lib/random.py:426:56    - Unknown word (subslices)     -- second place winners (the subslices).
./Lib/random.py:457:51    - Unknown word (reselections)  -- suffer from frequent reselections.
./Lib/random.py:45:10     - Unknown word (Baddeley)   -- # Adrian Baddeley. Adapted by Raymond
./Lib/random.py:497:9     - Unknown word (setsize)       -- setsize = 21        # size of
./Lib/random.py:589:16    - Unknown word (Kinderman)     -- # Uses Kinderman and Monahan method.
./Lib/random.py:589:30    - Unknown word (Monahan)       -- Uses Kinderman and Monahan method. Reference: Kinderman
./Lib/random.py:621:20    - Unknown word (Meertens)      -- # (Lambert Meertens)
./Lib/random.py:652:27    - Unknown word (lambd)         -- def expovariate(self, lambd):
./Lib/random.py:682:21    - Unknown word (Magnus)        -- # Thanks to Magnus Kessler for a correction
./Lib/random.py:682:28    - Unknown word (Kessler)       -- # Thanks to Magnus Kessler for a correction to
./Lib/random.py:733:27    - Unknown word (Cheng)         -- # Uses R.C.H. Cheng, "The generation of
./Lib/random.py:737:13    - Unknown word (ainv)          -- ainv = _sqrt(2.0 * alpha
./Lib/random.py:785:21    - Unknown word (Frohne's)      -- ## for Ivan Frohne's insightful analysis
./Lib/random.py:796:31    - Unknown word (Janne)         -- This version due to Janne Sinkkonen, and matches
./Lib/random.py:796:37    - Unknown word (Sinkkonen)     -- version due to Janne Sinkkonen, and matches all the
./Lib/random.py:843:9     - Unknown word (numbytes)      -- numbytes = (k + 7) // 8
./Lib/random.py:907:5     - Unknown word (xbar)          -- xbar = mean(data)
./Lib/re.py:302:24    - Unknown word (isstring)   -- if not sre_compile.isstring(pattern):
./Lib/re.py:325:6     - Unknown word (subx)       -- def _subx(pattern, template):
./Lib/re.py:358:21    - Unknown word (opengroup)  -- gid = s.opengroup()
./Lib/re.py:362:15    - Unknown word (closegroup) -- s.closegroup(gid, p[-1])
./Lib/re.py:377:37    - Unknown word (lastindex)  -- action = self.lexicon[m.lastindex-1][1]
./Lib/re.py:47:9      - Unknown word (Lmsux)      -- (?aiLmsux) The letters set the
./Lib/reprlib.py:113:13    - Unknown word (keyrepr)      -- keyrepr = repr1(key, newlevel
./Lib/reprlib.py:114:13    - Unknown word (valrepr)      -- valrepr = repr1(x[key], newlevel
./Lib/reprlib.py:39:14     - Unknown word (maxlevel)   -- self.maxlevel = 6
./Lib/reprlib.py:42:14     - Unknown word (maxarray)   -- self.maxarray = 5
./Lib/reprlib.py:44:14     - Unknown word (maxset)     -- self.maxset = 6
./Lib/reprlib.py:45:14     - Unknown word (maxfrozenset) -- self.maxfrozenset = 6
./Lib/reprlib.py:46:14     - Unknown word (maxdeque)     -- self.maxdeque = 6
./Lib/reprlib.py:48:14     - Unknown word (maxlong)      -- self.maxlong = 40
./Lib/reprlib.py:64:53     - Unknown word (maxiter)      -- level, left, right, maxiter, trail=''):
./Lib/reprlib.py:69:13     - Unknown word (newlevel)     -- newlevel = level - 1
./Lib/rlcompleter.py:123:13    - Unknown word (nspace)     -- for nspace in [self.namespace,
./Lib/rlcompleter.py:134:9     - Unknown word (evaluable)  -- evaluable in self.namespace, it
./Lib/rlcompleter.py:148:13    - Unknown word (thisobject) -- thisobject = eval(expr, self.namespace
./Lib/rlcompleter.py:162:13    - Unknown word (noprefix)   -- noprefix = '_'
./Lib/rlcompleter.py:18:21     - Unknown word (cbreak)     -- device in raw (or cbreak) mode, printing a traceback
./Lib/runpy.py:170:3     - Unknown word (mainmodule) -- # mainmodule.c, but couldn't be changed
./Lib/sched.py:37:1      - Unknown word (timefunc)   -- timefunc function passed to the
./Lib/sched.py:53:40     - Unknown word (delayfunc)  -- self, timefunc=_time, delayfunc=time.sleep):
./Lib/secrets.py:21:2      - Unknown word (sysrand)    -- _sysrand = SystemRandom()
./Lib/secrets.py:68:6      - Unknown word (Drmhze)     -- 'Drmhze6EPcv0fN_81Bj-nA'
./Lib/selectors.py:343:50    - Unknown word (devpoll)    -- between poll, epoll and devpoll selectors."""
./Lib/selectors.py:443:11    - Unknown word (Epoll)      -- class EpollSelector(_PollLikeSelector
./Lib/selectors.py:462:37    - Unknown word (maxevents)  -- epoll_wait() expects `maxevents` to be greater than
./Lib/selectors.py:491:11    - Unknown word (Devpoll)    -- class DevpollSelector(_PollLikeSelector
./Lib/selectors.py:507:11    - Unknown word (Kqueue)     -- class KqueueSelector(_BaseSelectorImpl
./Lib/selectors.py:521:34    - Unknown word (kevent)     -- kev = select.kevent(key.fd, select.KQ_FILTER
./Lib/shelve.py:181:58    - Unknown word (bsddb)       -- opened using one of the "bsddb"
./Lib/shelve.py:182:41    - Unknown word (hashopen)    -- routines (i.e. bsddb.hashopen, bsddb.btopen or
./Lib/shelve.py:182:57    - Unknown word (btopen)      -- bsddb.hashopen, bsddb.btopen or
./Lib/shelve.py:183:11    - Unknown word (rnopen)      -- bsddb.rnopen) and passed to the constructo
./Lib/shelve.py:33:23     - Unknown word (anitem)     -- d[key].append(anitem)
./Lib/shelve.py:43:10     - Unknown word (writeback)  -- argument writeback=True in the call to
./Lib/shelve.py:85:18     - Unknown word (keyencoding) -- keyencoding="utf-8"):
./Lib/shlex.py:135:9     - Unknown word (escapedstate)                     -- escapedstate = ' '
./Lib/shlex.py:37:28     - Unknown word (abcdfeghijklmnopqrstuvwxyz) -- self.wordchars = ('abcdfeghijklmnopqrstuvwxyz'
./Lib/shlex.py:40:33     - Unknown word (ßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ) -- self.wordchars += ('ßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ'
./Lib/shlex.py:41:33     - Unknown word (ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞ)   -- 'ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞ')
./Lib/shlex.py:46:14     - Unknown word (escapedquotes)                    -- self.escapedquotes = '"'
./Lib/shlex.py:48:14     - Unknown word (pushback)                         -- self.pushback = deque()
./Lib/shlex.py:52:14     - Unknown word (filestack)                        -- self.filestack = deque()
./Lib/shlex.py:78:27     - Unknown word (newstream)                        -- def push_source(self, newstream, newfile=None):
./Lib/shlex.py:7:33      - Unknown word (Niemeyer)   -- interface by Gustavo Niemeyer, April 2003.
./Lib/shutil.py:1157:9    - Unknown word (tarobj)      -- tarobj = tarfile.open(filename
./Lib/shutil.py:119:36    - Unknown word (ppend)      -- cannot be open in "a"(ppend) mode
./Lib/shutil.py:1235:13   - Unknown word (diskusage)   -- _ntuple_diskusage = collections.namedtuple
./Lib/shutil.py:1235:6    - Unknown word (ntuple)      -- _ntuple_diskusage = collections
./Lib/shutil.py:1249:36   - Unknown word (bfree)       -- (st.f_blocks - st.f_bfree) * st.f_frsize
./Lib/shutil.py:1263:27   - Unknown word (getdiskusage) -- total, free = nt._getdiskusage(path)
./Lib/shutil.py:1426:17   - Unknown word (thefile)      -- for thefile in files:
./Lib/shutil.py:309:17    - Unknown word (listxattr)  -- if hasattr(os, 'listxattr'):
./Lib/shutil.py:310:10    - Unknown word (copyxattr)  -- def _copyxattr(src, dst, *, follow
./Lib/shutil.py:327:28    - Unknown word (getxattr)   -- value = os.getxattr(src, name, follow_symlinks
./Lib/shutil.py:328:20    - Unknown word (setxattr)   -- os.setxattr(dst, name, value, follow
./Lib/shutil.py:386:19    - Unknown word (fchownat)   -- # * fchownat() is unavailable or
./Lib/shutil.py:459:9     - Unknown word (srcentry)   -- use_srcentry = copy_function is copy
./Lib/shutil.py:464:9     - Unknown word (srcname)    -- srcname = os.path.join(src,
./Lib/shutil.py:466:9     - Unknown word (srcobj)     -- srcobj = srcentry if use_srcentry
./Lib/shutil.py:476:17    - Unknown word (linkto)     -- linkto = os.readlink(srcname
./Lib/shutil.py:54:45     - Unknown word (fcopyfile)  -- and hasattr(posix, "_fcopyfile") # macOS
./Lib/shutil.py:797:17    - Unknown word (destinsrc)  -- if _destinsrc(src, dst):
./Lib/shutil.py:86:8      - Unknown word (Giveup)     -- class _GiveupOnFastCopy(Exception
./Lib/shutil.py:91:6      - Unknown word (fastcopy)   -- def _fastcopy_fcopyfile(fsrc, fdst
./Lib/shutil.py:968:62    - Unknown word (unarchiving) -- formats for archiving and unarchiving.
./Lib/shutil.py:96:9      - Unknown word (infd)       -- infd = fsrc.fileno()
./Lib/shutil.py:97:9      - Unknown word (outfd)      -- outfd = fdst.fileno()
./Lib/signal.py:20:14     - Unknown word (Sigmasks)   -- 'Sigmasks', __name__,
./Lib/signal.py:55:12     - Unknown word (signalnum)  -- def signal(signalnum, handler):
./Lib/signal.py:73:5      - Unknown word (sigpending) -- if 'sigpending' in _globals:
./Lib/signal.py:79:5      - Unknown word (sigwait)    -- if 'sigwait' in _globals:
./Lib/signal.py:81:17     - Unknown word (sigset)     -- def sigwait(sigset):
./Lib/signal.py:82:9      - Unknown word (retsig)     -- retsig = _signal.sigwait(sigset
./Lib/site.py:126:14    - Unknown word (dircase)       -- dir, dircase = makepath(dir)
./Lib/site.py:134:11    - Unknown word (pathinfo)      -- def _init_pathinfo():
./Lib/site.py:140:20    - Unknown word (itemcase)      -- _, itemcase = makepath(item)
./Lib/site.py:147:16    - Unknown word (sitedir)       -- def addpackage(sitedir, name, known_paths)
./Lib/site.py:16:18     - Unknown word (pyvenv)     -- If a file named "pyvenv.cfg" exists one directory
./Lib/site.py:197:14    - Unknown word (sitedircase)   -- sitedir, sitedircase = makepath(sitedir)
./Lib/site.py:250:9     - Unknown word (joinuser)      -- def joinuser(*args):
./Lib/site.py:268:34    - Unknown word (pythonx)       -- RUSTPYTHON: we replace pythonx.y with rustpythonx.y
./Lib/site.py:268:49    - Unknown word (rustpythonx)   -- replace pythonx.y with rustpythonx.y
./Lib/site.py:326:5     - Unknown word (sitepackages)  -- sitepackages = []
./Lib/site.py:427:35    - Unknown word (inputrc)       -- is that there's no .inputrc file (or .editrc file
./Lib/site.py:427:53    - Unknown word (editrc)        -- no .inputrc file (or .editrc file in the case of
./Lib/site.py:460:15    - Unknown word (confs)         -- candidate_confs = [
./Lib/site.py:461:9     - Unknown word (conffile)      -- conffile for conffile in (
./Lib/site.py:63:1      - Unknown word (sitecustomize) -- sitecustomize, usercustomize or PYTHONSTART
./Lib/site.py:63:16     - Unknown word (usercustomize) -- sitecustomize, usercustomize or PYTHONSTARTUP.  Starting
./Lib/site.py:75:9      - Unknown word (sitebuiltins)  -- import _sitebuiltins
./Lib/smtpd.py:160:19    - Unknown word (dotsep)     -- self._dotsep = '.'
./Lib/smtpd.py:188:14    - Unknown word (rcpttos)    -- self.rcpttos = []
./Lib/smtpd.py:452:9     - Unknown word (keylen)     -- keylen = len(keyword)
./Lib/smtpd.py:457:10    - Unknown word (getaddr)    -- def _getaddr(self, arg):
./Lib/smtpd.py:4:41      - Unknown word (localport)  -- options] [localhost:localport [remotehost:remoteport
./Lib/smtpd.py:4:52      - Unknown word (remotehost) -- localhost:localport [remotehost:remoteport]]
./Lib/smtpd.py:4:63      - Unknown word (remoteport) -- localport [remotehost:remoteport]]
./Lib/smtpd.py:611:16    - Unknown word (recips)     -- print('recips:', self.rcpttos, file
./Lib/smtpd.py:644:24    - Unknown word (localaddr)  -- def __init__(self, localaddr, remoteaddr,
./Lib/smtpd.py:644:35    - Unknown word (remoteaddr) -- init__(self, localaddr, remoteaddr,
./Lib/smtpd.py:696:57    - Unknown word (transparencied) -- all. It has been `de-transparencied'
./Lib/smtpd.py:720:9     - Unknown word (inheaders)      -- inheaders = 1
./Lib/smtpd.py:725:17    - Unknown word (peerheader)     -- peerheader = 'X-Peer: ' + peer
./Lib/smtpd.py:808:9     - Unknown word (listnames)      -- listnames = []
./Lib/smtpd.py:812:17    - Unknown word (listname)       -- # listname
./Lib/smtpd.py:842:9     - Unknown word (mlists)         -- mlists = {}
./Lib/smtpd.py:854:13    - Unknown word (mlist)          -- mlist = mlists.get(listname
./Lib/smtpd.py:863:36    - Unknown word (toadmin)        -- msg.Enqueue(mlist, toadmin=1)
./Lib/smtpd.py:865:36    - Unknown word (toowner)        -- msg.Enqueue(mlist, toowner=1)
./Lib/smtpd.py:867:36    - Unknown word (torequest)      -- msg.Enqueue(mlist, torequest=1)
./Lib/smtpd.py:8:7       - Unknown word (nosetuid)   -- --nosetuid
./Lib/smtpd.py:919:9     - Unknown word (localspec)      -- localspec = 'localhost:8025'
./Lib/smtpd.py:920:9     - Unknown word (remotespec)     -- remotespec = 'localhost:25'
./Lib/smtpd.py:955:9     - Unknown word (lastdot)        -- lastdot = classname.rfind("
./Lib/smtpd.py:97:34     - Unknown word (aiosmtpd)   -- Python 3.12.  Please see aiosmtpd '
./Lib/sndhdr.py:121:9     - Unknown word (nframe)     -- nframe = data_size / frame
./Lib/sndhdr.py:145:5     - Unknown word (sbseek)     -- sbseek = get_short_le(h[20
./Lib/sndhdr.py:148:9     - Unknown word (ratecode)   -- ratecode = 256 - h[sbseek+4]
./Lib/sndhdr.py:183:9     - Unknown word (nsamples)   -- nsamples = get_long_le(h[8:1
./Lib/sndhdr.py:41:54     - Unknown word (hcom)       -- aifc', 'aiff', 'au','hcom',
./Lib/sndhdr.py:42:10     - Unknown word (sndt)       -- 'sndr', 'sndt', 'voc', 'wav', '8svx
./Lib/sndhdr.py:42:2      - Unknown word (sndr)       -- 'sndr', 'sndt', 'voc', 'wav
./Lib/socket.py:128:44    - Unknown word (nonsocket)         -- Socket operation on nonsocket."
./Lib/socket.py:163:24    - Unknown word (Winsock)           -- errorTab[10092] = "Winsock.dll version out of range
./Lib/socket.py:16:15     - Unknown word (Recieve)    -- recv_fds() -- Recieve file descriptors from
./Lib/socket.py:193:28    - Unknown word (flowspec)          -- errorTab[11017] = "QoS flowspec error."
./Lib/socket.py:21:1      - Unknown word (getservbyname) -- getservbyname() -- map a service name
./Lib/socket.py:22:1      - Unknown word (getprotobyname) -- getprotobyname() -- map a protocol
./Lib/socket.py:23:1      - Unknown word (ntohs)          -- ntohs(), ntohl() -- convert
./Lib/socket.py:23:10     - Unknown word (ntohl)          -- ntohs(), ntohl() -- convert 16, 32
./Lib/socket.py:24:1      - Unknown word (htons)          -- htons(), htonl() -- convert
./Lib/socket.py:264:17    - Unknown word (raddr)             -- raddr = self.getpeername(
./Lib/socket.py:27:8      - Unknown word (getdefaulttimeout) -- socket.getdefaulttimeout() -- get the default
./Lib/socket.py:28:8      - Unknown word (setdefaulttimeout) -- socket.setdefaulttimeout() -- set the default
./Lib/socket.py:291:53    - Unknown word (hostaddr)          -- address info is a pair (hostaddr, port).
./Lib/socket.py:316:9     - Unknown word (rawmode)           -- rawmode = ""
./Lib/socket.py:349:13    - Unknown word (sockno)            -- sockno = self.fileno()
./Lib/socket.py:355:17    - Unknown word (fsize)             -- fsize = os.fstat(fileno).st
./Lib/socket.py:488:17    - Unknown word (socketios)         -- def _decref_socketios(self):
./Lib/socket.py:563:33    - Unknown word (maxfds)            -- recv_fds(sock, bufsize, maxfds, flags=0):
./Lib/socket.py:660:11    - Unknown word (errnos)            -- _blocking_errnos = { EAGAIN, EWOULDBLOCK
./Lib/socket.py:793:28    - Unknown word (ipaddrs)           -- hostname, aliases, ipaddrs = gethostbyaddr(name
./Lib/socket.py:870:19    - Unknown word (dualstack)         -- dualstack_ipv6=False):
./Lib/socket.py:954:5     - Unknown word (addrlist)          -- addrlist = []
./Lib/socketserver.py:113:36    - Unknown word (Casson)     -- 2000 Luke Kenneth Casson Leighton <lkcl@samba
./Lib/socketserver.py:13:23     - Unknown word (datagrams)  -- - SOCK_DGRAM (datagrams, e.g. UDP)
./Lib/socketserver.py:240:46    - Unknown word (noblock)    -- self._handle_request_noblock()
./Lib/socketserver.py:562:68    - Unknown word (syscalls)   -- <defunct children>) syscalls instead
./Lib/socketserver.py:778:37    - Unknown word (getc)       -- slow for large data (a getc() call per byte); we
./Lib/socketserver.py:789:15    - Unknown word (nagle)      -- # Disable nagle algorithm for this socket
./Lib/sre_compile.py:120:22    - Unknown word (hascased)   -- charset, hascased = _optimize_charset
./Lib/sre_compile.py:180:32    - Unknown word (getwidth)   -- lo, hi = av[1].getwidth()
./Lib/sre_compile.py:205:13    - Unknown word (tailappend) -- tailappend = tail.append
./Lib/sre_compile.py:236:13    - Unknown word (skipyes)    -- skipyes = _len(code); emit(
./Lib/sre_compile.py:240:17    - Unknown word (skipno)     -- skipno = _len(code); emit(
./Lib/sre_compile.py:326:36    - Unknown word (Deseret)    -- # 10400-1044F (Deseret) and 118A0-118DF (Warang
./Lib/sre_compile.py:326:62    - Unknown word (Warang)     -- Deseret) and 118A0-118DF (Warang Citi),
./Lib/sre_compile.py:326:69    - Unknown word (Citi)       -- 118A0-118DF (Warang Citi),
./Lib/sre_compile.py:424:21    - Unknown word (subpattern) -- # check if this subpattern is a "simple" operator
./Lib/sre_compile.py:464:5     - Unknown word (prefixappend) -- prefixappend = prefix.append
./Lib/sre_compile.py:511:9     - Unknown word (charsetappend) -- charsetappend = charset.append
./Lib/sre_compile.py:776:5     - Unknown word (indexgroup)    -- indexgroup = [None] * p.state.groups
./Lib/sre_compile.py:79:5      - Unknown word (iscased)    -- iscased = None
./Lib/sre_compile.py:80:5      - Unknown word (tolower)    -- tolower = None
./Lib/sre_constants.py:67:6      - Unknown word (makecodes)  -- def _makecodes(names):
./Lib/sre_parse.py:101:9     - Unknown word (checklookbehindgroup) -- def checklookbehindgroup(self, gid, source):
./Lib/sre_parse.py:1023:17   - Unknown word (isoctal)              -- isoctal = False
./Lib/sre_parse.py:120:9     - Unknown word (seqtypes)             -- seqtypes = (tuple, list)
./Lib/sre_parse.py:124:26    - Unknown word (sublanguage)          -- # member sublanguage
./Lib/sre_parse.py:135:17    - Unknown word (condgroup)            -- condgroup, item_yes, item_no
./Lib/sre_parse.py:258:9     - Unknown word (getwhile)             -- def getwhile(self, n, charset):
./Lib/sre_parse.py:267:9     - Unknown word (getuntil)             -- def getuntil(self, terminator, name
./Lib/sre_parse.py:330:13    - Unknown word (charname)             -- charname = source.getuntil('
./Lib/sre_parse.py:439:5     - Unknown word (itemsappend)          -- itemsappend = items.append
./Lib/sre_parse.py:440:5     - Unknown word (sourcematch)          -- sourcematch = source.match
./Lib/sre_parse.py:497:7     - Unknown word (precompute)           -- # precompute constants into local
./Lib/sre_parse.py:498:5     - Unknown word (subpatternappend)     -- subpatternappend = subpattern.append
./Lib/sre_parse.py:499:5     - Unknown word (sourceget)            -- sourceget = source.get
./Lib/sre_parse.py:535:13    - Unknown word (setappend)            -- setappend = set.append
./Lib/sre_parse.py:769:21    - Unknown word (condname)             -- condname = source.getuntil("
./Lib/sre_parse.py:794:61    - Unknown word (backref)              -- source.error("conditional backref with more than two branches
./Lib/sre_parse.py:79:14     - Unknown word (groupwidths) -- self.groupwidths = [None]  # group 0
./Lib/sre_parse.py:80:14     - Unknown word (lookbehindgroups) -- self.lookbehindgroups = None
./Lib/sre_parse.py:90:13     - Unknown word (ogid)             -- ogid = self.groupdict.get
./Lib/sre_parse.py:973:5     - Unknown word (sget)                 -- sget = s.get
./Lib/sre_parse.py:977:5     - Unknown word (lappend)              -- lappend = literal.append
./Lib/sre_parse.py:978:9     - Unknown word (addgroup)             -- def addgroup(index, pos):
./Lib/sre_parse.py:98:9      - Unknown word (checkgroup)       -- def checkgroup(self, gid):
./Lib/ssl.py:104:22    - Unknown word (SSLEOF)     -- SSLSyscallError, SSLEOFError, SSLCertVerificationErro
./Lib/ssl.py:104:8     - Unknown word (Syscall)    -- SSLSyscallError, SSLEOFError, SSLCertVer
./Lib/ssl.py:1354:9    - Unknown word (newsock)    -- newsock, addr = super().accept
./Lib/ssl.py:1414:62   - Unknown word (timestring) -- the Epoch, given the timestring
./Lib/ssl.py:1485:13   - Unknown word (dercert)    -- dercert = sslsock.getpeercert
./Lib/ssl.py:253:48    - Unknown word (crls)       -- certificates #, enum_crls
./Lib/ssl.py:275:6     - Unknown word (dnsname)    -- def _dnsname_match(dn, hostname)
./Lib/ssl.py:278:7     - Unknown word (Hostnames)  -- - Hostnames are compared lower case
./Lib/ssl.py:2:43      - Unknown word (Janssen)    -- Python. Written by Bill Janssen.
./Lib/ssl.py:324:17    - Unknown word (ipname)     -- def _inet_paton(ipname):
./Lib/ssl.py:339:27    - Unknown word (injective)  -- # only accept injective ipnames
./Lib/ssl.py:339:37    - Unknown word (ipnames)    -- only accept injective ipnames
./Lib/ssl.py:366:16    - Unknown word (woth)       -- # commonly woth IPv6 addresses. Strip
./Lib/ssl.py:393:5     - Unknown word (dnsnames)   -- dnsnames = []
./Lib/ssl.py:429:13    - Unknown word (capath)     -- "cafile capath openssl_cafile_env openssl
./Lib/ssl.py:429:6     - Unknown word (cafile)     -- "cafile capath openssl_cafile
./Lib/ssl.py:446:60    - Unknown word (longname)   -- Object", "nid shortname longname oid")):
./Lib/ssl.py:455:9     - Unknown word (fromnid)    -- def fromnid(cls, nid):
./Lib/ssl.py:496:37    - Unknown word (eofs)       -- suppress_ragged_eofs=True,
./Lib/ssl.py:521:9     - Unknown word (protos)     -- protos = bytearray()
./Lib/ssl.py:538:33    - Unknown word (servername) -- def shim_cb(sslobj, servername, sslctx):
./Lib/ssl.py:538:45    - Unknown word (sslctx)     -- sslobj, servername, sslctx):
./Lib/ssl.py:544:34    - Unknown word (alpn)       -- alpn_protocols(self, alpn_protocols):
./Lib/ssl.py:555:41    - Unknown word (storename)  -- windows_store_certs(self, storename, purpose):
./Lib/ssl.py:566:40    - Unknown word (cadata)     -- load_verify_locations(cadata=certs)
./Lib/ssl.py:751:21    - Unknown word (keylog)     -- # OpenSSL 1.1.1 keylog file
./Lib/ssl.py:753:9     - Unknown word (keylogfile) -- keylogfile = os.environ.get('SSLKEYLOGFI
./Lib/ssl.py:965:6     - Unknown word (sslcopydoc) -- def _sslcopydoc(func):
./Lib/stat.py:157:56    - Unknown word (rwxrwxrwx)  -- string of the form '-rwxrwxrwx'."""
./Lib/statistics.py:1102:68   - Unknown word (quantile)             -- percent point function or quantile
./Lib/statistics.py:1136:41   - Unknown word (Inman)                -- densities" -- Henry F. Inman and Edwin L. Bradley
./Lib/statistics.py:282:11    - Unknown word (lteq)       -- def _find_lteq(a, x):
./Lib/statistics.py:290:11    - Unknown word (rteq)       -- def _find_rteq(a, l, x):
./Lib/statistics.py:435:65    - Unknown word (Quickselect) -- medians without sorting? Quickselect?
./Lib/statistics.py:592:20    - Unknown word (aabbbbbbbbcc) -- >>> multimode('aabbbbbbbbcc')
./Lib/statistics.py:594:20    - Unknown word (aabbbbccddddeeffffgg) -- >>> multimode('aabbbbccddddeeffffgg')
./Lib/statistics.py:600:5     - Unknown word (maxcount)             -- maxcount, mode_items = next(groupby
./Lib/statistics.py:632:46    - Unknown word (Hyndman)              -- interior points.  Per Hyndman & Fan, "One nice
./Lib/statistics.py:884:5     - Unknown word (ybar)                 -- ybar = fsum(y) / n
./Lib/statistics.py:973:7     - Unknown word (Wichura)              -- # Wichura, M.J. (1988). "Algorithm
./Lib/stringprep.py:10:20     - Unknown word (unidata)      -- assert unicodedata.unidata_version == '3.2.0'
./Lib/stringprep.py:1:29      - Unknown word (mkstringprep) -- file is generated by mkstringprep.py. DO NOT EDIT.
./Lib/subprocess.py:1443:17   - Unknown word (comspec)       -- comspec = os.environ.get("COMSPEC
./Lib/subprocess.py:1498:25   - Unknown word (millis)        -- timeout_millis = _winapi.INFINITE
./Lib/subprocess.py:1511:14   - Unknown word (readerthread)  -- def _readerthread(self, fh, buffer):
./Lib/subprocess.py:1673:21   - Unknown word (signame)       -- for signame in ('SIGPIPE', 'SIGXFZ
./Lib/subprocess.py:1677:25   - Unknown word (setsigdef)     -- kwargs['setsigdef'] = sigset
./Lib/subprocess.py:1828:38   - Unknown word (exitstatus)    -- self._handle_exitstatus(sts)
./Lib/subprocess.py:1851:60   - Unknown word (noexec)        -- called = (err_msg == "noexec")
./Lib/subprocess.py:2108:19   - Unknown word (Supress)       -- # Supress the race condition error
./Lib/subprocess.py:251:40    - Unknown word (deadstate)  -- inst._internal_poll(_deadstate=sys.maxsize)
./Lib/subprocess.py:308:5     - Unknown word (warnopts)   -- warnopts = sys.warnoptions[:
./Lib/subprocess.py:325:49    - Unknown word (importtime) -- aulthandler', 'tracemalloc', 'importtime',
./Lib/subprocess.py:326:18    - Unknown word (showrefcount) -- 'showrefcount', 'utf8'):
./Lib/subprocess.py:338:11    - Unknown word (popenargs)    -- def call(*popenargs, timeout=None, **kwargs
./Lib/subprocess.py:344:5     - Unknown word (retcode)      -- retcode = call(["ls", "-l"]
./Lib/subprocess.py:561:5     - Unknown word (needquote)    -- needquote = False
./Lib/subprocess.py:5:36      - Unknown word (Astrand)    -- 2003-2005 by Peter Astrand <astrand@lysator.liu
./Lib/subprocess.py:657:44    - Unknown word (vfork)        -- implementation which can use vfork() in some cases for
./Lib/subprocess.py:717:7     - Unknown word (preexec)      -- preexec_fn: (POSIX only) An
./Lib/subprocess.py:71:6      - Unknown word (mswindows)  -- _mswindows = True
./Lib/subprocess.py:733:23    - Unknown word (creationflags) -- startupinfo and creationflags (Windows only)
./Lib/subprocess.py:733:7     - Unknown word (startupinfo)  -- startupinfo and creationflags (Windows
./Lib/subprocess.py:764:67    - Unknown word (pipesize)      -- text=None, umask=-1, pipesize=-1):
./Lib/subprocess.py:824:13    - Unknown word (cwrite)        -- # p2cwrite ---stdin--->  p2cread
./Lib/subprocess.py:824:38    - Unknown word (cread)         -- cwrite ---stdin--->  p2cread
./Lib/subprocess.py:825:13    - Unknown word (pread)         -- # c2pread <--stdout---  c2pwrite
./Lib/subprocess.py:825:38    - Unknown word (pwrite)        -- pread <--stdout---  c2pwrite
./Lib/subprocess.py:826:11    - Unknown word (errread)       -- # errread <--stderr---  errwrite
./Lib/subprocess.py:826:36    - Unknown word (errwrite)      -- errread <--stderr---  errwrite
./Lib/subprocess.py:839:56    - Unknown word (unwrappable)   -- child could make our fds unwrappable
./Lib/subprocess.py:864:44    - Unknown word (xkcd)          -- wait_secs = 0.25  # 1/xkcd221.getRandomNumber(
./Lib/subprocess.py:879:33    - Unknown word (setregid)      -- if not hasattr(os, 'setregid'):
./Lib/subprocess.py:900:9     - Unknown word (gids)          -- gids = None
./Lib/subprocess.py:902:33    - Unknown word (setgroups)     -- if not hasattr(os, 'setgroups'):
./Lib/sunau.py:112:26    - Unknown word (filehdr)    -- from <multimedia/audio_filehdr.h>
./Lib/sysconfig.py:146:53    - Unknown word (projectbase) -- ['platinclude'] = '{projectbase}/.'
./Lib/sysconfig.py:24:10     - Unknown word (platstdlib) -- 'platstdlib': '{platbase}/lib/python
./Lib/sysconfig.py:29:10     - Unknown word (platinclude) -- 'platinclude':
./Lib/sysconfig.py:392:13    - Unknown word (pybuilddir)  -- # `make pybuilddir.txt` target -- which
./Lib/sysconfig.py:411:5     - Unknown word (destfile)    -- destfile = os.path.join(pybuilddir
./Lib/sysconfig.py:419:58    - Unknown word (getpath)     -- fixup -- see Modules/getpath.c
./Lib/tabnanny.py:118:9     - Unknown word (badline)    -- badline = nag.get_lineno()
./Lib/tabnanny.py:231:39    - Unknown word (Broman)     -- algorithm is due to Vincent Broman.
./Lib/tabnanny.py:296:13    - Unknown word (thisguy)    -- thisguy = Whitespace(token)
./Lib/tarfile.py:1104:13   - Unknown word (isextended) -- isextended = bool(buf[482])
./Lib/tarfile.py:1105:13   - Unknown word (origsize)   -- origsize = nti(buf[483:495])
./Lib/tarfile.py:1143:31   - Unknown word (gnulong)    -- return self._proc_gnulong(tarfile)
./Lib/tarfile.py:1306:24   - Unknown word (gnusparse)  -- self._proc_gnusparse_01(next, pax_headers
./Lib/tarfile.py:132:49    - Unknown word (hdrcharset) -- that are affected by hdrcharset.
./Lib/tarfile.py:1374:41   - Unknown word (realsize)   -- keyword == "GNU.sparse.realsize":
./Lib/tarfile.py:1474:30   - Unknown word (copybufsize) -- errorlevel=None, copybufsize=None):
./Lib/tarfile.py:1536:14   - Unknown word (inodes)      -- self.inodes = {}        # dictionary
./Lib/tarfile.py:1541:22   - Unknown word (firstmember) -- self.firstmember = None
./Lib/tarfile.py:1865:17   - Unknown word (statres)     -- statres = os.lstat(name)
./Lib/tarfile.py:1872:9    - Unknown word (stmd)        -- stmd = statres.st_mode
./Lib/tarfile.py:1927:56   - Unknown word (rdev)        -- os.major(statres.st_rdev)
./Lib/tarfile.py:2145:73   - Unknown word (chrdev)      -- the member (directory, chrdev,
./Lib/tarfile.py:2146:15   - Unknown word (blkdev)      -- # blkdev, etc.), return None
./Lib/tarfile.py:2149:40   - Unknown word (targetpath)  -- member(self, tarinfo, targetpath, set_attrs=True,
./Lib/tarfile.py:2161:9    - Unknown word (upperdirs)   -- upperdirs = os.path.dirname(targetpath
./Lib/tarfile.py:224:34    - Unknown word (chksum)     -- characters except for the chksum field which is treated
./Lib/tarfile.py:332:8     - Unknown word (blockwise)  -- blockwise. Use of gzip or bzip
./Lib/tarfile.py:342:15    - Unknown word (extfileobj) -- self._extfileobj = True
./Lib/tarfile.py:34:34     - Unknown word (Niels)      -- "Gustavo Niemeyer, Niels Gust\u00e4bel, Richard
./Lib/tarfile.py:382:26    - Unknown word (dbuf)       -- self.dbuf = b""
./Lib/tarfile.py:39:30     - Unknown word (bltn)       -- builtins import open as bltn_open
./Lib/tarfile.py:486:13    - Unknown word (xlen)       -- xlen = ord(self.__read(1
./Lib/tarfile.py:5:27      - Unknown word (Gustaebel)  -- Copyright (C) 2002 Lars Gustaebel <lars@gustaebel.de>
./Lib/tarfile.py:606:47    - Unknown word (blockinfo)  -- fileobj, offset, size, blockinfo=None):
./Lib/tarfile.py:620:9     - Unknown word (lastpos)    -- lastpos = 0
./Lib/tarfile.py:621:9     - Unknown word (realpos)    -- realpos = self.offset
./Lib/tarfile.py:738:9     - Unknown word (devmajor)   -- devmajor = 'Device major number
./Lib/tarfile.py:739:9     - Unknown word (devminor)   -- devminor = 'Device minor number
./Lib/tarfile.py:870:19    - Unknown word (hname)      -- for name, hname, length in (
./Lib/tarfile.py:98:43     - Unknown word (longlink)   -- K" # GNU tar longlink
./Lib/telnetlib.py:13:65     - Unknown word (cnri)       -- <Dec 2 11:10> snag.cnri.reston..
./Lib/telnetlib.py:13:70     - Unknown word (reston)     -- 2 11:10> snag.cnri.reston..
./Lib/telnetlib.py:209:14    - Unknown word (rawq)           -- self.rawq = b''
./Lib/telnetlib.py:210:14    - Unknown word (irawq)          -- self.irawq = 0
./Lib/telnetlib.py:211:14    - Unknown word (cookedq)        -- self.cookedq = b''
./Lib/telnetlib.py:213:14    - Unknown word (iacseq)         -- self.iacseq = b'' # Buffer for IAC
./Lib/telnetlib.py:215:14    - Unknown word (sbdataq)        -- self.sbdataq = b''
./Lib/telnetlib.py:468:31    - Unknown word (suboptions)     -- # suboptions. Alas, we should not
./Lib/telnetlib.py:57:23     - Unknown word (Subnegotiation) -- SE = bytes([240])  # Subnegotiation End
./Lib/telnetlib.py:590:44    - Unknown word (uncompiled)     -- Pattern instances) or uncompiled (strings).
./Lib/telnetlib.py:605:21    - Unknown word (undeterministic) -- results are undeterministic, and may depend on the
./Lib/telnetlib.py:666:9     - Unknown word (portstr)         -- portstr = sys.argv[2]
./Lib/tempfile.py:13:15     - Unknown word (tmptpu)     -- (4, '/tmp/tmptpu9nin8')
./Lib/tempfile.py:164:9     - Unknown word (envname)    -- for envname in 'TMPDIR', 'TEMP'
./Lib/tempfile.py:434:21    - Unknown word (unlinker)   -- # Cache the unlinker so we don't get spurious
./Lib/tempfile.py:53:7      - Unknown word (openflags)  -- _text_openflags = _os.O_RDWR | _os.O
./Lib/tempfile.py:808:21    - Unknown word (resetperms) -- def resetperms(path):
./Lib/test/_test_atexit.py:17:23     - Unknown word (unraisable) -- def assert_raises_unraisable(self, exc_type, func
./Lib/test/_test_atexit.py:20:25     - Unknown word (exitfuncs)  -- atexit._run_exitfuncs()
./Lib/test/_test_atexit.py:48:14     - Unknown word (badargs)    -- def test_badargs(self):
./Lib/test/_test_atexit.py:61:20     - Unknown word (unnormalized) -- def test_raise_unnormalized(self):
./Lib/test/ann_module3.py:15:9      - Unknown word (sfel)       -- sfel.y: int = 0
./Lib/test/badsyntax_future3.py:3:31      - Unknown word (snopes)     -- future__ import rested_snopes
./Lib/test/cfgparser.1:1:16      - Unknown word (idlelib)    -- # Also used by idlelib.test_idle.test_config
./Lib/test/cfgparser.1:3:5       - Unknown word (newbar)     -- foo=newbar
./Lib/test/cfgparser.2:109:7     - Unknown word (smbpasswd)     -- # The smbpasswd file is only required
./Lib/test/cfgparser.2:11:68     - Unknown word (testparm)   -- should run the command #"testparm" # to check that you
./Lib/test/cfgparser.2:130:30    - Unknown word (smbusers)      -- username map = /etc/samba/smbusers
./Lib/test/cfgparser.2:137:30    - Unknown word (Winbind)       -- Options for using winbind. Winbind allows you to do all
./Lib/test/cfgparser.2:140:8     - Unknown word (uid's)         -- # unix uid's
./Lib/test/cfgparser.2:21:3      - Unknown word (netbios)    -- # netbios name is the name you
./Lib/test/cfgparser.2:21:53     - Unknown word (Neighbourhood) -- will see in "Network Neighbourhood",
./Lib/test/cfgparser.2:246:27    - Unknown word (smbldap)       -- configure in /etc/samba/smbldap_conf.pm first):
./Lib/test/cfgparser.2:268:25    - Unknown word (mypassword)    -- running 'smbpasswd -w mypassword'
./Lib/test/cfgparser.2:269:30    - Unknown word (mydomain)      -- admin dn = cn=root,dc=mydomain,dc=com
./Lib/test/cfgparser.2:280:40    - Unknown word (lmhosts)       -- default order is "host lmhosts wins bcast". "host"
./Lib/test/cfgparser.2:280:53    - Unknown word (bcast)         -- is "host lmhosts wins bcast". "host"
./Lib/test/cfgparser.2:281:29    - Unknown word (gethostbyname) -- use the unix system gethostbyname() function call that
./Lib/test/cfgparser.2:283:26    - Unknown word (nsswitch)      -- etc/host.config, /etc/nsswitch.conf
./Lib/test/cfgparser.2:284:16    - Unknown word (resolv)        -- # and the /etc/resolv.conf file. "host" therefore
./Lib/test/cfgparser.2:309:18    - Unknown word (nslookups)     -- # names  via DNS nslookups. The built-in default
./Lib/test/cfgparser.2:32:30     - Unknown word (linpopup)      -- message command = /usr/bin/linpopup "%f" "%m" %s; rm %s
./Lib/test/cfgparser.2:341:4     - Unknown word (browseable)    -- browseable = no
./Lib/test/cfgparser.2:352:43    - Unknown word (netlogon)      -- following and create the netlogon directory for Domain
./Lib/test/cfgparser.2:361:32    - Unknown word (ntlogon)       -- created dynamically by ntlogon (check that you have
./Lib/test/cfgparser.2:363:3     - Unknown word (contribs)      -- # contribs)
./Lib/test/cfgparser.2:366:7     - Unknown word (postexec)      -- ;root postexec = rm -f /var/lib/samba
./Lib/test/cfgparser.2:405:5     - Unknown word (lprm)          -- ; lprm command = cancel %p
./Lib/test/cfgparser.2:40:20     - Unknown word (lpstat)        -- printcap name = lpstat
./Lib/test/cfgparser.2:40:4      - Unknown word (printcap)      -- printcap name = lpstat
./Lib/test/cfgparser.2:423:3     - Unknown word (colour)        -- # colour)on the samba server
./Lib/test/cfgparser.2:45:19     - Unknown word (lprng)         -- # bsd, sysv, plp, lprng, aix, hpux, qnx, cups
./Lib/test/cfgparser.2:45:31     - Unknown word (hpux)          -- sysv, plp, lprng, aix, hpux, qnx, cups
./Lib/test/cfgparser.2:45:8      - Unknown word (sysv)          -- # bsd, sysv, plp, lprng, aix, hpux
./Lib/test/cfgparser.2:465:3     - Unknown word (fredsprn)      -- ;[fredsprn]
./Lib/test/cfgparser.2:469:15    - Unknown word (freds)         -- ; printer = freds_printer
./Lib/test/cfgparser.2:479:3     - Unknown word (fredsdir)      -- ;[fredsdir]
./Lib/test/cfgparser.2:500:3     - Unknown word (pchome)        -- ;[pchome]
./Lib/test/cfgparser.2:530:3     - Unknown word (myshare)       -- ;[myshare]
./Lib/test/cfgparser.2:57:29     - Unknown word (winbind)       -- should work well for winbind:
./Lib/test/cfgparser.2:86:20     - Unknown word (pcguest)       -- ; guest account = pcguest
./Lib/test/cfgparser.2:8:7       - Unknown word (commentry)  -- # for commentry and a ; for parts of
./Lib/test/cmath_testcases.txt:11:57     - Unknown word (asinh)      -- be tested (exp, cos, asinh, ...),
./Lib/test/cmath_testcases.txt:1263:1    - Unknown word (logt)       -- logt0000 log10 1.0 0.0 -
./Lib/test/cmath_testcases.txt:1:4       - Unknown word (Testcases)  -- -- Testcases for functions in cmath
./Lib/test/cmath_testcases.txt:2365:40   - Unknown word (testcase)   -- we can use the same testcase syntax as for the
./Lib/test/cmath_testcases.txt:236:4     - Unknown word (acosh)      -- -- acosh: Inverse hyperbolic
./Lib/test/cmath_testcases.txt:2468:42   - Unknown word (carg)       -- of polar (as cabs and carg, respectively, which
./Lib/test/cmath_testcases.txt:2469:42   - Unknown word (hypot)      -- terms of the functions hypot and atan2).
./Lib/test/cmath_testcases.txt:57:4      - Unknown word (mpmath)     -- -- mpmath 0.19 at 100 bit accuracy
./Lib/test/cmath_testcases.txt:59:42     - Unknown word (testfile)   -- math.MathTests.test_testfile, as well as in
./Lib/test/cmath_testcases.txt:5:5       - Unknown word (testid)     -- -- <testid> <function> <input_value
./Lib/test/cmath_testcases.txt:914:4     - Unknown word (atanh)      -- -- atanh: Inverse hyperbolic
./Lib/test/cmath_testcases.txt:918:28    - Unknown word (Atanh)      -- These are tested in testAtanhSign in test_cmath.py
./Lib/test/encoded_modules/__init__.py:19:39     - Unknown word (hommes)     -- 'iso-8859-1', "Les hommes ont oublié cette vérit
./Lib/test/encoded_modules/__init__.py:19:50     - Unknown word (oublié)     -- 1', "Les hommes ont oublié cette vérité, "
./Lib/test/encoded_modules/__init__.py:19:57     - Unknown word (cette)      -- Les hommes ont oublié cette vérité, "
./Lib/test/encoded_modules/__init__.py:19:63     - Unknown word (vérité)     -- hommes ont oublié cette vérité, "
./Lib/test/encoded_modules/__init__.py:20:14     - Unknown word (renard)     -- "dit le renard. Mais tu ne dois pas
./Lib/test/encoded_modules/__init__.py:20:22     - Unknown word (Mais)       -- "dit le renard. Mais tu ne dois pas l'oublier
./Lib/test/encoded_modules/__init__.py:20:33     - Unknown word (dois)       -- le renard. Mais tu ne dois pas l'oublier. Tu deviens
./Lib/test/encoded_modules/__init__.py:20:42     - Unknown word (l'oublier)  -- Mais tu ne dois pas l'oublier. Tu deviens "
./Lib/test/encoded_modules/__init__.py:20:56     - Unknown word (deviens)    -- dois pas l'oublier. Tu deviens "
./Lib/test/encoded_modules/__init__.py:21:24     - Unknown word (toujours)    -- "responsable pour toujours de ce que tu as apprivois
./Lib/test/encoded_modules/__init__.py:21:49     - Unknown word (apprivoisé)  -- toujours de ce que tu as apprivoisé."),
./Lib/test/encoded_modules/__init__.py:21:7      - Unknown word (responsable) -- "responsable pour toujours de ce
./Lib/test/encoded_modules/__init__.py:22:27     - Unknown word (Познание)    -- koi8_r', 'koi8-r', "Познание бесконечности требу
./Lib/test/encoded_modules/__init__.py:22:36     - Unknown word (бесконечности) -- 'koi8-r', "Познание бесконечности требует бесконечног
./Lib/test/encoded_modules/__init__.py:22:50     - Unknown word (требует)       -- нание бесконечности требует бесконечного времен
./Lib/test/encoded_modules/__init__.py:22:58     - Unknown word (бесконечного)  -- сконечности требует бесконечного времени.")
./Lib/test/encoded_modules/__init__.py:22:71     - Unknown word (времени)       -- ребует бесконечного времени.")
./Lib/test/encoded_modules/module_iso_8859_1.py:3:25      - Unknown word (oubli)      -- test = ("Les hommes ont oubli� cette v�rit�, "
./Lib/test/encoded_modules/module_iso_8859_1.py:5:52      - Unknown word (apprivois)  -- toujours de ce que tu as apprivois�.")
./Lib/test/floating_points.txt:1027:60   - Unknown word (strtod)      -- corner case of Python's strtod code.
./Lib/test/floating_points.txt:4:12      - Unknown word (Verdonk)    -- # Brigitte Verdonk, Annie Cuyt, Dennis
./Lib/test/floating_points.txt:4:27      - Unknown word (Cuyt)       -- Brigitte Verdonk, Annie Cuyt, Dennis Verschaeren
./Lib/test/floating_points.txt:4:40      - Unknown word (Verschaeren) -- Annie Cuyt, Dennis Verschaeren, A precision and range
./Lib/test/libregrtest/cmdline.py:10:25     - Unknown word (regrtest)   -- python path/to/Lib/test/regrtest.py [options] [test_name
./Lib/test/libregrtest/cmdline.py:112:5     - Unknown word (urlfetch)   -- urlfetch -  It is okay to download
./Lib/test/libregrtest/cmdline.py:116:5     - Unknown word (tzdata)     -- tzdata -    Run tests that
./Lib/test/libregrtest/cmdline.py:118:43    - Unknown word (uall)       -- resources except one, use '-uall,-<resource>'. For
./Lib/test/libregrtest/cmdline.py:122:3     - Unknown word (matchfile)  -- --matchfile filters tests using
./Lib/test/libregrtest/cmdline.py:136:5     - Unknown word (extralagefile) -- # - extralagefile (ex: test_zipfile64
./Lib/test/libregrtest/cmdline.py:141:36    - Unknown word (extralargefile) -- = ALL_RESOURCES + ('extralargefile', 'tzdata')
./Lib/test/libregrtest/cmdline.py:230:33    - Unknown word (findleaks)      -- add_argument('-l', '--findleaks', action='store_const
./Lib/test/libregrtest/cmdline.py:233:33    - Unknown word (runleaks)       -- add_argument('-L', '--runleaks', action='store_true
./Lib/test/libregrtest/cmdline.py:236:33    - Unknown word (huntrleaks)     -- add_argument('-R', '--huntrleaks', metavar='RUNCOUNTS
./Lib/test/libregrtest/cmdline.py:240:33    - Unknown word (multiprocess)   -- add_argument('-j', '--multiprocess', metavar='PROCESSES
./Lib/test/libregrtest/cmdline.py:247:33    - Unknown word (coverdir)       -- add_argument('-D', '--coverdir', metavar='DIR',
./Lib/test/libregrtest/cmdline.py:250:33    - Unknown word (nocoverdir)     -- add_argument('-N', '--nocoverdir',
./Lib/test/libregrtest/cmdline.py:256:33    - Unknown word (nowindows)      -- add_argument('-n', '--nowindows', action='store_true
./Lib/test/libregrtest/cmdline.py:273:45    - Unknown word (xmlpath)        -- --junit-xml', dest='xmlpath', metavar='FILENAME
./Lib/test/libregrtest/cmdline.py:292:5     - Unknown word (nwarmup)        -- nwarmup = int(args[0]) if args
./Lib/test/libregrtest/cmdline.py:293:5     - Unknown word (ntracked)       -- ntracked = int(args[1]) if args
./Lib/test/libregrtest/cmdline.py:29:51     - Unknown word (randseed)   -- order. You can use --randseed=int to provide an
./Lib/test/libregrtest/cmdline.py:30:24     - Unknown word (randomizer) -- int seed value for the randomizer; this is useful for
./Lib/test/libregrtest/cmdline.py:35:43     - Unknown word (pynexttest) -- recorded in a file named pynexttest. If run from the
./Lib/test/libregrtest/cmdline.py:65:2      - Unknown word (reflog)     -- "reflog.txt" respectively),
./Lib/test/libregrtest/cmdline.py:71:68     - Unknown word (memlimit)   -- memory. The passed-in memlimit,
./Lib/test/libregrtest/cmdline.py:98:5      - Unknown word (largefile)  -- largefile - It is okay to run
./Lib/test/libregrtest/main.py:160:25    - Unknown word (getloadavg) -- load_avg = self.getloadavg()
./Lib/test/libregrtest/main.py:213:9     - Unknown word (stdtests)   -- stdtests = STDTESTS[:]
./Lib/test/libregrtest/main.py:214:9     - Unknown word (nottests)   -- nottests = NOTTESTS.copy()
./Lib/test/libregrtest/main.py:21:36     - Unknown word (removepy)   -- libregrtest.utils import removepy, count, format_duration
./Lib/test/libregrtest/main.py:21:70     - Unknown word (printlist)  -- count, format_duration, printlist
./Lib/test/libregrtest/main.py:225:13    - Unknown word (alltests)   -- alltests = findtests(self.ns
./Lib/test/libregrtest/main.py:274:13    - Unknown word (abstest)    -- abstest = get_abs_module(self
./Lib/test/libregrtest/main.py:28:25     - Unknown word (distclean)  -- files using the "make distclean" command.
./Lib/test/libregrtest/main.py:30:45     - Unknown word (builddir)   -- get_config_var('abs_builddir')
./Lib/test/libregrtest/main.py:42:7      - Unknown word (Regrtest)   -- class Regrtest:
./Lib/test/libregrtest/main.py:531:28    - Unknown word (testsuites) -- root = ET.Element("testsuites")
./Lib/test/libregrtest/main.py:626:21    - Unknown word (typeperf)   -- # # typeperf.exe for x64, x86 or
./Lib/test/libregrtest/main.py:77:23     - Unknown word (denieds)    -- self.resource_denieds = []
./Lib/test/libregrtest/refleak.py:112:46    - Unknown word (memomry)            -- reference counters and memomry blocks.
./Lib/test/libregrtest/refleak.py:141:38    - Unknown word (refrep)             -- open(fname, "a") as refrep:
./Lib/test/libregrtest/refleak.py:185:28    - Unknown word (warningregistry)    -- if hasattr(mod, '__warningregistry__'):
./Lib/test/libregrtest/refleak.py:24:71     - Unknown word (refleaks)   -- True if we detected refleaks.
./Lib/test/libregrtest/refleak.py:65:5      - Unknown word (repcount)   -- repcount = nwarmup + ntracked
./Lib/test/libregrtest/refleak.py:70:5      - Unknown word (alloc)      -- alloc_deltas = [0] * repcount
./Lib/test/libregrtest/refleak.py:72:5      - Unknown word (getallocatedblocks) -- getallocatedblocks = sys.getallocatedblocks
./Lib/test/libregrtest/runtest.py:15:23     - Unknown word (refleak)    -- from test.libregrtest.refleak import dash_R, clear
./Lib/test/libregrtest/runtest.py:230:27    - Unknown word (uncollectable) -- f"uncollectable object(s).")
./Lib/test/libregrtest/runtest.py:310:19    - Unknown word (nuker)         -- kind, nuker = "directory", shutil
./Lib/test/libregrtest/runtest.py:73:5      - Unknown word (findtestdir) -- def findtestdir(path=None):
./Lib/test/libregrtest/runtest_mp.py:30:28     - Unknown word (testname)   -- run_test_in_subprocess(testname, ns):
./Lib/test/libregrtest/runtest_mp.py:42:60     - Unknown word (regrtest's) -- working directory as regrtest's original
./Lib/test/libregrtest/runtest_mp.py:66:7      - Unknown word (Multiprocess) -- class MultiprocessIterator:
./Lib/test/libregrtest/setup.py:65:50     - Unknown word (Unixy)      -- be useful for other Unixy platforms that
./Lib/test/libregrtest/setup.py:73:35     - Unknown word (getrlimit)  -- soft, hard = resource.getrlimit(resource.RLIMIT_STACK
./Lib/test/libregrtest/setup.py:74:13     - Unknown word (newsoft)    -- newsoft = min(hard, max(soft
./Lib/test/libregrtest/setup.py:75:22     - Unknown word (setrlimit)  -- resource.setrlimit(resource.RLIMIT_STACK
./Lib/test/libregrtest/win_utils.py:21:33     - Unknown word (Mulitprocessing) -- system load on Windows. Mulitprocessing and threads can't be
./Lib/test/libregrtest/win_utils.py:93:13     - Unknown word (toks)            -- toks = line.split(',')
./Lib/test/list_tests.py:261:35    - Unknown word (spameggs)   -- assertEqual(a, list("spameggs"))
./Lib/test/list_tests.py:30:11     - Unknown word (Mutables)   -- # Mutables always return a new
./Lib/test/list_tests.py:350:29    - Unknown word (abcdefghcij) -- d = self.type2test('abcdefghcij')
./Lib/test/list_tests.py:352:45    - Unknown word (abdefghcij)  -- ssertEqual(d, self.type2test('abdefghcij'))
./Lib/test/list_tests.py:354:45    - Unknown word (abdefghij)   -- ssertEqual(d, self.type2test('abdefghij'))
./Lib/test/list_tests.py:447:13    - Unknown word (revcmp)      -- def revcmp(a, b):
./Lib/test/list_tests.py:459:13    - Unknown word (xmod)        -- xmod, ymod = x%3, y%7
./Lib/test/list_tests.py:459:19    - Unknown word (ymod)        -- xmod, ymod = x%3, y%7
./Lib/test/list_tests.py:471:13    - Unknown word (selfmodifying) -- def selfmodifyingComparison(x,y):
./Lib/test/list_tests.py:505:9     - Unknown word (oldid)         -- oldid = id(s)
./Lib/test/list_tests.py:509:14    - Unknown word (extendedslicing) -- def test_extendedslicing(self):
./Lib/test/list_tests.py:559:9     - Unknown word (exhit)           -- exhit = iter(a)
./Lib/test/list_tests.py:560:9     - Unknown word (empit)           -- empit = iter(a)
./Lib/test/lock_tests.py:159:29    - Unknown word (unacquired) -- # Check the lock is unacquired
./Lib/test/lock_tests.py:439:21    - Unknown word (condtype)   -- cond = self.condtype()
./Lib/test/lock_tests.py:567:14    - Unknown word (waitfor)    -- def test_waitfor(self):
./Lib/test/lock_tests.py:614:44    - Unknown word (semtype)    -- assertRaises(ValueError, self.semtype, value = -1)
./Lib/test/lock_tests.py:770:29    - Unknown word (barriertype) -- self.barrier = self.barriertype(self.N, timeout=self
./Lib/test/lock_tests.py:779:9     - Unknown word (multipass)   -- def multipass(self, results, n):
./Lib/test/lock_tests.py:92:21     - Unknown word (locktype)   -- lock = self.locktype()
./Lib/test/mapping_tests.py:198:9     - Unknown word (outerself)   -- outerself = self
./Lib/test/mapping_tests.py:258:15    - Unknown word (badseq)      -- class badseq(object):
./Lib/test/mapping_tests.py:40:14     - Unknown word (inmapping)  -- self.inmapping = {key:value}
./Lib/test/mapping_tests.py:434:15    - Unknown word (dictlike)    -- class dictlike(self.type2test): pass
./Lib/test/mapping_tests.py:450:15    - Unknown word (baddict)     -- class baddict1(self.type2test):
./Lib/test/mapping_tests.py:53:9      - Unknown word (knownkey)   -- knownkey = list(self.other.keys
./Lib/test/mapping_tests.py:594:14    - Unknown word (mutatingiteration) -- def test_mutatingiteration(self):
./Lib/test/mapping_tests.py:72:19     - Unknown word (iterandlist) -- def check_iterandlist(iter, lst, ref):
./Lib/test/mapping_tests.py:86:19     - Unknown word (knownvalue)  -- knownkey, knownvalue = next(iter(self.other
./Lib/test/math_testcases.txt:108:4     - Unknown word (erfc)       -- -- erfc: complementary error
./Lib/test/math_testcases.txt:170:4     - Unknown word (lgamma)     -- -- lgamma: log of absolute value
./Lib/test/math_testcases.txt:174:1     - Unknown word (lgam)       -- lgam0000 lgamma 0.0 -> inf
./Lib/test/math_testcases.txt:446:4     - Unknown word (expm)       -- -- expm1: exp(x) - 1, without
./Lib/test/mock_socket.py:8:2       - Unknown word (defaulttimeout) -- _defaulttimeout = None
./Lib/test/mod_generics_cache.py:26:70     - Unknown word (localns)    -- get_type_hints with localns=B.__dict__
./Lib/test/pickletester.py:1121:9    - Unknown word (badpickles) -- badpickles = [b"S'\n.",
./Lib/test/pickletester.py:1138:9    - Unknown word (goodpickles) -- goodpickles = [(b"S''\n.", ''),
./Lib/test/pickletester.py:126:9     - Unknown word (curpair)    -- curpair = copyreg._inverted
./Lib/test/pickletester.py:1316:17   - Unknown word (Pabc)        -- # b'Pabc',
./Lib/test/pickletester.py:149:44    - Unknown word (unheshable) -- key object containing unheshable mutable data.
./Lib/test/pickletester.py:1500:58   - Unknown word (minprotocol) -- cls, aslist=identity, minprotocol=0):
./Lib/test/pickletester.py:166:7     - Unknown word (myint)      -- class myint(int):
./Lib/test/pickletester.py:170:7     - Unknown word (initarg)    -- class initarg(C):
./Lib/test/pickletester.py:1870:17   - Unknown word (nbase)       -- nbase = 1 << nbits
./Lib/test/pickletester.py:1878:22   - Unknown word (deadbeeffeedface) -- nbase = int("deadbeeffeedface", 16)
./Lib/test/pickletester.py:1883:59   - Unknown word (precomputes)      -- expensive here as it precomputes
./Lib/test/pickletester.py:1934:14   - Unknown word (structseq)        -- def test_structseq(self):
./Lib/test/pickletester.py:1987:9    - Unknown word (badpickle)        -- badpickle = pickle.PROTO + bytes
./Lib/test/pickletester.py:2095:22   - Unknown word (myclasses)        -- for C in myclasses:
./Lib/test/pickletester.py:20:13     - Unknown word (testbuffer) -- import _testbuffer
./Lib/test/pickletester.py:2109:25   - Unknown word (weakproxies)      -- # Cannot create weakproxies to these classes
./Lib/test/pickletester.py:2148:57   - Unknown word (extcode)          -- with extension code extcode. Pickle
./Lib/test/pickletester.py:2452:16   - Unknown word (compacity)        -- # Test compacity of int representation
./Lib/test/pickletester.py:258:44    - Unknown word (ndarray)    -- zero-copy picklable ndarray, as the ndarray()
./Lib/test/pickletester.py:2599:13   - Unknown word (newpickle)        -- newpickle = bytearray()
./Lib/test/pickletester.py:2662:15   - Unknown word (memoryviews)      -- # memoryviews should own the memory
./Lib/test/pickletester.py:28:15     - Unknown word (bigmemtest) -- _2G, _4G, bigmemtest
./Lib/test/pickletester.py:2977:14   - Unknown word (inband)           -- def test_inband_accept_default_buffers
./Lib/test/pickletester.py:3015:18   - Unknown word (arange)           -- arr = np.arange(6)
./Lib/test/pickletester.py:3028:7    - Unknown word (Bigmem)           -- class BigmemPickleTests:
./Lib/test/pickletester.py:3032:27   - Unknown word (memuse)           -- bigmemtest(size=_2G, memuse=3.6, dry_run=False)
./Lib/test/pickletester.py:3331:14   - Unknown word (callapi)          -- def test_callapi(self):
./Lib/test/pickletester.py:3519:38   - Unknown word (Pickler's)        -- that we can set the Pickler's memo attribute.
./Lib/test/pickletester.py:3591:25   - Unknown word (unpicklings)      -- def _check_multiple_unpicklings(self, ioclass, *, seekable
./Lib/test/pickletester.py:3591:43   - Unknown word (ioclass)          -- multiple_unpicklings(self, ioclass, *, seekable=True):
./Lib/test/pickletester.py:3623:29   - Unknown word (unpickler's)      -- # Issue #12687: the unpickler's buffering logic could
./Lib/test/pickletester.py:3818:17   - Unknown word (picklability)     -- # check picklability of AAA and BBB
./Lib/test/pickletester.py:836:35    - Unknown word (objcopy)    -- assert_is_copy(self, obj, objcopy, msg=None):
./Lib/test/randv2_32.pck:1:1       - Unknown word (crandom)    -- crandom
./Lib/test/re_tests.py:105:19    - Unknown word (nccb)          -- ('a.*b', 'acc\nccb', FAIL),
./Lib/test/re_tests.py:119:14    - Unknown word (xabcy)         -- ('abc', 'xabcy', SUCCEED, 'found',
./Lib/test/re_tests.py:120:14    - Unknown word (ababc)         -- ('abc', 'ababc', SUCCEED, 'found',
./Lib/test/re_tests.py:123:16    - Unknown word (abbc)          -- ('ab*bc', 'abbc', SUCCEED, 'found',
./Lib/test/re_tests.py:124:16    - Unknown word (abbbbc)        -- ('ab*bc', 'abbbbc', SUCCEED, 'found',
./Lib/test/re_tests.py:134:16    - Unknown word (abcc)          -- ('^abc$', 'abcc', FAIL),
./Lib/test/re_tests.py:136:16    - Unknown word (aabc)          -- ('^abc$', 'aabc', FAIL),
./Lib/test/re_tests.py:142:15    - Unknown word (axyzc)         -- ('a.*c', 'axyzc', SUCCEED, 'found',
./Lib/test/re_tests.py:143:15    - Unknown word (axyzd)         -- ('a.*c', 'axyzd', FAIL),
./Lib/test/re_tests.py:196:16    - Unknown word (aabbabc)       -- ('a+b+c', 'aabbabc', SUCCEED, 'found',
./Lib/test/re_tests.py:207:14    - Unknown word (xabyabbbz)     -- ('ab*', 'xabyabbbz', SUCCEED, 'found',
./Lib/test/re_tests.py:208:14    - Unknown word (xayabbbz)      -- ('ab*', 'xayabbbz', SUCCEED, 'found',
./Lib/test/re_tests.py:210:8     - Unknown word (abhgefdc)      -- ('[abhgefdc]ij', 'hij', SUCCEED
./Lib/test/re_tests.py:219:14    - Unknown word (dcdcde)        -- ('a[bcd]*dcdcde', 'adcdcde', SUCCEED
./Lib/test/re_tests.py:219:24    - Unknown word (adcdcde)       -- ('a[bcd]*dcdcde', 'adcdcde', SUCCEED, 'found',
./Lib/test/re_tests.py:225:33    - Unknown word (effgz)         -- |ef*g.|h?i(j|k))', 'effgz', SUCCEED, 'found+"
./Lib/test/re_tests.py:227:33    - Unknown word (effg)          -- |ef*g.|h?i(j|k))', 'effg', FAIL),
./Lib/test/re_tests.py:228:33    - Unknown word (bcdd)          -- |ef*g.|h?i(j|k))', 'bcdd', FAIL),
./Lib/test/re_tests.py:229:33    - Unknown word (reffgz)        -- |ef*g.|h?i(j|k))', 'reffgz', SUCCEED, 'found+"
./Lib/test/re_tests.py:237:19    - Unknown word (abcabc)        -- ('(abc)\\1', 'abcabc', SUCCEED, 'g1', 'abc
./Lib/test/re_tests.py:254:16    - Unknown word (aaax)          -- ('(a)+x', 'aaax', SUCCEED, 'found+"
./Lib/test/re_tests.py:255:19    - Unknown word (aacx)          -- ('([ac])+x', 'aacx', SUCCEED, 'found+"
./Lib/test/re_tests.py:256:32    - Unknown word (tdir)          -- */)*sub1/', 'd:msgs/tdir/sub1/trial/away.cpp
./Lib/test/re_tests.py:258:23    - Unknown word (Nxyz)          -- ('([^N]*N)+', 'abNNxyzN', SUCCEED, 'found+
./Lib/test/re_tests.py:260:20    - Unknown word (abcx)          -- ('([abc]*)x', 'abcx', SUCCEED, 'found+"
./Lib/test/re_tests.py:26:43     - Unknown word (Backreference) -- PythonPython'), # Backreference
./Lib/test/re_tests.py:27:57     - Unknown word (fastmap)       -- c9,'), # Disable the fastmap optimization
./Lib/test/re_tests.py:298:20    - Unknown word (abbbcd)        -- ('([abc])*d', 'abbbcd', SUCCEED, 'found+"
./Lib/test/re_tests.py:440:18    - Unknown word (abad)          -- ('a(?!b).', 'abad', SUCCEED, 'found',
./Lib/test/re_tests.py:452:52    - Unknown word (edifact)       -- escaping with ? as in edifact
./Lib/test/re_tests.py:458:43    - Unknown word (wxyz)          -- xy(?# comment 2)z', 'wxyz', SUCCEED, 'found',
./Lib/test/re_tests.py:483:1     - Unknown word (xyzabc)        -- xyzabc
./Lib/test/re_tests.py:512:7     - Unknown word (xmllib)        -- # xmllib problem
./Lib/test/re_tests.py:513:33    - Unknown word (smil)          -- z]+):)?([a-z]+)$', 'smil', SUCCEED, 'g1+"-"+g
./Lib/test/re_tests.py:526:25    - Unknown word (abcdefdof)     -- (r'(?<!abc)(d.f)', 'abcdefdof', SUCCEED, 'found',
./Lib/test/re_tests.py:67:59     - Unknown word (Backref)       -- , SYNTAX_ERROR),  # Backref to undefined group
./Lib/test/re_tests.py:77:52     - Unknown word (abcdefghijklk) -- i)(j)(k)(l)\\119', 'abcdefghijklk9', SUCCEED, 'found+
./Lib/test/re_tests.py:90:40     - Unknown word (ceghijkmopqyz) -- i\j\k\m\o\p\q\y\z', 'ceghijkmopqyz', SUCCEED, 'found',
./Lib/test/recursion.tar:1:1       - Unknown word (bcaller)    -- bcaller                    
./Lib/test/regrtest.py:29:5      - Unknown word (mydir)      -- mydir = os.path.abspath(os
./Lib/test/seq_tests.py:119:32    - Unknown word (initseq)    -- def __init__(self, initseq):
./Lib/test/seq_tests.py:133:31    - Unknown word (iteratables) -- Create from various iteratables
./Lib/test/seq_tests.py:13:14     - Unknown word (seqn)       -- def iterfunc(seqn):
./Lib/test/seq_tests.py:13:5      - Unknown word (iterfunc)   -- def iterfunc(seqn):
./Lib/test/seq_tests.py:245:9     - Unknown word (checkfirst)  -- checkfirst = self.type2test([1
./Lib/test/seq_tests.py:247:9     - Unknown word (checklast)   -- checklast = self.type2test([StopCompare
./Lib/test/seq_tests.py:256:14    - Unknown word (minmax)      -- def test_minmax(self):
./Lib/test/seq_tests.py:261:14    - Unknown word (addmul)      -- def test_addmul(self):
./Lib/test/seq_tests.py:309:14    - Unknown word (getitemoverwriteiter) -- def test_getitemoverwriteiter(self):
./Lib/test/seq_tests.py:324:14    - Unknown word (bigrepeat)            -- def test_bigrepeat(self):
./Lib/test/seq_tests.py:86:5      - Unknown word (itermulti)  -- def itermulti(seqn):
./Lib/test/signalinterproctester.py:17:9      - Unknown word (sighup)     -- def sighup_handler(self, signum
./Lib/test/signalinterproctester.py:20:9      - Unknown word (sigusr)     -- def sigusr1_handler(self, signum
./Lib/test/signalinterproctester.py:46:14     - Unknown word (interprocess) -- def test_interprocess_signal(self):
./Lib/test/signalinterproctester.py:9:7       - Unknown word (SIGUSR)     -- class SIGUSR1Exception(Exception
./Lib/test/ssl_servers.py:17:32     - Unknown word (keycert)    -- os.path.join(here, 'keycert.pem')
./Lib/test/ssl_servers.py:184:55    - Unknown word (Diffie)     -- curve name for EC-based Diffie-Hellman')
./Lib/test/ssl_servers.py:200:21    - Unknown word (ecdh)       -- context.set_ecdh_curve(args.curve_name
./Lib/test/ssl_servers.py:37:13     - Unknown word (sslconn)    -- sslconn = self.context.wrap
./Lib/test/string_tests.py:1054:60   - Unknown word (lowo)             -- helloworld', 'startswith', 'lowo', 3)
./Lib/test/string_tests.py:1079:56   - Unknown word (hellox)           -- hello', 'startswith', ('hellox', 'hello'))
./Lib/test/string_tests.py:1081:61   - Unknown word (hellowo)          -- helloworld', 'startswith', ('hellowo',
./Lib/test/string_tests.py:1096:59   - Unknown word (worl)             -- helloworld', 'endswith', 'worl')
./Lib/test/string_tests.py:1196:26   - Unknown word (abcabcabc)        -- self.checkequal('abcabcabc', 'abc', '__mul__',
./Lib/test/string_tests.py:1253:9    - Unknown word (longvalue)        -- longvalue = sys.maxsize + 10
./Lib/test/string_tests.py:1254:9    - Unknown word (slongvalue)       -- slongvalue = str(longvalue)
./Lib/test/string_tests.py:1294:15   - Unknown word (testcapi)         -- from _testcapi import PY_SSIZE_T_MAX
./Lib/test/string_tests.py:1306:14   - Unknown word (floatformatting)  -- def test_floatformatting(self):
./Lib/test/string_tests.py:1336:52   - Unknown word (tion)             -- is the par', 'ti', 'tion method'),
./Lib/test/string_tests.py:1351:39   - Unknown word (rparti)           -- checkequal(('this is the rparti', 'ti', 'on method'
./Lib/test/string_tests.py:138:9     - Unknown word (teststrings) -- teststrings = set()
./Lib/test/string_tests.py:1436:21   - Unknown word (optimisation)     -- # Check the optimisation still occurs for standard
./Lib/test/string_tests.py:160:29    - Unknown word (abcdefghiabc) -- self.checkequal(0, 'abcdefghiabc', 'find', 'abc')
./Lib/test/string_tests.py:169:30    - Unknown word (rrarrrrrrrrra) -- self.checkequal( 2, 'rrarrrrrrrrra', 'find', 'a')
./Lib/test/string_tests.py:220:55    - Unknown word (abcz)          -- abcdefghiabc', 'rfind', 'abcz')
./Lib/test/string_tests.py:276:39    - Unknown word (abcdefghiab)   -- checkraises(ValueError, 'abcdefghiab', 'index', 'abc', 1
./Lib/test/string_tests.py:28:55     - Unknown word (fixtesttype) -- change the behaviour of fixtesttype()
./Lib/test/string_tests.py:301:39    - Unknown word (defghiabc)     -- checkraises(ValueError, 'defghiabc', 'rindex', 'def',
./Lib/test/string_tests.py:375:32    - Unknown word (startcase)     -- self.checkequal(['', ' startcase'], '| startcase', 'split
./Lib/test/string_tests.py:376:31    - Unknown word (bothcase)      -- self.checkequal(['', 'bothcase', ''], '|bothcase|'
./Lib/test/string_tests.py:394:32    - Unknown word (begincase)     -- self.checkequal(['', ' begincase'], 'test begincase'
./Lib/test/string_tests.py:39:9      - Unknown word (fixtype)     -- def fixtype(self, obj):
./Lib/test/string_tests.py:400:40    - Unknown word (abbaab)        -- checkequal(['ab', 'ab'], 'abbaab', 'split', 'ba')
./Lib/test/string_tests.py:404:32    - Unknown word (bobb)          -- self.checkequal(['A', 'bobb'], 'Abbobbbobb', 'split
./Lib/test/string_tests.py:404:41    - Unknown word (Abbobbbobb)    -- checkequal(['A', 'bobb'], 'Abbobbbobb', 'split', 'bbobb')
./Lib/test/string_tests.py:404:64    - Unknown word (bbobb)         -- Abbobbbobb', 'split', 'bbobb')
./Lib/test/string_tests.py:405:42    - Unknown word (Abbobb)        -- checkequal(['A', 'B', ''], 'AbbobbBbbobb', 'split', 'bbobb
./Lib/test/string_tests.py:405:48    - Unknown word (Bbbobb)        -- A', 'B', ''], 'AbbobbBbbobb', 'split', 'bbobb')
./Lib/test/string_tests.py:474:27    - Unknown word (bbob)          -- self.checkequal(['bbob', 'A'], 'bbobbbobbA
./Lib/test/string_tests.py:474:41    - Unknown word (bbobbbobb)     -- checkequal(['bbob', 'A'], 'bbobbbobbA', 'rsplit', 'bbobb
./Lib/test/string_tests.py:554:17    - Unknown word (thethe)        -- EQ("", "thethe", "replace", "the",
./Lib/test/string_tests.py:555:17    - Unknown word (thethethethe)  -- EQ("", "thethethethe", "replace", "the",
./Lib/test/string_tests.py:556:21    - Unknown word (theatheatheathea) -- EQ("aaaa", "theatheatheathea", "replace", "the",
./Lib/test/string_tests.py:558:13    - Unknown word (thaet)            -- EQ("thaet", "thaet", "replace
./Lib/test/string_tests.py:578:20    - Unknown word (bbobob)           -- EQ("bob", "bbobob", "replace", "bob",
./Lib/test/string_tests.py:579:16    - Unknown word (Xbob)             -- EQ("bobXbob", "bbobobXbbobob",
./Lib/test/string_tests.py:579:30    - Unknown word (Xbbobob)          -- EQ("bobXbob", "bbobobXbbobob", "replace", "bob",
./Lib/test/string_tests.py:580:24    - Unknown word (aaaaaaabob)       -- EQ("aaaaaaa", "aaaaaaabob", "replace", "bob",
./Lib/test/string_tests.py:58:9      - Unknown word (checkequal)  -- def checkequal(self, result, obj, methodname
./Lib/test/string_tests.py:595:13    - Unknown word (wwho)             -- EQ("wwho goes there?ww", "WWho
./Lib/test/string_tests.py:610:13    - Unknown word (cobob)            -- EQ("cobob", "bobob", "replace
./Lib/test/string_tests.py:610:22    - Unknown word (bobob)            -- EQ("cobob", "bobob", "replace", "bob",
./Lib/test/string_tests.py:611:18    - Unknown word (Xcobocob)         -- EQ("cobobXcobocob", "bobobXbobobob",
./Lib/test/string_tests.py:611:35    - Unknown word (Xbobobob)         -- cobobXcobocob", "bobobXbobobob", "replace", "bob",
./Lib/test/string_tests.py:615:17    - Unknown word (Kjavi)            -- EQ("ReyKKjaviKK", "Reykjavik", "replace
./Lib/test/string_tests.py:619:17    - Unknown word (Kjavik)           -- EQ("ReyKKjavik", "Reykjavik", "replace
./Lib/test/string_tests.py:63:9      - Unknown word (realresult)  -- realresult = getattr(obj, methodname
./Lib/test/string_tests.py:645:22    - Unknown word (bobobob)          -- EQ("bobob", "bobobob", "replace", "bobob
./Lib/test/string_tests.py:646:18    - Unknown word (Xbobob)           -- EQ("bobobXbobob", "bobobobXbobobob"
./Lib/test/string_tests.py:650:26    - Unknown word (onetwothree)      -- self.checkequal('onetwothree', 'one!two!three!',
./Lib/test/string_tests.py:690:26    - Unknown word (spamspam)         -- self.checkequal('spamspam', 'spamspamspam', 'removepref
./Lib/test/string_tests.py:690:38    - Unknown word (spamspamspam)     -- checkequal('spamspam', 'spamspamspam', 'removeprefix', 'spam
./Lib/test/string_tests.py:711:58    - Unknown word (blam)             -- spam', 'removesuffix', 'blam')
./Lib/test/string_tests.py:829:35    - Unknown word (xyzzyhelloxyzzy)  -- checkequal('hello', 'xyzzyhelloxyzzy', 'strip', 'xyz')
./Lib/test/string_tests.py:82:9      - Unknown word (checkraises) -- def checkraises(self, exc, obj, methodname
./Lib/test/string_tests.py:830:26    - Unknown word (helloxyzzy)       -- self.checkequal('helloxyzzy', 'xyzzyhelloxyzzy'
./Lib/test/string_tests.py:831:26    - Unknown word (xyzzyhello)       -- self.checkequal('xyzzyhello', 'xyzzyhelloxyzzy'
./Lib/test/string_tests.py:836:26    - Unknown word (mississipp)       -- self.checkequal('mississipp', 'mississippi', 'strip
./Lib/test/string_tests.py:90:9      - Unknown word (checkcall)   -- def checkcall(self, obj, methodname
./Lib/test/string_tests.py:912:34    - Unknown word (Titlecased)       -- checkequal(True, 'A Titlecased Line', 'istitle')
./Lib/test/string_tests.py:916:40    - Unknown word (Titlecase)        -- checkequal(False, 'Not\ta Titlecase String', 'istitle')
./Lib/test/subprocessdata/qgrep.py:1:50      - Unknown word (fgrep)      -- argument, simulated fgrep with a single
./Lib/test/support/__init__.py:1007:5    - Unknown word (newtests)          -- newtests = []
./Lib/test/support/__init__.py:1398:49   - Unknown word (dllhandle)         -- GetModuleFileName(sys.dllhandle)
./Lib/test/support/__init__.py:1562:29   - Unknown word (coredump)          -- disable the creation of coredump file.
./Lib/test/support/__init__.py:1688:12   - Unknown word (subinterp)         -- def run_in_subinterp(code):
./Lib/test/support/__init__.py:1690:19   - Unknown word (subinterpreter)    -- Run code in a subinterpreter. Raise unittest.SkipTest
./Lib/test/support/__init__.py:172:36    - Unknown word (bigmem)            -- # Disable bigmem tests (they will still
./Lib/test/support/__init__.py:1833:10   - Unknown word (pymalloc)          -- def with_pymalloc():
./Lib/test/support/__init__.py:1895:19   - Unknown word (sdev)              -- # Return mean and sdev of number of collisions
./Lib/test/support/__init__.py:1895:61   - Unknown word (nballs)            -- collisions when tossing nballs balls
./Lib/test/support/__init__.py:1896:28   - Unknown word (nbins)             -- uniformly at random into nbins bins.  By definition
./Lib/test/support/__init__.py:1907:28   - Unknown word (meanempty)         -- n*(n-1)*(1-2/n)**k + meanempty - meanempty**2 =
./Lib/test/support/__init__.py:1935:61   - Unknown word (unraisablehook)    -- exception using sys.unraisablehook.
./Lib/test/support/__init__.py:296:28    - Unknown word (sysname)           -- requires_unix_version(sysname, min_version):
./Lib/test/support/__init__.py:379:11    - Unknown word (fsanitize)         -- '-fsanitize=memory' in _cflags or
./Lib/test/support/__init__.py:40:20     - Unknown word (bigaddrspacetest) -- "bigmemtest", "bigaddrspacetest", "cpython_only", "get
./Lib/test/support/__init__.py:434:13    - Unknown word (getformat)         -- float.__getformat__("double").startswith
./Lib/test/support/__init__.py:43:41     - Unknown word (strfptime)        -- "skip_if_buggy_ucrt_strfptime",
./Lib/test/support/__init__.py:465:25    - Unknown word (capi)              -- requires_legacy_unicode_capi = unittest.skipUnless
./Lib/test/support/__init__.py:47:6      - Unknown word (setswitchinterval) -- "setswitchinterval",
./Lib/test/support/__init__.py:499:56    - Unknown word (libc's)            -- errors generated by macOS libc's malloc are
./Lib/test/support/__init__.py:49:11     - Unknown word (urlresource)       -- "open_urlresource",
./Lib/test/support/__init__.py:538:5     - Unknown word (reprpairs)         -- reprpairs = ["%r: %r" % pair for
./Lib/test/support/__init__.py:539:5     - Unknown word (withcommas)        -- withcommas = ", ".join(reprpairs
./Lib/test/support/__init__.py:53:38     - Unknown word (findfile)          -- locale", "swap_item", "findfile",
./Lib/test/support/__init__.py:542:45    - Unknown word (errtext)           -- testcase, statement, errtext='', *, lineno=None,
./Lib/test/support/__init__.py:54:69     - Unknown word (sortdict)          -- SuppressCrashReport", "sortdict",
./Lib/test/support/__init__.py:590:16    - Unknown word (addheaders)        -- opener.addheaders.append(('Accept-Encoding
./Lib/test/support/__init__.py:675:20    - Unknown word (isenabled)         -- # have_gc = gc.isenabled()
./Lib/test/support/__init__.py:697:18    - Unknown word (getobjects)        -- if hasattr(sys, "getobjects"):
./Lib/test/support/__init__.py:700:2     - Unknown word (vheader)           -- _vheader = _header + 'n'
./Lib/test/support/__init__.py:702:5     - Unknown word (calcobjsize)       -- def calcobjsize(fmt):
./Lib/test/support/__init__.py:706:5     - Unknown word (calcvobjsize)      -- def calcvobjsize(fmt):
./Lib/test/support/__init__.py:715:13    - Unknown word (testinternalcapi)  -- import _testinternalcapi
./Lib/test/support/__init__.py:730:21    - Unknown word (catstr)            -- def run_with_locale(catstr, *locales):
./Lib/test/support/__init__.py:763:17    - Unknown word (tzset)             -- tzset = time.tzset
./Lib/test/support/__init__.py:828:14    - Unknown word (procfile)          -- self.procfile = '/proc/{pid}/statm
./Lib/test/support/__init__.py:828:38    - Unknown word (statm)             -- procfile = '/proc/{pid}/statm'.format(pid=os.getpid
./Lib/test/support/__init__.py:948:9     - Unknown word (guardnames)        -- guardnames, default = _parse_guards
./Lib/test/support/bytecode_helper.py:17:43     - Unknown word (argval)     -- rtInBytecode(self, x, opname, argval=_UNSPECIFIED):
./Lib/test/support/hashlib_helper.py:11:14     - Unknown word (hashdigest) -- def requires_hashdigest(digestname, openssl
./Lib/test/support/hashlib_helper.py:11:25     - Unknown word (digestname) -- requires_hashdigest(digestname, openssl=None, usedforsecurit
./Lib/test/support/import_helper.py:205:21    - Unknown word (oldmodules) -- def modules_cleanup(oldmodules):
./Lib/test/support/import_helper.py:217:53    - Unknown word (importhooks) -- this function (as test_importhooks and test_pkg
./Lib/test/support/interpreters.py:1:4       - Unknown word (Subinterpreters) -- """Subinterpreters High Level Module."
./Lib/test/support/interpreters.py:4:9       - Unknown word (xxsubinterpreters) -- import _xxsubinterpreters as _interpreters
./Lib/test/support/os_helper.py:193:6     - Unknown word (xattr)      -- _can_xattr = None
./Lib/test/support/os_helper.py:244:34    - Unknown word (waitall)    -- waitfor(func, pathname, waitall=False):
./Lib/test/support/os_helper.py:304:10    - Unknown word (longpath)   -- def _longpath(path):
./Lib/test/support/os_helper.py:433:20    - Unknown word (tempcwd)    -- def temp_cwd(name='tempcwd', quiet=False):
./Lib/test/support/os_helper.py:566:9     - Unknown word (oldmask)    -- oldmask = os.umask(umask)
./Lib/test/support/os_helper.py:84:29     - Unknown word (Alef)       -- 05D0 (Hebrew Letter Alef): Encodable to cp42
./Lib/test/support/script_helper.py:108:24    - Unknown word (cleanenv)   -- if env_vars.pop('__cleanenv', None):
./Lib/test/support/socket_helper.py:71:45     - Unknown word (tempsock)   -- family, socktype) as tempsock:
./Lib/test/support/socket_helper.py:84:5      - Unknown word (multicasting) -- multicasting via multiple UDP sockets
./Lib/test/test__osx_support.py:74:26     - Unknown word (pthreads)   -- 'CC': 'gcc-test -pthreads',
./Lib/test/test_abc.py:176:17    - Unknown word (abstractthing) -- for abstractthing in [abc.abstractmethod
./Lib/test/test_abc.py:234:18    - Unknown word (customdescriptors) -- def test_customdescriptors_with_abstractmethod
./Lib/test/test_argparse.py:1203:51   - Unknown word (narg)       -- no nargs, optional narg and 1 nargs"""
./Lib/test/test_argparse.py:1587:18   - Unknown word (backupattr) -- self.backupattr = BIN_STDOUT_SENTINEL
./Lib/test/test_argparse.py:1603:4    - Unknown word (bstdin)     -- eq_bstdin = StdStreamComparer
./Lib/test/test_argparse.py:1604:4    - Unknown word (bstdout)    -- eq_bstdout = StdStreamComparer
./Lib/test/test_argparse.py:1605:4    - Unknown word (bstderr)    -- eq_bstderr = StdStreamComparer
./Lib/test/test_argparse.py:171:36    - Unknown word (bodydict)   -- _(cls, name, bases, bodydict):
./Lib/test/test_argparse.py:204:13    - Unknown word (listargs)   -- def listargs(parser, args):
./Lib/test/test_argparse.py:208:13    - Unknown word (sysargs)    -- def sysargs(parser, args):
./Lib/test/test_argparse.py:2419:14   - Unknown word (nongroup)   -- def test_nongroup_first(self):
./Lib/test/test_argparse.py:2446:29   - Unknown word (frell)      -- group.add_argument('frell')
./Lib/test/test_argparse.py:2499:21   - Unknown word (granparent) -- def test_single_granparent_mutex(self):
./Lib/test/test_argparse.py:2565:9    - Unknown word (wxyzabe)    -- wxyzabe_parser = subparsers
./Lib/test/test_argparse.py:2767:32   - Unknown word (fghij)      -- parser.add_argument('--fghij', help='fghij help'
./Lib/test/test_argparse.py:2769:31   - Unknown word (klmno)      -- group.add_argument('--klmno', help='klmno help'
./Lib/test/test_argparse.py:2770:31   - Unknown word (pqrst)      -- group.add_argument('--pqrst', help='pqrst help'
./Lib/test/test_argparse.py:298:35    - Unknown word (yyyx)       -- '-yx', '-yz a', '-yyyx', '-yyyza', '-xyza'
./Lib/test/test_argparse.py:298:44    - Unknown word (yyyza)      -- '-yz a', '-yyyx', '-yyyza', '-xyza']
./Lib/test/test_argparse.py:298:54    - Unknown word (xyza)       -- -yyyx', '-yyyza', '-xyza']
./Lib/test/test_argparse.py:3156:44   - Unknown word (xfoox)      -- argument('-x', default='xfoox')
./Lib/test/test_argparse.py:3187:9    - Unknown word (xparser)    -- xparser = parser.add_subparsers
./Lib/test/test_argparse.py:332:61    - Unknown word (foorab)     -- Sig('-foobar'), Sig('-foorab')]
./Lib/test/test_argparse.py:333:50    - Unknown word (foob)       -- '-fo', '-foo b', '-foob', '-fooba', '-foora
./Lib/test/test_argparse.py:333:59    - Unknown word (fooba)      -- -foo b', '-foob', '-fooba', '-foora']
./Lib/test/test_argparse.py:333:69    - Unknown word (foora)      -- -foob', '-fooba', '-foora']
./Lib/test/test_argparse.py:3505:14   - Unknown word (ekiekiekifekang) -- Sig('ekiekiekifekang', help='EKI HELP'),
./Lib/test/test_argparse.py:353:12    - Unknown word (foor)       -- ('-foor a', NS(foobar=None,
./Lib/test/test_argparse.py:3689:16   - Unknown word (bazz)            -- Sig('--bazz', action=argparse.BooleanOpti
./Lib/test/test_argparse.py:3690:56   - Unknown word (Bazz)            -- argparse.SUPPRESS, help='Bazz!'),
./Lib/test/test_argparse.py:400:13    - Unknown word (badg)       -- ('--badg', NS(badger=True, bat
./Lib/test/test_argparse.py:433:28    - Unknown word (fbar)       -- failures = ['--bar', '-fbar', '-fbaz', '-bazf',
./Lib/test/test_argparse.py:433:37    - Unknown word (fbaz)       -- '--bar', '-fbar', '-fbaz', '-bazf', '-b B',
./Lib/test/test_argparse.py:433:46    - Unknown word (bazf)       -- '-fbar', '-fbaz', '-bazf', '-b B', 'B']
./Lib/test/test_argparse.py:4399:16   - Unknown word (quux)            -- Sig('--quux', help="Set the quux
./Lib/test/test_argparse.py:4907:24   - Unknown word (starkwargs)      -- def test_namespace_starkwargs_notidentifier(self)
./Lib/test/test_argparse.py:4907:35   - Unknown word (notidentifier)   -- namespace_starkwargs_notidentifier(self):
./Lib/test/test_argparse.py:5033:35   - Unknown word (Xargument)       -- parser.parse_args(['myXargument'])
./Lib/test/test_argparse.py:528:65    - Unknown word (zabbaz)     -- Sig('--baz', dest='zabbaz')]
./Lib/test/test_argparse.py:5323:20   - Unknown word (zeroormore)      -- def test_nargs_zeroormore_metavar_string(self
./Lib/test/test_argparse.py:5340:20   - Unknown word (oneormore)       -- def test_nargs_oneormore_metavar_string(self
./Lib/test/test_argparse.py:5494:22   - Unknown word (spammy)          -- 'this_is_spammy_prog_with_a_long_name
./Lib/test/test_argparse.py:679:12    - Unknown word (xfoo)       -- ('-xfoo', NS(x='foo')),
./Lib/test/test_argparse.py:818:16    - Unknown word (foobaz)     -- Sig('--foobaz'),
./Lib/test/test_argparse.py:819:16    - Unknown word (fooble)     -- Sig('--fooble', action='store_true
./Lib/test/test_argparse.py:826:13    - Unknown word (foobl)      -- ('--foobl --foo g', NS(foo='g
./Lib/test/test_argparse.py:836:16    - Unknown word (foodle)     -- Sig('--foodle', action='store_true
./Lib/test/test_argparse.py:837:16    - Unknown word (foonly)     -- Sig('--foonly'),
./Lib/test/test_argparse.py:839:19    - Unknown word (foon)       -- failures = ['-foon 3', '--foon 3', '--food
./Lib/test/test_argparse.py:879:12    - Unknown word (ccrcc)      -- ('-ccrcc', NS(r='cc', c=2)),
./Lib/test/test_array.py:1056:14   - Unknown word (coveritertraverse) -- def test_coveritertraverse(self):
./Lib/test/test_array.py:1088:46   - Unknown word (fromunicode)       -- assertRaises(BufferError, a.fromunicode, a.tounicode())
./Lib/test/test_array.py:1109:40   - Unknown word (getrefcount)       -- skipUnless(hasattr(sys, 'getrefcount'),
./Lib/test/test_array.py:1134:9    - Unknown word (basesize)          -- basesize = support.calcvobjsize
./Lib/test/test_array.py:1180:38   - Unknown word (ufefe)             -- llerexample = '\x01\u263a\x00\ufefe'
./Lib/test/test_array.py:1268:14   - Unknown word (iterationcontains) -- def test_iterationcontains(self):
./Lib/test/test_array.py:1326:7    - Unknown word (Intable)           -- class Intable:
./Lib/test/test_array.py:168:30    - Unknown word (mformat)       -- valid_typecodes, mformat_code, struct_fmt, values
./Lib/test/test_array.py:169:13    - Unknown word (arraystr)      -- arraystr = struct.pack(struct
./Lib/test/test_array.py:183:26    - Unknown word (Journ)         -- teststr = "Bonne Journ\xe9e \U0002030a\U00
./Lib/test/test_array.py:183:9     - Unknown word (teststr)       -- teststr = "Bonne Journ\xe9e
./Lib/test/test_array.py:1:13      - Unknown word (arraymodule) -- """Test the arraymodule.
./Lib/test/test_array.py:203:7     - Unknown word (smallerexample) -- # smallerexample: the same length as
./Lib/test/test_array.py:204:7     - Unknown word (biggerexample)  -- # biggerexample: the same length as
./Lib/test/test_array.py:206:7     - Unknown word (minitemsize)    -- # minitemsize: the minimum guaranteed
./Lib/test/test_array.py:211:9     - Unknown word (badtypecode)    -- def badtypecode(self):
./Lib/test/test_array.py:239:14    - Unknown word (byteswap)       -- def test_byteswap(self):
./Lib/test/test_array.py:26:34     - Unknown word (newarg)      -- init__(self, typecode, newarg=None):
./Lib/test/test_array.py:29:1      - Unknown word (typecodes)   -- typecodes = 'ubBhHiIlLfdqQ'
./Lib/test/test_array.py:29:22     - Unknown word (Lfdq)        -- typecodes = 'ubBhHiIlLfdqQ'
./Lib/test/test_array.py:313:13    - Unknown word (itorig)         -- itorig = iter(orig)
./Lib/test/test_array.py:452:14    - Unknown word (tofromfile)     -- def test_tofromfile(self):
./Lib/test/test_array.py:485:14    - Unknown word (filewrite)      -- def test_filewrite(self):
./Lib/test/test_array.py:504:14    - Unknown word (tofromlist)     -- def test_tofromlist(self):
./Lib/test/test_array.py:514:14    - Unknown word (tofrombytes)    -- def test_tofrombytes(self):
./Lib/test/test_array.py:527:14    - Unknown word (fromarray)      -- def test_fromarray(self):
./Lib/test/test_array.py:97:12     - Unknown word (Reconstructor) -- class ArrayReconstructorTest(unittest.TestCase
./Lib/test/test_ast.py:1237:34   - Unknown word (myclass)     -- return ast.ClassDef("myclass", bases, keywords,
./Lib/test/test_ast.py:1363:9    - Unknown word (assrt)       -- assrt = ast.Assert(ast.Name
./Lib/test/test_ast.py:1374:14   - Unknown word (importfrom)  -- def test_importfrom(self):
./Lib/test/test_ast.py:1424:14   - Unknown word (ifexp)       -- def test_ifexp(self):
./Lib/test/test_ast.py:1481:14   - Unknown word (generatorexp) -- def test_generatorexp(self):
./Lib/test/test_ast.py:1538:15   - Unknown word (subfloat)     -- class subfloat(float):
./Lib/test/test_ast.py:1540:15   - Unknown word (subcomplex)   -- class subcomplex(complex):
./Lib/test/test_ast.py:1935:9    - Unknown word (fdef)         -- fdef = ast.parse(s).body
./Lib/test/test_ast.py:1961:9    - Unknown word (cdef)         -- cdef = ast.parse(s).body
./Lib/test/test_ast.py:2038:9    - Unknown word (fstr)         -- fstr = self._parse_value
./Lib/test/test_ast.py:2211:22   - Unknown word (ЖЖЖЖЖ)        -- "ЖЖЖЖЖ"
./Lib/test/test_ast.py:2279:54   - Unknown word (wlog)         -- warnings(record=True) as wlog:
./Lib/test/test_ast.py:259:16    - Unknown word (Trueorder)  -- def _assertTrueorder(self, ast_node, parent
./Lib/test/test_ast.py:402:14    - Unknown word (classattrs) -- def test_classattrs(self):
./Lib/test/test_ast.py:462:14    - Unknown word (realtype)   -- def test_realtype(self):
./Lib/test/test_ast.py:545:14    - Unknown word (nodeclasses) -- def test_nodeclasses(self):
./Lib/test/test_ast.py:551:11    - Unknown word (foobarbaz)   -- x.foobarbaz = 5
./Lib/test/test_ast.py:556:9     - Unknown word (addop)       -- addop = ast.Add()
./Lib/test/test_ast.py:778:44    - Unknown word (Contant)     -- redundant kind for Contant node
./Lib/test/test_asyncgen.py:1180:13   - Unknown word (sgen)       -- def sgen():
./Lib/test/test_asyncgen.py:1605:23   - Unknown word (nonstarted) -- def test_asyncgen_nonstarted_hooks_are_cancellable
./Lib/test/test_asyncgen.py:517:26    - Unknown word (aiter)      -- def test_async_gen_aiter(self):
./Lib/test/test_asyncgen.py:52:8      - Unknown word (anext)      -- def py_anext(iterator, default=_no
./Lib/test/test_asyncgen.py:610:23    - Unknown word (Anext)      -- class WithIterAnext:
./Lib/test/test_asyncgen.py:662:19    - Unknown word (agenfn)     -- async def agenfn():
./Lib/test/test_asyncgen.py:74:39     - Unknown word (crosstest)  -- exactly what we want -- crosstest pure-Python high-level
./Lib/test/test_asynchat.py:106:5     - Unknown word (usepoll)    -- usepoll = False
./Lib/test/test_asynchat.py:151:40    - Unknown word (termlen)    -- terminator_check(self, termlen):
./Lib/test/test_asyncore.py:105:14    - Unknown word (readwriteexc)  -- def test_readwriteexc(self):
./Lib/test/test_asyncore.py:138:32    - Unknown word (expt)          -- attributes = ('read', 'expt', 'write', 'closed'
./Lib/test/test_asyncore.py:149:15    - Unknown word (testobj)       -- class testobj:
./Lib/test/test_asyncore.py:172:19    - Unknown word (expectedattr)  -- for flag, expectedattr in expected:
./Lib/test/test_asyncore.py:173:13    - Unknown word (tobj)          -- tobj = testobj()
./Lib/test/test_asyncore.py:194:14    - Unknown word (closeall)      -- def test_closeall(self):
./Lib/test/test_asyncore.py:200:30    - Unknown word (usedefault)    -- closeall_check(self, usedefault):
./Lib/test/test_asyncore.py:204:9     - Unknown word (testmap)       -- testmap = {}
./Lib/test/test_asyncore.py:212:13    - Unknown word (socketmap)     -- socketmap = asyncore.socket_map
./Lib/test/test_asyncore.py:26:7      - Unknown word (dummysocket) -- class dummysocket:
./Lib/test/test_asyncore.py:315:26    - Unknown word (noread)             -- class dispatcherwithsend_noread(asyncore.dispatcher
./Lib/test/test_asyncore.py:315:7     - Unknown word (dispatcherwithsend) -- class dispatcherwithsend_noread(asyncore.dispatcher
./Lib/test/test_asyncore.py:36:7      - Unknown word (dummychannel) -- class dummychannel:
./Lib/test/test_asyncore.py:43:7      - Unknown word (exitingdummy) -- class exitingdummy:
./Lib/test/test_asyncore.py:54:7      - Unknown word (crashingdummy) -- class crashingdummy:
./Lib/test/test_asyncore.py:69:30     - Unknown word (serv)          -- capture_server(evt, buf, serv):
./Lib/test/test_atexit.py:52:7      - Unknown word (Subinterpreter) -- class SubinterpreterTest(unittest.TestCase
./Lib/test/test_atexit.py:58:21     - Unknown word (ncallbacks)     -- n = atexit._ncallbacks()
./Lib/test/test_base64.py:116:20    - Unknown word (nonbyte)    -- self.check_nonbyte_element_format(base
./Lib/test/test_base64.py:185:29    - Unknown word (Ghvbi)      -- tests = {b"d3d3LnB5dGhvbi5vcmc=": b"www.python
./Lib/test/test_base64.py:185:35    - Unknown word (vcmc)       -- = {b"d3d3LnB5dGhvbi5vcmc=": b"www.python.org
./Lib/test/test_base64.py:207:57    - Unknown word (xbeo)       -- cd', b'*$'): b'\xd3V\xbeo\xf7\x1d',
./Lib/test/test_base64.py:405:59    - Unknown word (Ng'GVB)     -- -'"9eu7#RLhG$k3[W&.oNg'GVB"(`=52*$$"""
./Lib/test/test_base64.py:408:49    - Unknown word (YOHG)       -- pHnJ:W<)KS>/9Ll%"IN/`jYOHG]iPa.Q$R$jD4S=Q7DTV8
./Lib/test/test_base64.py:409:20    - Unknown word (nsrd)       -- b"""nsrdW2ZetXKAY/Yd(L?['d?O
./Lib/test/test_base64.py:409:29    - Unknown word (XKAY)       -- b"""nsrdW2ZetXKAY/Yd(L?['d?O\\@K2_]Y2
./Lib/test/test_base64.py:410:35    - Unknown word (gtgi)       -- b"""*^:jeCE.%f\\,!5gtgiEi8N\\UjQ5OekiqBum-X
./Lib/test/test_base64.py:410:49    - Unknown word (Oekiq)      -- f\\,!5gtgiEi8N\\UjQ5OekiqBum-X60nF?)@o_%qPq"ad
./Lib/test/test_base64.py:457:70    - Unknown word (Tbai)       -- ioWMyV&XlZI|Y;A6DaB*^Tbai%j"""
./Lib/test/test_base64.py:458:23    - Unknown word (Jqze)       -- b"""czJqze0_d@fPsR8goTEOh>41ejE
./Lib/test/test_base64.py:458:50    - Unknown word (ukdcy)      -- d@fPsR8goTEOh>41ejE#<ukdcy;l$Dm3n3<ZJoSmMZprN9p
./Lib/test/test_base64.py:460:42    - Unknown word (Njxq)       -- 9zP<)YaD4*xB0K+}+;a;Njxq<mKk)=;`X~?CtLF@bU8V
./Lib/test/test_base64.py:464:63    - Unknown word (UIZOH)      -- ZEkOHadLBXb#`}nd3r%YLqtVJM@UIZOH55pPf$@("""
./Lib/test/test_base64.py:466:36    - Unknown word (PVPs)       -- no padding..': b'Zf_uPVPs@!Zf7no',
./Lib/test/test_base64.py:470:41    - Unknown word (Wgug)       -- compr: ': b'Q*dEpWgug3ZE$irARr(h',
./Lib/test/test_base64.py:496:68    - Unknown word (Jand)       -- qtRH$VbC6UX@47n?3D92&&T:Jand;c"""
./Lib/test/test_base64.py:504:46    - Unknown word (compr)      -- D/aMV+<VdL': b'Space compr: ',
./Lib/test/test_base64.py:669:24    - Unknown word (Rpbjpvc)    -- br"b'QWxhZGRpbjpvcGVuIHNlc2FtZQ==\n'",
./Lib/test/test_bdb.py:1166:22   - Unknown word (subgen)     -- def test_subgen():
./Lib/test/test_bdb.py:131:26    - Unknown word (bpnum)      -- def set_ignore(self, bpnum):
./Lib/test/test_bdb.py:15:22     - Unknown word (tfunc)      -- ('line', 2, 'tfunc_main'), ('step', )
./Lib/test/test_bdb.py:182:63    - Unknown word (ceval)      -- exc_trace() in Python/ceval.c discards
./Lib/test/test_bdb.py:280:17    - Unknown word (bpnums)     -- bpnums = sorted(bps.keys()
./Lib/test/test_bdb.py:6:38      - Unknown word (eargs)      -- [lineno[, co_name[, eargs]]]]), (set_type, [sargs
./Lib/test/test_bdb.py:6:62      - Unknown word (sargs)      -- eargs]]]]), (set_type, [sargs])
./Lib/test/test_bdb.py:90:9      - Unknown word (enab)       -- enab = 'yes' if bp.enabled
./Lib/test/test_bigmem.py:1170:12   - Unknown word (overallocates)       -- # list overallocates ~1/8th of the total
./Lib/test/test_bigmem.py:133:9     - Unknown word (sublen)              -- sublen = len(SUBSTR)
./Lib/test/test_bigmem.py:241:39    - Unknown word (Abbbbb)              -- assertTrue(x.endswith(_('Abbbbb')))
./Lib/test/test_bigmem.py:29:53     - Unknown word (precisionbigmemtest) -- be meaningful.  The precisionbigmemtest will
./Lib/test/test_bigmem.py:33:18     - Unknown word (houserules)          -- # Bigmem testing houserules:
./Lib/test/test_bigmem.py:36:63     - Unknown word (largestring)         -- forget that 's = create_largestring()'
./Lib/test/test_bigmem.py:41:39     - Unknown word (errormessage)        -- lengthy operation and the errormessage will be utterly useless
./Lib/test/test_bigmem.py:436:21    - Unknown word (Spaa)                -- SUBSTR = _('SpaaHAaaAaham')
./Lib/test/test_bigmem.py:436:29    - Unknown word (Aaham)               -- SUBSTR = _('SpaaHAaaAaham')
./Lib/test/test_bigmem.py:49:31     - Unknown word (subobject)           -- large object, make the subobject of a length that is
./Lib/test/test_bigmem.py:504:9     - Unknown word (stepsize)            -- stepsize = len(s) // 100
./Lib/test/test_bigmem.py:580:51    - Unknown word (expectedsize)        -- self, size, enc, c='.', expectedsize=None):
./Lib/test/test_bigmem.py:719:61    - Unknown word (DFFF)                -- surrogates \uDC00-\uDFFF.
./Lib/test/test_bigmem.py:720:19    - Unknown word (DCBA)                -- char = "\uDCBA"
./Lib/test/test_bigmem.py:726:47    - Unknown word (udcba)               -- assertTrue(r.endswith(r"\udcba'"), r[-10:])
./Lib/test/test_bigmem.py:739:52    - Unknown word (dcba)                -- assertTrue(r.endswith(r"\U0001dcba'"), r[-12:])
./Lib/test/test_bigmem.py:7:36      - Unknown word (bitrot)     -- themselves don't suffer from bitrot. To run them for real
./Lib/test/test_bigmem.py:86:20     - Unknown word (rpadsize)            -- lpadsize = rpadsize = (len(s) - len(SUBSTR
./Lib/test/test_bigmem.py:86:9      - Unknown word (lpadsize)            -- lpadsize = rpadsize = (len(s
./Lib/test/test_bigmem.py:978:34    - Unknown word (Falses)              -- The repr of a tuple of Falses is exactly 7 times the
./Lib/test/test_binascii.py:254:16    - Unknown word (hexlification) -- # test hexlification
./Lib/test/test_binascii.py:277:23    - Unknown word (pystrhex)      -- # path within pystrhex.c.
./Lib/test/test_binascii.py:95:13     - Unknown word (addnoise)   -- def addnoise(line):
./Lib/test/test_binop.py:13:5      - Unknown word (isint)      -- def isint(x):
./Lib/test/test_binop.py:17:5      - Unknown word (isnum)      -- def isnum(x):
./Lib/test/test_binop.py:419:23    - Unknown word (rmethod)    -- def test_fallback_rmethod_blocking(self):
./Lib/test/test_bisect.py:139:20    - Unknown word (pyrange)    -- def test_large_pyrange(self):
./Lib/test/test_bisect.py:190:14    - Unknown word (backcompatibility) -- def test_backcompatibility(self):
./Lib/test/test_bisect.py:224:34    - Unknown word (Iiij)              -- sorted('aBcDeEfgHhiIiij', key=keyfunc)
./Lib/test/test_bisect.py:241:30    - Unknown word (targetlist)        -- a target list, the targetlist remains sorted.
./Lib/test/test_bisect.py:271:13    - Unknown word (insorted)          -- for insorted in (list(), UserList
./Lib/test/test_bool.py:237:14    - Unknown word (fileclosed) -- def test_fileclosed(self):
./Lib/test/test_bool.py:277:14    - Unknown word (picklevalues) -- def test_picklevalues(self):
./Lib/test/test_bool.py:325:13    - Unknown word (badval)       -- for badval in ['illegal', -1,
./Lib/test/test_buffer.py:1027:19   - Unknown word (STRIDED)       -- PyBUF_STRIDED, PyBUF_STRIDED_RO,
./Lib/test/test_buffer.py:1028:19   - Unknown word (CONTIG)        -- PyBUF_CONTIG, PyBUF_CONTIG_RO,
./Lib/test/test_buffer.py:1051:9    - Unknown word (ndflags)       -- ndflags = (
./Lib/test/test_buffer.py:110:1     - Unknown word (fmtdict)    -- fmtdict = {
./Lib/test/test_buffer.py:1347:22   - Unknown word (multidim)      -- def test_ndarray_multidim(self):
./Lib/test/test_buffer.py:13:34     - Unknown word (Krah)       -- and designed by Stefan Krah for Python 3.3.
./Lib/test/test_buffer.py:148:4     - Unknown word (bytefmt)    -- 'bytefmt': (['@b', 'b'],
./Lib/test/test_buffer.py:1541:32   - Unknown word (lobject)       -- assign single value: lobject = robject
./Lib/test/test_buffer.py:1541:42   - Unknown word (robject)       -- single value: lobject = robject
./Lib/test/test_buffer.py:1734:21   - Unknown word (listerr)       -- listerr = None
./Lib/test/test_buffer.py:1740:21   - Unknown word (nderr)         -- nderr = None
./Lib/test/test_buffer.py:1742:25   - Unknown word (ndsliced)      -- ndsliced = nd[slices]
./Lib/test/test_buffer.py:1788:17   - Unknown word (lslice)        -- for lslice in genslices(5):
./Lib/test/test_buffer.py:1797:25   - Unknown word (lsterr)        -- lsterr = None
./Lib/test/test_buffer.py:1801:29   - Unknown word (lval)          -- lval = lst[lslice]
./Lib/test/test_buffer.py:1823:25   - Unknown word (mverr)         -- mverr = None
./Lib/test/test_buffer.py:186:5     - Unknown word (xfmt)       -- xfmt = mode + '#'
./Lib/test/test_buffer.py:1885:17   - Unknown word (xlist)         -- xlist = x.tolist()
./Lib/test/test_buffer.py:1889:21   - Unknown word (mvlist)        -- mvlist = mv.tolist()
./Lib/test/test_buffer.py:188:5     - Unknown word (nmemb)      -- nmemb = randrange(2, 10)
./Lib/test/test_buffer.py:1895:21   - Unknown word (ylist)         -- ylist = y.tolist()
./Lib/test/test_buffer.py:1954:17   - Unknown word (litems)        -- litems = randitems_from_structure
./Lib/test/test_buffer.py:1955:17   - Unknown word (ritems)        -- ritems = randitems_from_structure
./Lib/test/test_buffer.py:1960:17   - Unknown word (xllist)        -- xllist = xl.tolist()
./Lib/test/test_buffer.py:1961:17   - Unknown word (xrlist)        -- xrlist = xr.tolist()
./Lib/test/test_buffer.py:1973:21   - Unknown word (yllist)        -- yllist = yl.tolist()
./Lib/test/test_buffer.py:1974:21   - Unknown word (yrlist)        -- yrlist = yr.tolist()
./Lib/test/test_buffer.py:198:5     - Unknown word (randitems)  -- def randitems(n, obj='ndarray', mode
./Lib/test/test_buffer.py:2165:13   - Unknown word (ndbytes)       -- ndbytes = nd.tobytes()
./Lib/test/test_buffer.py:217:17    - Unknown word (nitems)     -- def iter_format(nitems, testobj='ndarray')
./Lib/test/test_buffer.py:2219:17   - Unknown word (testbuffer's)  -- ### _testbuffer's ndarray:
./Lib/test/test_buffer.py:243:5     - Unknown word (atomp)      -- def atomp(lst):
./Lib/test/test_buffer.py:247:5     - Unknown word (listp)      -- def listp(lst):
./Lib/test/test_buffer.py:2486:13   - Unknown word (msrc)          -- msrc = memoryview(ex)
./Lib/test/test_buffer.py:2488:11   - Unknown word (Monodimensional) -- # Monodimensional empty view can be cast
./Lib/test/test_buffer.py:2499:9    - Unknown word (vsize)           -- vsize = support.calcvobjsize
./Lib/test/test_buffer.py:2500:24   - Unknown word (Pnin)            -- base_struct = 'Pnin 2P2n2i5P P'
./Lib/test/test_buffer.py:2577:13   - Unknown word (sfmt)            -- for sfmt in NON_BYTE_FORMAT:
./Lib/test/test_buffer.py:2578:13   - Unknown word (sformat)         -- sformat = '@' + sfmt if randrange
./Lib/test/test_buffer.py:2581:17   - Unknown word (dformat)         -- dformat = '@' + dfmt if randrange
./Lib/test/test_buffer.py:2587:19   - Unknown word (sitems)          -- for sfmt, sitems, _ in iter_format(1
./Lib/test/test_buffer.py:2691:9    - Unknown word (bytespec)        -- bytespec = (
./Lib/test/test_buffer.py:2698:13   - Unknown word (srcsize)         -- srcsize = struct.calcsize(fmt
./Lib/test/test_buffer.py:2699:29   - Unknown word (bytelist)        -- for bytefmt, to_bytelist in bytespec:
./Lib/test/test_buffer.py:2719:20   - Unknown word (destshape)       -- destitems, destshape = cast_items(ex, 'B
./Lib/test/test_buffer.py:2719:9    - Unknown word (destitems)       -- destitems, destshape = cast_items
./Lib/test/test_buffer.py:2728:9    - Unknown word (destsize)        -- destsize = struct.calcsize('I
./Lib/test/test_buffer.py:2753:14   - Unknown word (tshape)          -- for _tshape in gencastshapes():
./Lib/test/test_buffer.py:2759:17   - Unknown word (tfmt)            -- tfmt = ('', '@')[randrange
./Lib/test/test_buffer.py:2760:17   - Unknown word (tsize)           -- tsize = struct.calcsize(tfmt
./Lib/test/test_buffer.py:2771:21   - Unknown word (titems)          -- titems, tshape = cast_items
./Lib/test/test_buffer.py:301:5     - Unknown word (carray)     -- def carray(items, shape):
./Lib/test/test_buffer.py:306:5     - Unknown word (farray)     -- def farray(items, shape):
./Lib/test/test_buffer.py:3114:13   - Unknown word (cmptest)         -- def cmptest(testcase, a, b, m, singleitem
./Lib/test/test_buffer.py:3114:40   - Unknown word (singleitem)      -- cmptest(testcase, a, b, m, singleitem):
./Lib/test/test_buffer.py:316:5     - Unknown word (getindex)   -- def getindex(ndim, ind, strides)
./Lib/test/test_buffer.py:329:5     - Unknown word (sstrides)   -- sstrides = strides_from_shape
./Lib/test/test_buffer.py:330:5     - Unknown word (dstrides)   -- dstrides = strides_from_shape
./Lib/test/test_buffer.py:359:5     - Unknown word (multislice) -- def multislice(lst, slices):
./Lib/test/test_buffer.py:363:24    - Unknown word (sublst)     -- return [multislice(sublst, slices[1:]) for sublst
./Lib/test/test_buffer.py:365:14    - Unknown word (llst)       -- def m_assign(llst, rlst, lslices, rslices
./Lib/test/test_buffer.py:365:20    - Unknown word (rlst)       -- def m_assign(llst, rlst, lslices, rslices):
./Lib/test/test_buffer.py:365:26    - Unknown word (lslices)    -- m_assign(llst, rlst, lslices, rslices):
./Lib/test/test_buffer.py:365:35    - Unknown word (rslices)    -- llst, rlst, lslices, rslices):
./Lib/test/test_buffer.py:389:5     - Unknown word (lshape)     -- lshape = slice_shape(llst,
./Lib/test/test_buffer.py:390:5     - Unknown word (rshape)     -- rshape = slice_shape(rlst,
./Lib/test/test_buffer.py:3913:11   - Unknown word (richcompare)     -- # richcompare
./Lib/test/test_buffer.py:403:27    - Unknown word (lvalue)     -- raise ValueError("lvalue and rvalue have different
./Lib/test/test_buffer.py:403:38    - Unknown word (rvalue)     -- ValueError("lvalue and rvalue have different structures
./Lib/test/test_buffer.py:427:10    - Unknown word (memlen)     -- # t = (memlen, itemsize, ndim, shape
./Lib/test/test_buffer.py:4324:38   - Unknown word (staticarray)     -- assertRaises(TypeError, staticarray, 1, 2, 3)
./Lib/test/test_buffer.py:4414:11   - Unknown word (getbufferproc)   -- # getbufferproc does not adhere to the
./Lib/test/test_buffer.py:449:5     - Unknown word (imin)       -- imin = sum(strides[j]*(shape
./Lib/test/test_buffer.py:451:5     - Unknown word (imax)       -- imax = sum(strides[j]*(shape
./Lib/test/test_buffer.py:483:37    - Unknown word (maxdim)     -- structure(itemsize, valid, maxdim=5, maxshape=16, shape
./Lib/test/test_buffer.py:483:47    - Unknown word (maxshape)   -- itemsize, valid, maxdim=5, maxshape=16, shape=()):
./Lib/test/test_buffer.py:500:9     - Unknown word (minshape)   -- minshape = 2
./Lib/test/test_buffer.py:513:5     - Unknown word (maxstride)  -- maxstride = 5
./Lib/test/test_buffer.py:546:20    - Unknown word (slicelen)   -- def randslice_from_slicelen(slicelen, listlen):
./Lib/test/test_buffer.py:546:39    - Unknown word (listlen)    -- from_slicelen(slicelen, listlen):
./Lib/test/test_buffer.py:546:5     - Unknown word (randslice)  -- def randslice_from_slicelen(slicelen
./Lib/test/test_buffer.py:548:5     - Unknown word (maxstart)   -- maxstart = listlen - slicelen
./Lib/test/test_buffer.py:550:5     - Unknown word (maxstep)    -- maxstep = (listlen - start)
./Lib/test/test_buffer.py:561:18    - Unknown word (shapeof)    -- such that shapeof(x[lslices]) == shapeof
./Lib/test/test_buffer.py:616:9     - Unknown word (fmtchar)    -- 'fmtchar'."""
./Lib/test/test_buffer.py:633:24    - Unknown word (dtype)      -- dtype=fmt, offset=offset)
./Lib/test/test_buffer.py:643:35    - Unknown word (bytelen)    -- with n * itemsize = bytelen. If shape is given,
./Lib/test/test_buffer.py:662:5     - Unknown word (byteitems)  -- byteitems = [mem[i:i+itemsize
./Lib/test/test_buffer.py:673:5     - Unknown word (gencastshapes) -- def gencastshapes():
./Lib/test/test_buffer.py:689:5     - Unknown word (genslices)     -- def genslices(n):
./Lib/test/test_buffer.py:698:5     - Unknown word (rslice)        -- def rslice(n, allow_empty=False
./Lib/test/test_buffer.py:702:5     - Unknown word (minlen)        -- minlen = 0 if allow_empty or
./Lib/test/test_buffer.py:722:5     - Unknown word (rpermutation)  -- def rpermutation(iterable, r=None):
./Lib/test/test_buffer.py:739:46    - Unknown word (suboffsets)    -- shape=%s, strides=%s, suboffsets=%s, offset=%s, "
./Lib/test/test_buffer.py:781:65    - Unknown word (getbuf)        -- only needed for test_getbuf().
./Lib/test/test_buffer.py:786:13    - Unknown word (suboffset)     -- suboffset0 = 0
./Lib/test/test_buffer.py:875:21    - Unknown word (contig)        -- contig = get_contiguous(result
./Lib/test/test_buffer.py:891:21    - Unknown word (initlst)       -- initlst = [struct.unpack_from
./Lib/test/test_bufio.py:51:13     - Unknown word (teststring) -- teststring = pattern * q + pattern
./Lib/test/test_bufio.py:57:14     - Unknown word (primepat)   -- def test_primepat(self):
./Lib/test/test_bufio.py:62:14     - Unknown word (nullpat)    -- def test_nullpat(self):
./Lib/test/test_builtin.py:1316:9    - Unknown word (twopow)      -- twopow = partial(pow, base
./Lib/test/test_builtin.py:1327:9    - Unknown word (savestdin)   -- savestdin = sys.stdin
./Lib/test/test_builtin.py:140:9     - Unknown word (itorg)      -- itorg = it
./Lib/test/test_builtin.py:1449:47   - Unknown word (rint)        -- rounding (floor, ceil, rint, round) for
./Lib/test/test_builtin.py:1901:56   - Unknown word (breakpointhook) -- Similarly for sys.breakpointhook.
./Lib/test/test_builtin.py:1941:30   - Unknown word (passthru)       -- test_breakpoint_with_passthru_error(self):
./Lib/test/test_builtin.py:1976:20   - Unknown word (unimportable)   -- def test_envar_unimportable(self):
./Lib/test/test_builtin.py:1980:18   - Unknown word (nosuchbuiltin)  -- 'nosuchbuiltin',
./Lib/test/test_builtin.py:1981:18   - Unknown word (nosuchmodule)   -- 'nosuchmodule.nosuchcallable',
./Lib/test/test_builtin.py:1981:31   - Unknown word (nosuchcallable) -- 'nosuchmodule.nosuchcallable',
./Lib/test/test_builtin.py:2041:38   - Unknown word (wpipe)          -- with open(w, "w") as wpipe:
./Lib/test/test_builtin.py:2054:43   - Unknown word (rpipe)          -- encoding="utf-8") as rpipe:
./Lib/test/test_builtin.py:2123:20   - Unknown word (rlhandler)      -- # callback rlhandler() is called by readline
./Lib/test/test_builtin.py:2125:64   - Unknown word (intented)       -- test_builtin is not intented to test
./Lib/test/test_builtin.py:2133:31   - Unknown word (prompté)        -- self.check_input_tty("prompté", b"quux\xe9", "utf
./Lib/test/test_builtin.py:2182:14   - Unknown word (inputtypes)     -- def test_inputtypes(self):
./Lib/test/test_builtin.py:2193:14   - Unknown word (baddecorator)   -- def test_baddecorator(self):
./Lib/test/test_builtin.py:2267:19   - Unknown word (nokwargs)       -- def test_type_nokwargs(self):
./Lib/test/test_builtin.py:2285:25   - Unknown word (udcdc)          -- type('A\udcdcB', (), {})
./Lib/test/test_builtin.py:2337:42   - Unknown word (udcdcy)         -- (), {'__doc__': 'x\udcdcy'})
./Lib/test/test_builtin.py:257:22    - Unknown word (udfff)      -- _check_uni('\udfff')
./Lib/test/test_builtin.py:341:76    - Unknown word (badmode)    -- 2)\n', '<string>', 'badmode')
./Lib/test/test_builtin.py:352:9     - Unknown word (codestr)    -- codestr = '''def f():
./Lib/test/test_builtin.py:371:13    - Unknown word (codeobjs)   -- codeobjs = []
./Lib/test/test_builtin.py:756:15    - Unknown word (frozendict) -- class frozendict_error(Exception):
./Lib/test/test_builtin.py:768:39    - Unknown word (superglobal) -- compile("__builtins__['superglobal']=2; print(superglobal
./Lib/test/test_builtin.py:790:88    - Unknown word (elloorld)    -- Hello World')), list('elloorld'))
./Lib/test/test_builtin.py:805:13    - Unknown word (badfunc)     -- def badfunc():
./Lib/test/test_builtin.py:809:16    - Unknown word (bltinmodule) -- # test bltinmodule.c::filtertuple()
./Lib/test/test_builtin.py:809:31    - Unknown word (filtertuple) -- test bltinmodule.c::filtertuple()
./Lib/test/test_builtin.py:816:39    - Unknown word (abcdeabcde)  -- filter(filter_char, "abcdeabcde")
./Lib/test/test_builtin.py:982:13    - Unknown word (accu)        -- accu = 0
./Lib/test/test_bytes.py:1041:28   - Unknown word (pythonapi)         -- from ctypes import pythonapi, py_object
./Lib/test/test_bytes.py:1104:13   - Unknown word (formatstr)         -- for formatstr, ctypes_type, value
./Lib/test/test_bytes.py:1220:14   - Unknown word (nohash)            -- def test_nohash(self):
./Lib/test/test_bytes.py:1451:14   - Unknown word (irepeat)           -- def test_irepeat(self):
./Lib/test/test_bytes.py:1568:14   - Unknown word (nosort)            -- def test_nosort(self):
./Lib/test/test_bytes.py:1606:34   - Unknown word (doesnt)            -- partition_bytearray_doesnt_share_nullstring(self
./Lib/test/test_bytes.py:1606:47   - Unknown word (nullstring)        -- bytearray_doesnt_share_nullstring(self):
./Lib/test/test_bytes.py:331:32    - Unknown word (Laka)       -- invalid = 'Boom, Shaka Laka, Boom!'
./Lib/test/test_bytes.py:741:14    - Unknown word (rmod)       -- def test_rmod(self):
./Lib/test/test_bytes.py:762:20    - Unknown word (unicodewhitespace) -- def test_split_unicodewhitespace(self):
./Lib/test/test_bytes.py:854:14    - Unknown word (xjust)             -- def test_xjust_int_error(self):
./Lib/test/test_bytes.py:865:9     - Unknown word (transtable)        -- transtable = b'\000\001\002\00
./Lib/test/test_calendar.py:371:13    - Unknown word (neitherspacenordigit) -- def neitherspacenordigit(c):
./Lib/test/test_calendar.py:504:65    - Unknown word (flabber)              -- calendar.setfirstweekday, 'flabber')
./Lib/test/test_calendar.py:601:14    - Unknown word (oldfirstweekday)      -- self.oldfirstweekday = calendar.firstweekday
./Lib/test/test_calendar.py:746:23    - Unknown word (nonleap)              -- def test_february_nonleap(self):
./Lib/test/test_calendar.py:781:18    - Unknown word (leapday)              -- def test_one_leapday_lower_boundary(self
./Lib/test/test_calendar.py:785:22    - Unknown word (leapyears)            -- def test_several_leapyears_in_range(self):
./Lib/test/test_call.py:294:5     - Unknown word (pyfunc)     -- def pyfunc(arg1, arg2):
./Lib/test/test_call.py:394:14    - Unknown word (fastcall)   -- def test_fastcall(self):
./Lib/test/test_call.py:407:14    - Unknown word (vectorcall) -- def test_vectorcall_dict(self):
./Lib/test/test_call.py:413:45    - Unknown word (fastcalldict) -- _testcapi.pyobject_fastcalldict(func, args, None)
./Lib/test/test_call.py:435:26    - Unknown word (Vectorcall)   -- # Test _PyObject_Vectorcall()
./Lib/test/test_call.py:439:19    - Unknown word (kwnames)      -- # kwnames=NULL
./Lib/test/test_call.py:485:5     - Unknown word (testfunction) -- def testfunction(self):
./Lib/test/test_call.py:565:52    - Unknown word (pyvectorcall) -- pyobject_vectorcall, pyvectorcall_call
./Lib/test/test_call.py:71:14     - Unknown word (oldargs)    -- def test_oldargs0_0(self):
./Lib/test/test_cgi.py:157:39    - Unknown word (udce)       -- {'submit-name': ["\udce2\udc98\udc83"]}
./Lib/test/test_cgi.py:251:22    - Unknown word (numcalls)   -- self.numcalls = 0
./Lib/test/test_cgi.py:73:145    - Unknown word (lobale)     -- f1b&expire=964546263&lobale=en-US&kid=130003.30
./Lib/test/test_cgi.py:73:51     - Unknown word (seqid)      -- dee1182227:key_store_seqid=400006&cuyer=r&view
./Lib/test/test_cgi.py:73:64     - Unknown word (cuyer)      -- key_store_seqid=400006&cuyer=r&view=bustomer&order
./Lib/test/test_cgi.py:73:77     - Unknown word (bustomer)   -- 400006&cuyer=r&view=bustomer&order_id=0bb2e24863
./Lib/test/test_cgitb.py:39:14     - Unknown word (syshook)    -- def test_syshook_no_logdir_default_format
./Lib/test/test_cgitb.py:40:28     - Unknown word (tracedir)   -- with temp_dir() as tracedir:
./Lib/test/test_charmapcodec.py:29:14     - Unknown word (constructorx) -- def test_constructorx(self):
./Lib/test/test_charmapcodec.py:32:52     - Unknown word (defabc)       -- defx', codecname), 'defabc')
./Lib/test/test_charmapcodec.py:33:51     - Unknown word (dabcf)        -- b'dxf', codecname), 'dabcf')
./Lib/test/test_charmapcodec.py:34:52     - Unknown word (dabcfabc)     -- dxfx', codecname), 'dabcfabc')
./Lib/test/test_charmapcodec.py:38:14     - Unknown word (encodex)      -- def test_encodex(self):
./Lib/test/test_charmapcodec.py:3:29      - Unknown word (testcodec)  -- uses the test codec in testcodec.py and thus also tests
./Lib/test/test_charmapcodec.py:40:27     - Unknown word (xdef)         -- self.assertEqual('xdef'.encode(codecname),
./Lib/test/test_charmapcodec.py:41:27     - Unknown word (defx)         -- self.assertEqual('defx'.encode(codecname),
./Lib/test/test_charmapcodec.py:43:27     - Unknown word (dxfx)         -- self.assertEqual('dxfx'.encode(codecname),
./Lib/test/test_charmapcodec.py:45:14     - Unknown word (constructory) -- def test_constructory(self):
./Lib/test/test_charmapcodec.py:51:14     - Unknown word (maptoundefined) -- def test_maptoundefined(self):
./Lib/test/test_class.py:12:6      - Unknown word (rsub)       -- "rsub",
./Lib/test/test_class.py:14:6      - Unknown word (rmul)       -- "rmul",
./Lib/test/test_class.py:153:9     - Unknown word (testme)      -- testme = AllTests()
./Lib/test/test_class.py:16:6      - Unknown word (rmatmul)    -- "rmatmul",
./Lib/test/test_class.py:18:6      - Unknown word (rtruediv)   -- "rtruediv",
./Lib/test/test_class.py:20:6      - Unknown word (rfloordiv)  -- "rfloordiv",
./Lib/test/test_class.py:24:6      - Unknown word (rdivmod)    -- "rdivmod",
./Lib/test/test_class.py:26:6      - Unknown word (rpow)       -- "rpow",
./Lib/test/test_class.py:28:6      - Unknown word (rrshift)    -- "rrshift",
./Lib/test/test_class.py:30:6      - Unknown word (rlshift)    -- "rlshift",
./Lib/test/test_class.py:36:6      - Unknown word (rxor)       -- "rxor",
./Lib/test/test_class.py:516:13    - Unknown word (booh)        -- def booh(self):
./Lib/test/test_class.py:6:1       - Unknown word (testmeths)  -- testmeths = [
./Lib/test/test_class.py:72:1      - Unknown word (statictests) -- statictests = """
./Lib/test/test_cmath.py:109:18    - Unknown word (ulps)       -- 9 and 19 ulps.
./Lib/test/test_cmath.py:162:32    - Unknown word (infj)       -- self.assertEqual(cmath.infj.real, 0.0)
./Lib/test/test_cmath.py:167:32    - Unknown word (nanj)       -- self.assertEqual(cmath.nanj.real, 0.0)
./Lib/test/test_cmath.py:170:34    - Unknown word (reprs)      -- Check consistency with reprs.
./Lib/test/test_cmd.py:14:7      - Unknown word (samplecmdclass) -- class samplecmdclass(cmd.Cmd):
./Lib/test/test_cmd.py:16:18     - Unknown word (sampleclass)    -- Instance the sampleclass:
./Lib/test/test_cmd.py:174:11    - Unknown word (simplecmd)      -- class simplecmd(cmd.Cmd):
./Lib/test/test_cmd.py:17:9      - Unknown word (mycmd)          -- >>> mycmd = samplecmdclass()
./Lib/test/test_cmd.py:230:24    - Unknown word (ignoredirs)     -- tracer=trace.Trace(ignoredirs=[sys.base_prefix, sys
./Lib/test/test_cmd.py:76:24     - Unknown word (testet)         -- >>> mycmd.do_help("testet")
./Lib/test/test_cmd_line.py:129:38    - Unknown word (fnord)      -- python_failure('-m', 'fnord43520xyz')
./Lib/test/test_cmd_line.py:168:35    - Unknown word (wmain)      -- arguments as unicode (using wmain() instead of main()
./Lib/test/test_cmd_line.py:189:53    - Unknown word (udcff)      -- decoded b'\xff' as '\udcff' (b'\xff' is not
./Lib/test/test_cmd_line.py:406:14    - Unknown word (unmached)   -- def test_unmached_quote(self):
./Lib/test/test_cmd_line.py:559:14    - Unknown word (isolatedmode) -- def test_isolatedmode(self):
./Lib/test/test_cmd_line.py:565:15    - Unknown word (dummyvar)     -- # dummyvar to prevent extraneous
./Lib/test/test_cmd_line.py:624:13    - Unknown word (envval)       -- for envval, opt, expected in cases
./Lib/test/test_cmd_line.py:637:13    - Unknown word (xdev)         -- def run_xdev(self, *args, check_exitcode
./Lib/test/test_cmd_line.py:698:55    - Unknown word (pymem)        -- testcapi; print(_testcapi.pymem_getallocatorsname()
./Lib/test/test_cmd_line.py:698:61    - Unknown word (getallocatorsname) -- print(_testcapi.pymem_getallocatorsname())"
./Lib/test/test_cmd_line.py:717:66    - Unknown word (pywarning)         -- option, envvar, use_pywarning=False):
./Lib/test/test_cmd_line.py:760:15    - Unknown word (pythonmalloc)      -- def check_pythonmalloc(self, env_var, name
./Lib/test/test_cmd_line.py:807:14    - Unknown word (pythondevmode)     -- def test_pythondevmode_env(self):
./Lib/test/test_cmd_line_script.py:522:24    - Unknown word (triying)    -- def test_hint_when_triying_to_import_a_py_file
./Lib/test/test_cmd_line_script.py:619:26    - Unknown word (unindented) -- def test_syntaxerror_unindented_caret_position(self
./Lib/test/test_cmd_line_script.py:676:19    - Unknown word (Werror)     -- '-Werror', script_name,
./Lib/test/test_cmd_line_script.py:763:19    - Unknown word (nonexistingscript) -- script = 'nonexistingscript.py'
./Lib/test/test_code.py:182:14    - Unknown word (newempty)    -- def test_newempty(self):
./Lib/test/test_code.py:247:31    - Unknown word (linetable)   -- co.co_linetable,
./Lib/test/test_code.py:248:31    - Unknown word (exceptiontable) -- co.co_exceptiontable,
./Lib/test/test_code.py:285:28    - Unknown word (myname)         -- ("co_names", ("myname",)),
./Lib/test/test_code.py:289:30    - Unknown word (newfilename)    -- ("co_filename", "newfilename"),
./Lib/test/test_code.py:343:24    - Unknown word (localsplus)     -- def test_shrinking_localsplus(self):
./Lib/test/test_code.py:345:11    - Unknown word (localsplusnames) -- # localsplusnames and localspluskinds
./Lib/test/test_code.py:345:31    - Unknown word (localspluskinds) -- localsplusnames and localspluskinds, if an argument is a
./Lib/test/test_code.py:349:9     - Unknown word (newcode)         -- newcode = code.replace(co_name
./Lib/test/test_code.py:426:26    - Unknown word (columntable)     -- def test_endline_and_columntable_none_when_no_debug_ranges
./Lib/test/test_code.py:495:5     - Unknown word (isinterned)      -- def isinterned(s):
./Lib/test/test_code.py:498:11    - Unknown word (Consts)          -- class CodeConstsTest(unittest.TestCase
./Lib/test/test_code.py:564:9     - Unknown word (coderef)         -- coderef = weakref.ref(f.__code
./Lib/test/test_code.py:575:10    - Unknown word (varint)          -- def read_varint(it):
./Lib/test/test_code.py:586:5     - Unknown word (uval)            -- uval = read_varint(it)
./Lib/test/test_code.py:646:16    - Unknown word (postions)        -- def lines_from_postions(positions):
./Lib/test/test_code.py:649:5     - Unknown word (misshappen)      -- def misshappen():
./Lib/test/test_code.py:723:5     - Unknown word (freefunc)        -- freefunc = ctypes.CFUNCTYPE(None
./Lib/test/test_code.py:739:9     - Unknown word (myfree)          -- def myfree(ptr):
./Lib/test/test_code.py:97:9      - Unknown word (keywordonly) -- >>> def keywordonly_args(a,b,*,k1):
./Lib/test/test_code_module.py:23:14     - Unknown word (infunc)     -- self.infunc = stack.enter_context
./Lib/test/test_code_module.py:27:9      - Unknown word (prepatch)   -- prepatch = mock.patch('code.sys
./Lib/test/test_code_module.py:28:14     - Unknown word (sysmod)     -- self.sysmod = stack.enter_context
./Lib/test/test_code_module.py:68:14     - Unknown word (sysexcepthook) -- def test_sysexcepthook(self):
./Lib/test/test_codeccallbacks.py:1022:14   - Unknown word (encodehelper)                          -- def test_encodehelper(self):
./Lib/test/test_codeccallbacks.py:1028:13   - Unknown word (badencodereturn)                       -- def badencodereturn1(exc):
./Lib/test/test_codeccallbacks.py:1094:44   - Unknown word (abcdx)                                 -- assertEqual(decoded, 'abcdx' * 51)
./Lib/test/test_codeccallbacks.py:1142:14   - Unknown word (translatehelper)                       -- def test_translatehelper(self):
./Lib/test/test_codeccallbacks.py:115:9     - Unknown word (sout)               -- sout = b"&laquo;&real;&raquo
./Lib/test/test_codeccallbacks.py:1169:14   - Unknown word (mutatingdecodehandler)                 -- def test_mutatingdecodehandler(self):
./Lib/test/test_codeccallbacks.py:1170:9    - Unknown word (baddata)                               -- baddata = [
./Lib/test/test_codeccallbacks.py:122:14    - Unknown word (uninamereplace)     -- def test_uninamereplace(self):
./Lib/test/test_codeccallbacks.py:152:14    - Unknown word (backslashescape)    -- def test_backslashescape(self):
./Lib/test/test_codeccallbacks.py:165:14    - Unknown word (nameescape)         -- def test_nameescape(self):
./Lib/test/test_codeccallbacks.py:186:13    - Unknown word (relaxedutf)         -- def relaxedutf8(exc):
./Lib/test/test_codeccallbacks.py:277:20    - Unknown word (xdfrk)              -- "g\xfc\xdfrk".encode("ascii", "test
./Lib/test/test_codeccallbacks.py:288:14    - Unknown word (longstrings)        -- def test_longstrings(self):
./Lib/test/test_codeccallbacks.py:307:15    - Unknown word (exceptionobjectargs) -- def check_exceptionobjectargs(self, exctype, args
./Lib/test/test_codeccallbacks.py:314:9     - Unknown word (wrongargs)           -- wrongargs = [ "spam", b"eggs"
./Lib/test/test_codeccallbacks.py:316:17    - Unknown word (wrongarg)            -- for wrongarg in wrongargs:
./Lib/test/test_codeccallbacks.py:320:17    - Unknown word (callargs)            -- callargs = []
./Lib/test/test_codeccallbacks.py:337:26    - Unknown word (xfcrk)               -- ["ascii", "g\xfcrk", 1, 2, "ouch"],
./Lib/test/test_codeccallbacks.py:347:25    - Unknown word (xfcx)                -- ["ascii", "\xfcx", 0, 1, "ouch"],
./Lib/test/test_codeccallbacks.py:357:25    - Unknown word (uffffx)              -- ["ascii", "\uffffx", 0, 1, "ouch"],
./Lib/test/test_codeccallbacks.py:358:54    - Unknown word (uffff)               -- encode character '\\uffff' in position 0: ouch
./Lib/test/test_codeccallbacks.py:395:17    - Unknown word (uffffrk)             -- ["g\uffffrk", 1, 2, "ouch"],
./Lib/test/test_codeccallbacks.py:409:14    - Unknown word (badandgoodstrictexceptions) -- def test_badandgoodstrictexceptions(self):
./Lib/test/test_codeccallbacks.py:440:14    - Unknown word (badandgoodignoreexceptions) -- def test_badandgoodignoreexceptions(self):
./Lib/test/test_codeccallbacks.py:472:14    - Unknown word (badandgoodreplaceexceptions) -- def test_badandgoodreplaceexceptions(self):
./Lib/test/test_codeccallbacks.py:514:14    - Unknown word (badandgoodxmlcharrefreplaceexceptions) -- def test_badandgoodxmlcharrefreplaceexceptions(self):
./Lib/test/test_codeccallbacks.py:553:14    - Unknown word (badandgoodbackslashreplaceexceptions)  -- def test_badandgoodbackslashreplaceexceptions(self):
./Lib/test/test_codeccallbacks.py:613:14    - Unknown word (badandgoodnamereplaceexceptions)       -- def test_badandgoodnamereplaceexceptions(self):
./Lib/test/test_codeccallbacks.py:641:16    - Unknown word (ufbf)                                  -- ("\ufbf9", "\\N{ARABIC LIGATURE
./Lib/test/test_codeccallbacks.py:661:14    - Unknown word (badandgoodsurrogateescapeexceptions)   -- def test_badandgoodsurrogateescapeexceptions(self):
./Lib/test/test_codeccallbacks.py:707:14    - Unknown word (badandgoodsurrogatepassexceptions)     -- def test_badandgoodsurrogatepassexceptions(self):
./Lib/test/test_codeccallbacks.py:781:14    - Unknown word (badhandlerresults)                     -- def test_badhandlerresults(self):
./Lib/test/test_codeccallbacks.py:783:9     - Unknown word (encs)                                  -- encs = ("ascii", "latin-
./Lib/test/test_codeccallbacks.py:786:41    - Unknown word (badhandler)                            -- register_error("test.badhandler", lambda x: res)
./Lib/test/test_codeccallbacks.py:84:34     - Unknown word (charmaps)   -- For ascii, latin-1 and charmaps this is completely implemente
./Lib/test/test_codeccallbacks.py:856:13    - Unknown word (unencrepl)                             -- def unencrepl(exc):
./Lib/test/test_codeccallbacks.py:861:37    - Unknown word (unencreplhandler)                      -- register_error("test.unencreplhandler", unencrepl)
./Lib/test/test_codeccallbacks.py:932:14    - Unknown word (badregistercall)                       -- def test_badregistercall(self):
./Lib/test/test_codeccallbacks.py:934:20    - Unknown word (codecsmodule)                          -- # Modules/_codecsmodule.c::register_error()
./Lib/test/test_codeccallbacks.py:939:14    - Unknown word (badlookupcall)                         -- def test_badlookupcall(self):
./Lib/test/test_codeccallbacks.py:949:14    - Unknown word (xmlcharrefvalues)                      -- def test_xmlcharrefvalues(self):
./Lib/test/test_codeccallbacks.py:961:14    - Unknown word (decodehelper)                          -- def test_decodehelper(self):
./Lib/test/test_codeccallbacks.py:963:19    - Unknown word (unicodeobject)                         -- # Objects/unicodeobject.c::unicode_decode_call
./Lib/test/test_codeccallbacks.py:967:13    - Unknown word (baddecodereturn)                       -- def baddecodereturn1(exc):
./Lib/test/test_codeccallbacks.py:96:14     - Unknown word (xmlcharnamereplace) -- def test_xmlcharnamereplace(self):
./Lib/test/test_codeccallbacks.py:983:37    - Unknown word (posreturn)                             -- register_error("test.posreturn", handler.handle)
./Lib/test/test_codecs.py:109:36    - Unknown word (partialresults) -- partial(self, input, partialresults):
./Lib/test/test_codecs.py:1124:26   - Unknown word (ufffdb)          -- (b'\xffb', '\ufffdb'),
./Lib/test/test_codecs.py:1156:34   - Unknown word (udca)            -- assertEqual('\ud801\udca0'.encode(self.encoding
./Lib/test/test_codecs.py:117:17    - Unknown word (partialresult)  -- for (c, partialresult) in zip(input.encode
./Lib/test/test_codecs.py:1268:9    - Unknown word (unistring)       -- unistring = "ABC\u00A1\u2200XYZ
./Lib/test/test_codecs.py:1274:13   - Unknown word (istream)         -- istream = reader(io.BytesIO
./Lib/test/test_codecs.py:1275:13   - Unknown word (ostream)         -- ostream = io.StringIO()
./Lib/test/test_codecs.py:1351:27   - Unknown word (abfnrtvx)        -- if b not in b'abfnrtvx':
./Lib/test/test_codecs.py:1389:20   - Unknown word (ccaron)          -- # D Czech: Pro<ccaron>prost<ecaron>nemluv
./Lib/test/test_codecs.py:1389:27   - Unknown word (prost)           -- D Czech: Pro<ccaron>prost<ecaron>nemluv<iacute
./Lib/test/test_codecs.py:1389:33   - Unknown word (ecaron)          -- Czech: Pro<ccaron>prost<ecaron>nemluv<iacute><ccaron
./Lib/test/test_codecs.py:1389:40   - Unknown word (nemluv)          -- ccaron>prost<ecaron>nemluv<iacute><ccaron>esky
./Lib/test/test_codecs.py:1389:47   - Unknown word (iacute)          -- prost<ecaron>nemluv<iacute><ccaron>esky
./Lib/test/test_codecs.py:1389:62   - Unknown word (esky)            -- nemluv<iacute><ccaron>esky
./Lib/test/test_codecs.py:1425:20   - Unknown word (Porqu)           -- # (J) Spanish: Porqu<eacute>nopuedensimplementehab
./Lib/test/test_codecs.py:1425:33   - Unknown word (nopuedensimplementehablaren) -- Spanish: Porqu<eacute>nopuedensimplementehablarenEspa<ntilde>ol
./Lib/test/test_codecs.py:1425:60   - Unknown word (Espa)                        -- nopuedensimplementehablarenEspa<ntilde>ol
./Lib/test/test_codecs.py:1425:65   - Unknown word (ntilde)                      -- puedensimplementehablarenEspa<ntilde>ol
./Lib/test/test_codecs.py:1434:10   - Unknown word (adotbelow)                   -- # T<adotbelow>isaoh<odotbelow>kh<ocirc
./Lib/test/test_codecs.py:1434:20   - Unknown word (isaoh)                       -- # T<adotbelow>isaoh<odotbelow>kh<ocirc>ngth
./Lib/test/test_codecs.py:1434:26   - Unknown word (odotbelow)                   -- T<adotbelow>isaoh<odotbelow>kh<ocirc>ngth<ecirchookabove
./Lib/test/test_codecs.py:1434:39   - Unknown word (ocirc)                       -- adotbelow>isaoh<odotbelow>kh<ocirc>ngth<ecirchookabove
./Lib/test/test_codecs.py:1434:45   - Unknown word (ngth)                        -- isaoh<odotbelow>kh<ocirc>ngth<ecirchookabove>ch\
./Lib/test/test_codecs.py:1434:50   - Unknown word (ecirchookabove)              -- odotbelow>kh<ocirc>ngth<ecirchookabove>ch\
./Lib/test/test_codecs.py:1435:10   - Unknown word (ihookabove)                  -- # <ihookabove>n<oacute>iti<ecircacute
./Lib/test/test_codecs.py:1435:34   - Unknown word (ecircacute)                  -- ihookabove>n<oacute>iti<ecircacute>ngVi<ecircdotbelow>t
./Lib/test/test_codecs.py:1435:50   - Unknown word (ecircdotbelow)               -- iti<ecircacute>ngVi<ecircdotbelow>t
./Lib/test/test_codecs.py:1442:18   - Unknown word (gumi)                        -- #(L) 3<nen>B<gumi><kinpachi><sensei>
./Lib/test/test_codecs.py:1442:24   - Unknown word (kinpachi)                    -- #(L) 3<nen>B<gumi><kinpachi><sensei>
./Lib/test/test_codecs.py:1442:34   - Unknown word (sensei)                      -- nen>B<gumi><kinpachi><sensei>
./Lib/test/test_codecs.py:1446:12   - Unknown word (amuro)                       -- # (M) <amuro><namie>-with-SUPER-MONKEYS
./Lib/test/test_codecs.py:1446:19   - Unknown word (namie)                       -- # (M) <amuro><namie>-with-SUPER-MONKEYS
./Lib/test/test_codecs.py:1452:30   - Unknown word (sorezore)                    -- Hello-Another-Way-<sorezore><no><basho>
./Lib/test/test_codecs.py:1458:12   - Unknown word (hitotsu)                     -- # (O) <hitotsu><yane><no><shita>2
./Lib/test/test_codecs.py:1458:21   - Unknown word (yane)                        -- # (O) <hitotsu><yane><no><shita>2
./Lib/test/test_codecs.py:1458:31   - Unknown word (shita)                       -- <hitotsu><yane><no><shita>2
./Lib/test/test_codecs.py:1462:11   - Unknown word (Maji)                        -- # (P) Maji<de>Koi<suru>5<byou>
./Lib/test/test_codecs.py:1462:23   - Unknown word (suru)                        -- # (P) Maji<de>Koi<suru>5<byou><mae>
./Lib/test/test_codecs.py:1462:30   - Unknown word (byou)                        -- Maji<de>Koi<suru>5<byou><mae>
./Lib/test/test_codecs.py:1467:13   - Unknown word (pafii)                       -- # (Q) <pafii>de<runba>
./Lib/test/test_codecs.py:1467:22   - Unknown word (runba)                       -- # (Q) <pafii>de<runba>
./Lib/test/test_codecs.py:1471:12   - Unknown word (sono)                        -- # (R) <sono><supiido><de>
./Lib/test/test_codecs.py:1471:18   - Unknown word (supiido)                     -- # (R) <sono><supiido><de>
./Lib/test/test_codecs.py:1541:8    - Unknown word (telc)                        -- # 'telc\xe2\x88\x95kg\xcf\x
./Lib/test/test_codecs.py:159:13    - Unknown word (readalllines)   -- def readalllines(input, keepends=True
./Lib/test/test_codecs.py:169:25    - Unknown word (nbaz)           -- s = "foo\nbar\r\nbaz\rspam\u2028eggs"
./Lib/test/test_codecs.py:170:9     - Unknown word (sexpected)      -- sexpected = "foo\n|bar\r\n|baz
./Lib/test/test_codecs.py:171:9     - Unknown word (sexpectednoends) -- sexpectednoends = "foo|bar|baz|spam
./Lib/test/test_codecs.py:1732:63   - Unknown word (xample)                      -- ple-9ta.o", ), "\xe4xample.")
./Lib/test/test_codecs.py:177:9     - Unknown word (lineends)        -- lineends = ("\n", "\r\n", "\r
./Lib/test/test_codecs.py:1802:64   - Unknown word (xffff)                       -- EncodeError, codecs.encode, '\xffff', 'ascii')
./Lib/test/test_codecs.py:181:17    - Unknown word (lineend)         -- for (i, lineend) in enumerate(lineends
./Lib/test/test_codecs.py:1877:45   - Unknown word (dotless)                     -- is lowercased as "ı" (dotless i)
./Lib/test/test_codecs.py:2106:17   - Unknown word (encodedresult)               -- encodedresult = b""
./Lib/test/test_codecs.py:2114:17   - Unknown word (decodedresult)               -- decodedresult = ""
./Lib/test/test_codecs.py:214:19    - Unknown word (Humpty)          -- lines = ["Humpty Dumpty sat on a wall
./Lib/test/test_codecs.py:214:26    - Unknown word (Dumpty)          -- lines = ["Humpty Dumpty sat on a wall,\n",
./Lib/test/test_codecs.py:2171:21   - Unknown word (cencoder)                    -- cencoder = _testcapi.codec_incremental
./Lib/test/test_codecs.py:2180:21   - Unknown word (cdecoder)                    -- cdecoder = _testcapi.codec_incremental
./Lib/test/test_codecs.py:2304:9    - Unknown word (allbytes)                    -- allbytes = bytes(range(256))
./Lib/test/test_codecs.py:2631:27   - Unknown word (abfnrtuvx)                   -- if b not in b'abfnrtuvx':
./Lib/test/test_codecs.py:267:17    - Unknown word (inputencoding)   -- '<%@inputencoding="ISO-8859-1"%>\r\n'
./Lib/test/test_codecs.py:268:17    - Unknown word (pagetemplate)    -- '<%@pagetemplate=TEMPLATE.y%>\r\n',
./Lib/test/test_codecs.py:271:34    - Unknown word (storageerrors)   -- <%@import=from frog.storageerrors import StorageError
./Lib/test/test_codecs.py:275:37    - Unknown word (Snakelets)       -- log=logging.getLogger("Snakelets.logger")\r\n',
./Lib/test/test_codecs.py:2823:28   - Unknown word (udced)                      -- "\udced\udcb0\udc80")
./Lib/test/test_codecs.py:2823:34   - Unknown word (udcb)                       -- "\udced\udcb0\udc80")
./Lib/test/test_codecs.py:283:18    - Unknown word (entryids)        -- ' entryids=storageEngine.listBlogEntries
./Lib/test/test_codecs.py:2849:34   - Unknown word (udceb)                      -- assertEqual("\udce4\udceb\udcef\udcf6\udcfc".encode
./Lib/test/test_codecs.py:2849:40   - Unknown word (udcef)                      -- assertEqual("\udce4\udceb\udcef\udcf6\udcfc".encode
./Lib/test/test_codecs.py:2849:46   - Unknown word (udcf)                       -- "\udce4\udceb\udcef\udcf6\udcfc".encode("latin
./Lib/test/test_codecs.py:2849:52   - Unknown word (udcfc)                      -- udce4\udceb\udcef\udcf6\udcfc".encode("latin-1",
./Lib/test/test_codecs.py:293:14    - Unknown word (showdate)        -- 'showdate=None\r\n',
./Lib/test/test_codecs.py:299:39    - Unknown word (isodatestr)      -- showdate = frog.util.isodatestr() \r\n',
./Lib/test/test_codecs.py:303:23    - Unknown word (Yredirect)       -- ' self.Yredirect("active.y")\r\n',
./Lib/test/test_codecs.py:310:74    - Unknown word (mediumdatestr)   -- %s</h2>"% frog.util.mediumdatestr(showdate))\r\n',
./Lib/test/test_codecs.py:3257:14   - Unknown word (unflagged)                  -- def test_unflagged_non_text_codec_handling
./Lib/test/test_codecs.py:32:80     - Unknown word (codepages)  -- Nano Server not all codepages are present
./Lib/test/test_codecs.py:330:14    - Unknown word (readlinequeue)   -- def test_readlinequeue(self):
./Lib/test/test_codecs.py:345:11    - Unknown word (Lineends)        -- # Lineends
./Lib/test/test_codecs.py:3503:40   - Unknown word (udcea)                      -- '\udc85\udc86\udcea\udceb\udcec'
./Lib/test/test_codecs.py:3503:52   - Unknown word (udcec)                      -- 5\udc86\udcea\udceb\udcec'
./Lib/test/test_codecs.py:3504:40   - Unknown word (udcfd)                      -- '\udcef\udcfc\udcfd\udcfe\udcff')
./Lib/test/test_codecs.py:3504:46   - Unknown word (udcfe)                      -- '\udcef\udcfc\udcfd\udcfe\udcff')
./Lib/test/test_codecs.py:359:31    - Unknown word (ladfj)           -- = "offending line: ladfj askldfj klasdj fskla
./Lib/test/test_codecs.py:359:37    - Unknown word (askldfj)         -- offending line: ladfj askldfj klasdj fskla dfzaskdj
./Lib/test/test_codecs.py:359:45    - Unknown word (klasdj)          -- line: ladfj askldfj klasdj fskla dfzaskdj fasklfj
./Lib/test/test_codecs.py:359:52    - Unknown word (fskla)           -- ladfj askldfj klasdj fskla dfzaskdj fasklfj laskd
./Lib/test/test_codecs.py:359:58    - Unknown word (dfzaskdj)        -- askldfj klasdj fskla dfzaskdj fasklfj laskd fjasklfzzzzaa
./Lib/test/test_codecs.py:359:67    - Unknown word (fasklfj)         -- klasdj fskla dfzaskdj fasklfj laskd fjasklfzzzzaa
./Lib/test/test_codecs.py:359:75    - Unknown word (laskd)           -- fskla dfzaskdj fasklfj laskd fjasklfzzzzaa%whereisthis
./Lib/test/test_codecs.py:359:81    - Unknown word (fjasklfzzzzaa)   -- dfzaskdj fasklfj laskd fjasklfzzzzaa%whereisthis!!!\r\n"
./Lib/test/test_codecs.py:359:95    - Unknown word (whereisthis)     -- laskd fjasklfzzzzaa%whereisthis!!!\r\n"
./Lib/test/test_codecs.py:3655:26   - Unknown word (ulatin)                     -- STRINGS = ("ascii", "ulatin1:\xa7\xe9",
./Lib/test/test_codecs.py:3658:36   - Unknown word (DCFF)                       -- "surrogates:\uDC80\uDCFF")
./Lib/test/test_codecs.py:373:15    - Unknown word (stillokay)       -- s3 = "stillokay:bbbbxx\r\n"
./Lib/test/test_codecs.py:373:25    - Unknown word (bbbbxx)          -- s3 = "stillokay:bbbbxx\r\n"
./Lib/test/test_codecs.py:374:25    - Unknown word (badbad)          -- s4 = "broken!!!!badbad\r\n"
./Lib/test/test_codecs.py:375:15    - Unknown word (againokay)       -- s5 = "againokay.\r\n"
./Lib/test/test_codecs.py:3766:9    - Unknown word (ciphertext)                 -- ciphertext = codecs.encode("Caesar
./Lib/test/test_codecs.py:3767:39   - Unknown word (Pnrfne)                     -- assertEqual(ciphertext, 'Pnrfne yvxrq pvcuref')
./Lib/test/test_codecs.py:3767:46   - Unknown word (yvxrq)                      -- ciphertext, 'Pnrfne yvxrq pvcuref')
./Lib/test/test_codecs.py:3767:52   - Unknown word (pvcuref)                    -- ciphertext, 'Pnrfne yvxrq pvcuref')
./Lib/test/test_codecs.py:3770:43   - Unknown word (Oehgr)                      -- codecs.decode('Rg gh, Oehgr?', 'rot-13')
./Lib/test/test_codecs.py:3776:55   - Unknown word (Onxre)                      -- ciphertext, 'NOON ant Purely Onxre')
./Lib/test/test_codecs.py:3790:64   - Unknown word (dhrfgvba)                   -- abg gb or, gung vf gur dhrfgvba')
./Lib/test/test_codecs.py:459:5     - Unknown word (spamle)          -- spamle = (b'\xff\xfe\x00\x
./Lib/test/test_codecs.py:462:5     - Unknown word (spambe)          -- spambe = (b'\x00\x00\xfe\xff
./Lib/test/test_codecs.py:485:14    - Unknown word (badbom)          -- def test_badbom(self):
./Lib/test/test_codecs.py:894:14    - Unknown word (nonbmp)          -- def test_nonbmp(self):
./Lib/test/test_codeop.py:317:11    - Unknown word (Teswarnings) -- # Teswarnings_helper.check_warningsonly
./Lib/test/test_codeop.py:317:36    - Unknown word (warningsonly) -- Teswarnings_helper.check_warningsonly returned once.
./Lib/test/test_collections.py:1213:9    - Unknown word (mgen)        -- mgen = MinimalGen()
./Lib/test/test_collections.py:1219:46   - Unknown word (huhu)        -- sertRaisesRegex(ValueError, "^huhu$",
./Lib/test/test_collections.py:1556:52   - Unknown word (noncomparable) -- comparing comparable and noncomparable
./Lib/test/test_collections.py:1693:20   - Unknown word (abccba)        -- l1 = list('abccba')
./Lib/test/test_collections.py:1694:20   - Unknown word (bcddcb)        -- l2 = list('bcddcb')
./Lib/test/test_collections.py:1695:20   - Unknown word (abcdeedcba)    -- l3 = list('abcdeedcba')
./Lib/test/test_collections.py:1865:9    - Unknown word (mymap)         -- mymap = UserDict()
./Lib/test/test_collections.py:1926:13   - Unknown word (nativeseq)     -- nativeseq = ty('abracadabra')
./Lib/test/test_collections.py:1928:13   - Unknown word (seqseq)        -- seqseq = SequenceSubclass(nativeseq
./Lib/test/test_collections.py:199:39    - Unknown word (abcdefghij) -- assertEqual(''.join(d), 'abcdefghij')
./Lib/test/test_collections.py:2012:22   - Unknown word (patma)         -- def test_illegal_patma_flags(self):
./Lib/test/test_collections.py:2044:22   - Unknown word (abcaba)        -- c = Counter('abcaba')
./Lib/test/test_collections.py:2079:50   - Unknown word (aaaaffff)      -- join(c.elements()), 'aaaaffff')
./Lib/test/test_collections.py:2122:40   - Unknown word (xyzpdqqdpzyx)  -- assertEqual(list(Counter('xyzpdqqdpzyx').items()),
./Lib/test/test_collections.py:2132:15   - Unknown word (aaabbcdddeefggghhijjjkkl) -- ps = 'aaabbcdddeefggghhijjjkkl'
./Lib/test/test_collections.py:2133:15   - Unknown word (abbcccdeefffhkkllllmmnno) -- qs = 'abbcccdeefffhkkllllmmnno'
./Lib/test/test_collections.py:2187:45   - Unknown word (deepcopyable)             -- counters are copyable, deepcopyable, picklable, and
./Lib/test/test_collections.py:2209:24   - Unknown word (slartibartfast)           -- c = MyCounter('slartibartfast')
./Lib/test/test_collections.py:2241:17   - Unknown word (counterop)                -- for counterop, numberop in [
./Lib/test/test_collections.py:2241:28   - Unknown word (numberop)                 -- for counterop, numberop in [
./Lib/test/test_collections.py:2259:28   - Unknown word (setop)                    -- for counterop, setop in [
./Lib/test/test_collections.py:2296:22   - Unknown word (aaabbcd)                  -- c = Counter('aaabbcd')
./Lib/test/test_collections.py:2297:21   - Unknown word (aaaabbcce)                -- c.subtract('aaaabbcce')
./Lib/test/test_collections.py:2315:19   - Unknown word (nonsortable)              -- def test_repr_nonsortable(self):
./Lib/test/test_collections.py:2347:9    - Unknown word (powerset)                 -- powerset = chain.from_iterable
./Lib/test/test_collections.py:2364:59   - Unknown word (ababa)                    -- b=2, c=0), Counter('ababa'))
./Lib/test/test_collections.py:2365:57   - Unknown word (babab)                    -- a=3, b=2), Counter('babab'))
./Lib/test/test_collections.py:2377:61   - Unknown word (aabd)                     -- 2, c=0) >= Counter('aabd'))
./Lib/test/test_collections.py:237:15    - Unknown word (lowerdict)  -- class lowerdict(dict):
./Lib/test/test_collections.py:269:43    - Unknown word (chainmaps)  -- cm2 # testing between chainmaps
./Lib/test/test_collections.py:501:23    - Unknown word (fieldspec)  -- # verify that fieldspec can be a non-string
./Lib/test/test_collections.py:506:14    - Unknown word (tupleness)  -- def test_tupleness(self):
./Lib/test/test_collections.py:641:9     - Unknown word (newvalues)  -- newvalues = tuple(v*10 for v in
./Lib/test/test_collections.py:715:9     - Unknown word (methodstubs) -- methodstubs = dict.fromkeys(names
./Lib/test/test_collections.py:898:26    - Unknown word (hashables)   -- # Check some non-hashables
./Lib/test/test_collections.py:994:26    - Unknown word (reversibles) -- # Check some non-reversibles
./Lib/test/test_colorsys.py:4:5       - Unknown word (frange)     -- def frange(start, stop, step):
./Lib/test/test_compile.py:112:9     - Unknown word (longexpr)   -- longexpr = 'x = x or ' + '-x
./Lib/test/test_compile.py:324:31    - Unknown word (badencoding) -- code = '# -*- coding: badencoding -*-\n"\xc2\xa4"\n'
./Lib/test/test_compile.py:440:13    - Unknown word (fcontents)   -- fcontents = f.read()
./Lib/test/test_compile.py:443:16    - Unknown word (ifblock)     -- ['<ifblock>', """if True:\n
./Lib/test/test_compile.py:444:16    - Unknown word (forblock)    -- ['<forblock>', """for n in [1,
./Lib/test/test_compile.py:445:16    - Unknown word (deffunc)     -- ['<deffunc>', """def foo():\n
./Lib/test/test_compile.py:534:47    - Unknown word (tmpd)        -- TemporaryDirectory() as tmpd:
./Lib/test/test_compile.py:660:64    - Unknown word (msan)        -- when run under clang msan."""
./Lib/test/test_complex.py:180:13    - Unknown word (mult)       -- mult = 2 ** i
./Lib/test/test_complex.py:258:20    - Unknown word (Behaviour)  -- # UndefinedBehaviourSanitizer).
./Lib/test/test_complex.py:302:14    - Unknown word (boolcontext) -- def test_boolcontext(self):
./Lib/test/test_complex.py:449:15    - Unknown word (evilcomplex) -- class evilcomplex:
./Lib/test/test_complex.py:538:44    - Unknown word (octals)      -- '0_7', '09_99'):  # octals are not recognized here
./Lib/test/test_complex.py:764:19    - Unknown word (bcdox)       -- for t in 'bcdoxX':
./Lib/test/test_configparser.py:1005:10   - Unknown word (hexen)        -- [hexen]
./Lib/test/test_configparser.py:1159:9    - Unknown word (smbconf)      -- smbconf = support.findfile(
./Lib/test/test_configparser.py:1188:13   - Unknown word (favourite)    -- favourite Beatle = Paul
./Lib/test/test_configparser.py:1188:23   - Unknown word (Beatle)       -- favourite Beatle = Paul
./Lib/test/test_configparser.py:1196:14   - Unknown word (ambv)         -- [ambv]
./Lib/test/test_configparser.py:1206:31   - Unknown word (soylent)      -- favourite movie = soylent ${common:favourite color
./Lib/test/test_configparser.py:1271:13   - Unknown word (optionlower)  -- optionlower = value
./Lib/test/test_configparser.py:1279:13   - Unknown word (foolower)     -- foolower = ${common:optionlower
./Lib/test/test_configparser.py:1685:33   - Unknown word (getdecimal)   -- self.assertEqual(parser.getdecimal('s1', 'one'), 1)
./Lib/test/test_configparser.py:1875:10   - Unknown word (multiprefix)  -- [multiprefix]
./Lib/test/test_configparser.py:2062:17   - Unknown word (getlen)       -- def getlen(self, section, option
./Lib/test/test_configparser.py:2085:27   - Unknown word (tysburg)      -- self.assertNotIn('tysburg', cfg.converters)
./Lib/test/test_configparser.py:314:14    - Unknown word (Deutsch)    -- foo[de]{0[0]}Deutsch
./Lib/test/test_configparser.py:469:31    - Unknown word (nekey)      -- "nekey{}nevalue\n".format(self
./Lib/test/test_configparser.py:469:38    - Unknown word (nevalue)    -- "nekey{}nevalue\n".format(self.delimiters
./Lib/test/test_configparser.py:48:9      - Unknown word (newconfig)  -- def newconfig(self, defaults=None
./Lib/test/test_configparser.py:541:40    - Unknown word (cfgparser)  -- = support.findfile("cfgparser.3")
./Lib/test/test_configparser.py:703:15    - Unknown word (mystr)      -- class mystr(str):
./Lib/test/test_configparser.py:798:13    - Unknown word (getdefault) -- getdefault{0[1]} |%(default)s|
./Lib/test/test_configparser.py:950:18    - Unknown word (malformatted) -- def test_set_malformatted_interpolation(self)
./Lib/test/test_configparser.py:966:18    - Unknown word (nonstring)    -- def test_set_nonstring_types(self):
./Lib/test/test_contains.py:10:7      - Unknown word (myset)      -- class myset(base_set):
./Lib/test/test_contains.py:70:14     - Unknown word (nonreflexive) -- def test_nonreflexive(self):
./Lib/test/test_context.py:11:27     - Unknown word (hamt)       -- from _testcapi import hamt
./Lib/test/test_context.py:17:23     - Unknown word (reftracking) -- """Needed to make reftracking test mode work."""
./Lib/test/test_context.py:383:9     - Unknown word (cvar)        -- cvar = contextvars.ContextVar
./Lib/test/test_context.py:401:14    - Unknown word (contextvar)  -- def test_contextvar_getitem(self):
./Lib/test/test_context.py:402:9     - Unknown word (clss)        -- clss = contextvars.ContextVar
./Lib/test/test_context.py:454:7     - Unknown word (Hask)        -- class HaskKeyCrasher:
./Lib/test/test_context.py:477:7     - Unknown word (Hamt)        -- class HamtTest(unittest.TestCase
./Lib/test/test_context.py:479:14    - Unknown word (hashkey)     -- def test_hashkey_helper_1(self):
./Lib/test/test_context.py:92:22     - Unknown word (typerrors)   -- def test_context_typerrors_1(self):
./Lib/test/test_contextlib.py:100:13    - Unknown word (whoo)       -- def whoo():
./Lib/test/test_contextlib.py:225:14    - Unknown word (nokeepref)  -- def test_nokeepref(self):
./Lib/test/test_contextlib.py:323:26    - Unknown word (Booh)       -- f.write("Booh\n")
./Lib/test/test_contextlib.py:383:7     - Unknown word (mycontext)  -- class mycontext(ContextDecorator):
./Lib/test/test_contextlib.py:491:19    - Unknown word (unter)      -- def __unter__(self):
./Lib/test/test_contextlib.py:505:19    - Unknown word (uxit)       -- def __uxit__(self, *exc):
./Lib/test/test_contextlib.py:514:15    - Unknown word (somecontext) -- class somecontext(object):
./Lib/test/test_copy.py:601:26    - Unknown word (nostate)    -- def test_reconstruct_nostate(self):
./Lib/test/test_copy.py:767:48    - Unknown word (stickin)    -- ValueError("ain't got no stickin' state")
./Lib/test/test_copy.py:801:21    - Unknown word (weakdict)   -- def _check_copy_weakdict(self, _dicttype):
./Lib/test/test_copy.py:801:37    - Unknown word (dicttype)   -- copy_weakdict(self, _dicttype):
./Lib/test/test_copy.py:822:19    - Unknown word (weakkeydict) -- def test_copy_weakkeydict(self):
./Lib/test/test_copy.py:825:19    - Unknown word (weakvaluedict) -- def test_copy_weakvaluedict(self):
./Lib/test/test_dataclasses.py:1551:29   - Unknown word (Tbase)      -- class T(namedtuple('Tbase', 'a')):
./Lib/test/test_dataclasses.py:1856:29   - Unknown word (plugh)      -- return 'plugh'
./Lib/test/test_dataclasses.py:1959:26   - Unknown word (qualnames)  -- def test_dataclasses_qualnames(self):
./Lib/test/test_dataclasses.py:212:13    - Unknown word (selfx)      -- selfx: str
./Lib/test/test_dataclasses.py:2541:12   - Unknown word (hashability) -- # hashability keeps working the same
./Lib/test/test_dataclasses.py:2641:22   - Unknown word (nonfrozen)   -- def test_inherit_nonfrozen_from_empty_frozen(self
./Lib/test/test_dataclasses.py:3121:13   - Unknown word (typestr)     -- for typestr in ('ClassVar[int]'
./Lib/test/test_dataclasses.py:3151:14   - Unknown word (isnt)        -- def test_isnt_classvar(self):
./Lib/test/test_dataclasses.py:3158:38   - Unknown word (Varx)        -- 'typing.ClassVarx[int]',
./Lib/test/test_dataclasses.py:3159:26   - Unknown word (typong)      -- 'typong.ClassVar[int]',
./Lib/test/test_dataclasses.py:3161:26   - Unknown word (typingx)     -- 'typingxClassVar[str]',
./Lib/test/test_dataclasses.py:3205:26   - Unknown word (xdataclasses) -- 'xdataclasses.xInitVar',
./Lib/test/test_dataclasses.py:3258:36   - Unknown word (textanno)     -- test import dataclass_textanno
./Lib/test/test_dataclasses.py:3361:32   - Unknown word (xxinit)       -- xxinit=False)
./Lib/test/test_dbm.py:1:51      - Unknown word (testdumbdbm) -- open function based on testdumbdbm.py"""
./Lib/test/test_dbm_dumb.py:165:9     - Unknown word (dkeys)      -- dkeys = sorted(self._dict
./Lib/test/test_dbm_dumb.py:177:40    - Unknown word (abcdefghijklm) -- k = random.choice('abcdefghijklm')
./Lib/test/test_decimal.py:113:16    - Unknown word (decimaltestdata) -- TESTDATADIR = 'decimaltestdata'
./Lib/test/test_decimal.py:140:14    - Unknown word (readcontext)     -- self.readcontext = self.decimal.Context
./Lib/test/test_decimal.py:147:14    - Unknown word (scbx)            -- 'scbx164',
./Lib/test/test_decimal.py:14:57     - Unknown word (Cowlishaw)  -- tests provided by Mike Cowlishaw. The latter
./Lib/test/test_decimal.py:1515:5    - Unknown word (thfunc)          -- def thfunc1(cls):
./Lib/test/test_decimal.py:1568:5    - Unknown word (thiscontext)     -- thiscontext = getcontext()
./Lib/test/test_decimal.py:157:14    - Unknown word (expx)            -- 'expx901',
./Lib/test/test_decimal.py:1614:14   - Unknown word (emin)            -- save_emin = DefaultContext.Emin
./Lib/test/test_decimal.py:165:14    - Unknown word (logx)            -- 'logx901',
./Lib/test/test_decimal.py:1675:24   - Unknown word (uncomparable)    -- #a Decimal and uncomparable
./Lib/test/test_decimal.py:169:14    - Unknown word (powx)            -- 'powx1183',
./Lib/test/test_decimal.py:1737:9    - Unknown word (etiny)           -- etiny = C.MIN_ETINY if C else
./Lib/test/test_decimal.py:1783:13   - Unknown word (hashit)          -- def hashit(d):
./Lib/test/test_decimal.py:17:1      - Unknown word (Cowlishaw's) -- Cowlishaw's tests can be downloaded
./Lib/test/test_decimal.py:183:40    - Unknown word (pwsx)            -- skipped_test_ids.add('pwsx803')
./Lib/test/test_decimal.py:1907:14   - Unknown word (tonum)           -- def test_tonum_methods(self):
./Lib/test/test_decimal.py:191:40    - Unknown word (pwmx)            -- skipped_test_ids.add('pwmx325')
./Lib/test/test_decimal.py:197:29    - Unknown word (maxexponent)     -- 'maxexponent' : self.change_max_exponent
./Lib/test/test_decimal.py:198:29    - Unknown word (minexponent)     -- 'minexponent' : self.change_min_exponent
./Lib/test/test_decimal.py:206:30    - Unknown word (comparesig)      -- 'comparesig':'compare_signal',
./Lib/test/test_decimal.py:207:30    - Unknown word (comparetotal)    -- 'comparetotal':'compare_total',
./Lib/test/test_decimal.py:208:30    - Unknown word (comparetotmag)   -- 'comparetotmag':'compare_total_mag
./Lib/test/test_decimal.py:210:30    - Unknown word (copyabs)         -- 'copyabs':'copy_abs',
./Lib/test/test_decimal.py:211:30    - Unknown word (copynegate)      -- 'copynegate':'copy_negate',
./Lib/test/test_decimal.py:213:30    - Unknown word (divideint)       -- 'divideint':'divide_int',
./Lib/test/test_decimal.py:215:30    - Unknown word (iscanonical)     -- 'iscanonical':'is_canonical',
./Lib/test/test_decimal.py:217:30    - Unknown word (isinfinite)      -- 'isinfinite':'is_infinite',
./Lib/test/test_decimal.py:219:30    - Unknown word (isnormal)        -- 'isnormal':'is_normal',
./Lib/test/test_decimal.py:220:30    - Unknown word (isqnan)          -- 'isqnan':'is_qnan',
./Lib/test/test_decimal.py:221:30    - Unknown word (issigned)        -- 'issigned':'is_signed',
./Lib/test/test_decimal.py:222:30    - Unknown word (issnan)          -- 'issnan':'is_snan',
./Lib/test/test_decimal.py:223:30    - Unknown word (issubnormal)     -- 'issubnormal':'is_subnormal',
./Lib/test/test_decimal.py:224:30    - Unknown word (iszero)          -- 'iszero':'is_zero',
./Lib/test/test_decimal.py:225:30    - Unknown word (maxmag)          -- 'maxmag':'max_mag',
./Lib/test/test_decimal.py:226:30    - Unknown word (minmag)          -- 'minmag':'min_mag',
./Lib/test/test_decimal.py:227:30    - Unknown word (nextminus)       -- 'nextminus':'next_minus',
./Lib/test/test_decimal.py:228:30    - Unknown word (nextplus)        -- 'nextplus':'next_plus',
./Lib/test/test_decimal.py:229:30    - Unknown word (nexttoward)      -- 'nexttoward':'next_toward',
./Lib/test/test_decimal.py:232:30    - Unknown word (remaindernear)   -- 'remaindernear':'remainder_near',
./Lib/test/test_decimal.py:233:30    - Unknown word (samequantum)     -- 'samequantum':'same_quantum',
./Lib/test/test_decimal.py:234:30    - Unknown word (squareroot)      -- 'squareroot':'sqrt',
./Lib/test/test_decimal.py:235:30    - Unknown word (toeng)           -- 'toeng':'to_eng_string',
./Lib/test/test_decimal.py:236:30    - Unknown word (tointegral)      -- 'tointegral':'to_integral_value
./Lib/test/test_decimal.py:237:30    - Unknown word (tointegralx)     -- 'tointegralx':'to_integral_exact
./Lib/test/test_decimal.py:238:30    - Unknown word (tosci)           -- 'tosci':'to_sci_string',
./Lib/test/test_decimal.py:2488:13   - Unknown word (savedecimal)     -- savedecimal = sys.modules['decimal
./Lib/test/test_decimal.py:286:38    - Unknown word (setprec)         -- readcontext._unsafe_setprec(1070000000)
./Lib/test/test_decimal.py:287:38    - Unknown word (setemax)         -- readcontext._unsafe_setemax(1070000000)
./Lib/test/test_decimal.py:288:38    - Unknown word (setemin)         -- readcontext._unsafe_setemin(-1070000000)
./Lib/test/test_decimal.py:327:9     - Unknown word (funct)           -- funct, value = (x.strip()
./Lib/test/test_decimal.py:353:13    - Unknown word (valstemp)        -- valstemp = L[2:]
./Lib/test/test_decimal.py:3591:14   - Unknown word (localcontextarg) -- def test_localcontextarg(self):
./Lib/test/test_decimal.py:3739:9    - Unknown word (flagsets)        -- flagsets = [[Inexact], [Rounded
./Lib/test/test_decimal.py:375:9     - Unknown word (theirexceptions) -- theirexceptions = [self.ErrorNames[x
./Lib/test/test_decimal.py:3995:9    - Unknown word (savecontext)     -- savecontext = getcontext().copy
./Lib/test/test_decimal.py:4039:13   - Unknown word (saveprec)        -- saveprec = c.prec
./Lib/test/test_decimal.py:4559:9    - Unknown word (Whitebox)        -- class PyWhitebox(unittest.TestCase):
./Lib/test/test_decimal.py:456:29    - Unknown word (getexceptions)   -- myexceptions = self.getexceptions()
./Lib/test/test_decimal.py:456:9     - Unknown word (myexceptions)    -- myexceptions = self.getexceptions
./Lib/test/test_decimal.py:4779:14   - Unknown word (bignum)          -- def test_bignum(self):
./Lib/test/test_decimal.py:4780:23   - Unknown word (whitebox)        -- # Not exactly whitebox, but too slow with pydecimal
./Lib/test/test_decimal.py:490:7     - Unknown word (CIBM)            -- class CIBMTestCases(IBMTestCases
./Lib/test/test_decimal.py:4967:56   - Unknown word (allcr)           -- OverflowError, setattr, c, '_allcr', int_max+1)
./Lib/test/test_decimal.py:5485:19   - Unknown word (subtyping)       -- # Unsound subtyping
./Lib/test/test_decimal.py:5516:14   - Unknown word (maxcontext)      -- def test_maxcontext_exact_arith(self):
./Lib/test/test_decimal.py:5534:36   - Unknown word (deccheck)        -- MemoryError are tested.  deccheck.py has an exhaustive
./Lib/test/test_decimal.py:5616:13   - Unknown word (mkargs)          -- def mkargs(module, sig):
./Lib/test/test_decimal.py:57:1      - Unknown word (cfractions)  -- cfractions = import_fresh_module
./Lib/test/test_decimal.py:59:1      - Unknown word (pfractions)  -- pfractions = import_fresh_module
./Lib/test/test_decimal.py:756:9     - Unknown word (prevdec)         -- prevdec = Decimal(500000123
./Lib/test/test_decorators.py:110:29    - Unknown word (Cleese)     -- @decorators.author('Cleese')
./Lib/test/test_decorators.py:115:14    - Unknown word (argforms)   -- def test_argforms(self):
./Lib/test/test_decorators.py:119:13    - Unknown word (noteargs)   -- def noteargs(*args, **kwds):
./Lib/test/test_decorators.py:121:32    - Unknown word (dbval)      -- setattr(func, 'dbval', (args, kwds))
./Lib/test/test_decorators.py:132:58    - Unknown word (cleese)     -- eric='idle', john='cleese')
./Lib/test/test_decorators.py:190:13    - Unknown word (unimp)      -- def unimp(func):
./Lib/test/test_decorators.py:192:24    - Unknown word (nullval)    -- context = dict(nullval=None, unimp=unimp)
./Lib/test/test_decorators.py:211:36    - Unknown word (haha)       -- funcattrs(abc=1, xyz="haha")
./Lib/test/test_decorators.py:21:7      - Unknown word (Dbcheck)    -- class DbcheckError (Exception):
./Lib/test/test_decorators.py:222:13    - Unknown word (callnum)    -- def callnum(num):
./Lib/test/test_decorators.py:22:24     - Unknown word (exprstr)    -- def __init__(self, exprstr, func, args, kwds):
./Lib/test/test_decorators.py:24:35     - Unknown word (dbcheck)    -- Exception.__init__(self, "dbcheck %r failed (func=%s args
./Lib/test/test_decorators.py:251:29    - Unknown word (makedec)    -- actions.append('makedec' + tag)
./Lib/test/test_decorators.py:253:33    - Unknown word (calldec)    -- actions.append('calldec' + tag)
./Lib/test/test_decorators.py:263:37    - Unknown word (evalname)   -- opname, res = ('evalname', make_decorator)
./Lib/test/test_decorators.py:265:37    - Unknown word (evalargs)   -- opname, res = ('evalargs', str(self.index))
./Lib/test/test_decorators.py:362:13    - Unknown word (myclassmethod) -- for myclassmethod in [MyClassMethod1,
./Lib/test/test_decorators.py:41:5      - Unknown word (countcalls) -- def countcalls(counts):
./Lib/test/test_decorators.py:5:5       - Unknown word (funcattrs)  -- def funcattrs(**kwds):
./Lib/test/test_deque.py:132:20    - Unknown word (xabc)       -- d = deque('xabc')
./Lib/test/test_deque.py:186:41    - Unknown word (abcdabcd)   -- assertEqual(list(d), list('abcdabcd'))
./Lib/test/test_deque.py:203:40    - Unknown word (efgh)       -- assertEqual(g + h, deque('efgh'))
./Lib/test/test_deque.py:221:41    - Unknown word (abcddcba)   -- assertEqual(list(d), list('abcddcba'))
./Lib/test/test_deque.py:271:9     - Unknown word (nonelement) -- nonelement = 'Z'
./Lib/test/test_deque.py:377:40    - Unknown word (bcabc)      -- assertEqual(d * 2, deque('bcabc'))
./Lib/test/test_deque.py:424:39    - Unknown word (eabcd)      -- assertEqual(''.join(d), 'eabcd')
./Lib/test/test_deque.py:428:39    - Unknown word (bcdea)      -- assertEqual(''.join(d), 'bcdea')
./Lib/test/test_deque.py:453:55    - Unknown word (backaround) -- check that it wraps backaround
./Lib/test/test_deque.py:539:19    - Unknown word (steadystate) -- def test_long_steadystate_queue_popleft(self)
./Lib/test/test_deque.py:550:37    - Unknown word (popright)    -- long_steadystate_queue_popright(self):
./Lib/test/test_deque.py:65:11     - Unknown word (extendleft) -- d.extendleft([8, 7])
./Lib/test/test_deque.py:934:1     - Unknown word (libreftest)  -- libreftest = """
./Lib/test/test_deque.py:935:46    - Unknown word (libcollections) -- Reference: Doc/lib/libcollections.tex
./Lib/test/test_deque.py:998:9     - Unknown word (roundrobin)     -- >>> def roundrobin(*iterables):
./Lib/test/test_dict.py:1001:14   - Unknown word (splittable)  -- def test_splittable_setdefault(self):
./Lib/test/test_dict.py:1093:40   - Unknown word (hassplittable) -- assertTrue(_testcapi.dict_hassplittable(a.__dict__))
./Lib/test/test_dict.py:1133:15   - Unknown word (dictviews)     -- # dictviews aren't picklable, only
./Lib/test/test_dict.py:1152:14   - Unknown word (valuesiterator) -- def test_valuesiterator_pickling(self):
./Lib/test/test_dict.py:1186:14   - Unknown word (reverseitemiterator) -- def test_reverseitemiterator_pickling(self):
./Lib/test/test_dict.py:1208:14   - Unknown word (reversevaluesiterator) -- def test_reversevaluesiterator_pickling(self):
./Lib/test/test_dict.py:1388:36   - Unknown word (iternextitem)          -- oob_indexing_dictiter_iternextitem(self):
./Lib/test/test_dict.py:1483:18   - Unknown word (nonstr)                -- def test_str_nonstr(self):
./Lib/test/test_dict.py:1485:37   - Unknown word (unoptimized)           -- keys. Make sure the unoptimized path is used when a
./Lib/test/test_dict.py:1560:17   - Unknown word (noninterned)           -- noninterned_key1 = 'ke'
./Lib/test/test_dict.py:1584:7    - Unknown word (CAPI)                  -- class CAPITest(unittest.TestCase
./Lib/test/test_dict.py:1588:22   - Unknown word (knownhash)             -- def test_getitem_knownhash(self):
./Lib/test/test_dict.py:366:19    - Unknown word (noncompact)  -- def test_copy_noncompact(self):
./Lib/test/test_dict.py:37:13     - Unknown word (dictliteral) -- dictliteral = '{' + ', '.join(formatted
./Lib/test/test_dict.py:667:34    - Unknown word (elementwise) -- With the same size, an elementwise compare happens
./Lib/test/test_dict.py:861:20    - Unknown word (presized)    -- def test_empty_presized_dict_in_freelist(self
./Lib/test/test_dict.py:861:37    - Unknown word (freelist)    -- empty_presized_dict_in_freelist(self):
./Lib/test/test_difflib.py:126:31    - Unknown word (ımplıcıt)   -- Explicit is better than ımplıcıt.
./Lib/test/test_difflib.py:132:32    - Unknown word (ügly)       -- Beautiful is better than ügly.
./Lib/test/test_difflib.py:133:9     - Unknown word (Sımple)     -- 3. Sımple is better than complex
./Lib/test/test_difflib.py:134:34    - Unknown word (cömplex)    -- Complicated is better than cömplex.
./Lib/test/test_difflib.py:293:39    - Unknown word (filedate)   -- trailing_tab_on_empty_filedate(self):
./Lib/test/test_difflib.py:385:36    - Unknown word (łodz)       -- b'\xb3odz.txt' # "łodz.txt"
./Lib/test/test_difflib.py:417:9     - Unknown word (datea)      -- datea = b'2005-03-18'
./Lib/test/test_difflib.py:418:9     - Unknown word (dateb)      -- dateb = b'2005-03-19'
./Lib/test/test_difflib.py:461:15    - Unknown word (ohell)      -- b = ['ohell\n']
./Lib/test/test_difflib.py:46:11     - Unknown word (Autojunk)   -- class TestAutojunk(unittest.TestCase):
./Lib/test/test_difflib_expect.html:381:5     - Unknown word (tabsize)    -- <h2>tabsize=2</h2>
./Lib/test/test_difflib_expect.html:391:219   - Unknown word (sstt)       -- preceded&nbsp;by&nbsp;from:[sstt]&nbsp;to:[sssst]</td
./Lib/test/test_difflib_expect.html:391:234   - Unknown word (sssst)      -- from:[sstt]&nbsp;to:[sssst]</td><td class="diff
./Lib/test/test_difflib_expect.html:392:219   - Unknown word (sstst)      -- preceded&nbsp;by&nbsp;from:[sstst]&nbsp;to:[ssssss]</td
./Lib/test/test_difflib_expect.html:421:398   - Unknown word (adde)       -- nbsp;&nbsp;&nbsp;&nbsp;adde</span></td></tr>
./Lib/test/test_difflib_expect.html:433:217   - Unknown word (subtra)     -- line&nbsp;8&nbsp;&nbsp;subtra</span></td><td class
./Lib/test/test_difflib_expect.html:434:117   - Unknown word (cted)       -- span class="diff_sub">cted</span></td><td class
./Lib/test/test_difflib_expect.html:448:19    - Unknown word (splitlines) -- <h2>wrapcolumn=14,splitlines()</h2>
./Lib/test/test_dis.py:45:56     - Unknown word (immeadiately) -- mismatch wouldn't be caught immeadiately
./Lib/test/test_doctest2.py:10:1      - Unknown word (ЉЊЈЁЂ)      -- ЉЊЈЁЂ
./Lib/test/test_doctest2.py:98:9      - Unknown word (clsm)       -- def clsm(cls, val):
./Lib/test/test_dummy_thread.py:19:14     - Unknown word (initlock)   -- def test_initlock(self):
./Lib/test/test_dummy_thread.py:53:14     - Unknown word (uncond)     -- def test_uncond_acquire_success(self
./Lib/test/test_dummy_thread.py:57:26     - Unknown word (Uncondional) -- "Uncondional locking failed.")
./Lib/test/test_dummy_threading.py:12:20     - Unknown word (sema)       -- global sema
./Lib/test/test_dummy_threading.py:37:14     - Unknown word (numtasks)   -- self.numtasks = 10
./Lib/test/test_dynamic.py:63:11     - Unknown word (callstack)  -- # callstack.
./Lib/test/test_dynamicclassattribute.py:141:9     - Unknown word (newgettersub) -- newgettersub = PropertySubNewGetter
./Lib/test/test_dynamicclassattribute.py:144:9     - Unknown word (newgetter)    -- newgetter = PropertyNewGetter
./Lib/test/test_dynamicclassattribute.py:262:9     - Unknown word (foosub)       -- foosub = FooSub()
./Lib/test/test_ensurepip.py:330:11    - Unknown word (Uninstallation) -- class TestUninstallationMainFunction(EnsurepipMixin
./Lib/test/test_enum.py:1023:17   - Unknown word (chartruese) -- chartruese = 7
./Lib/test/test_enum.py:1044:15   - Unknown word (numero)     -- class numero(IntEnum):
./Lib/test/test_enum.py:1088:14   - Unknown word (flufl)      -- def test_flufl_enum(self):
./Lib/test/test_enum.py:1089:15   - Unknown word (Fluflnum)   -- class Fluflnum(Enum):
./Lib/test/test_enum.py:1193:23   - Unknown word (intname)    -- self._intname = name
./Lib/test/test_enum.py:132:33    - Unknown word (ownerclass) -- get__(self, instance, ownerclass):
./Lib/test/test_enum.py:148:15    - Unknown word (Konstants)  -- class Konstants(float, Enum):
./Lib/test/test_enum.py:1644:28   - Unknown word (hexlified)  -- return '%s hexlified!' % self.value
./Lib/test/test_enum.py:1689:17   - Unknown word (grene)      -- grene = 2
./Lib/test/test_enum.py:1740:14   - Unknown word (nonhash)    -- def test_nonhash_value(self):
./Lib/test/test_enum.py:1838:25   - Unknown word (wierd)      -- def test_auto_order_wierd(self):
./Lib/test/test_enum.py:1918:25   - Unknown word (booyah)     -- return 'booyah'
./Lib/test/test_enum.py:1921:25   - Unknown word (nuhuh)      -- return 'nuhuh!'
./Lib/test/test_enum.py:2267:14   - Unknown word (programatic) -- def test_programatic_function_string(self
./Lib/test/test_enum.py:268:35    - Unknown word (invierno)   -- Season.SPRING.name = 'invierno'
./Lib/test/test_enum.py:3180:28   - Unknown word (lexigraphical) -- # report the first lexigraphical name in that case.
./Lib/test/test_enum.py:643:14    - Unknown word (floatenum)  -- def test_floatenum_from_scratch(self):
./Lib/test/test_enumerate.py:100:14    - Unknown word (getitemseqn)   -- def test_getitemseqn(self):
./Lib/test/test_enumerate.py:105:14    - Unknown word (iteratorseqn)  -- def test_iteratorseqn(self):
./Lib/test/test_enumerate.py:110:14    - Unknown word (iteratorgenerator) -- def test_iteratorgenerator(self):
./Lib/test/test_enumerate.py:118:14    - Unknown word (illformediterable) -- def test_illformediterable(self):
./Lib/test/test_enumerate.py:124:14    - Unknown word (argumentcheck)     -- def test_argumentcheck(self):
./Lib/test/test_enumerate.py:223:14    - Unknown word (objmethods)        -- def test_objmethods(self):
./Lib/test/test_enumerate.py:90:14     - Unknown word (basicfunction) -- def test_basicfunction(self):
./Lib/test/test_errno.py:25:7      - Unknown word (Errorcode)  -- class ErrorcodeTests(unittest.TestCase
./Lib/test/test_exception_hierarchy.py:188:19    - Unknown word (kwdargs)    -- def test_init_kwdargs(self):
./Lib/test/test_exception_hierarchy.py:77:25     - Unknown word (errnames)   -- excname, _, errnames = line.partition('
./Lib/test/test_exception_hierarchy.py:78:17     - Unknown word (errname)    -- for errname in filter(None, errnames
./Lib/test/test_exception_hierarchy.py:92:9      - Unknown word (othercodes) -- othercodes = set(errno.errorcode
./Lib/test/test_exception_variations.py:11:30     - Unknown word (nyaa)       -- raise Exception('nyaa!')
./Lib/test/test_exception_variations.py:46:30     - Unknown word (yarr)       -- raise Exception('yarr!')
./Lib/test/test_exceptions.py:1217:9    - Unknown word (klasses)    -- klasses = UnicodeEncodeError
./Lib/test/test_exceptions.py:1223:14   - Unknown word (badisinstance) -- def test_badisinstance(self):
./Lib/test/test_exceptions.py:1271:53   - Unknown word (tstate)        -- RecursionError is raised when tstate->recursion_depth is
./Lib/test/test_exceptions.py:1274:32   - Unknown word (recursivity)   -- Prior to #22898, the recursivity of PyErr_NormalizeException
./Lib/test/test_exceptions.py:1277:68   - Unknown word (Fini)          -- a segfault in _PyExc_Fini() upon
./Lib/test/test_exceptions.py:1308:13   - Unknown word (recursionlimit) -- recursionlimit = sys.getrecursionlimit
./Lib/test/test_exceptions.py:1407:35   - Unknown word (nomemory)       -- _testcapi.set_nomemory(0)
./Lib/test/test_exceptions.py:143:13    - Unknown word (ckmsg)      -- def ckmsg(src, msg):
./Lib/test/test_exceptions.py:1524:20   - Unknown word (ENOTDIR)        -- def test_errno_ENOTDIR(self):
./Lib/test/test_exceptions.py:1531:36   - Unknown word (Unraisable)     -- Issue #22836: PyErr_WriteUnraisable() should give sensible
./Lib/test/test_exceptions.py:1695:13   - Unknown word (bluch)          -- bluch
./Lib/test/test_exceptions.py:1702:13   - Unknown word (blech)          -- blech = None
./Lib/test/test_exceptions.py:1707:13   - Unknown word (blch)           -- blch = None
./Lib/test/test_exceptions.py:1712:13   - Unknown word (bluchin)        -- bluchin = None
./Lib/test/test_exceptions.py:1716:13   - Unknown word (blach)          -- blach = None
./Lib/test/test_exceptions.py:1717:13   - Unknown word (bluc)           -- bluc = None
./Lib/test/test_exceptions.py:1722:13   - Unknown word (bluchi)         -- bluchi = None
./Lib/test/test_exceptions.py:1726:13   - Unknown word (blucha)         -- blucha = None
./Lib/test/test_exceptions.py:1746:30   - Unknown word (suggestio)      -- print(global_for_suggestio)
./Lib/test/test_exceptions.py:1756:31   - Unknown word (Errrrr)         -- print(ZeroDivisionErrrrr)
./Lib/test/test_exceptions.py:1766:13   - Unknown word (somethingverywronghehehehehehe) -- somethingverywronghehehehehehe = None
./Lib/test/test_exceptions.py:1767:19   - Unknown word (somethingverywronghe)           -- print(somethingverywronghe)
./Lib/test/test_exceptions.py:1775:27   - Unknown word (somethingverywronghehe)         -- self.assertNotIn("somethingverywronghehe", err.getvalue())
./Lib/test/test_exceptions.py:1778:30   - Unknown word (pytho)                          -- vvv = mom = w = id = pytho = None
./Lib/test/test_exceptions.py:1951:34   - Unknown word (doesn)                          -- unbound_local_error_doesn_not_match(self):
./Lib/test/test_exceptions.py:1954:19   - Unknown word (somethong)                      -- print(somethong)
./Lib/test/test_exceptions.py:2078:17   - Unknown word (somethingverywrong)             -- A().somethingverywrong
./Lib/test/test_exceptions.py:2233:17   - Unknown word (blich)                          -- T().blich
./Lib/test/test_exceptions.py:2280:41   - Unknown word (somemodule)                     -- ImportError('test', name='somemodule')
./Lib/test/test_exceptions.py:2284:41   - Unknown word (somepath)                       -- ImportError('test', path='somepath')
./Lib/test/test_exceptions.py:2288:58   - Unknown word (somename)                       -- path='somepath', name='somename')
./Lib/test/test_exceptions.py:250:22    - Unknown word (yfff)       -- check("for x yfff:", 1, 7)
./Lib/test/test_exceptions.py:950:50    - Unknown word (testfunc)   -- cleanup_exc_state(self, testfunc):
./Lib/test/test_faulthandler.py:159:14    - Unknown word (sigsegv)    -- def test_sigsegv(self):
./Lib/test/test_faulthandler.py:222:14    - Unknown word (sigabrt)    -- def test_sigabrt(self):
./Lib/test/test_faulthandler.py:235:14    - Unknown word (sigfpe)     -- def test_sigfpe(self):
./Lib/test/test_faulthandler.py:247:14    - Unknown word (sigbus)     -- def test_sigbus(self):
./Lib/test/test_faulthandler.py:261:14    - Unknown word (sigill)     -- def test_sigill(self):
./Lib/test/test_faulthandler.py:295:37    - Unknown word (sigaltstack) -- "Issue #12868: sigaltstack() doesn't work on "
./Lib/test/test_faulthandler.py:901:45    - Unknown word (Emsc)        -- # MSC exception ("Emsc")
./Lib/test/test_fcntl.py:19:9      - Unknown word (lockdata)   -- def get_lockdata():
./Lib/test/test_fcntl.py:33:22     - Unknown word (lxxxx)      -- off_t = 'lxxxx'
./Lib/test/test_fcntl.py:37:35     - Unknown word (gnukfreebsd) -- platform.startswith('gnukfreebsd'):
./Lib/test/test_fcntl.py:38:33     - Unknown word (qqihhi)      -- lockdata = struct.pack('qqihhi', 0, 0, 0, fcntl.F_WRLCK
./Lib/test/test_fcntl.py:39:38     - Unknown word (unixware)    -- platform in ['hp-uxB', 'unixware7']:
./Lib/test/test_fcntl.py:40:33     - Unknown word (hhlllii)     -- lockdata = struct.pack('hhlllii', fcntl.F_WRLCK, 0,
./Lib/test/test_file.py:207:11    - Unknown word (misbehaviour) -- # misbehaviour especially with repeated
./Lib/test/test_file.py:250:9     - Unknown word (dataoffset)   -- dataoffset = 16384
./Lib/test/test_file.py:254:9     - Unknown word (nchunks)      -- nchunks = dataoffset // len
./Lib/test/test_file.py:255:9     - Unknown word (testlines)    -- testlines = [
./Lib/test/test_file.py:284:61    - Unknown word (buffersize)   -- boundary for any power-of-2 buffersize
./Lib/test/test_file.py:289:9     - Unknown word (testline)     -- testline = testlines.pop(0)
./Lib/test/test_filecmp.py:211:13    - Unknown word (dcmp)            -- sub_dcmp = sub_dirs['subdir'
./Lib/test/test_filecmp.py:64:14     - Unknown word (caseinsensitive) -- self.caseinsensitive = os.path.normcase(
./Lib/test/test_fileinput.py:1020:29   - Unknown word (ufffdabc)   -- check('replace', ['\ufffdabc'])
./Lib/test/test_fileinput.py:285:41    - Unknown word (kargs)      -- call__(self, *args, **kargs):
./Lib/test/test_fileinput.py:335:63    - Unknown word (fobj)       -- rb', inplace=True) as fobj:
./Lib/test/test_fileinput.py:55:15     - Unknown word (linesread)  -- self._linesread = []
./Lib/test/test_fileio.py:1:39      - Unknown word (Stutzbach)  -- test_file.py by Daniel Stutzbach
./Lib/test/test_fileio.py:223:13    - Unknown word (Opendir)    -- def testOpendir(self):
./Lib/test/test_fileio.py:337:26    - Unknown word (Readall)    -- def testErrnoOnClosedReadall(self, f):
./Lib/test/test_fileio.py:68:13     - Unknown word (Blksize)    -- def testBlksize(self):
./Lib/test/test_float.py:1024:47   - Unknown word (infinit)         -- ValueError, float, "infinit")
./Lib/test/test_float.py:1027:47   - Unknown word (infinitys)       -- ValueError, float, "infinitys")
./Lib/test/test_float.py:1058:47   - Unknown word (nana)            -- ValueError, float, "nana")
./Lib/test/test_float.py:1086:26   - Unknown word (dtoa)            -- # When using the dtoa.c code, the sign of
./Lib/test/test_float.py:1322:56   - Unknown word (ffffffffffffffp) -- OverflowError, fromHex, '0x1.ffffffffffffffp+1023')
./Lib/test/test_float.py:1325:57   - Unknown word (fffffffffffffp)  -- OverflowError, fromHex, '+0x3.fffffffffffffp1022')
./Lib/test/test_float.py:1328:54   - Unknown word (Xffffffffffffffffp) -- OverflowError, fromHex, '-0Xffffffffffffffffp960')
./Lib/test/test_float.py:1362:37   - Unknown word (fffffffffffffffffp) -- identical(fromHex('0x1.fffffffffffffffffp-1075'), TINY)
./Lib/test/test_float.py:1399:37   - Unknown word (ffffffffffffd)      -- identical(fromHex('0x0.ffffffffffffd6p-1022'), MIN-3*TINY
./Lib/test/test_float.py:1401:37   - Unknown word (ffffffffffffdap)    -- identical(fromHex('0x0.ffffffffffffdap-1022'), MIN-2*TINY)
./Lib/test/test_float.py:1402:37   - Unknown word (ffffffffffffdcp)    -- identical(fromHex('0x0.ffffffffffffdcp-1022'), MIN-2*TINY)
./Lib/test/test_float.py:1403:37   - Unknown word (ffffffffffffdep)    -- identical(fromHex('0x0.ffffffffffffdep-1022'), MIN-2*TINY)
./Lib/test/test_float.py:1404:37   - Unknown word (ffffffffffffe)      -- identical(fromHex('0x0.ffffffffffffe0p-1022'), MIN-2*TINY
./Lib/test/test_float.py:1409:37   - Unknown word (ffffffffffffeap)    -- identical(fromHex('0x0.ffffffffffffeap-1022'), MIN-TINY)
./Lib/test/test_float.py:1410:37   - Unknown word (ffffffffffffecp)    -- identical(fromHex('0x0.ffffffffffffecp-1022'), MIN-TINY)
./Lib/test/test_float.py:1411:37   - Unknown word (ffffffffffffeep)    -- identical(fromHex('0x0.ffffffffffffeep-1022'), MIN-TINY)
./Lib/test/test_float.py:1417:37   - Unknown word (fffffffffffffap)    -- identical(fromHex('0x0.fffffffffffffap-1022'), MIN)
./Lib/test/test_float.py:1418:37   - Unknown word (fffffffffffffcp)    -- identical(fromHex('0x0.fffffffffffffcp-1022'), MIN)
./Lib/test/test_float.py:1419:37   - Unknown word (fffffffffffffep)    -- identical(fromHex('0x0.fffffffffffffep-1022'), MIN)
./Lib/test/test_float.py:1446:37   - Unknown word (fffffffffffffbp)    -- identical(fromHex('0x0.fffffffffffffbp0'), 1.0-EPS/2)
./Lib/test/test_float.py:1448:37   - Unknown word (fffffffffffffdp)    -- identical(fromHex('0x0.fffffffffffffdp0'), 1.0)
./Lib/test/test_float.py:1459:51   - Unknown word (ffffffffffffffffffffp) -- fromHex('0x1.00000000000007ffffffffffffffffffffp0'),
./Lib/test/test_float.py:183:14    - Unknown word (floatconversion) -- def test_floatconversion(self):
./Lib/test/test_float.py:21:10     - Unknown word (setformat)  -- requires_setformat = unittest.skipUnless
./Lib/test/test_float.py:260:14    - Unknown word (floatasratio)    -- def test_floatasratio(self):
./Lib/test/test_float.py:26:43     - Unknown word (formatfloat) -- path.join(test_dir, 'formatfloat_testcases.txt')
./Lib/test/test_float.py:543:48    - Unknown word (libms)           -- and -1 ** large; some libms apparently
./Lib/test/test_float.py:818:15    - Unknown word (roundtripping)   -- # str roundtripping. In particular, for
./Lib/test/test_float.py:858:13    - Unknown word (negs)            -- negs = '-'+s
./Lib/test/test_float.py:874:51    - Unknown word (ceci)            -- TypeError, round, NAN, "ceci n'est pas un integer
./Lib/test/test_float.py:948:39    - Unknown word (infs)            -- formatting of nans and infs.
./Lib/test/test_float.py:958:13    - Unknown word (pfmt)            -- pfmt = '%+' + fmt[1:]
./Lib/test/test_fnmatch.py:103:9     - Unknown word (tescases)   -- tescases = string.ascii_lowercase
./Lib/test/test_fnmatch.py:135:40    - Unknown word (bcdxyz)     -- c, '[b-dx-z]', c in 'bcdxyz')
./Lib/test/test_fnmatch.py:260:9     - Unknown word (fatre)      -- fatre = "|".join([r1, r2,
./Lib/test/test_fnmatch.py:261:42    - Unknown word (abaccad)    -- assertTrue(re.match(fatre, 'abaccad'))
./Lib/test/test_fnmatch.py:262:42    - Unknown word (abxbcab)    -- assertTrue(re.match(fatre, 'abxbcab'))
./Lib/test/test_fnmatch.py:263:42    - Unknown word (cbabcaxc)   -- assertTrue(re.match(fatre, 'cbabcaxc'))
./Lib/test/test_fnmatch.py:264:43    - Unknown word (dabccbad)   -- assertFalse(re.match(fatre, 'dabccbad'))
./Lib/test/test_fnmatch.py:93:9      - Unknown word (normsep)    -- normsep = os.path.normcase(
./Lib/test/test_format.py:14:5      - Unknown word (testformat) -- def testformat(formatstr, args, output
./Lib/test/test_format.py:14:58     - Unknown word (overflowok) -- output=None, limit=None, overflowok=False):
./Lib/test/test_format.py:49:5      - Unknown word (testcommon) -- def testcommon(formatstr, args, output
./Lib/test/test_format.py:73:42     - Unknown word (excmsg)     -- formatstr, args, exception, excmsg):
./Lib/test/test_format.py:99:27     - Unknown word (bytearrays) -- # str, bytes, and bytearrays (integer, float, oct
./Lib/test/test_fractions.py:350:17    - Unknown word (Guaratees)  -- def testBoolGuarateesBoolReturn(self):
./Lib/test/test_fractions.py:667:13    - Unknown word (Stringification) -- def testStringification(self):
./Lib/test/test_fractions.py:677:9     - Unknown word (hmod)            -- hmod = sys.hash_info.modulus
./Lib/test/test_fractions.py:678:9     - Unknown word (hinf)            -- hinf = sys.hash_info.inf
./Lib/test/test_fstring.py:119:24    - Unknown word (binops)     -- # TODO: RUSTPYTHON binops lineno and col_offset
./Lib/test/test_fstring.py:121:40    - Unknown word (formattedvalues) -- line_numbers_multiple_formattedvalues(self):
./Lib/test/test_fstring.py:1293:13   - Unknown word (oldx)            -- oldx = x
./Lib/test/test_fstring.py:1329:11   - Unknown word (patchcheck)      -- # patchcheck doesn't like these tabs
./Lib/test/test_fstring.py:477:51    - Unknown word (nonbytes)        -- cannot mix bytes and nonbytes literals',
./Lib/test/test_fstring.py:555:53    - Unknown word (defghi)          -- f'## {x}ghi', 'abc## defghi')
./Lib/test/test_fstring.py:557:56    - Unknown word (abcdefghidef)    -- x}' 'gh' f'i{x:4}', 'abcdefghidef ')
./Lib/test/test_fstring.py:899:41    - Unknown word (Xabc)            -- assertEqual(f'{x}X{y}', '98Xabc')
./Lib/test/test_fstring.py:902:43    - Unknown word (Yabc)            -- assertEqual(f'X{x}Y{y}', 'X98Yabc')
./Lib/test/test_fstring.py:922:43    - Unknown word (foofoo)          -- assertEqual(f('foo', 10), 'x=foofoo ')
./Lib/test/test_ftplib.py:154:13    - Unknown word (eprt)       -- def cmd_eprt(self, arg):
./Lib/test/test_ftplib.py:161:13    - Unknown word (epsv)       -- def cmd_epsv(self, arg):
./Lib/test/test_ftplib.py:186:13    - Unknown word (rnfr)       -- def cmd_rnfr(self, arg):
./Lib/test/test_ftplib.py:189:13    - Unknown word (rnto)       -- def cmd_rnto(self, arg):
./Lib/test/test_ftplib.py:217:13    - Unknown word (abor)       -- def cmd_abor(self, arg):
./Lib/test/test_ftplib.py:255:13    - Unknown word (setlongretr) -- def cmd_setlongretr(self, arg):
./Lib/test/test_ftplib.py:314:55    - Unknown word (pycacert)    -- dirname(__file__), "pycacert.pem")
./Lib/test/test_ftplib.py:31:30     - Unknown word (debugbuild) -- getattr(sys, '_rustpython_debugbuild', False):
./Lib/test/test_ftplib.py:450:17    - Unknown word (pbsz)        -- def cmd_pbsz(self, line):
./Lib/test/test_ftplib.py:47:29     - Unknown word (cpmel)      -- "type=dir;perm=cpmel;unique==keVO1+7G4; promiscuou
./Lib/test/test_ftplib.py:626:11    - Unknown word (stowarnings) -- # stowarnings_helper.check_warningsary
./Lib/test/test_ftplib.py:626:36    - Unknown word (warningsary) -- stowarnings_helper.check_warningsary file, not a text file
./Lib/test/test_ftplib.py:906:55    - Unknown word (cleartext)   -- connection must be in cleartext again
./Lib/test/test_functools.py:1366:36   - Unknown word (reentrancy)  -- protect against weird reentrancy bugs and to improve
./Lib/test/test_functools.py:1408:39   - Unknown word (abcdefghijklmn) -- self.assertEqual(len('abcdefghijklmn'[:i]), i)
./Lib/test/test_functools.py:1536:15   - Unknown word (zomg)           -- def f(zomg: 'zomg_annotation')
./Lib/test/test_functools.py:1564:23   - Unknown word (getswitchinterval) -- orig_si = sys.getswitchinterval()
./Lib/test/test_functools.py:1690:66   - Unknown word (staticmeth)        -- cached_meth, cls.cached_staticmeth:
./Lib/test/test_functools.py:1744:11   - Unknown word (LRUC)              -- class TestLRUC(TestLRU, unittest.TestCase
./Lib/test/test_functools.py:405:25    - Unknown word (unwritable)  -- def test_attributes_unwritable(self):
./Lib/test/test_functools.py:430:14    - Unknown word (keystr)      -- def test_keystr_replaces_value(self
./Lib/test/test_functools.py:82:50     - Unknown word (callability) -- arg not checked for callability')
./Lib/test/test_future.py:112:14    - Unknown word (parserhack) -- def test_parserhack(self):
./Lib/test/test_future.py:261:67    - Unknown word (verygood)   -- die_hard, **{'3.6': verygood}}")
./Lib/test/test_future.py:263:58    - Unknown word (gilectomy)  -- 8', '3.9', '4.0' if gilectomy else '3.10'}")
./Lib/test/test_future.py:365:54    - Unknown word (infxxx)     -- tationEqual("('inf', 1e1000, 'infxxx', 1e1000j)", expected
./Lib/test/test_future.py:43:14     - Unknown word (badfuture)  -- def test_badfuture3(self):
./Lib/test/test_generators.py:1024:9    - Unknown word (firstn)     -- >>> def firstn(g, n):
./Lib/test/test_generators.py:1027:9    - Unknown word (intsfrom)   -- >>> def intsfrom(i):
./Lib/test/test_generators.py:1131:11   - Unknown word (Gack)       -- ... # Gack: m235 below actually
./Lib/test/test_generators.py:1152:4    - Unknown word (olde)       -- Ye olde Fibonacci generator
./Lib/test/test_generators.py:1154:9    - Unknown word (fibgen)     -- >>> def fibgen(a, b):
./Lib/test/test_generators.py:1235:14   - Unknown word (isum)       -- ... def _isum(g, h):
./Lib/test/test_generators.py:1246:9    - Unknown word (realfib)    -- ... realfib = _fib()
./Lib/test/test_generators.py:1576:9    - Unknown word (rangen)     -- rangen = range(n)
./Lib/test/test_generators.py:1589:14   - Unknown word (rowgenerators) -- self.rowgenerators = []
./Lib/test/test_generators.py:1591:13   - Unknown word (rowuses)       -- rowuses = [(1 << j) |
./Lib/test/test_generators.py:1596:17   - Unknown word (rowgen)        -- def rowgen(rowuses=rowuses):
./Lib/test/test_generators.py:1612:9    - Unknown word (printsolution) -- def printsolution(self, row2col):
./Lib/test/test_generators.py:1632:31   - Unknown word (succs)         -- solve() will set up succs[i] to be a list of square
./Lib/test/test_generators.py:1675:18   - Unknown word (lastij)        -- self.lastij = corner
./Lib/test/test_generators.py:1731:26   - Unknown word (vmid)          -- def advance_hard(vmid=(m-1)/2.0, hmid=(n-
./Lib/test/test_generators.py:1731:42   - Unknown word (hmid)          -- hard(vmid=(m-1)/2.0, hmid=(n-1)/2.0, len=len)
./Lib/test/test_generators.py:1762:18   - Unknown word (squaregenerators) -- self.squaregenerators = [first]
./Lib/test/test_generators.py:1839:9    - Unknown word (gencopy)          -- >>> def gencopy(iterator):
./Lib/test/test_generators.py:1967:23   - Unknown word (referencable)     -- Generators are weakly referencable:
./Lib/test/test_generators.py:2057:3    - Unknown word (Pegen)            -- # Pegen does not produce this
./Lib/test/test_generators.py:2316:34   - Unknown word (uncleanable)      -- trigger if it starts being uncleanable again.
./Lib/test/test_generators.py:2331:60   - Unknown word (teedataobject)    -- of the tee-internal teedataobject,
./Lib/test/test_generators.py:2356:26   - Unknown word (doublecheck)      -- printing warnings and to doublecheck that we actually tested
./Lib/test/test_generators.py:625:13    - Unknown word (yrange)     -- >>> def yrange(n):
./Lib/test/test_generators.py:653:13    - Unknown word (zrange)     -- >>> def zrange(n):
./Lib/test/test_generators.py:775:24    - Unknown word (inorder)    -- ... return inorder(self)
./Lib/test/test_generators.py:856:9     - Unknown word (gcomb)      -- >>> def gcomb(x, k):
./Lib/test/test_generators.py:943:62    - Unknown word (Eppstein)   -- c.l.py, due to David Eppstein.
./Lib/test/test_genericalias.py:94:13     - Unknown word (tname)      -- tname = t.__name__
./Lib/test/test_genericpath.py:131:9     - Unknown word (bfilename)  -- bfilename = os.fsencode(filename
./Lib/test/test_genericpath.py:29:30     - Unknown word (pathmodule) -- getattr(self.pathmodule, attr)()
./Lib/test/test_genericpath.py:355:32    - Unknown word (udfffabcds) -- func('/tmp\udfffabcds')
./Lib/test/test_genericpath.py:357:35    - Unknown word (abcds)      -- func('/tmp\x00abcds')
./Lib/test/test_genericpath.py:40:34     - Unknown word (swenson)    -- commonprefix(["/home/swenson/spam", "/home/swen/spam
./Lib/test/test_genericpath.py:40:56     - Unknown word (swen)       -- swenson/spam", "/home/swen/spam"]),
./Lib/test/test_genericpath.py:417:56    - Unknown word (barbar)     -- expandvars("${foo}bar"), "barbar")
./Lib/test/test_genericpath.py:451:35    - Unknown word (sbar)       -- check('${spam}bar', '%sbar' % nonascii)
./Lib/test/test_genericpath.py:493:41    - Unknown word (cwds)       -- ASCII and non-ASCII cwds.
./Lib/test/test_genericpath.py:498:9     - Unknown word (unicwd)     -- unicwd = '\xe7w\xf0'
./Lib/test/test_genericpath.py:89:33     - Unknown word (Xbcd)       -- testlist = ['', 'abc', 'Xbcd', 'Xb', 'XY', 'abcd
./Lib/test/test_genericpath.py:89:9      - Unknown word (testlist)   -- testlist = ['', 'abc', 'Xbcd
./Lib/test/test_getopt.py:141:14    - Unknown word (libref)     -- def test_libref_examples(self):
./Lib/test/test_getopt.py:143:55    - Unknown word (libgetopt)  -- Reference: Doc/lib/libgetopt.tex
./Lib/test/test_getopt.py:149:28    - Unknown word (cfoo)       -- >>> args = '-a -b -cfoo -d bar a1 a2'.split
./Lib/test/test_getopt.py:152:13    - Unknown word (optlist)    -- >>> optlist, args = getopt.getopt
./Lib/test/test_getopt.py:2:9       - Unknown word (Goodger)    -- # David Goodger <dgoodger@bigfoot.com
./Lib/test/test_getpass.py:40:51     - Unknown word (getpw)      -- patch('pwd.getpwuid') as getpw:
./Lib/test/test_getpass.py:50:14     - Unknown word (Rawinput)   -- class GetpassRawinputTest(unittest.TestCase
./Lib/test/test_glob.py:100:30    - Unknown word (noorder)    -- assertSequencesEqual_noorder(self, l1, l2):
./Lib/test/test_glob.py:338:14    - Unknown word (selflink)   -- def test_selflink(self):
./Lib/test/test_glob.py:60:9      - Unknown word (bres)       -- bres = [os.fsencode(x) for
./Lib/test/test_glob.py:75:13     - Unknown word (bpattern)   -- bpattern = os.fsencode(pattern
./Lib/test/test_glob.py:82:9      - Unknown word (btempdir)   -- btempdir = os.fsencode(self.tempdir
./Lib/test/test_grammar.py:1076:35   - Unknown word (subexpression) -- Requires parentheses as subexpression
./Lib/test/test_grammar.py:1166:17   - Unknown word (Truestmt)      -- # assertTruestmt: 'assert' test [','
./Lib/test/test_grammar.py:1495:66   - Unknown word (dictsetmaker)  -- testlist] ']' | '{' [dictsetmaker] '}' | NAME | NUMBER
./Lib/test/test_grammar.py:1548:14   - Unknown word (dictcomps)     -- def test_dictcomps(self):
./Lib/test/test_grammar.py:1549:11   - Unknown word (dictorsetmaker) -- # dictorsetmaker: ( (test ':' test (comp
./Lib/test/test_grammar.py:1555:14   - Unknown word (listcomps)      -- def test_listcomps(self):
./Lib/test/test_grammar.py:1559:9    - Unknown word (spcs)           -- spcs = ["  Apple", " Banana
./Lib/test/test_grammar.py:1594:16   - Unknown word (Macdonalds)     -- (3, "Macdonalds")
./Lib/test/test_grammar.py:1603:9    - Unknown word (suppart)        -- suppart = [
./Lib/test/test_grammar.py:1608:19   - Unknown word (pname)          -- (sname, pname)
./Lib/test/test_grammar.py:1620:14   - Unknown word (genexps)        -- def test_genexps(self):
./Lib/test/test_grammar.py:1656:37   - Unknown word (precomputation) -- for outmost iterable precomputation
./Lib/test/test_grammar.py:1696:14   - Unknown word (checkeval)      -- def _checkeval(msg, ret):
./Lib/test/test_grammar.py:1750:23   - Unknown word (someobj)        -- await someobj()
./Lib/test/test_grammar.py:267:5     - Unknown word (annot)      -- var_annot_global: int # a global
./Lib/test/test_grammar.py:351:13    - Unknown word (fbad)       -- def fbad():
./Lib/test/test_grammar.py:376:19    - Unknown word (Cbad)       -- class Cbad2(C):
./Lib/test/test_grammar.py:429:11    - Unknown word (nonloc)     -- # nonloc_ns = {}
./Lib/test/test_grammar.py:478:30    - Unknown word (typedargslist) -- ## parameters: '(' [typedargslist] ')'
./Lib/test/test_grammar.py:479:30    - Unknown word (tfpdef)        -- ## typedargslist: ((tfpdef ['=' test] ',')*
./Lib/test/test_grammar.py:483:13    - Unknown word (varargslist)   -- ### varargslist: ((vfpdef ['=' test
./Lib/test/test_grammar.py:483:28    - Unknown word (vfpdef)        -- ### varargslist: ((vfpdef ['=' test] ',')*
./Lib/test/test_grammar.py:612:33    - Unknown word (tokwarg)       -- key2dict(1,2,k2=100,tokwarg1=100,tokwarg2=200)
./Lib/test/test_grammar.py:682:43    - Unknown word (opargs)        -- closures with a variety of opargs
./Lib/test/test_grammar.py:706:14    - Unknown word (lambdef)       -- def test_lambdef(self):
./Lib/test/test_grammar.py:757:12    - Unknown word (exprlist)      -- # (exprlist '=')* exprlist
./Lib/test/test_grp.py:58:9      - Unknown word (bynames)    -- bynames = {}
./Lib/test/test_grp.py:59:9      - Unknown word (bygids)     -- bygids = {}
./Lib/test/test_grp.py:66:9      - Unknown word (allnames)   -- allnames = list(bynames.keys
./Lib/test/test_grp.py:67:9      - Unknown word (namei)      -- namei = 0
./Lib/test/test_grp.py:68:9      - Unknown word (fakename)   -- fakename = allnames[namei]
./Lib/test/test_grp.py:8:36      - Unknown word (getgrall)   -- skipUnless(hasattr(grp, 'getgrall'), 'Does not have getgrall
./Lib/test/test_grp.py:92:9      - Unknown word (fakegid)    -- fakegid = 4127
./Lib/test/test_gzip.py:199:52    - Unknown word (zgfile)     -- self.filename, "rb") as zgfile:
./Lib/test/test_gzip.py:202:17    - Unknown word (ztxt)       -- ztxt = zgfile.read(8192)
./Lib/test/test_gzip.py:22:7      - Unknown word (flushmode)  -- int flushmode = Z_FINISH;
./Lib/test/test_gzip.py:27:16     - Unknown word (zlibmodule) -- data2 = b"""/* zlibmodule.c -- gzip-compatible
./Lib/test/test_gzip.py:300:14    - Unknown word (paddedfile) -- def test_paddedfile_getattr(self):
./Lib/test/test_gzip.py:333:17    - Unknown word (expectedname) -- expectedname = self.filename.encode
./Lib/test/test_gzip.py:334:17    - Unknown word (expectedflags) -- expectedflags = b'\x08' # only the
./Lib/test/test_gzip.py:33:49     - Unknown word (gzdir)      -- os_helper.TESTFN) + '-gzdir'
./Lib/test/test_gzip.py:539:17    - Unknown word (datac)         -- datac = gzip.compress(data
./Lib/test/test_gzip.py:581:9     - Unknown word (gzdata)        -- gzdata = (b'\x1f\x8b\x08\x
./Lib/test/test_gzip.py:777:43    - Unknown word (testgzip)      -- path.join(TEMPDIR, 'testgzip.gz')
./Lib/test/test_gzip.py:777:9     - Unknown word (gzipname)      -- gzipname = os.path.join(TEMPDIR
./Lib/test/test_gzip.py:784:63    - Unknown word (gunziped)      -- testgzip"), "rb") as gunziped:
./Lib/test/test_gzip.py:793:67    - Unknown word (thisisatest)   -- -m', 'gzip', '-d', 'thisisatest.out')
./Lib/test/test_hash.py:16:15     - Unknown word (congruential) -- """Linear congruential generator"""
./Lib/test/test_hash.py:201:7     - Unknown word (Stringlike)   -- class StringlikeHashRandomizationTests
./Lib/test/test_hash.py:207:10    - Unknown word (djba)         -- 'djba33x': [ # only used for
./Lib/test/test_hash.py:219:25    - Unknown word (abcdefghijk)  -- # seed 42, 'abcdefghijk'
./Lib/test/test_hash.py:25:5      - Unknown word (pysiphash)    -- def pysiphash(uint64):
./Lib/test/test_hash.py:343:17    - Unknown word (abcdefghabcdefg) -- base = "abcdefghabcdefg"
./Lib/test/test_hash.py:43:17     - Unknown word (internalhash) -- def skip_unless_internalhash(test):
./Lib/test/test_hashlib.py:1056:41   - Unknown word (dklen)         -- password, salt, rounds, dklen = vector
./Lib/test/test_hashlib.py:1145:13   - Unknown word (maxmem)        -- for maxmem in [-1, None]:
./Lib/test/test_hashlib.py:316:20    - Unknown word (hashopenssl's) -- # _hashopenssl's take a size_t
./Lib/test/test_hashlib.py:51:68     - Unknown word (fips)       -- openssl_md_meth_names, get_fips_mode
./Lib/test/test_hashlib.py:657:25    - Unknown word (fanout)        -- constructor(fanout=i)
./Lib/test/test_hashlib.py:707:13    - Unknown word (selftest)      -- def selftest_seq(length, seed):
./Lib/test/test_hashlib.py:718:13    - Unknown word (outlen)        -- for outlen in md_len:
./Lib/test/test_hashlib.py:719:17    - Unknown word (inlen)         -- for inlen in in_len:
./Lib/test/test_hashlib.py:720:17    - Unknown word (indata)        -- indata = selftest_seq(inlen
./Lib/test/test_hashlib.py:722:17    - Unknown word (unkeyed)       -- unkeyed = constructor(indata
./Lib/test/test_hashlib.py:72:5      - Unknown word (hexstr)     -- def hexstr(s):
./Lib/test/test_hashlib.py:936:13    - Unknown word (threadnum)     -- for threadnum in range(num_threads
./Lib/test/test_heapq.py:103:9     - Unknown word (heapiter)   -- def heapiter(self, heap):
./Lib/test/test_heapq.py:129:25    - Unknown word (pushpop)    -- def test_nbest_with_pushpop(self):
./Lib/test/test_heapq.py:158:12    - Unknown word (heapop)     -- # _heapop_max has an optimization
./Lib/test/test_heapq.py:164:14    - Unknown word (heapsort)   -- def test_heapsort(self):
./Lib/test/test_heapq.py:1:4       - Unknown word (Unittests)  -- """Unittests for heapq."""
./Lib/test/test_heapq.py:248:13    - Unknown word (hsort)      -- def hsort(data, comp):
./Lib/test/test_heapq.py:436:34    - Unknown word (modifiying) -- comparison_operator_modifiying_heap(self):
./Lib/test/test_heapq.py:93:20     - Unknown word (nbest)      -- def test_naive_nbest(self):
./Lib/test/test_html.py:80:17     - Unknown word (svadilfari) -- check('&svadilfari;', '&svadilfari;')
./Lib/test/test_html.py:82:17     - Unknown word (notit)      -- check('&notit', '¬it')
./Lib/test/test_html.py:84:17     - Unknown word (notin)      -- check('&notin', '¬in')
./Lib/test/test_html.py:97:17     - Unknown word (Eacuteric)  -- check('&Eacuteric&Eacute;ric&alphacentauri
./Lib/test/test_html.py:97:38     - Unknown word (alphacentauri) -- Eacuteric&Eacute;ric&alphacentauri&alpha;centauri',
./Lib/test/test_html.py:98:25     - Unknown word (alphacentauriαcentauri) -- 'ÉricÉric&alphacentauriαcentauri')
./Lib/test/test_htmlparser.py:16:55     - Unknown word (artefacts)  -- events so that buffer artefacts don't
./Lib/test/test_htmlparser.py:19:9      - Unknown word (prevtype)   -- prevtype = None
./Lib/test/test_htmlparser.py:221:20    - Unknown word (doctypes)    -- def test_valid_doctypes(self):
./Lib/test/test_htmlparser.py:223:9     - Unknown word (dtds)        -- dtds = ['HTML',  # HTML5
./Lib/test/test_htmlparser.py:230:54    - Unknown word (Frameset)    -- /W3C//DTD XHTML 1.0 Frameset//EN" '
./Lib/test/test_htmlparser.py:275:39    - Unknown word (cript)       -- document.write(\'<s\'+\'cript type="text/javascript
./Lib/test/test_htmlparser.py:335:14    - Unknown word (condcoms)    -- def test_condcoms(self):
./Lib/test/test_htmlparser.py:36:23     - Unknown word (startendtag) -- self.append(("startendtag", tag, attrs))
./Lib/test/test_htmlparser.py:558:38    - Unknown word (condcom)     -- <![if !(IE)]>broken condcom<![endif]>'
./Lib/test/test_htmlparser.py:645:40    - Unknown word (apos)        -- &amp;&gt;&lt;&quot;&apos;'>",
./Lib/test/test_htmlparser.py:653:14    - Unknown word (entityrefs)  -- def test_entityrefs_in_attributes(self)
./Lib/test/test_htmlparser.py:72:21     - Unknown word (Charrefs)    -- class EventCollectorCharrefs(EventCollector):
./Lib/test/test_htmlparser.py:738:29    - Unknown word (rabota)      -- "- <a href=/rabota/><span class=en> software
./Lib/test/test_http_cookiejar.py:1094:41   - Unknown word (narf)            -- Set-Cookie: session=narf; secure; path=/"]
./Lib/test/test_http_cookiejar.py:1119:54   - Unknown word (foos)            -- okiePolicy(secure_protocols=["foos"])
./Lib/test/test_http_cookiejar.py:111:14    - Unknown word (Mandag)     -- 'Mandag 16. September 1996'
./Lib/test/test_http_cookiejar.py:1514:28   - Unknown word (pickitem)        -- # POST /acme/pickitem HTTP/1.1
./Lib/test/test_http_cookiejar.py:1690:38   - Unknown word (ffft)            -- 'whiz=ffft; domain=".sol.no"; port
./Lib/test/test_http_cookiejar.py:1709:34   - Unknown word (unescaping)      -- LWP has this test, but unescaping allowed path characters
./Lib/test/test_http_cookiejar.py:1776:28   - Unknown word (fooc)            -- "fooc=bar; Domain=www.foo
./Lib/test/test_http_cookiejar.py:1891:54   - Unknown word (perlmeister)     -- Cookie: p1=perm; Domain=.perlmeister.com;"
./Lib/test/test_http_cookiejar.py:407:7     - Unknown word (unverifiability) -- # unverifiability / third-party blocking
./Lib/test/test_http_cookiejar.py:423:47    - Unknown word (Tschalar)        -- eculiarities list from Ronald Tschalar.
./Lib/test/test_http_cookiejar.py:545:65    - Unknown word (Argh)            -- DoMain=.acme.com; port; blArgh="feep"')
./Lib/test/test_http_cookiejar.py:545:71    - Unknown word (feep)            -- acme.com; port; blArgh="feep"')
./Lib/test/test_http_cookiejar.py:547:58    - Unknown word (nini)            -- www.acme.com:80/", 'nini=ni')
./Lib/test/test_http_cookiejar.py:551:55    - Unknown word (fortytwo)        -- http://www.acme.com/', 'fortytwo=')
./Lib/test/test_http_cookiejar.py:552:56    - Unknown word (unladenswallow)  -- //www.acme.com/', '=unladenswallow')
./Lib/test/test_http_cookiejar.py:553:55    - Unknown word (holyhandgrenade) -- http://www.acme.com/', 'holyhandgrenade')
./Lib/test/test_http_cookiejar.py:562:55    - Unknown word (blargh)          -- has_nonstandard_attr("blargh"))
./Lib/test/test_http_cookiejar.py:641:58    - Unknown word (whum)            -- www.rhubarb.net/", 'whum="fizz"')
./Lib/test/test_http_cookiejar.py:724:34    - Unknown word (Dfoo)            -- "/\175foo/bar", "/%7Dfoo/bar"),
./Lib/test/test_http_cookiejar.py:739:34    - Unknown word (rhaponticum)     -- "/rheum/rhaponticum;foo=bar;sing=song")
./Lib/test/test_http_cookiejar.py:762:29    - Unknown word (foobad)          -- ('/foobad/foo', False)]:
./Lib/test/test_http_cookiejar.py:868:60    - Unknown word (problemo)        -- example.co.uk/", 'no=problemo')
./Lib/test/test_http_cookiejar.py:870:28    - Unknown word (okey)            -- 'okey=dokey; Domain=.example
./Lib/test/test_http_cookiejar.py:870:33    - Unknown word (dokey)           -- 'okey=dokey; Domain=.example.co
./Lib/test/test_httplib.py:1125:9    - Unknown word (extradata)        -- extradata = "extradata"
./Lib/test/test_httplib.py:1310:9    - Unknown word (oldpeek)          -- oldpeek = resp.fp.peek
./Lib/test/test_httplib.py:1311:13   - Unknown word (mypeek)           -- def mypeek(n=-1):
./Lib/test/test_httplib.py:1361:21   - Unknown word (Readliner)        -- readliner = Readliner(r)
./Lib/test/test_httplib.py:1361:9    - Unknown word (readliner)        -- readliner = Readliner(r)
./Lib/test/test_httplib.py:155:41    - Unknown word (blahblahblah)     -- conn.sock = FakeSocket('blahblahblah')
./Lib/test/test_httplib.py:1710:24   - Unknown word (noverification)   -- def test_networked_noverification(self):
./Lib/test/test_httplib.py:1757:32   - Unknown word (distros)          -- # modern Linux distros (Debian Buster, etc
./Lib/test/test_httplib.py:2023:29   - Unknown word (defaultint)       -- test_getting_header_defaultint(self):
./Lib/test/test_httplib.py:2079:12   - Unknown word (Regresstion)      -- """Regresstion test for https://bugs
./Lib/test/test_httplib.py:2103:21   - Unknown word (debuglog)         -- def test_tunnel_debuglog(self):
./Lib/test/test_httplib.py:240:33    - Unknown word (tbaz)             -- conn.putheader('Bar', '\tbaz\t')
./Lib/test/test_httplib.py:242:49    - Unknown word (mytoken)          -- Authorization', 'Bearer mytoken')
./Lib/test/test_httplib.py:25:30     - Unknown word (fakehostname) -- signed cert file for 'fakehostname'
./Lib/test/test_httplib.py:27:41     - Unknown word (pythontest)   -- file for self-signed.pythontest.net
./Lib/test/test_httplib.py:286:52    - Unknown word (nval)             -- OK\r\nFirst: val\r\n: nval\r\nSecond: val\r\n\r
./Lib/test/test_httplib.py:28:17     - Unknown word (pythontestdotnet) -- CERT_selfsigned_pythontestdotnet = os.path.join(here
./Lib/test/test_httplib.py:28:6      - Unknown word (selfsigned)   -- CERT_selfsigned_pythontestdotnet = os
./Lib/test/test_httplib.py:47:31     - Unknown word (Dumm)             -- "X-Dummy: foo\r\nX-Dumm2: bar\r\n"
./Lib/test/test_httplib.py:53:30     - Unknown word (fileclass)        -- _init__(self, text, fileclass=io.BytesIO, host=None
./Lib/test/test_httplib.py:582:22    - Unknown word (readintos)        -- def test_partial_readintos(self):
./Lib/test/test_httplib.py:901:9     - Unknown word (nexpected)        -- nexpected = len(expected)
./Lib/test/test_httpservers.py:1055:21   - Unknown word (Reseek)         -- def _readAndReseek(f):
./Lib/test/test_httpservers.py:111:16    - Unknown word (EXPLAINERROR) -- def do_EXPLAINERROR(self):
./Lib/test/test_httpservers.py:121:16    - Unknown word (LATINONEHEADER) -- def do_LATINONEHEADER(self):
./Lib/test/test_httpservers.py:123:44    - Unknown word (Dängerous)      -- header('X-Special', 'Dängerous Mind')
./Lib/test/test_httpservers.py:1264:26   - Unknown word (unspec)         -- def test_server_test_unspec(self, _):
./Lib/test/test_httpservers.py:241:42    - Unknown word (Ärger)          -- Special-Incoming': 'Ärger mit Unicode'
./Lib/test/test_httpservers.py:338:9     - Unknown word (basetempdir)    -- basetempdir = tempfile.gettempdir
./Lib/test/test_httpservers.py:344:9     - Unknown word (tempname)       -- tempname = os.path.join(self
./Lib/test/test_httpservers.py:3:22      - Unknown word (Somerville) -- Written by Cody A.W. Somerville <cody-somerville@ubuntu
./Lib/test/test_httpservers.py:411:9     - Unknown word (quotedname)     -- quotedname = urllib.parse.quote
./Lib/test/test_httpservers.py:4:1       - Unknown word (Josip)      -- Josip Dzolonga, and Michael
./Lib/test/test_httpservers.py:4:29      - Unknown word (Otteneder)  -- Dzolonga, and Michael Otteneder for the 2007/08 GHOP
./Lib/test/test_httpservers.py:4:7       - Unknown word (Dzolonga)   -- Josip Dzolonga, and Michael Otteneder
./Lib/test/test_httpservers.py:635:14    - Unknown word (nocgi)          -- self.nocgi_path = None
./Lib/test/test_httpservers.py:644:15    - Unknown word (pythonexe)      -- self._pythonexe_symlink = None
./Lib/test/test_httpservers.py:775:60    - Unknown word (nothere)        -- nocgi.py/../cgi-bin/nothere.sh')
./Lib/test/test_httpservers.py:786:14    - Unknown word (invaliduri)     -- def test_invaliduri(self):
./Lib/test/test_httpservers.py:816:39    - Unknown word (ffile)          -- self.request('/cgi-bin%2ffile1.py')
./Lib/test/test_httpservers.py:869:7     - Unknown word (Socketless)     -- class SocketlessRequestHandler(SimpleHTTPReque
./Lib/test/test_httpservers.py:897:14    - Unknown word (datas)          -- self.datas = []
./Lib/test/test_imp.py:219:34    - Unknown word (Reinitialising) -- state after reversion. Reinitialising the module contents
./Lib/test/test_imp.py:247:15    - Unknown word (testimportmultiple) -- m = '_testimportmultiple'
./Lib/test/test_imp.py:293:47    - Unknown word (testmultiphase)     -- importlib.util.find_spec('_testmultiphase')
./Lib/test/test_imp.py:378:24    - Unknown word (mymod)              -- with open('mymod.py', 'wb') as fp:
./Lib/test/test_imp.py:38:28     - Unknown word (autotest)   -- # via "import test.autotest".
./Lib/test/test_imp.py:457:31    - Unknown word (undecodeable)       -- "Need an undecodeable filename")
./Lib/test/test_imp.py:458:14    - Unknown word (unencodeable)       -- def test_unencodeable(self):
./Lib/test/test_importlib/abc.py:90:14     - Unknown word (unloadable) -- def test_unloadable(self):
./Lib/test/test_importlib/builtin/test_finder.py:18:19     - Unknown word (uncache)    -- with util.uncache(util.BUILTINS.good_name
./Lib/test/test_importlib/builtin/test_loader.py:52:17     - Unknown word (dssdsdfff)  -- name = 'dssdsdfff'
./Lib/test/test_importlib/data/example-21.12-py3.6.egg:2:170     - Unknown word (txtu)       --    EGG-INFO/SOURCES.txtu�A
./Lib/test/test_importlib/data/example-21.12-py3.6.egg:4:143     - Unknown word (KIMS)       --  example/__init__.pyKIMS�M���д�R ��ԒҢ<�Ԋ�܂�Tu
./Lib/test/test_importlib/extension/test_case_sensitivity.py:13:47     - Unknown word (CASEOK)     -- oduleCaseSensitivityTest(util.CASEOKTestBase):
./Lib/test/test_importlib/extension/test_case_sensitivity.py:28:18     - Unknown word (caseok)     -- self.caseok_env_changed(should_exist
./Lib/test/test_importlib/extension/test_finder.py:36:43     - Unknown word (asdfjkl)    -- assertIsNone(self.find_spec('asdfjkl;'))
./Lib/test/test_importlib/extension/test_loader.py:224:14    - Unknown word (nonmodule)  -- def test_nonmodule(self):
./Lib/test/test_importlib/extension/test_loader.py:276:28    - Unknown word (zkou)       -- (self.name + '_zkou\u0161ka_na\u010dten
./Lib/test/test_importlib/extension/test_loader.py:276:48    - Unknown word (dten)       -- zkou\u0161ka_na\u010dten\xed', 'Czech'),
./Lib/test/test_importlib/fixtures.py:213:26    - Unknown word (Haffa)      -- Author: Eric Haffa-Vee
./Lib/test/test_importlib/import_/test___package__.py:84:59     - Unknown word (fakefake)   -- spec__': FakeSpec('pkg.fakefake')})
./Lib/test/test_importlib/import_/test___package__.py:89:48     - Unknown word (relimport)  -- ('', globals, {}, ['relimport'], 1)
./Lib/test/test_importlib/import_/test_api.py:51:28     - Unknown word (rparition)  -- def test_name_requires_rparition(self):
./Lib/test/test_importlib/import_/test_fromlist.py:38:15     - Unknown word (Fromlist)   -- class HandlingFromlist:
./Lib/test/test_importlib/import_/test_relative_imports.py:60:25     - Unknown word (boilerplace) -- """Abstract out boilerplace for setting up for an
./Lib/test/test_importlib/source/test_finder.py:123:55    - Unknown word (sdfsadsadf) -- (mapping['.root'], 'sdfsadsadf')
./Lib/test/test_importlib/source/test_path_hook.py:36:13     - Unknown word (Hooktest)   -- Source_PathHooktest
./Lib/test/test_importlib/stubs.py:6:28      - Unknown word (pyfakefs)   -- Stubbed version of the pyfakefs module
./Lib/test/test_importlib/stubs.py:9:18      - Unknown word (Pyfakefs)   -- def setUpPyfakefs(self):
./Lib/test/test_importlib/test_abc.py:132:27    - Unknown word (splitabc)   -- base = {kind: getattr(splitabc, name)
./Lib/test/test_importlib/test_api.py:173:54    - Unknown word (nevergoingtofindthismodule) -- self.init.find_loader('nevergoingtofindthismodule'))
./Lib/test/test_importlib/test_api.py:369:45    - Unknown word (Founderror)                 -- reload() throws ModuleNotFounderror when reloading
./Lib/test/test_importlib/test_api.py:398:16    - Unknown word (gobledeegook)               -- key = 'gobledeegook'
./Lib/test/test_importlib/test_api.py:411:16    - Unknown word (gobbledeegook)              -- key = 'gobbledeegook'
./Lib/test/test_importlib/test_locks.py:152:5     - Unknown word (unittets)       -- unittets.main()
./Lib/test/test_importlib/test_locks.py:33:21     - Unknown word (splitinit)  -- LOCK_TYPES = {kind: splitinit._bootstrap._ModuleLock
./Lib/test/test_importlib/test_locks.py:47:22     - Unknown word (switchinterval) -- self.old_switchinterval = sys.getswitchinterval
./Lib/test/test_importlib/test_main.py:128:36    - Unknown word (pôrˈtend)   -- write('Description: pôrˈtend')
./Lib/test/test_importlib/test_main.py:230:29    - Unknown word (badactor)   -- self.ep.name = 'badactor'
./Lib/test/test_importlib/test_main.py:40:11     - Unknown word (packgae)    -- # packgae is not installed or
./Lib/test/test_importlib/test_metadata_api.py:106:28    - Unknown word (altmain)    -- main = mod:altmain
./Lib/test/test_importlib/test_metadata_api.py:308:33    - Unknown word (versionless) -- test_name_normalization_versionless_egg_info(self):
./Lib/test/test_importlib/test_namespace_pkgs.py:44:49     - Unknown word (xxyy)       -- context(path=['/tmp/xxyy/portion1',
./Lib/test/test_importlib/test_open.py:67:23     - Unknown word (namespacedata) -- from . import namespacedata01
./Lib/test/test_importlib/test_read.py:49:36     - Unknown word (ziptestdata) -- submodule = import_module('ziptestdata.subdirectory')
./Lib/test/test_importlib/test_resource.py:130:14    - Unknown word (thata)       -- Test thata zip with two unrelated
./Lib/test/test_importlib/test_resource.py:200:24    - Unknown word (certifi)     -- # This is what certifi does on import to make
./Lib/test/test_importlib/test_resource.py:23:26     - Unknown word (subresource) -- def test_is_resource_subresource_directory(self):
./Lib/test/test_importlib/test_resource.py:7:15      - Unknown word (zipdata)    -- from . import zipdata01, zipdata02
./Lib/test/test_importlib/test_spec.py:425:9     - Unknown word (modrepr)    -- modrepr = self.bootstrap._module
./Lib/test/test_importlib/test_spec.py:513:14    - Unknown word (pkgloader)  -- self.pkgloader = TestLoader(self.path
./Lib/test/test_importlib/test_threaded_import.py:177:13    - Unknown word (numtests)   -- numtests = self.check_parallel
./Lib/test/test_importlib/test_threaded_import.py:258:39    - Unknown word (cfimport)   -- 'partial', 'cfimport.py')
./Lib/test/test_importlib/test_util.py:630:31    - Unknown word (ishness)    -- However if the bool-ishness can't be determined
./Lib/test/test_importlib/test_util.py:669:27    - Unknown word (alnum)      -- # that passes str.alnum().
./Lib/test/test_importlib/test_util.py:729:64    - Unknown word (bazqux)     -- from_cache, '/foo/bar/bazqux.pyc')
./Lib/test/test_importlib/test_util.py:861:26    - Unknown word (releaselevel) -- sys.version_info.releaselevel in ('candidate', 'final
./Lib/test/test_importlib/test_windows.py:48:13     - Unknown word (subsubkey)  -- subsubkey = EnumKey(hkey, 0)
./Lib/test/test_importlib/test_windows.py:50:23     - Unknown word (subkeys)    -- # no more subkeys
./Lib/test/test_importlib/test_windows.py:92:20     - Unknown word (spamham)    -- test_module = "spamham{}".format(os.getpid
./Lib/test/test_importlib/update-zips.py:35:5      - Unknown word (zfpath)     -- zfpath = root / f'zipdata{suffix
./Lib/test/test_importlib/update-zips.py:43:10     - Unknown word (datapath)   -- def walk(datapath):
./Lib/test/test_importlib/util.py:119:47    - Unknown word (subfile)    -- encoding='utf-8') as subfile:
./Lib/test/test_importlib/util.py:125:41    - Unknown word (unmarshalled) -- file and returns the unmarshalled code object within.
./Lib/test/test_importlib/util.py:136:8     - Unknown word (Uncache)      -- """Uncache a module from sys.modules
./Lib/test/test_importlib/util.py:138:50    - Unknown word (uncaching)    -- performed to prevent uncaching modules that either
./Lib/test/test_importlib/util.py:179:66    - Unknown word (modfile)      -- encoding='utf-8') as modfile:
./Lib/test/test_importlib/util.py:458:13    - Unknown word (testingpackage) -- name = 'testingpackage'
./Lib/test/test_index.py:117:9     - Unknown word (seqlen)     -- seqlen = len(self.seq)
./Lib/test/test_index.py:155:9     - Unknown word (indexobj)   -- indexobj = lambda x, obj: obj
./Lib/test/test_index.py:158:9     - Unknown word (sliceobj)   -- sliceobj = lambda x, obj: obj
./Lib/test/test_index.py:166:14    - Unknown word (setdelitem) -- def test_setdelitem(self):
./Lib/test/test_index.py:169:24    - Unknown word (cdefghi)    -- lst = list('ab!cdefghi!j')
./Lib/test/test_index.py:174:39    - Unknown word (Ydefgh)     -- assertEqual(lst, list('abYdefghXj'))
./Lib/test/test_index.py:6:7       - Unknown word (newstyle)   -- class newstyle:
./Lib/test/test_int.py:128:31    - Unknown word (dnchbnm)    -- self.assertEqual(int('dnchbnm', 26), 4294967296)
./Lib/test/test_int.py:129:34    - Unknown word (jpdm)       -- assertEqual(int('b28jpdm', 27), 4294967296)
./Lib/test/test_int.py:130:32    - Unknown word (pfgih)      -- self.assertEqual(int('8pfgih4', 28), 4294967296)
./Lib/test/test_int.py:131:33    - Unknown word (beigg)      -- self.assertEqual(int('76beigg', 29), 4294967296)
./Lib/test/test_int.py:132:32    - Unknown word (qmcpqg)     -- self.assertEqual(int('5qmcpqg', 30), 4294967296)
./Lib/test/test_int.py:135:32    - Unknown word (aokq)       -- self.assertEqual(int('3aokq94', 33), 4294967296
./Lib/test/test_int.py:136:32    - Unknown word (qhxjli)     -- self.assertEqual(int('2qhxjli', 34), 4294967296)
./Lib/test/test_int.py:205:31    - Unknown word (dnchbnn)    -- self.assertEqual(int('dnchbnn', 26), 4294967297)
./Lib/test/test_int.py:206:34    - Unknown word (jpdn)       -- assertEqual(int('b28jpdn', 27), 4294967297)
./Lib/test/test_int.py:208:33    - Unknown word (beigh)      -- self.assertEqual(int('76beigh', 29), 4294967297)
./Lib/test/test_int.py:209:32    - Unknown word (qmcpqh)     -- self.assertEqual(int('5qmcpqh', 30), 4294967297)
./Lib/test/test_int.py:213:32    - Unknown word (qhxjlj)     -- self.assertEqual(int('2qhxjlj', 34), 4294967297)
./Lib/test/test_int.py:343:14    - Unknown word (intconversion) -- def test_intconversion(self):
./Lib/test/test_io.py:1199:14   - Unknown word (nonnormalized) -- def test_nonnormalized_close_error_on_close
./Lib/test/test_io.py:11:27     - Unknown word (ulargefile)   -- (only enabled with -ulargefile)
./Lib/test/test_io.py:1732:14   - Unknown word (seekabs)       -- def _seekabs(bufio):
./Lib/test/test_io.py:1738:14   - Unknown word (seekrel)       -- def _seekrel(bufio):
./Lib/test/test_io.py:2597:61   - Unknown word (toolon)        -- False, 'x-----.xyz---.toolon.'),
./Lib/test/test_io.py:2607:11   - Unknown word (abcdefghijabcde) -- 'abcdefghijabcde.' +
./Lib/test/test_io.py:2835:22   - Unknown word (xffdef)          -- t.write("abc\xffdef\n")
./Lib/test/test_io.py:2847:70   - Unknown word (nonl)            -- "os9\r", "last\n", "nonl" ]
./Lib/test/test_io.py:2853:57   - Unknown word (nnonl)           -- nwindows\r\n", "os9\rlast\nnonl" ] ],
./Lib/test/test_io.py:2905:9    - Unknown word (testdict)        -- testdict = {
./Lib/test/test_io.py:3007:9    - Unknown word (wlines)          -- wlines = []
./Lib/test/test_io.py:3016:9    - Unknown word (rlines)          -- rlines = []
./Lib/test/test_io.py:3307:45   - Unknown word (aaaxxx)          -- assertEqual(f.read(), 'aaaxxx'.encode(charset))
./Lib/test/test_io.py:3324:45   - Unknown word (bbbzzz)          -- assertEqual(f.read(), 'bbbzzz'.encode(charset))
./Lib/test/test_io.py:3449:43   - Unknown word (efghi)           -- assertEqual(txt.readline(), 'efghi\n')
./Lib/test/test_io.py:3578:9    - Unknown word (iomod)           -- iomod = self.io.__name__
./Lib/test/test_io.py:3616:13   - Unknown word (Memview)         -- r = MemviewBytesIO(b'Just some random
./Lib/test/test_io.py:3653:32   - Unknown word (fromascii)       -- test_reconfigure_write_fromascii(self):
./Lib/test/test_io.py:3654:32   - Unknown word (encodefunc)      -- ascii has a specific encodefunc in the C implementation
./Lib/test/test_io.py:3944:14   - Unknown word (rwpair)          -- def test_rwpair_cleared_before_textio
./Lib/test/test_io.py:4069:50   - Unknown word (nabcabc)         -- join(result), "abc\n\nabcabc\nabcabc")
./Lib/test/test_io.py:4262:38   - Unknown word (abcmodule)       -- abc_inheritance(self, abcmodule):
./Lib/test/test_io.py:4351:14   - Unknown word (nonblock)        -- def test_nonblock_pipe_write_bigbuf(self
./Lib/test/test_io.py:4351:34   - Unknown word (bigbuf)          -- nonblock_pipe_write_bigbuf(self):
./Lib/test/test_io.py:4356:34   - Unknown word (smallbuf)        -- nonblock_pipe_write_smallbuf(self):
./Lib/test/test_io.py:4503:14   - Unknown word (openwrapper)     -- def test_openwrapper(self):
./Lib/test/test_io.py:4580:14   - Unknown word (oldalrm)         -- self.oldalrm = signal.signal(signal
./Lib/test/test_io.py:4677:30   - Unknown word (reentrantly)     -- # Will be called reentrantly from the same thread
./Lib/test/test_io.py:4:10      - Unknown word (bufio)      -- # * test_bufio - tests file buffering
./Lib/test/test_io.py:56:9      - Unknown word (byteslike)    -- def byteslike(*pos, **kw):
./Lib/test/test_io.py:587:23    - Unknown word (nonsizeable)  -- def test_readline_nonsizeable(self):
./Lib/test/test_io.py:5:10      - Unknown word (memoryio)   -- # * test_memoryio - tests BytesIO and
./Lib/test/test_io.py:682:66    - Unknown word (dealloc)      -- is called by the tp_dealloc
./Lib/test/test_io.py:850:9     - Unknown word (rawio)        -- rawio = self.MockRawIOWithoutRead
./Lib/test/test_io.py:882:13    - Unknown word (badopener)    -- def badopener(fname, flags):
./Lib/test/test_io.py:908:14    - Unknown word (nonbuffered)  -- def test_nonbuffered_textio(self):
./Lib/test/test_io.py:957:52    - Unknown word (rwxa)         -- os_helper.TESTFN), 'rwxa', encoding="utf-8")
./Lib/test/test_io.py:9:10      - Unknown word (univnewlines) -- # * test_univnewlines - tests universal newline
./Lib/test/test_ioctl.py:18:5      - Unknown word (rpgrp)      -- rpgrp = struct.unpack("i"
./Lib/test/test_ioctl.py:19:25     - Unknown word (getpgrp)    -- if rpgrp not in (os.getpgrp(), os.getsid(0)):
./Lib/test/test_ioctl.py:41:9      - Unknown word (intsize)    -- intsize = buf.itemsize
./Lib/test/test_ioctl.py:77:21     - Unknown word (winsz)      -- set_winsz_opcode_maybe_neg = termios
./Lib/test/test_ipaddress.py:1059:7    - Unknown word (Ipaddr)     -- class IpaddrUnitTest(unittest.TestCase
./Lib/test/test_ipaddress.py:1384:16   - Unknown word (Prefixlen)  -- def testGetPrefixlen(self):
./Lib/test/test_ipaddress.py:1389:16   - Unknown word (Supernet)   -- def testGetSupernet(self):
./Lib/test/test_ipaddress.py:1493:18   - Unknown word (Subnetting) -- def testFancySubnetting(self):
./Lib/test/test_ipaddress.py:1554:9    - Unknown word (ipsv)       -- ipsv6 = [str(x) for x in
./Lib/test/test_ipaddress.py:1819:39   - Unknown word (supernet'ed) -- that two addresses are supernet'ed properly
./Lib/test/test_ipaddress.py:1849:15   - Unknown word (toejam)      -- # the toejam test
./Lib/test/test_ipaddress.py:1876:10   - Unknown word (ipnet)       -- #ipnet = ipaddress.ip_network
./Lib/test/test_ipaddress.py:2290:55   - Unknown word (fdff)        -- ipaddress.ip_network('fdff::').is_multicast)
./Lib/test/test_ipaddress.py:2292:54   - Unknown word (fecf)        -- ipaddress.ip_network('fecf::').is_site_local)
./Lib/test/test_ipaddress.py:2302:55   - Unknown word (fbff)        -- ipaddress.ip_network('fbff:ffff::').is_private
./Lib/test/test_ipaddress.py:2307:18   - Unknown word (febf)        -- 'febf:ffff::').is_link_local
./Lib/test/test_ipaddress.py:2591:9    - Unknown word (testsixtofour) -- def testsixtofour(self):
./Lib/test/test_ipaddress.py:2592:9    - Unknown word (sixtofouraddr) -- sixtofouraddr = ipaddress.ip_address
./Lib/test/test_ipaddress.py:653:11    - Unknown word (containee)  -- # containee left of container
./Lib/test/test_ipaddress.py:882:7     - Unknown word (intf)       -- v4intf = ipaddress.IPv4Interface
./Lib/test/test_isinstance.py:271:47    - Unknown word (blowstack)  -- assertRaises(RecursionError, blowstack, issubclass, str, str
./Lib/test/test_isinstance.py:29:17     - Unknown word (getclass)   -- def getclass(self):
./Lib/test/test_isinstance.py:35:17     - Unknown word (getbases)   -- def getbases(self):
./Lib/test/test_iter.py:137:19    - Unknown word (idempotency) -- def test_iter_idempotency(self):
./Lib/test/test_iter.py:485:22    - Unknown word (itty)        -- f.write("itty-bitty line\n")
./Lib/test/test_iter.py:596:13    - Unknown word (lzip)        -- def lzip(*args):
./Lib/test/test_iter.py:760:13    - Unknown word (fiter)       -- fiter = iter(f)
./Lib/test/test_iter.py:772:9     - Unknown word (iclass)      -- iclass = IteratingSequenceClass
./Lib/test/test_iter.py:913:14    - Unknown word (sinkstate)   -- def test_sinkstate_list(self):
./Lib/test/test_iterlen.py:66:27     - Unknown word (deques)     -- # objects such as deques, sets, and dictionaries
./Lib/test/test_itertools.py:1265:19   - Unknown word (tgtargs)              -- for args, tgtargs in [  # Stop when seqn
./Lib/test/test_itertools.py:1461:9    - Unknown word (tnew)                 -- tnew = type(t1)
./Lib/test/test_itertools.py:1760:14   - Unknown word (stapmap)              -- def test_stapmap(self):
./Lib/test/test_itertools.py:1776:13   - Unknown word (nexti)                -- nexti = next(it)
./Lib/test/test_itertools.py:1812:9    - Unknown word (makecycle)            -- def makecycle(self, iterator, container
./Lib/test/test_itertools.py:185:13    - Unknown word (oper)          -- for oper in [copy.deepcopy]
./Lib/test/test_itertools.py:189:52    - Unknown word (bcdef)         -- list(oper(it)), list('bcdef'))
./Lib/test/test_itertools.py:2032:17   - Unknown word (tgtlen)               -- tgtlen = len(s) * 3
./Lib/test/test_itertools.py:2174:21   - Unknown word (Rigo's)               -- # Fix Armin Rigo's successful efforts to
./Lib/test/test_itertools.py:2176:13   - Unknown word (mutatingtuple)        -- def mutatingtuple(tuple1, f, tuple2):
./Lib/test/test_itertools.py:2316:65   - Unknown word (libitertools)         -- the library reference: libitertools.tex
./Lib/test/test_itertools.py:2320:9    - Unknown word (checknum)             -- >>> for checknum, amount in zip(count
./Lib/test/test_itertools.py:2335:102  - Unknown word (samuele)              -- '', 'walter', '', 'samuele']
./Lib/test/test_itertools.py:2335:5    - Unknown word (reportlines)          -- >>> reportlines = ['EuroPython', 'Roster
./Lib/test/test_itertools.py:2343:1    - Unknown word (Samuele)              -- Samuele
./Lib/test/test_itertools.py:23:5      - Unknown word (onearg)     -- def onearg(x):
./Lib/test/test_itertools.py:2413:9    - Unknown word (ncycles)              -- >>> def ncycles(iterable, n):
./Lib/test/test_itertools.py:2417:9    - Unknown word (dotproduct)           -- >>> def dotproduct(vec1, vec2):
./Lib/test/test_itertools.py:2423:9    - Unknown word (repeatfunc)           -- >>> def repeatfunc(func, times=None, *args
./Lib/test/test_itertools.py:2446:9    - Unknown word (triplewise)           -- >>> def triplewise(iterable):
./Lib/test/test_itertools.py:2465:37   - Unknown word (Sakkis)               -- Recipe credited to George Sakkis
./Lib/test/test_itertools.py:2467:9    - Unknown word (nexts)                -- ... nexts = cycle(iter(it).__next
./Lib/test/test_itertools.py:2533:16   - Unknown word (justseen)             -- >>> def unique_justseen(iterable, key=None)
./Lib/test/test_itertools.py:27:5      - Unknown word (errfunc)    -- def errfunc(*args):
./Lib/test/test_itertools.py:346:13    - Unknown word (numcombs)      -- def numcombs(n, r):
./Lib/test/test_itertools.py:368:21    - Unknown word (noruns)        -- noruns = [k for k,v in groupby
./Lib/test/test_itertools.py:44:5      - Unknown word (tupleize)   -- def tupleize(*args):
./Lib/test/test_itertools.py:47:5      - Unknown word (irange)     -- def irange(n):
./Lib/test/test_itertools.py:493:102   - Unknown word (dups)          -- perm: prods with no dups
./Lib/test/test_itertools.py:495:89    - Unknown word (cwrs)          -- )==r]) # comb: cwrs without dups
./Lib/test/test_itertools.py:622:96    - Unknown word (lilke)         -- do show float values lilke 1.0
./Lib/test/test_itertools.py:642:56    - Unknown word (abcabcabca)    -- cycle('abc')), list('abcabcabca'))
./Lib/test/test_itertools.py:653:57    - Unknown word (bcabcabcab)    -- copy.copy(c)), list('bcabcabcab'))
./Lib/test/test_itertools.py:660:36    - Unknown word (cabcabcabc)    -- list('cabcabcabc'))
./Lib/test/test_itertools.py:673:49    - Unknown word (cdeabcdeabcdeabcdeab) -- ssertEqual(take(20, d), list('cdeabcdeabcdeabcdeab'))
./Lib/test/test_itertools.py:692:20    - Unknown word (defg)                 -- c = cycle('defg')
./Lib/test/test_itertools.py:694:45    - Unknown word (defgabcdefgabcdefgab) -- ssertEqual(take(20, c), list('defgabcdefgabcdefgab'))
./Lib/test/test_itertools.py:774:9     - Unknown word (expectedkeys)         -- expectedkeys = set([r[0] for r in
./Lib/test/test_itertools.py:79:1      - Unknown word (picklecopiers) -- picklecopiers = [lambda s, proto=proto
./Lib/test/test_itertools.py:820:28    - Unknown word (keyp)                 -- def gulp(iterable, keyp=None, func=list):
./Lib/test/test_itertools.py:84:9      - Unknown word (pickletest)    -- def pickletest(self, protocol, it,
./Lib/test/test_itertools.py:936:14    - Unknown word (ziplongest)           -- def test_ziplongest(self):
./Lib/test/test_itertools.py:988:56    - Unknown word (defgh)                -- zip_longest("abc", "defgh"))
./Lib/test/test_json/__init__.py:13:1      - Unknown word (cjson)      -- cjson = import_helper.import
./Lib/test/test_json/__init__.py:14:1      - Unknown word (pyjson)     -- pyjson = import_helper.import
./Lib/test/test_json/test_dump.py:25:21     - Unknown word (truefalse)  -- def test_encode_truefalse(self):
./Lib/test/test_json/test_encode_basestring_ascii.py:20:17     - Unknown word (Basestring) -- class TestEncodeBasestringAscii:
./Lib/test/test_json/test_encode_basestring_ascii.py:7:30      - Unknown word (ufcde)      -- "\ucafe\ubabe\uab98\ufcde\ubcda\uef4a\x08\x0c
./Lib/test/test_json/test_encode_basestring_ascii.py:7:36      - Unknown word (ubcda)      -- ucafe\ubabe\uab98\ufcde\ubcda\uef4a\x08\x0c\n\r\t
./Lib/test/test_json/test_encode_basestring_ascii.py:8:26      - Unknown word (ucdef)      -- '\u0123\u4567\u89ab\ucdef\uabcd\uef4a', '"\\u
./Lib/test/test_json/test_enum.py:29:7      - Unknown word (Wierd)      -- class WierdNum(float, Enum):
./Lib/test/test_json/test_fail.py:200:14    - Unknown word (linecol)    -- def test_linecol(self):
./Lib/test/test_json/test_indent.py:8:16      - Unknown word (blorpie)    -- h = [['blorpie'], ['whoops'], [],
./Lib/test/test_json/test_indent.py:8:46      - Unknown word (shtaeou)    -- ['whoops'], [], 'd-shtaeou', 'd-nthiouh', 'i-vhbjkhnth
./Lib/test/test_json/test_indent.py:8:59      - Unknown word (nthiouh)    -- [], 'd-shtaeou', 'd-nthiouh', 'i-vhbjkhnth',
./Lib/test/test_json/test_indent.py:8:72      - Unknown word (vhbjkhnth)  -- shtaeou', 'd-nthiouh', 'i-vhbjkhnth',
./Lib/test/test_json/test_indent.py:9:47      - Unknown word (morefield)  -- , {'field': 'yes', 'morefield': False} ]
./Lib/test/test_json/test_pass1.py:28:19     - Unknown word (abcdefghijklmnopqrstuvwyz) -- "alpha": "abcdefghijklmnopqrstuvwyz",
./Lib/test/test_json/test_pass1.py:33:37     - Unknown word (CDEF)                      -- \u0123\u4567\u89AB\uCDEF\uabcd\uef4A",
./Lib/test/test_json/test_pass1.py:48:10     - Unknown word (jsontext)                  -- "jsontext": "{\"object with 1
./Lib/test/test_json/test_pass1.py:50:36     - Unknown word (FCDE)                      -- \uCAFE\uBABE\uAB98\uFCDE\ubcda\uef4A\b\f\n\r
./Lib/test/test_json/test_recursion.py:10:14     - Unknown word (listrecursion) -- def test_listrecursion(self):
./Lib/test/test_json/test_recursion.py:33:14     - Unknown word (dictrecursion) -- def test_dictrecursion(self):
./Lib/test/test_json/test_recursion.py:47:14     - Unknown word (defaultrecursion) -- def test_defaultrecursion(self):
./Lib/test/test_json/test_scanstring.py:127:24    - Unknown word (uzdd)       -- '"\\ud834\\uzdd2"',
./Lib/test/test_json/test_scanstring.py:128:24    - Unknown word (udzd)       -- '"\\ud834\\udzd2"',
./Lib/test/test_json/test_scanstring.py:129:24    - Unknown word (uddz)       -- '"\\ud834\\uddz2"',
./Lib/test/test_json/test_speedups.py:87:14     - Unknown word (unsortable) -- def test_unsortable_keys(self):
./Lib/test/test_json/test_tool.py:66:5      - Unknown word (jsonlines)  -- jsonlines_raw = textwrap.dedent
./Lib/test/test_json/test_unicode.py:79:24     - Unknown word (codepoint)  -- # allow single codepoint JSON documents which
./Lib/test/test_keyword.py:18:9      - Unknown word (oldlist)    -- oldlist = keyword.kwlist
./Lib/test/test_keywordonlyarg.py:12:17     - Unknown word (nodefaults) -- def keywordonly_nodefaults_sum(*, k1, k2):
./Lib/test/test_keywordonlyarg.py:16:5      - Unknown word (mixedargs)  -- def mixedargs_sum(a, b=0, *arg, k
./Lib/test/test_keywordonlyarg.py:21:5      - Unknown word (sortnum)    -- def sortnum(*nums, reverse=False
./Lib/test/test_keywordonlyarg.py:24:5      - Unknown word (sortwords)  -- def sortwords(*words, reverse=False
./Lib/test/test_keywordonlyarg.py:3:15      - Unknown word (Jiwon)      -- __author__ = "Jiwon Seo"
./Lib/test/test_keywordonlyarg.py:4:14      - Unknown word (seojiwon)   -- __email__ = "seojiwon at gmail dot com"
./Lib/test/test_keywordonlyarg.py:57:9      - Unknown word (fundef)     -- fundef = "def f(%s):\n  pass
./Lib/test/test_keywordonlyarg.py:78:23     - Unknown word (Funcall)    -- def testRaiseErrorFuncallWithUnexpectedKeywordArgument
./Lib/test/test_linecache.py:91:45     - Unknown word (ááááá)      -- 'b\n', 'abcdef\n', 'ááááá\n']
./Lib/test/test_list.py:159:17    - Unknown word (comdat)     -- def test_no_comdat_folding(self):
./Lib/test/test_list.py:23:38     - Unknown word (ooms)       -- RUSTPYTHON TODO: catch ooms
./Lib/test/test_list.py:35:32     - Unknown word (newlib)     -- # earlier due to a newlib bug.  See the following
./Lib/test/test_listcomps.py:44:61     - Unknown word (lvalues)    -- for listcomps used as lvalues
./Lib/test/test_listcomps.py:68:9      - Unknown word (lrange)     -- >>> lrange = lambda n:  [i for
./Lib/test/test_locale.py:143:15    - Unknown word (formatfunc)     -- def _test_formatfunc(self, format, value
./Lib/test/test_locale.py:18:13     - Unknown word (tlocs)      -- tlocs = ("en_US.UTF-8", "en
./Lib/test/test_locale.py:20:61     - Unknown word (ronaldoussoren) -- fine on OSX 10.6, I (ronaldoussoren)
./Lib/test/test_locale.py:31:17     - Unknown word (tloc)           -- for tloc in tlocs:
./Lib/test/test_locale.py:379:38    - Unknown word (wcscoll)        -- raise unittest.SkipTest('wcscoll/wcsxfrm have known bugs
./Lib/test/test_locale.py:379:46    - Unknown word (wcsxfrm)        -- unittest.SkipTest('wcscoll/wcsxfrm have known bugs')
./Lib/test/test_locale.py:568:14    - Unknown word (getsetlocale)   -- def test_getsetlocale_issue1813(self):
./Lib/test/test_locale.py:631:7     - Unknown word (Testfr)         -- class TestfrFRDelocalizeTest(FrFRCookedTes
./Lib/test/test_long.py:10:35     - Unknown word (longintrepr) -- should match the value in longintrepr.h for best testing.
./Lib/test/test_long.py:123:9     - Unknown word (getran)      -- def getran(self, ndigits):
./Lib/test/test_long.py:174:13    - Unknown word (lenx)        -- for lenx in digits:
./Lib/test/test_long.py:176:17    - Unknown word (leny)        -- for leny in digits:
./Lib/test/test_long.py:209:14    - Unknown word (karatsuba)   -- def test_karatsuba(self):
./Lib/test/test_long.py:218:13    - Unknown word (abits)       -- for abits in bits:
./Lib/test/test_long.py:220:17    - Unknown word (bbits)       -- for bbits in bits:
./Lib/test/test_long.py:232:15    - Unknown word (bitop)       -- def check_bitop_identities_1(self, x
./Lib/test/test_long.py:34:31     - Unknown word (mant)        -- DIG = sys.float_info.mant_dig
./Lib/test/test_long.py:490:9     - Unknown word (shuge)       -- shuge = '12345' * 120
./Lib/test/test_long.py:492:9     - Unknown word (mhuge)       -- mhuge = -huge
./Lib/test/test_long.py:618:21    - Unknown word (xycmp)       -- xycmp = (x > y) - (x < y)
./Lib/test/test_long.py:816:25    - Unknown word (zerodivision) -- expected = 'zerodivision'
./Lib/test/test_long.py:898:11    - Unknown word (largeish)     -- # largeish random divisions: a
./Lib/test/test_longexp.py:4:14      - Unknown word (longexp)    -- def test_longexp(self):
./Lib/test/test_marshal.py:142:11    - Unknown word (astring)    -- d = {'astring': 'foo@bar.baz.spam
./Lib/test/test_marshal.py:144:11    - Unknown word (anint)      -- 'anint': 2**20,
./Lib/test/test_marshal.py:145:11    - Unknown word (ashortlong) -- 'ashortlong': 2,
./Lib/test/test_marshal.py:147:11    - Unknown word (atuple)     -- 'atuple': ('.zyx.41',)*10,
./Lib/test/test_marshal.py:148:11    - Unknown word (aboolean)   -- 'aboolean': False,
./Lib/test/test_marshal.py:149:11    - Unknown word (aunicode)   -- 'aunicode': "Andr\xe8 Previn"
./Lib/test/test_marshal.py:272:13    - Unknown word (subtyp)     -- subtyp = type('subtyp', (typ
./Lib/test/test_marshal.py:292:35    - Unknown word (Engelbert)  -- Adapted from a patch by Engelbert Gruber.
./Lib/test/test_marshal.py:292:45    - Unknown word (Gruber)     -- a patch by Engelbert Gruber.
./Lib/test/test_marshal.py:295:13    - Unknown word (ilen)       -- ilen = len(interleaved)
./Lib/test/test_marshal.py:345:15    - Unknown word (unmarshallable) -- def check_unmarshallable(self, data):
./Lib/test/test_marshal.py:397:23    - Unknown word (rsample)        -- def helper3(self, rsample, recursive=False, simple
./Lib/test/test_marshal.py:426:9     - Unknown word (intobj)         -- intobj = 123321
./Lib/test/test_marshal.py:433:9     - Unknown word (floatobj)       -- floatobj = 1.2345
./Lib/test/test_marshal.py:440:9     - Unknown word (strobj)         -- strobj = "abcde"*3
./Lib/test/test_marshal.py:447:9     - Unknown word (bytesobj)       -- bytesobj = b"abcde"*3
./Lib/test/test_marshal.py:455:13    - Unknown word (listobj)        -- listobj = [obj, obj]
./Lib/test/test_marshal.py:463:13    - Unknown word (tupleobj)       -- tupleobj = (obj, obj)
./Lib/test/test_marshal.py:471:13    - Unknown word (setobj)         -- setobj = {(obj, 1), (obj,
./Lib/test/test_marshal.py:479:13    - Unknown word (frozensetobj)   -- frozensetobj = frozenset({(obj,
./Lib/test/test_marshal.py:487:13    - Unknown word (dictobj)        -- dictobj = {"hello": obj, "goodbye
./Lib/test/test_marshal.py:558:23    - Unknown word (pymarshal)      -- _testcapi.pymarshal_write_long_to_file(
./Lib/test/test_marshal.py:95:24     - Unknown word (Andr)       -- for s in ["", "Andr\xe8 Previn", "abc",
./Lib/test/test_math.py:1203:13   - Unknown word (testmodf)     -- def testmodf(name, result, expected
./Lib/test/test_math.py:124:11    - Unknown word (mtestfile)    -- def parse_mtestfile(fname):
./Lib/test/test_math.py:1645:15   - Unknown word (mathmodule)   -- # mathmodule.c is failing to weed
./Lib/test/test_math.py:1645:67   - Unknown word (libm)         -- out underflows from libm, or
./Lib/test/test_math.py:1647:24   - Unknown word (underflowing) -- self.fail("underflowing exp() should not have
./Lib/test/test_math.py:175:34    - Unknown word (ftest)        -- logic of MathTests.(ftest, test_testcases, test
./Lib/test/test_math.py:175:62    - Unknown word (mtestcases)   -- test_testcases, test_mtestcases)
./Lib/test/test_math.py:1830:53   - Unknown word (abababababab) -- , 3], start='ab'), 'abababababab')
./Lib/test/test_math.py:253:16    - Unknown word (Abramowitz)   -- # Ref: Abramowitz & Stegun (Dover, 19
./Lib/test/test_math.py:253:29    - Unknown word (Stegun)       -- # Ref: Abramowitz & Stegun (Dover, 1965)
./Lib/test/test_math.py:380:13    - Unknown word (Cbrt)         -- def testCbrt(self):
./Lib/test/test_math.py:381:43    - Unknown word (cbrt)         -- assertRaises(TypeError, math.cbrt)
./Lib/test/test_math.py:604:13    - Unknown word (testfrexp)    -- def testfrexp(name, result, expected
./Lib/test/test_math.py:605:27    - Unknown word (emant)        -- (mant, exp), (emant, eexp) = result, expected
./Lib/test/test_math.py:605:34    - Unknown word (eexp)         -- mant, exp), (emant, eexp) = result, expected
./Lib/test/test_math.py:638:13    - Unknown word (msum)         -- def msum(iterable):
./Lib/test/test_math.py:640:64    - Unknown word (lsum)         -- error. Based on the 'lsum' function
./Lib/test/test_math.py:644:13    - Unknown word (tmant)        -- tmant, texp = 0, 0
./Lib/test/test_math.py:644:20    - Unknown word (texp)         -- tmant, texp = 0, 0
./Lib/test/test_math.py:685:59    - Unknown word (Sterbenz)     -- differences (due to Sterbenz)
./Lib/test/test_math.py:78:52     - Unknown word (nonnnegative) -- binary expansion of a nonnnegative integer."""
./Lib/test/test_math.py:823:9     - Unknown word (fourthmax)    -- fourthmax = FLOAT_MAX / 4.0
./Lib/test/test_math.py:869:54    - Unknown word (baep)         -- 29', '0x1.24bd2dc4f4baep+29'),
./Lib/test/test_math.py:86:5      - Unknown word (numfactors)   -- numfactors = (stop - start) >>
./Lib/test/test_math.py:879:22    - Unknown word (bfbec)        -- ('0x1.5c6bfbec5c4dcp+30', '0x1.025
./Lib/test/test_math.py:880:21    - Unknown word (dcebba)       -- ('0x1.59dcebba995cap+30', '0x1.50ca
./Lib/test/test_math.py:881:45    - Unknown word (cfdc)         -- cdd94cf5aap+29', '0x1.9cfdc5571d38ep+29'),
./Lib/test/test_math.py:887:47    - Unknown word (dcfe)         -- ea0c6p+29', '0x1.d35dcfe902bc3p+29'),
./Lib/test/test_memoryio.py:220:32    - Unknown word (overread)   -- Issue #24989: Buffer overread
./Lib/test/test_memoryio.py:24:20     - Unknown word (buftype)    -- buf = self.buftype("1234567890")
./Lib/test/test_memoryio.py:323:14    - Unknown word (overseek)   -- def test_overseek(self):
./Lib/test/test_memoryio.py:399:30    - Unknown word (initvalue)  -- def __init__(me, initvalue, foo):
./Lib/test/test_memoryio.py:413:9     - Unknown word (submemio)   -- submemio = PickleTestMemIO(buf
./Lib/test/test_memoryio.py:87:9      - Unknown word (memio)      -- memio = self.ioclass(buf)
./Lib/test/test_memoryio.py:955:14    - Unknown word (widechar)   -- def test_widechar(self):
./Lib/test/test_memoryview.py:216:13    - Unknown word (oldviewrefcount) -- oldviewrefcount = sys.getrefcount(m
./Lib/test/test_memoryview.py:238:30    - Unknown word (mbuf)            -- # This exercises mbuf_clear().
./Lib/test/test_memoryview.py:322:11    - Unknown word (Memoryviews)     -- # Memoryviews of readonly (hashable
./Lib/test/test_memoryview.py:33:9      - Unknown word (oldrefcount) -- oldrefcount = sys.getrefcount(b
./Lib/test/test_memoryview.py:349:33    - Unknown word (weakrefable)     -- Check memoryviews are weakrefable
./Lib/test/test_memoryview.py:647:21    - Unknown word (bhilqn)          -- for fmt in 'bhilqnBHILQN':
./Lib/test/test_memoryview.py:647:27    - Unknown word (BHILQN)          -- for fmt in 'bhilqnBHILQN':
./Lib/test/test_mimetypes.py:135:60    - Unknown word (geocube)    -- extensions('application/vnd.geocube+xml',
./Lib/test/test_mimetypes.py:51:53     - Unknown word (pyunit)     -- application/x-unittest pyunit\n")
./Lib/test/test_mmap.py:126:9     - Unknown word (mapsize)    -- mapsize = 10
./Lib/test/test_mmap.py:472:34    - Unknown word (halfsize)   -- mmap_file (self, f, halfsize):
./Lib/test/test_mmap.py:47:46     - Unknown word (segfaulted) -- # SF bug 128713:  segfaulted on Linux
./Lib/test/test_mmap.py:710:64    - Unknown word (mmaps)      -- cannot resize anonymous mmaps on Windows')
./Lib/test/test_mmap.py:731:75    - Unknown word (memmap)     -- "TODO: RUSTPYTHON, memmap2 doesn't throw OSError
./Lib/test/test_mmap.py:753:9     - Unknown word (mapsizes)   -- mapsizes = (50, 100, 1_000,
./Lib/test/test_mmap.py:766:21    - Unknown word (accint)     -- accint = getattr(mmap, access
./Lib/test/test_mmap.py:781:46    - Unknown word (madvise)    -- hasattr(mmap.mmap, 'madvise'), 'needs madvise')
./Lib/test/test_module.py:142:17    - Unknown word (yolo)             -- gga.yolo
./Lib/test/test_module.py:189:26    - Unknown word (delgetattr)       -- bad_getattr3.delgetattr
./Lib/test/test_module.py:299:15    - Unknown word (Descr)            -- class Descr:
./Lib/test/test_module.py:66:34     - Unknown word (foodoc)     -- ModuleType("foo", "foodoc")
./Lib/test/test_module.py:85:11     - Unknown word (Reinitialization) -- # Reinitialization should not replace the
./Lib/test/test_ntpath.py:160:40    - Unknown word (pleep)            -- ntpath.join("d:\\", "\\pleep")', 'd:\\pleep')
./Lib/test/test_ntpath.py:33:10     - Unknown word (getshortpathname) -- def _getshortpathname(path):
./Lib/test/test_ntpath.py:632:13    - Unknown word (currentdir)       -- currentdir = ntpath.basename(cwd
./Lib/test/test_ntpath.py:694:25    - Unknown word (alot)             -- check(['spam', 'alot'], '')
./Lib/test/test_ntpath.py:83:34     - Unknown word (pathset)          -- assertPathIn(self, path, pathset):
./Lib/test/test_operator.py:330:18    - Unknown word (xyzpdq)     -- a = b = 'xyzpdq'
./Lib/test/test_operator.py:420:34    - Unknown word (nonkey)     -- operator.itemgetter('nonkey')
./Lib/test/test_operator.py:425:9     - Unknown word (getcount)   -- getcount = operator.itemgetter
./Lib/test/test_optparse.py:1053:23   - Unknown word (notfile)     -- def test_filetype_notfile(self):
./Lib/test/test_optparse.py:1085:44   - Unknown word (abar)        -- assertParseOK(["-a", "foo", "-abar", "--apple=x,y"],
./Lib/test/test_optparse.py:1301:15   - Unknown word (Trueconflict) -- def assertTrueconflict_error(self, func):
./Lib/test/test_optparse.py:1405:58   - Unknown word (fooing)       -- the foo list for later fooing
./Lib/test/test_optparse.py:1628:29   - Unknown word (Ooops)        -- _parse_num, ("0xOoops", int), {},
./Lib/test/test_optparse.py:2:47      - Unknown word (Gijsbers)   -- Supplied by Johannes Gijsbers
./Lib/test/test_optparse.py:372:15    - Unknown word (Trueremoved) -- def assertTrueremoved(self):
./Lib/test/test_optparse.py:407:36    - Unknown word (aaarggh)     -- add_option("-a", "--aaarggh")
./Lib/test/test_optparse.py:497:47    - Unknown word (frob)        -- option("-x", default="frob")
./Lib/test/test_optparse.py:667:14    - Unknown word (shortopt)    -- def test_shortopt_empty_longopt_append
./Lib/test/test_optparse.py:667:29    - Unknown word (longopt)     -- test_shortopt_empty_longopt_append(self):
./Lib/test/test_optparse.py:710:44    - Unknown word (axyz)        -- assertParseOK(["--foo=bar", "-axyz"],
./Lib/test/test_optparse.py:769:30    - Unknown word (optionlike)  -- test_option_consumes_optionlike_string(self):
./Lib/test/test_ordered_dict.py:412:42    - Unknown word (abdec)      -- assertEqual(list(od), list('abdec'))
./Lib/test/test_ordered_dict.py:414:42    - Unknown word (cabde)      -- assertEqual(list(od), list('cabde'))
./Lib/test/test_ordered_dict.py:420:42    - Unknown word (bcade)      -- assertEqual(list(od), list('bcade'))
./Lib/test/test_ordered_dict.py:512:45    - Unknown word (lookdict)   -- collision-handling in lookdict (in Objects/dictobject
./Lib/test/test_ordered_dict.py:512:66    - Unknown word (dictobject) -- lookdict (in Objects/dictobject.c).
./Lib/test/test_ordered_dict.py:574:21    - Unknown word (odict)      -- on a sparse odict and then perform an
./Lib/test/test_ordered_dict.py:62:9      - Unknown word (argdict)    -- argdict = OrderedDict(items
./Lib/test/test_ordered_dict.py:761:9     - Unknown word (keysize)    -- keysize = calcsize('2nP2n')
./Lib/test/test_ordered_dict.py:763:9     - Unknown word (entrysize)  -- entrysize = calcsize('n2P')
./Lib/test/test_ordered_dict.py:765:9     - Unknown word (nodesize)   -- nodesize = calcsize('Pn2P')
./Lib/test/test_ordered_dict.py:803:42    - Unknown word (bdeaf)      -- assertEqual(list(od), list('bdeaf'))
./Lib/test/test_os.py:1139:13   - Unknown word (longstr)      -- longstr = 'x' * 32_768
./Lib/test/test_os.py:1145:20   - Unknown word (missingkey)   -- missing = 'missingkey'
./Lib/test/test_os.py:1294:54   - Unknown word (dirsymlink)   -- a file kid and a dirsymlink kid
./Lib/test/test_os.py:131:9     - Unknown word (dirlen)       -- dirlen = 200     # characters
./Lib/test/test_os.py:1470:7    - Unknown word (Fwalk)        -- class FwalkTests(WalkTests):
./Lib/test/test_os.py:1528:9    - Unknown word (minfd)        -- minfd = os.dup(1)
./Lib/test/test_os.py:1533:9    - Unknown word (newfd)        -- newfd = os.dup(1)
./Lib/test/test_os.py:1546:13   - Unknown word (broot)        -- for broot, bdirs, bfiles in os
./Lib/test/test_os.py:1546:20   - Unknown word (bdirs)        -- for broot, bdirs, bfiles in os.walk(os
./Lib/test/test_os.py:1546:27   - Unknown word (bfiles)       -- for broot, bdirs, bfiles in os.walk(os.fsencode
./Lib/test/test_os.py:1749:9    - Unknown word (dira)         -- dira = os.path.join(os_helper
./Lib/test/test_os.py:1751:9    - Unknown word (dirb)         -- dirb = os.path.join(dira
./Lib/test/test_os.py:1822:35   - Unknown word (getrandom)    -- skipUnless(hasattr(os, 'getrandom'), 'need os.getrandom
./Lib/test/test_os.py:1866:3    - Unknown word (getentropy)   -- # getentropy() function, the getrandom
./Lib/test/test_os.py:2009:34   - Unknown word (absolutepath) -- program_path = os.sep + 'absolutepath'
./Lib/test/test_os.py:2064:9    - Unknown word (newenv)       -- newenv = os.environ.copy()
./Lib/test/test_os.py:2129:17   - Unknown word (fchdir)       -- singles = ["fchdir", "dup", "fdatasync
./Lib/test/test_os.py:2129:34   - Unknown word (fdatasync)    -- ["fchdir", "dup", "fdatasync", "fstat",
./Lib/test/test_os.py:2130:38   - Unknown word (tcgetpgrp)    -- fstatvfs", "fsync", "tcgetpgrp", "ttyname"]
./Lib/test/test_os.py:2177:39   - Unknown word (fchmod)       -- skipUnless(hasattr(os, 'fchmod'), 'test needs os.fchmod
./Lib/test/test_os.py:2181:39   - Unknown word (fchown)       -- skipUnless(hasattr(os, 'fchown'), 'test needs os.fchown
./Lib/test/test_os.py:2185:39   - Unknown word (fpathconf)    -- skipUnless(hasattr(os, 'fpathconf'), 'test needs os.fpathconf
./Lib/test/test_os.py:2203:39   - Unknown word (readv)        -- skipUnless(hasattr(os, 'readv'), 'test needs os.readv
./Lib/test/test_os.py:2208:39   - Unknown word (tcsetpgrp)    -- skipUnless(hasattr(os, 'tcsetpgrp'), 'test needs os.tcsetpgrp
./Lib/test/test_os.py:2209:14   - Unknown word (tcsetpgrpt)   -- def test_tcsetpgrpt(self):
./Lib/test/test_os.py:2216:39   - Unknown word (writev)       -- skipUnless(hasattr(os, 'writev'), 'test needs os.writev
./Lib/test/test_os.py:2345:14   - Unknown word (bdir)         -- self.bdir = os.fsencode(self.dir
./Lib/test/test_os.py:2347:9    - Unknown word (bytesfn)      -- bytesfn = []
./Lib/test/test_os.py:2362:14   - Unknown word (unicodefn)    -- self.unicodefn = set()
./Lib/test/test_os.py:2450:13   - Unknown word (rslt)         -- rslt = PeekNamedPipe(msvcrt
./Lib/test/test_os.py:2464:19   - Unknown word (sigterm)      -- def test_kill_sigterm(self):
./Lib/test/test_os.py:2576:17   - Unknown word (readlinktest) -- filelink = 'readlinktest'
./Lib/test/test_os.py:2578:5    - Unknown word (filelinkb)    -- filelinkb = os.fsencode(filelink
./Lib/test/test_os.py:2638:17   - Unknown word (filelinktest) -- filelink = 'filelinktest'
./Lib/test/test_os.py:2640:16   - Unknown word (dirlinktest)  -- dirlink = 'dirlinktest'
./Lib/test/test_os.py:2640:5    - Unknown word (dirlink)      -- dirlink = 'dirlinktest'
./Lib/test/test_os.py:2791:14   - Unknown word (appexeclink)  -- def test_appexeclink(self):
./Lib/test/test_os.py:2814:17   - Unknown word (junctiontest) -- junction = 'junctiontest'
./Lib/test/test_os.py:2861:9    - Unknown word (hproc)        -- hproc = kernel.GetCurrentProcess
./Lib/test/test_os.py:3168:58   - Unknown word (envlist)      -- parse_arglist and parse_envlist (#28114)
./Lib/test/test_os.py:3259:35   - Unknown word (getlogin)     -- skipUnless(hasattr(os, 'getlogin'), "test needs os.getlogin
./Lib/test/test_os.py:3266:35   - Unknown word (getpriority)  -- skipUnless(hasattr(os, 'getpriority') and hasattr(os, 'setpriorit
./Lib/test/test_os.py:3266:66   - Unknown word (setpriority)  -- etpriority') and hasattr(os, 'setpriority'),
./Lib/test/test_os.py:3605:16   - Unknown word (xattrs)       -- def _check_xattrs_str(self, s, getxattr
./Lib/test/test_os.py:3605:56   - Unknown word (removexattr)  -- getxattr, setxattr, removexattr, listxattr, **kwargs
./Lib/test/test_os.py:3664:14   - Unknown word (lpath)        -- def test_lpath(self):
./Lib/test/test_os.py:3685:7    - Unknown word (Termsize)     -- class TermsizeTests(unittest.TestCase
./Lib/test/test_os.py:3704:14   - Unknown word (stty)         -- def test_stty_match(self):
./Lib/test/test_os.py:3733:35   - Unknown word (memfd)        -- skipUnless(hasattr(os, 'memfd_create'), 'requires
./Lib/test/test_os.py:3735:7    - Unknown word (Memfd)        -- class MemfdCreateTests(unittest
./Lib/test/test_os.py:3750:35   - Unknown word (eventfd)      -- skipUnless(hasattr(os, 'eventfd'), 'requires os.eventfd
./Lib/test/test_os.py:3752:7    - Unknown word (Eventfd)      -- class EventfdTests(unittest.TestCase
./Lib/test/test_os.py:3753:22   - Unknown word (initval)      -- def test_eventfd_initval(self):
./Lib/test/test_os.py:3890:25   - Unknown word (lchflags)     -- if hasattr(os, "lchflags"):
./Lib/test/test_os.py:3983:34   - Unknown word (badf)         -- get_set_inheritable_badf(self):
./Lib/test/test_os.py:4159:14   - Unknown word (uninstantiable) -- def test_uninstantiable(self):
./Lib/test/test_os.py:4164:14   - Unknown word (unpickable)     -- def test_unpickable(self):
./Lib/test/test_os.py:4173:11   - Unknown word (Scandir)        -- class TestScandir(unittest.TestCase):
./Lib/test/test_os.py:4327:39   - Unknown word (bytesfile)      -- filename = os.fsencode('bytesfile.txt')
./Lib/test/test_os.py:4548:28   - Unknown word (feelthegil)     -- self.assertEqual('#feelthegil', self.fspath(FakePath
./Lib/test/test_os.py:552:13    - Unknown word (nanosecondy)  -- nanosecondy = getattr(result, name
./Lib/test/test_os.py:622:22    - Unknown word (ffree)        -- 'ffree', 'favail', 'flag',
./Lib/test/test_os.py:622:31    - Unknown word (favail)       -- 'ffree', 'favail', 'flag', 'namemax'
./Lib/test/test_os.py:622:49    - Unknown word (namemax)      -- 'favail', 'flag', 'namemax')
./Lib/test/test_os.py:626:45    - Unknown word (fsid)         -- isinstance(result.f_fsid, int))
./Lib/test/test_os.py:759:17    - Unknown word (subsecond)    -- def support_subsecond(self, filename):
./Lib/test/test_os.py:819:41    - Unknown word (utimes)       -- utimensat(timespec), utimes(timeval), utime(utimbuf
./Lib/test/test_os.py:819:64    - Unknown word (utimbuf)      -- utimes(timeval), utime(utimbuf)
./Lib/test/test_os.py:83:21     - Unknown word (linuxthreads) -- # and unmaintained) linuxthreads threading library.
./Lib/test/test_os.py:841:18    - Unknown word (lutimes)      -- # or lutimes(timeval)
./Lib/test/test_os.py:851:22    - Unknown word (futimes)      -- # or futimes(timeval)
./Lib/test/test_os.py:861:62    - Unknown word (futimesat)    -- utimensat(timespec) or futimesat(timeval)
./Lib/test/test_os.py:884:26    - Unknown word (Refleaks)     -- # x86 Gentoo Refleaks 3.x once failed with
./Lib/test/test_os.py:982:20    - Unknown word (saveb)        -- self.__saveb = dict(os.environb)
./Lib/test/test_pathlib.py:1297:32   - Unknown word (conin)         -- self.assertIs(True, P('conin$').is_reserved())
./Lib/test/test_pathlib.py:1298:32   - Unknown word (conout)        -- self.assertIs(True, P('conout$').is_reserved())
./Lib/test/test_pathlib.py:1305:27   - Unknown word (mataching)     -- # DOS-device name mataching ignores characters after
./Lib/test/test_pathlib.py:1555:66   - Unknown word (somestr)       -- fileA').write_bytes, 'somestr')
./Lib/test/test_pathlib.py:1560:35   - Unknown word (äbcdefg)       -- fileA').write_text('äbcdefg', encoding='latin-1
./Lib/test/test_pathlib.py:1562:50   - Unknown word (bcdefg)        -- errors='ignore'), 'bcdefg')
./Lib/test/test_pathlib.py:1570:43   - Unknown word (nfghlk)        -- write_text('abcde\r\nfghlk\n\rmnopq', newline=
./Lib/test/test_pathlib.py:1570:52   - Unknown word (rmnopq)        -- text('abcde\r\nfghlk\n\rmnopq', newline='\n')
./Lib/test/test_pathlib.py:1585:58   - Unknown word (fghlk)         -- os_linesep_byte + b'fghlk' + os_linesep_byte
./Lib/test/test_pathlib.py:1606:22   - Unknown word (nodir)         -- def test_iterdir_nodir(self):
./Lib/test/test_pathlib.py:1823:22   - Unknown word (nonexist)      -- def test_resolve_nonexist_relative_issue38671
./Lib/test/test_pathlib.py:1894:38   - Unknown word (nosymlink)     -- stat_no_follow_symlinks_nosymlink(self):
./Lib/test/test_pathlib.py:2068:20   - Unknown word (nochange)      -- def test_touch_nochange(self):
./Lib/test/test_pathlib.py:2302:29   - Unknown word (myfifo)        -- P = self.cls(BASE, 'myfifo')
./Lib/test/test_pathlib.py:2324:29   - Unknown word (mysock)        -- P = self.cls(BASE, 'mysock')
./Lib/test/test_pathlib.py:2555:9    - Unknown word (pwdent)        -- pwdent = pwd.getpwuid(os.getuid
./Lib/test/test_pathlib.py:2560:13   - Unknown word (othername)     -- othername = pwdent.pw_name
./Lib/test/test_pathlib.py:2561:13   - Unknown word (otherhome)     -- otherhome = pwdent.pw_dir.rstrip
./Lib/test/test_pathlib.py:2568:21   - Unknown word (fakeuser)      -- fakename = 'fakeuser'
./Lib/test/test_pathlib.py:261:11    - Unknown word (Canonicalized) -- # Canonicalized paths roundtrip.
./Lib/test/test_pathlib.py:262:13    - Unknown word (pathstr)       -- for pathstr in ('a', 'a/b', 'a/b
./Lib/test/test_pathlib.py:296:26    - Unknown word (roundtrips)    -- # The repr() roundtrips.
./Lib/test/test_pathlib.py:411:13    - Unknown word (pcanon)        -- pcanon = self.cls(canon)
./Lib/test/test_pathlib.py:525:32    - Unknown word (hgrc)          -- self.assertEqual(P('a/.hgrc').suffix, '')
./Lib/test/test_pickle.py:17:11     - Unknown word (pickletester) -- from test.pickletester import AbstractHookTests
./Lib/test/test_pickle.py:216:15    - Unknown word (Pers)         -- class PersPickler(self.pickler
./Lib/test/test_pickle.py:217:31    - Unknown word (subself)      -- def persistent_id(subself, obj):
./Lib/test/test_pickle.py:278:44    - Unknown word (memleak)      -- pickler_dispatch_table_memleak(self):
./Lib/test/test_pickle.py:452:13    - Unknown word (stdsize)      -- stdsize = basesize + len('ASCII
./Lib/test/test_pkg.py:105:19    - Unknown word (subsub)     -- ("t2 sub subsub", None),
./Lib/test/test_pkg.py:12:5      - Unknown word (cleanout)   -- def cleanout(root):
./Lib/test/test_pkg.py:164:40    - Unknown word (Shouldnt)   -- raise RuntimeError('Shouldnt load t4.py')"),
./Lib/test/test_pkg.py:22:5      - Unknown word (fixdir)     -- def fixdir(lst):
./Lib/test/test_pkg.py:269:38    - Unknown word (subsubsub)  -- sub import subsub as subsubsub
./Lib/test/test_pkg.py:51:14     - Unknown word (syspath)    -- self.syspath = list(sys.path)
./Lib/test/test_pkg.py:52:57     - Unknown word (mkhier)     -- set() # Populated by mkhier().
./Lib/test/test_pkg.py:95:9      - Unknown word (hier)       -- hier = [("t1", None), ("t
./Lib/test/test_pkgutil.py:105:14    - Unknown word (walkpackages) -- def test_walkpackages_filesys(self):
./Lib/test/test_pkgutil.py:30:14     - Unknown word (getdata)    -- def test_getdata_filesys(self):
./Lib/test/test_pkgutil.py:30:22     - Unknown word (filesys)    -- def test_getdata_filesys(self):
./Lib/test/test_pkgutil.py:316:14    - Unknown word (alreadyloaded) -- def test_alreadyloaded(self):
./Lib/test/test_pkgutil.py:334:9     - Unknown word (pkgdir)        -- pkgdir = os.path.join(dirname
./Lib/test/test_pkgutil.py:382:9     - Unknown word (pathitem)      -- pathitem = os.path.join(dirname
./Lib/test/test_platform.py:23:18     - Unknown word (fedoraproject) -- CPE_NAME="cpe:/o:fedoraproject:fedora:32"
./Lib/test/test_platform.py:289:26    - Unknown word (ARCHITEW)      -- def test_uname_win32_ARCHITEW6432(self):
./Lib/test/test_plistlib.py:176:7     - Unknown word (extremally) -- ('extremally large num_objects (
./Lib/test/test_plistlib.py:435:17    - Unknown word (benraa)     -- pl['\xc5benraa'] = "That was a unicode
./Lib/test/test_plistlib.py:559:14    - Unknown word (appleformatting) -- def test_appleformatting(self):
./Lib/test/test_plistlib.py:568:14    - Unknown word (appleformattingfromliteral) -- def test_appleformattingfromliteral(self):
./Lib/test/test_plistlib.py:580:14    - Unknown word (bytesio)                    -- def test_bytesio(self):
./Lib/test/test_plistlib.py:591:14    - Unknown word (keysort)                    -- def test_keysort_bytesio(self):
./Lib/test/test_plistlib.py:716:14    - Unknown word (controlcharacters)          -- def test_controlcharacters(self):
./Lib/test/test_plistlib.py:747:14    - Unknown word (nondictroot)                -- def test_nondictroot(self):
./Lib/test/test_plistlib.py:759:14    - Unknown word (invalidarray)               -- def test_invalidarray(self):
./Lib/test/test_plistlib.py:768:14    - Unknown word (invaliddict)                -- def test_invaliddict(self):
./Lib/test/test_plistlib.py:781:14    - Unknown word (invalidinteger)             -- def test_invalidinteger(self):
./Lib/test/test_plistlib.py:787:14    - Unknown word (invalidreal)                -- def test_invalidreal(self):
./Lib/test/test_plistlib.py:884:63    - Unknown word (абвгд)                      -- , 123.45, 'abcde', 'абвгд', b'abcde',
./Lib/test/test_plistlib.py:984:22    - Unknown word (pytype)                     -- 'pytype': 1,
./Lib/test/test_plistlib.py:996:23    - Unknown word (classhints)                 -- '$classhints': [
./Lib/test/test_posix.py:1052:42   - Unknown word (getgrouplist) -- skipUnless(hasattr(posix, 'getgrouplist'), "test needs posix
./Lib/test/test_posix.py:1086:9    - Unknown word (symdiff)      -- symdiff = idg_groups.symmetric
./Lib/test/test_posix.py:1101:73   - Unknown word (setaffinity)  -- hasattr(posix, 'sched_setaffinity'),
./Lib/test/test_posix.py:110:42    - Unknown word (setresgid)    -- skipUnless(hasattr(posix, 'setresgid'),
./Lib/test/test_posix.py:1139:48   - Unknown word (getparam)     -- OSError, posix.sched_getparam, -1)
./Lib/test/test_posix.py:1143:43   - Unknown word (setparam)     -- states that calling sched_setparam() or sched_setscheduler
./Lib/test/test_posix.py:1143:63   - Unknown word (setscheduler) -- setparam() or sched_setscheduler() on
./Lib/test/test_posix.py:1182:20   - Unknown word (getaffinity)  -- def test_sched_getaffinity(self):
./Lib/test/test_posix.py:1210:14   - Unknown word (rtld)         -- def test_rtld_constants(self):
./Lib/test/test_posix.py:1253:26   - Unknown word (noodly)       -- for dst in ("noodly2", os_helper.TESTFN
./Lib/test/test_posix.py:1255:31   - Unknown word (doesnotexistfilename) -- function('doesnotexistfilename', dst)
./Lib/test/test_posix.py:127:42    - Unknown word (initgroups)   -- skipUnless(hasattr(posix, 'initgroups'),
./Lib/test/test_posix.py:1298:39   - Unknown word (pidfd)                -- skipUnless(hasattr(os, "pidfd_open"), "pidfd_open
./Lib/test/test_posix.py:1407:52   - Unknown word (fulllinkname)         -- (dir_fd2, linkname, fulllinkname):
./Lib/test/test_posix.py:1429:22   - Unknown word (mknodat)              -- # Test using mknodat() to create a FIFO
./Lib/test/test_posix.py:1554:9    - Unknown word (pidfile)              -- pidfile = os_helper.TESTFN
./Lib/test/test_posix.py:1585:9    - Unknown word (envfile)              -- envfile = os_helper.TESTFN
./Lib/test/test_posix.py:1617:64   - Unknown word (resetids)             -- Unexpected keyword argument resetids
./Lib/test/test_posix.py:1645:64   - Unknown word (setpgroup)            -- Unexpected keyword argument setpgroup
./Lib/test/test_posix.py:1664:14   - Unknown word (setsigmask)           -- def test_setsigmask(self):
./Lib/test/test_posix.py:1868:9    - Unknown word (closefile)            -- closefile = os_helper.TESTFN
./Lib/test/test_posix.py:1887:9    - Unknown word (dupfile)              -- dupfile = os_helper.TESTFN
./Lib/test/test_posix.py:188:14    - Unknown word (fexecve)      -- def test_fexecve(self):
./Lib/test/test_posix.py:1893:37   - Unknown word (childfile)            -- open(dupfile, "wb") as childfile:
./Lib/test/test_posix.py:1910:41   - Unknown word (spawnp)               -- skipUnless(hasattr(os, 'posix_spawnp'), "test needs os.posix
./Lib/test/test_posix.py:1948:16   - Unknown word (Weaklinking)          -- class TestPosixWeaklinking(unittest.TestCase):
./Lib/test/test_posix.py:201:42    - Unknown word (waitid)       -- skipUnless(hasattr(posix, 'waitid'), "test needs posix
./Lib/test/test_posix.py:2059:19   - Unknown word (linkat)               -- # linkat)
./Lib/test/test_posix.py:297:42    - Unknown word (preadv)       -- skipUnless(hasattr(posix, 'preadv'), "test needs posix
./Lib/test/test_posix.py:33:34     - Unknown word (getscheduler) -- hasattr(posix, 'sched_getscheduler'):
./Lib/test/test_posix.py:354:42    - Unknown word (pwritev)      -- skipUnless(hasattr(posix, 'pwritev'), "test needs posix
./Lib/test/test_posix.py:394:48    - Unknown word (fallocate)    -- hasattr(posix, 'posix_fallocate'),
./Lib/test/test_posix.py:423:48    - Unknown word (fadvise)      -- hasattr(posix, 'posix_fadvise'),
./Lib/test/test_posix.py:575:14    - Unknown word (oscloexec)    -- def test_oscloexec(self):
./Lib/test/test_posix.py:582:14    - Unknown word (osexlock)     -- def test_osexlock(self):
./Lib/test/test_posix.py:598:14    - Unknown word (osshlock)     -- def test_osshlock(self):
./Lib/test/test_posix.py:649:40    - Unknown word (fifos)        -- path = os.path.join("/fifos/", os_helper.TESTFN
./Lib/test/test_posix.py:65:31     - Unknown word (ctermid)      -- NO_ARG_FUNCTIONS = [ "ctermid", "getcwd", "getcwdb
./Lib/test/test_posix.py:77:42     - Unknown word (getresuid)    -- skipUnless(hasattr(posix, 'getresuid'),
./Lib/test/test_posix.py:85:42     - Unknown word (getresgid)    -- skipUnless(hasattr(posix, 'getresgid'),
./Lib/test/test_posix.py:937:20    - Unknown word (chflag)       -- msg = 'chflag UF_IMMUTABLE not supported
./Lib/test/test_posixpath.py:109:28    - Unknown word (nodots)     -- self.splitextTest("nodots", "nodots", "")
./Lib/test/test_posixpath.py:110:29    - Unknown word (cshrc)      -- self.splitextTest(".cshrc", ".cshrc", "")
./Lib/test/test_posixpath.py:111:31    - Unknown word (manydots)   -- self.splitextTest("...manydots", "...manydots", ""
./Lib/test/test_posixpath.py:203:30    - Unknown word (mountpoints) -- Symlinks are never mountpoints.
./Lib/test/test_posixpath.py:23:13     - Unknown word (ABSTFN)     -- def skip_if_ABSTFN_contains_backslash(test
./Lib/test/test_posixpath.py:312:49    - Unknown word (vstinner)    -- ('~', '~/.local', '~vstinner/'):
./Lib/test/test_pprint.py:1010:9    - Unknown word (abcdefghijkl) -- 'b': b'abcdefghijkl'
./Lib/test/test_pprint.py:103:7     - Unknown word (Unorderable) -- class Unorderable:
./Lib/test/test_pprint.py:284:15    - Unknown word (controldesk) -- 'controldesk_runtime_us': 0,
./Lib/test/test_pprint.py:673:9     - Unknown word (cubo)        -- cubo_repr_tgt = """\
./Lib/test/test_pprint.py:831:30    - Unknown word (linegraph)   -- cubo = test.test_set.linegraph(cube)
./Lib/test/test_pprint.py:850:31    - Unknown word (pprints)     -- Issue 3976:  sorted pprints fail for unorderable
./Lib/test/test_pprint.py:854:9     - Unknown word (skeys)       -- skeys = sorted(keys, key=id
./Lib/test/test_pprint.py:912:20    - Unknown word (Portons)     -- special = "Portons dix bons \"whiskys\
./Lib/test/test_pprint.py:912:52    - Unknown word (l'avocat)    -- bons \"whiskys\"\nà l'avocat goujat\t qui fumait
./Lib/test/test_pprint.py:912:61    - Unknown word (goujat)      -- whiskys\"\nà l'avocat goujat\t qui fumait au zoo
./Lib/test/test_pprint.py:912:74    - Unknown word (fumait)      -- avocat goujat\t qui fumait au zoo"
./Lib/test/test_pty.py:59:25     - Unknown word (knowledgable) -- # from someone more knowledgable.
./Lib/test/test_pwd.py:100:9     - Unknown word (fakeuid)       -- fakeuid = sys.maxsize
./Lib/test/test_pwd.py:23:41     - Unknown word (gecos)      -- assertEqual(e[4], e.pw_gecos)
./Lib/test/test_pwd.py:38:9      - Unknown word (entriesbyname) -- entriesbyname = {}
./Lib/test/test_pwd.py:39:9      - Unknown word (entriesbyuid)  -- entriesbyuid = {}
./Lib/test/test_pwd.py:65:9      - Unknown word (byuids)        -- byuids = {}
./Lib/test/test_py_compile.py:235:9     - Unknown word (pycompilecmd) -- def pycompilecmd(self, *args, **kwargs
./Lib/test/test_py_compile.py:99:31     - Unknown word (nonregular) -- test_do_not_overwrite_nonregular_files(self):
./Lib/test/test_pyexpat.py:165:13    - Unknown word (Attlist)     -- def AttlistDeclHandler(self, *args
./Lib/test/test_pyexpat.py:321:61    - Unknown word (localname)   -- namespace URI and the localname. Though
./Lib/test/test_pyexpat.py:503:70    - Unknown word (pyexpat)     -- the relevant line in pyexpat.c
./Lib/test/test_pyexpat.py:570:7     - Unknown word (Chardata)    -- class ChardataBufferTest(unittest.TestCase
./Lib/test/test_pyexpat.py:572:21    - Unknown word (chardata)    -- test setting of chardata buffer size
./Lib/test/test_pyexpat.py:739:14    - Unknown word (expaterror)  -- def test_expaterror(self):
./Lib/test/test_pyexpat.py:74:10     - Unknown word (acirc)      -- <!ENTITY acirc "&#226;">
./Lib/test/test_pyexpat.py:81:2      - Unknown word (myns)       -- <myns:subelement xmlns:myns
./Lib/test/test_pyexpat.py:82:18     - Unknown word (subelements) -- Contents of subelements
./Lib/test/test_pyexpat.py:94:11     - Unknown word (Outputter)   -- class Outputter:
./Lib/test/test_queue.py:20:5      - Unknown word (qfull)      -- def qfull(q):
./Lib/test/test_queue.py:93:14     - Unknown word (cumlock)    -- self.cumlock = threading.Lock()
./Lib/test/test_quopri.py:183:14    - Unknown word (scriptencode)             -- def test_scriptencode(self):
./Lib/test/test_quopri.py:185:55    - Unknown word (mquopri)                  -- Popen([sys.executable, "-mquopri"],
./Lib/test/test_quopri.py:188:15    - Unknown word (cerr)                     -- cout, cerr = process.communicate
./Lib/test/test_quopri.py:188:9     - Unknown word (cout)                     -- cout, cerr = process.communicate
./Lib/test/test_quopri.py:199:14    - Unknown word (scriptdecode)             -- def test_scriptdecode(self):
./Lib/test/test_quopri.py:46:5      - Unknown word (withpythonimplementation) -- def withpythonimplementation(testfunc):
./Lib/test/test_quopri.py:47:9      - Unknown word (newtest)                  -- def newtest(self):
./Lib/test/test_quopri.py:52:13     - Unknown word (oldencode)                -- oldencode = quopri.b2a_qp
./Lib/test/test_quopri.py:53:13     - Unknown word (olddecode)                -- olddecode = quopri.a2b_qp
./Lib/test/test_raise.py:362:14    - Unknown word (noraise)    -- def test_noraise_finally(self):
./Lib/test/test_random.py:1016:14   - Unknown word (zeroinputs)           -- def test_zeroinputs(self):
./Lib/test/test_random.py:1041:32   - Unknown word (sigmasqrd)            -- for variate, args, mu, sigmasqrd in [
./Lib/test/test_random.py:1087:18   - Unknown word (mises)                -- def test_von_mises_range(self):
./Lib/test/test_random.py:165:30    - Unknown word (abcdefghijklmnopqrst) -- self.gen.sample(str('abcdefghijklmnopqrst'), 2)
./Lib/test/test_random.py:176:24    - Unknown word (seqsets)              -- def test_sample_on_seqsets(self):
./Lib/test/test_random.py:21:9      - Unknown word (randomlist) -- def randomlist(self, n):
./Lib/test/test_random.py:27:14     - Unknown word (autoseed)   -- def test_autoseed(self):
./Lib/test/test_random.py:366:9     - Unknown word (getbits)              -- getbits = self.gen.getrandbits
./Lib/test/test_random.py:37:14     - Unknown word (saverestore) -- def test_saverestore(self):
./Lib/test/test_random.py:389:13    - Unknown word (origseq)              -- origseq = [self.gen.random(
./Lib/test/test_random.py:390:13    - Unknown word (newgen)               -- newgen = pickle.loads(state
./Lib/test/test_random.py:391:13    - Unknown word (restoredseq)          -- restoredseq = [newgen.random() for
./Lib/test/test_random.py:417:20    - Unknown word (randv)                -- files = [("randv2_32.pck", 780),
./Lib/test/test_random.py:41:9      - Unknown word (randseq)     -- randseq = self.randomlist(N
./Lib/test/test_random.py:45:14     - Unknown word (seedargs)    -- def test_seedargs(self):
./Lib/test/test_random.py:489:14    - Unknown word (bigrand)              -- def test_bigrand(self):
./Lib/test/test_random.py:508:14    - Unknown word (rangelimits)          -- def test_rangelimits(self):
./Lib/test/test_random.py:513:24    - Unknown word (nonunit)              -- def test_randrange_nonunit_step(self):
./Lib/test/test_random.py:574:17    - Unknown word (bitcount)             -- # check bitcount transition points:
./Lib/test/test_random.py:579:13    - Unknown word (numbits)              -- numbits = i+1
./Lib/test/test_random.py:611:23    - Unknown word (ddfb)                 -- ['0x1.1239ddfb11b7cp-3', '0x1.b3cbb
./Lib/test/test_random.py:617:24    - Unknown word (nofar)                -- self.gen.seed('nofar', version=1)   # hash
./Lib/test/test_random.py:624:29    - Unknown word (fcdp)                 -- ['0x1.0b294cc856fcdp-1', '0x1.2ad22d79e7
./Lib/test/test_random.py:629:29    - Unknown word (dbep)                 -- ['0x1.b0580f98a7dbep-1', '0x1.84129978f9c
./Lib/test/test_random.py:630:19    - Unknown word (aeaa)                 -- '0x1.aeaa51052e978p-2', '0x1.
./Lib/test/test_random.py:667:51    - Unknown word (daea)                 -- 3p-1', '0x1.875174f0daea4p-2',
./Lib/test/test_random.py:716:38    - Unknown word (genrand)              -- printf("%.15f ", genrand_res53());
./Lib/test/test_random.py:999:7     - Unknown word (Lanczos)              -- # Lanczos approximation with g
./Lib/test/test_range.py:312:9     - Unknown word (smallnum)   -- smallnum = 42
./Lib/test/test_range.py:478:14    - Unknown word (strided)    -- def test_strided_limits(self):
./Lib/test/test_range.py:509:49    - Unknown word (rangeiterobject) -- iterators, that use a rangeiterobject internally.
./Lib/test/test_range.py:535:9     - Unknown word (rangeiter)       -- rangeiter_type = type(iter(range
./Lib/test/test_range.py:677:28    - Unknown word (rangeobj)        -- def assert_attrs(self, rangeobj, start, stop, step)
./Lib/test/test_re.py:1082:49   - Unknown word (dgit)                   -- findall(s), list(':[]dgit'))
./Lib/test/test_re.py:1148:9    - Unknown word (oldpat)                 -- oldpat = re.compile('a(?:b
./Lib/test/test_re.py:1151:13   - Unknown word (newpat)                 -- newpat = pickle.loads(pickled
./Lib/test/test_re.py:127:19    - Unknown word (cdehijklmopqsuwxyz) -- for c in 'cdehijklmopqsuwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
./Lib/test/test_re.py:1616:9    - Unknown word (bpat)                   -- bpat = re.compile(b'.')
./Lib/test/test_re.py:1661:17   - Unknown word (sletter)                -- sletter = c.lower()
./Lib/test/test_re.py:1663:17   - Unknown word (bletter)                -- bletter = sletter.encode(enc
./Lib/test/test_re.py:1833:24   - Unknown word (Backreferences)         -- # Issue 16688: Backreferences make case-insensitive
./Lib/test/test_re.py:1854:37   - Unknown word (maxrepeat)              -- repeat_minmax_overflow_maxrepeat(self):
./Lib/test/test_re.py:1916:14   - Unknown word (zerowidth)              -- def test_zerowidth(self):
./Lib/test/test_re.py:1940:29   - Unknown word (submatches)             -- # issue 2537: empty submatches
./Lib/test/test_re.py:1944:30   - Unknown word (xyyzy)                  -- m = r.match("xyyzy")
./Lib/test/test_re.py:2016:25   - Unknown word (racadabra)              -- ['', 'ab', 'racadabra'])
./Lib/test/test_re.py:212:57    - Unknown word (baaaa)              -- 'b', 'aaaaa', 1), 'baaaa')
./Lib/test/test_re.py:226:25    - Unknown word (𝔘𝔫𝔦𝔠𝔬𝔡𝔢)     -- re.compile('(?P<𝔘𝔫𝔦𝔠𝔬𝔡𝔢>x)(?P=𝔘𝔫𝔦𝔠𝔬𝔡�
./Lib/test/test_re.py:2298:26   - Unknown word (spattern)               -- pattern = 'Very %spattern' % ('long ' * 1000)
./Lib/test/test_re.py:2343:29   - Unknown word (ababba)                 -- self.assertEqual(f("ababba"), [0, 0, 1, 2, 0,
./Lib/test/test_re.py:2344:29   - Unknown word (abcabdac)               -- self.assertEqual(f("abcabdac"), [0, 0, 0, 1, 2,
./Lib/test/test_re.py:2346:14   - Unknown word (signedness)             -- def test_signedness(self):
./Lib/test/test_re.py:271:54    - Unknown word (yzxc)               -- pat, r'\g<200>', 'xc8yzxc8y'), 'c8zc8')
./Lib/test/test_re.py:304:55    - Unknown word (xxxyxzx)            -- b*", "x", "xyz"), ('xxxyxzx', 4))
./Lib/test/test_re.py:305:58    - Unknown word (xxxyz)              -- , "x", "xyz", 2), ('xxxyz', 2))
./Lib/test/test_re.py:514:50    - Unknown word (axxb)               -- fullmatch(r"a.*?b", "axxb").span(), (0, 4))
./Lib/test/test_re.py:530:17    - Unknown word (groupref)           -- def test_re_groupref_exists(self):
./Lib/test/test_re.py:670:47    - Unknown word (regs)               -- re.match("(a)", "a").regs, ((0, 1), (0, 1)))
./Lib/test/test_re.py:685:48    - Unknown word (abxd)               -- "abc bcd bc abxd").group(1), "bx")
./Lib/test/test_re.py:71:14     - Unknown word (Qabbbc)     -- s = 'QabbbcR'
./Lib/test/test_re.py:725:19    - Unknown word (ceghijklmopqyz)     -- for c in 'ceghijklmopqyzCEFGHIJKLMNOPQRTVXY'
./Lib/test/test_re.py:725:33    - Unknown word (CEFGHIJKLMNOPQRTVXY) -- c in 'ceghijklmopqyzCEFGHIJKLMNOPQRTVXY':
./Lib/test/test_re.py:728:33    - Unknown word (ABCEFGHIJKLMNOPQRTVXYZ) -- c in 'ceghijklmopqyzABCEFGHIJKLMNOPQRTVXYZ':
./Lib/test/test_re.py:787:59    - Unknown word (perlre)                 -- and different from the perlre behaviour,
./Lib/test/test_re.py:808:18    - Unknown word (codesize)               -- def test_big_codesize(self):
./Lib/test/test_re.py:814:14    - Unknown word (anyall)                 -- def test_anyall(self):
./Lib/test/test_re.py:836:53    - Unknown word (abac)                   -- match(r'(a)b(?=\1)c', 'abac'))
./Lib/test/test_re.py:84:42     - Unknown word (xxxa)       -- assertEqual(re.match('x*', 'xxxa').span(0), (0, 3))
./Lib/test/test_re.py:855:54    - Unknown word (abaa)                   -- match(r'(a)b(?<=\1)a', 'abaa'))
./Lib/test/test_re.py:88:24     - Unknown word (matchobj)   -- def bump_num(self, matchobj):
./Lib/test/test_re.py:911:50    - Unknown word (multicharacter)         -- characters have the same multicharacter uppercase.
./Lib/test/test_regrtest.py:1148:50   - Unknown word (nosuchtest) -- tests(testname, "-m", "nosuchtest", exitcode=0)
./Lib/test/test_regrtest.py:177:42    - Unknown word (ignorefile) -- '--ignorefile', filename])
./Lib/test/test_regrtest.py:371:14    - Unknown word (tmptestdir) -- self.tmptestdir = tempfile.mkdtemp(
./Lib/test/test_regrtest.py:704:9     - Unknown word (cmdargs)    -- cmdargs = ['-m', 'test', '-
./Lib/test/test_regrtest.py:743:35    - Unknown word (uaudio)     -- output = self.run_tests('-uaudio', *test_names)
./Lib/test/test_repl.py:73:26     - Unknown word (kbps)       -- <kbps>0</kbps>
./Lib/test/test_reprlib.py:231:17    - Unknown word (areallylongpackageandmodulenametotestreprtruncation) -- longname = 'areallylongpackageandmodulenametotestreprtruncation'
./Lib/test/test_reprlib.py:235:14    - Unknown word (subpkgname)                                          -- self.subpkgname = os.path.join(self
./Lib/test/test_reprlib.py:31:15     - Unknown word (abcdefghijklmnop) -- eq(r("abcdefghijklmnop"),"'abcdefghijklmnop
./Lib/test/test_reprlib.py:330:9     - Unknown word (ibaz)                                                -- ibaz = baz.baz()
./Lib/test/test_reprlib.py:339:9     - Unknown word (amethod)                                             -- def amethod(self): pass
./Lib/test/test_reprlib.py:347:9     - Unknown word (iqux)                                                -- iqux = qux.aaaaaaaaaaaaaaaaaaaaaaa
./Lib/test/test_reprlib.py:80:11     - Unknown word (Frozensets)       -- # Frozensets give up after 6 as well
./Lib/test/test_resource.py:102:14    - Unknown word (getrusage)  -- def test_getrusage(self):
./Lib/test/test_resource.py:105:9     - Unknown word (usageself)  -- usageself = resource.getrusage
./Lib/test/test_resource.py:106:9     - Unknown word (usagechildren) -- usagechildren = resource.getrusage
./Lib/test/test_resource.py:109:13    - Unknown word (usageboth)     -- usageboth = resource.getrusage
./Lib/test/test_resource.py:120:14    - Unknown word (setrusage)     -- def test_setrusage_refcount(self):
./Lib/test/test_resource.py:136:61    - Unknown word (getpagesize)   -- resource' has no attribute 'getpagesize'
./Lib/test/test_resource.py:149:22    - Unknown word (contants)      -- def test_freebsd_contants(self):
./Lib/test/test_resource.py:154:45    - Unknown word (prlimit)       -- skipUnless(hasattr(resource, 'prlimit'), 'no prlimit')
./Lib/test/test_resource.py:22:20     - Unknown word (ismax)      -- def test_fsize_ismax(self):
./Lib/test/test_resource.py:63:60     - Unknown word (hppa)       -- systems (e.g., Ubuntu on hppa) the flush()
./Lib/test/test_resource.py:85:20     - Unknown word (toobig)     -- def test_fsize_toobig(self):
./Lib/test/test_richcmp.py:102:40    - Unknown word (expres)     -- self, opname, a, b, expres):
./Lib/test/test_richcmp.py:104:13    - Unknown word (realres)    -- realres = op(a, b)
./Lib/test/test_richcmp.py:113:56    - Unknown word (itemwise)   -- results (i.e. Vectors with itemwise
./Lib/test/test_richcmp.py:146:21    - Unknown word (typea)      -- for typea in (int, Number):
./Lib/test/test_richcmp.py:147:25    - Unknown word (typeb)      -- for typeb in (int, Number):
./Lib/test/test_richcmp.py:154:33    - Unknown word (realoutcome) -- realoutcome = op(a, b)
./Lib/test/test_richcmp.py:155:33    - Unknown word (testoutcome) -- testoutcome = op(ta, tb)
./Lib/test/test_richcmp.py:158:9     - Unknown word (checkvalue)  -- def checkvalue(self, opname, a, b,
./Lib/test/test_richcmp.py:193:14    - Unknown word (misbehavin)  -- def test_misbehavin(self):
./Lib/test/test_richcmp.py:194:15    - Unknown word (Misb)        -- class Misb:
./Lib/test/test_richcmp.py:325:14    - Unknown word (badentry)    -- def test_badentry(self):
./Lib/test/test_richcmp.py:340:14    - Unknown word (goodentry)   -- def test_goodentry(self):
./Lib/test/test_richcmp.py:342:22    - Unknown word (listobject)  -- # in Objects/listobject.c::list_richcompare
./Lib/test/test_richcmp.py:98:9      - Unknown word (checkfail)  -- def checkfail(self, error, opname
./Lib/test/test_rlcompleter.py:14:14     - Unknown word (stdcompleter) -- self.stdcompleter = rlcompleter.Completer
./Lib/test/test_rlcompleter.py:39:60     - Unknown word (akaksajadhak) -- stdcompleter.global_matches('akaksajadhak'), [])
./Lib/test/test_rlcompleter.py:55:64     - Unknown word (foospamegg)   -- attr_matches('tuple.foospamegg'), [])
./Lib/test/test_rlcompleter.py:65:55     - Unknown word (Completeme)   -- completer.attr_matches('Completeme.egg'), [])
./Lib/test/test_robotparser.py:136:13    - Unknown word (figtree)     -- User-agent: figtree
./Lib/test/test_robotparser.py:142:14    - Unknown word (ejoe)        -- Disallow: /%7ejoe/index.html
./Lib/test/test_robotparser.py:168:16    - Unknown word (Ejoe)        -- '/%7Ejoe/index.html']
./Lib/test/test_robotparser.py:185:32    - Unknown word (Diasallow)   -- test that Allow and Diasallow works well with each
./Lib/test/test_robotparser.py:187:13    - Unknown word (Googlebot)   -- User-agent: Googlebot
./Lib/test/test_robotparser.py:194:22    - Unknown word (anotherfile) -- bad = ['/folder1/anotherfile.html']
./Lib/test/test_robotparser.py:224:14    - Unknown word (googlebot)   -- agent = 'googlebot'
./Lib/test/test_robotparser.py:371:49    - Unknown word (Nutch)       -- self.parser.can_fetch('Nutch', self.base_url))
./Lib/test/test_robotparser.py:373:67    - Unknown word (webstats)    -- fetch('Nutch', self.url('webstats')))
./Lib/test/test_robotparser.py:49:12     - Unknown word (cyberworld) -- Disallow: /cyberworld/map/ # This is an infinite
./Lib/test/test_robotparser.py:66:3      - Unknown word (Cybermapper) -- # Cybermapper knows where to go.
./Lib/test/test_robotparser.py:67:13     - Unknown word (cybermapper) -- User-agent: cybermapper
./Lib/test/test_runpy.py:795:14    - Unknown word (pymain)     -- def test_pymain_run_file(self):
./Lib/test/test_runpy.py:88:11     - Unknown word (Impls)      -- # Impls are permitted to add
./Lib/test/test_scope.py:112:18    - Unknown word (Freevars)   -- def testMixedFreevarsAndCellvars(self):
./Lib/test/test_scope.py:112:29    - Unknown word (Cellvars)   -- testMixedFreevarsAndCellvars(self):
./Lib/test/test_scope.py:169:19    - Unknown word (Kwonly)     -- def testCellIsKwonlyArg(self):
./Lib/test/test_scope.py:170:23    - Unknown word (Initialisation) -- # Issue 1409: Initialisation of a cell value,
./Lib/test/test_scope.py:196:13    - Unknown word (Unoptimized)    -- def testUnoptimizedNamespaces(self):
./Lib/test/test_scope.py:323:38    - Unknown word (Pedroni)        -- Examples posted by Samuele Pedroni to python-dev on 3/
./Lib/test/test_scope.py:540:13    - Unknown word (adaptgetter)    -- def adaptgetter(name, klass, getter
./Lib/test/test_scope.py:54:38     - Unknown word (exta)       -- adder4(): # XXX add exta level of indirection
./Lib/test/test_scope.py:605:17    - Unknown word (nestedcell)     -- nestedcell_get()
./Lib/test/test_scope.py:646:55    - Unknown word (subscope)       -- global y` is in a nested subscope
./Lib/test/test_script_helper.py:120:52    - Unknown word (pythonhome) -- requires_environment_with_pythonhome(self, mock_check_call
./Lib/test/test_selectors.py:325:9     - Unknown word (bufs)       -- bufs = []
./Lib/test/test_selectors.py:32:17     - Unknown word (caddr)      -- caddr = c.getsockname()
./Lib/test/test_selectors.py:406:14    - Unknown word (alrm)       -- orig_alrm_handler = signal.signal
./Lib/test/test_set.py:114:68    - Unknown word (cbcf)           -- abcba').intersection(C('cbcf'), C('bag')), set('b
./Lib/test/test_set.py:126:13    - Unknown word (larg)           -- for larg in '', 'a', 'ab', 'abc
./Lib/test/test_set.py:126:44    - Unknown word (ababac)         -- 'a', 'ab', 'abc', 'ababac', 'cdc', 'cc', 'efgfe
./Lib/test/test_set.py:128:17    - Unknown word (rarg)           -- for rarg in '', 'a', 'ab', 'abc
./Lib/test/test_set.py:1294:13   - Unknown word (rcase)          -- rcase = TestSubsets.reverse
./Lib/test/test_set.py:1564:23   - Unknown word (alacazam)       -- self.b = set('alacazam')
./Lib/test/test_set.py:1967:37   - Unknown word (Eppstein's)     -- tests (based on David Eppstein's graph recipes =====
./Lib/test/test_set.py:2036:9    - Unknown word (cubefaces)      -- cubefaces = faces(g)
./Lib/test/test_set.py:2041:14   - Unknown word (cuboctahedron)  -- def test_cuboctahedron(self):
./Lib/test/test_set.py:2054:9    - Unknown word (othervertices)  -- othervertices = set(edge for edges
./Lib/test/test_set.py:2057:9    - Unknown word (cubofaces)      -- cubofaces = faces(cuboctahedron
./Lib/test/test_set.py:2058:9    - Unknown word (facesizes)      -- facesizes = collections.defaultdict
./Lib/test/test_set.py:2065:51   - Unknown word (Cuboctahedron)  -- # Cuboctahedron vertices are edges in
./Lib/test/test_set.py:2067:17   - Unknown word (cubevert)       -- for cubevert in edge:
./Lib/test/test_set.py:208:47    - Unknown word (bdcb)           -- ['abcdef', 'bcd', 'bdcb', 'fed', 'fedccba']
./Lib/test/test_set.py:208:62    - Unknown word (fedccba)        -- bcd', 'bdcb', 'fed', 'fedccba'])
./Lib/test/test_set.py:300:14    - Unknown word (badcmp)         -- def test_badcmp(self):
./Lib/test/test_set.py:46:14     - Unknown word (otherword)  -- self.otherword = 'madagascar'
./Lib/test/test_set.py:483:49    - Unknown word (abcda)          -- efgfe', 'ccb', 'ef', 'abcda'):
./Lib/test/test_set.py:48:23     - Unknown word (thetype)    -- self.s = self.thetype(word)
./Lib/test/test_set.py:541:35    - Unknown word (abcdefghih)     -- s = self.thetype('abcdefghih')
./Lib/test/test_set.py:547:51    - Unknown word (cdefghih)       -- assertEqual(s, self.thetype('cdefghih'))
./Lib/test/test_set.py:551:51    - Unknown word (efghih)         -- assertEqual(s, self.thetype('efghih'))
./Lib/test/test_set.py:55:14     - Unknown word (uniquification) -- def test_uniquification(self):
./Lib/test/test_set.py:680:45    - Unknown word (abcdeb)         -- ssertEqual(hash(self.thetype('abcdeb')),
./Lib/test/test_set.py:681:45    - Unknown word (ebecda)         -- hash(self.thetype('ebecda')))
./Lib/test/test_set.py:696:24    - Unknown word (dictkey)        -- def test_frozen_as_dictkey(self):
./Lib/test/test_set.py:707:27    - Unknown word (abcdcda)        -- f = self.thetype('abcdcda')
./Lib/test/test_set.py:714:9     - Unknown word (hashvalues)     -- hashvalues = set()
./Lib/test/test_set.py:715:9     - Unknown word (addhashvalue)   -- addhashvalue = hashvalues.add
./Lib/test/test_set.py:716:9     - Unknown word (elemmasks)      -- elemmasks = [(i+1, 1<<i) for i
./Lib/test/test_set.py:82:61     - Unknown word (efgfe)          -- thetype('abcba').union(C('efgfe')), set('abcefg'))
./Lib/test/test_set.py:82:76     - Unknown word (abcefg)         -- union(C('efgfe')), set('abcefg'))
./Lib/test/test_set.py:84:73     - Unknown word (abcef)          -- union(C('ef')), set('abcef'))
./Lib/test/test_set.py:866:9     - Unknown word (setiter)        -- setiter = iter(self.set)
./Lib/test/test_set.py:985:5     - Unknown word (baditer)        -- def baditer():
./Lib/test/test_set.py:989:5     - Unknown word (gooditer)       -- def gooditer():
./Lib/test/test_setcomps.py:49:43     - Unknown word (setcomps)   -- error's are raised for setcomps used as lvalues
./Lib/test/test_setcomps.py:64:13     - Unknown word (srange)     -- >>> def srange(n):
./Lib/test/test_shelve.py:12:7      - Unknown word (byteskeydict) -- class byteskeydict(MutableMapping):
./Lib/test/test_shelve.py:45:11     - Unknown word (shelftemp)    -- fn = "shelftemp.db"
./Lib/test/test_shlex.py:117:10    - Unknown word (foox)              -- \"foo\x|"foox|
./Lib/test/test_shlex.py:127:32    - Unknown word (x\'fo'obar)        -- "\'"fo'obar"|foo\ x\x\'fo'obar|
./Lib/test/test_shlex.py:15:22     - Unknown word (fasel)      -- foo bar    bla     fasel|foo|bar|bla|fasel|
./Lib/test/test_shlex.py:194:29    - Unknown word (secho)             -- 'echo hi%secho bye' % delimiter]
./Lib/test/test_shlex.py:32:7      - Unknown word (foo'bar'bar'fasel) -- blurb foo'bar'bar'fasel' baz|blurb|foo'bar'bar
./Lib/test/test_shlex.py:334:9     - Unknown word (safeunquoted)      -- safeunquoted = string.ascii_letters
./Lib/test/test_shlex.py:366:17    - Unknown word (resplit)           -- resplit = shlex.split(joined
./Lib/test/test_shlex.py:45:14     - Unknown word (dfadf)             -- "foo\\ bar\" dfadf"|"foo\\ bar\"|dfadf
./Lib/test/test_shlex.py:52:16     - Unknown word (df'a)              -- "foo\\\x bar\" df'a\ 'df'|"foo\\\x bar\
./Lib/test/test_shlex.py:64:16     - Unknown word (fo'obar)           -- "foo\ x\x\\"\'"fo'obar"|"foo\ x\x\\"|\|'"fo
./Lib/test/test_shlex.py:64:46     - Unknown word (obar)              -- foo\ x\x\\"|\|'"fo'|obar"|
./Lib/test/test_shlex.py:71:1      - Unknown word (áéíóú)             -- áéíóú|á|é|í|ó|ú|
./Lib/test/test_shlex.py:94:36     - Unknown word (foobarbarfasel)    -- bar"fasel" baz|blurb|foobarbarfasel|baz|
./Lib/test/test_shlex.py:9:39      - Unknown word (shellwords) -- test data set was from shellwords, by Hartmut Goebel.
./Lib/test/test_shlex.py:9:54      - Unknown word (Hartmut)    -- from shellwords, by Hartmut Goebel.
./Lib/test/test_shlex.py:9:62      - Unknown word (Goebel)     -- shellwords, by Hartmut Goebel.
./Lib/test/test_shutil.py:1077:42   - Unknown word (mypipe)      -- os.path.join(subdir, "mypipe")
./Lib/test/test_shutil.py:1389:35   - Unknown word (kjhkjhkjg)   -- owner='kjhkjhkjg', group='oihohoh')
./Lib/test/test_shutil.py:1389:54   - Unknown word (oihohoh)     -- 'kjhkjhkjg', group='oihohoh')
./Lib/test/test_shutil.py:153:43    - Unknown word (maxdata)    -- the last line in the maxdata value
./Lib/test/test_shutil.py:1658:42   - Unknown word (somevendor)  -- path.join(src_dir, "somevendor", "1.0")
./Lib/test/test_shutil.py:167:14    - Unknown word (tempdirs)   -- self.tempdirs = []
./Lib/test/test_shutil.py:1822:14   - Unknown word (filexyz)     -- temp_filexyz = tempfile.NamedTemporaryFile
./Lib/test/test_shutil.py:190:37    - Unknown word (killme)     -- os.path.join(tmp, 'killme')
./Lib/test/test_shutil.py:2266:9    - Unknown word (zerocopy)    -- def zerocopy_fun(self, *args, **kwargs
./Lib/test/test_shutil.py:290:30    - Unknown word (tstfile)    -- write_file((tmpdir, "tstfile"), "")
./Lib/test/test_shutil.py:586:9     - Unknown word (srcro)      -- srcro = os.path.join(tmp_dir
./Lib/test/test_shutil.py:593:9     - Unknown word (dstro)      -- dstro = os.path.join(tmp_dir
./Lib/test/test_shutil.py:898:9     - Unknown word (invokations) -- invokations = []
./Lib/test/test_shutil.py:970:20    - Unknown word (cpfun)       -- def custom_cpfun(a, b):
./Lib/test/test_signal.py:1189:9    - Unknown word (setsig)                -- def setsig(self, signum, handler
./Lib/test/test_signal.py:1221:9    - Unknown word (reso)                  -- reso = self.measure_itimer
./Lib/test/test_signal.py:1406:7    - Unknown word (Pidfd)                 -- class PidfdSignalTest(unittest.TestCase
./Lib/test/test_signal.py:1416:52   - Unknown word (pidfds)                -- kernel does not support pidfds")
./Lib/test/test_signal.py:1418:57   - Unknown word (pidfs)                 -- enough privileges to use pidfs")
./Lib/test/test_signal.py:1422:50   - Unknown word (siginfo)               -- ssertRaisesRegex(TypeError, "^siginfo must be None$"):
./Lib/test/test_signal.py:163:12    - Unknown word (eryksun)               -- # @eryksun on https://github.com
./Lib/test/test_signal.py:59:46     - Unknown word (strsignal)  -- sertRaises(ValueError, signal.strsignal, 4242)
./Lib/test/test_signal.py:645:7     - Unknown word (Siginterrupt)          -- class SiginterruptTest(unittest.TestCase
./Lib/test/test_signal.py:647:9     - Unknown word (readpipe)              -- def readpipe_interrupted(self, interrupt
./Lib/test/test_signal.py:734:39    - Unknown word (getitimer)             -- skipUnless(hasattr(signal, 'getitimer') and hasattr(signal
./Lib/test/test_signal.py:734:72    - Unknown word (setitimer)             -- and hasattr(signal, 'setitimer'),
./Lib/test/test_signal.py:736:7     - Unknown word (Itimer)                -- class ItimerTest(unittest.TestCase
./Lib/test/test_signal.py:738:14    - Unknown word (hndl)                  -- self.hndl_called = False
./Lib/test/test_signal.py:740:14    - Unknown word (itimer)                -- self.itimer = None
./Lib/test/test_signal.py:752:13    - Unknown word (vtalrm)                -- def sig_vtalrm(self, *args):
./Lib/test/test_signal.py:85:41     - Unknown word (signalinterproctester) -- path.join(dirname, 'signalinterproctester.py')
./Lib/test/test_signal.py:971:43    - Unknown word (sigwaitinfo)           -- skipUnless(hasattr(signal, 'sigwaitinfo'),
./Lib/test/test_signal.py:978:24    - Unknown word (signo)                 -- if info.si_signo != signum:
./Lib/test/test_signal.py:982:43    - Unknown word (sigtimedwait)          -- skipUnless(hasattr(signal, 'sigtimedwait'),
./Lib/test/test_smtpd.py:28:25     - Unknown word (Okish)      -- return '250 Okish'
./Lib/test/test_smtpd.py:30:42     - Unknown word (okish)      -- 50 SMTPUTF8 message okish'
./Lib/test/test_smtpd.py:943:26    - Unknown word (naï)       -- 'MAIL from: <naïve@example.com> BODY
./Lib/test/test_smtpd.py:967:32    - Unknown word (examplé)    -- 'MAIL From: naïve@examplé BODY=8BITMIME SMTPUTF
./Lib/test/test_smtpd.py:969:34    - Unknown word (späm)       -- write_line('RCPT To:späm@examplé'.encode('utf
./Lib/test/test_socket.py:1009:9    - Unknown word (fqhn)       -- fqhn = socket.getfqdn(ip
./Lib/test/test_socket.py:1037:43   - Unknown word (sethostname) -- skipUnless(hasattr(socket, 'sethostname'), "test needs socket
./Lib/test/test_socket.py:1040:9    - Unknown word (oldhn)       -- oldhn = socket.gethostname
./Lib/test/test_socket.py:1057:46   - Unknown word (nameindex)   -- hasattr(socket, 'if_nameindex'),
./Lib/test/test_socket.py:1066:32   - Unknown word (nametoindex) -- _index = socket.if_nametoindex(name)
./Lib/test/test_socket.py:1069:31   - Unknown word (indextoname) -- _name = socket.if_indextoname(index)
./Lib/test/test_socket.py:1143:16   - Unknown word (Serv)        -- def testGetServBy(self):
./Lib/test/test_socket.py:1152:37   - Unknown word (qotd)        -- services = ('daytime', 'qotd', 'domain')
./Lib/test/test_socket.py:115:18    - Unknown word (qipcrtr)    -- def _have_socket_qipcrtr():
./Lib/test/test_socket.py:1171:13   - Unknown word (udpport)     -- udpport = socket.getservbyname
./Lib/test/test_socket.py:1177:33   - Unknown word (getservbyport) -- Issue #26936: Android getservbyport() is broken.
./Lib/test/test_socket.py:1214:28   - Unknown word (fourbytes)     -- def testIPv4_inet_aton_fourbytes(self):
./Lib/test/test_socket.py:1280:34   - Unknown word (afeb)          -- f('45ef:76cb:1a:56ef:afeb:bac:1924:aeae')
./Lib/test/test_socket.py:1280:48   - Unknown word (aeae)          -- a:56ef:afeb:bac:1924:aeae')
./Lib/test/test_socket.py:1317:48   - Unknown word (ntop)          -- hasattr(socket, 'inet_ntop'),
./Lib/test/test_socket.py:1444:14   - Unknown word (getsockaddrarg) -- def test_getsockaddrarg(self):
./Lib/test/test_socket.py:1465:33   - Unknown word (ioctls)         -- RUSTPYTHON, windows ioctls
./Lib/test/test_socket.py:1588:19   - Unknown word (испытание)      -- domain = 'испытание.pythontest.net'
./Lib/test/test_socket.py:1736:14   - Unknown word (flowinfo)       -- def test_flowinfo(self):
./Lib/test/test_socket.py:1756:31   - Unknown word (scopeid)        -- test_getaddrinfo_ipv6_scopeid_symbolic(self):
./Lib/test/test_socket.py:1758:10   - Unknown word (ifindex)        -- (ifindex, test_interface) = socket
./Lib/test/test_socket.py:1793:9    - Unknown word (nameinfo)       -- nameinfo = socket.getnameinfo
./Lib/test/test_socket.py:1877:46   - Unknown word (stype)          -- fileno(self, s, family, stype):
./Lib/test/test_socket.py:196:13    - Unknown word (UDPLITE)    -- class SocketUDPLITETest(SocketUDPTest):
./Lib/test/test_socket.py:2146:7    - Unknown word (ISOTP)          -- class ISOTPTest(unittest.TestCase
./Lib/test/test_socket.py:223:40    - Unknown word (vcan)       -- to run this test, a `vcan0` CAN interface can
./Lib/test/test_socket.py:2337:12   - Unknown word (QIPCRTR)        -- class BasicQIPCRTRTest(unittest.TestCase
./Lib/test/test_socket.py:235:9     - Unknown word (canid)      -- canid_t can_id;  /* 32 bit
./Lib/test/test_socket.py:2431:19   - Unknown word (Rfcomm)         -- def testCreateRfcommSocket(self):
./Lib/test/test_socket.py:250:24    - Unknown word (ival)       -- struct timeval ival1, ival2;
./Lib/test/test_socket.py:2640:36   - Unknown word (Sendrecvmsg)    -- vmsgGenericTests inherit from SendrecvmsgBase and expect to be
./Lib/test/test_socket.py:2649:14   - Unknown word (Dgram)          -- # SendrecvmsgDgramBase and SendrecvmsgConnectedB
./Lib/test/test_socket.py:2725:43   - Unknown word (checkset)       -- self, flags, eor=None, checkset=0, checkunset=0, ignore
./Lib/test/test_socket.py:2725:55   - Unknown word (checkunset)     -- eor=None, checkset=0, checkunset=0, ignore=0):
./Lib/test/test_socket.py:2753:9    - Unknown word (defaultset)     -- defaultset = self.msg_flags_common
./Lib/test/test_socket.py:2754:9    - Unknown word (defaultunset)   -- defaultunset = self.msg_flags_common
./Lib/test/test_socket.py:2770:9    - Unknown word (inboth)         -- inboth = checkset & checkunset
./Lib/test/test_socket.py:2808:18   - Unknown word (Connectionless) -- class SendrecvmsgConnectionlessBase(SendrecvmsgBase
./Lib/test/test_socket.py:2809:31   - Unknown word (connectionless) -- Base class for tests on connectionless-mode sockets.  Users
./Lib/test/test_socket.py:288:7     - Unknown word (Threadable) -- class ThreadableTest:
./Lib/test/test_socket.py:2921:23   - Unknown word (Cmsg)           -- def testSendmsgBadCmsg(self):
./Lib/test/test_socket.py:3353:31   - Unknown word (socketmodule)   -- Match the definition in socketmodule.c
./Lib/test/test_socket.py:3357:9    - Unknown word (socklen)        -- socklen_t_limit = 0x7fffffff
./Lib/test/test_socket.py:3362:13   - Unknown word (CMSG)           -- def testCMSG_LEN(self):
./Lib/test/test_socket.py:3368:18   - Unknown word (cmsghdr)        -- # struct cmsghdr has at least three members
./Lib/test/test_socket.py:3413:5    - Unknown word (badfd)          -- badfd = -0x5555
./Lib/test/test_socket.py:3459:31   - Unknown word (numfds)         -- checkRecvmsgFDs(self, numfds, result, maxcmsgs=1
./Lib/test/test_socket.py:3459:47   - Unknown word (maxcmsgs)       -- self, numfds, result, maxcmsgs=1, ignoreflags=0):
./Lib/test/test_socket.py:3459:59   - Unknown word (ignoreflags)    -- result, maxcmsgs=1, ignoreflags=0):
./Lib/test/test_socket.py:3717:35   - Unknown word (ancbuf)         -- checkTruncatedArray(self, ancbuf, maxdata, mindata=0
./Lib/test/test_socket.py:3717:52   - Unknown word (mindata)        -- self, ancbuf, maxdata, mindata=0):
./Lib/test/test_socket.py:3795:29   - Unknown word (ancbufsize)     -- checkHopLimit(self, ancbufsize, maxhop=255, ignoreflags
./Lib/test/test_socket.py:3795:41   - Unknown word (maxhop)         -- eckHopLimit(self, ancbufsize, maxhop=255, ignoreflags=0)
./Lib/test/test_socket.py:3887:9    - Unknown word (ancmap)         -- ancmap = self.ancillaryMapping
./Lib/test/test_socket.py:3889:9    - Unknown word (tcdata)         -- tcdata = ancmap[(socket.IPPROTO
./Lib/test/test_socket.py:3896:9    - Unknown word (hldata)         -- hldata = ancmap[(socket.IPPROTO
./Lib/test/test_socket.py:42:16     - Unknown word (Gilfix)     -- MSG = 'Michael Gilfix was here\u1234\r\n'
./Lib/test/test_socket.py:4646:31   - Unknown word (getblocking)    -- self.assertEqual(sock.getblocking(), blocking)
./Lib/test/test_socket.py:492:15    - Unknown word (VSOCK)      -- class ThreadedVSOCKSocketStreamTest(unittest
./Lib/test/test_socket.py:504:25    - Unknown word (connaddr)   -- self.conn, self.connaddr = self.serv.accept(
./Lib/test/test_socket.py:5249:21   - Unknown word (Nonamed)        -- testTimeoutValueNonamed = _justAccept
./Lib/test/test_socket.py:5402:26   - Unknown word (invalidfd)      -- def test_setblocking_invalidfd(self):
./Lib/test/test_socket.py:5457:13   - Unknown word (Autobind)       -- def testAutobind(self):
./Lib/test/test_socket.py:5523:13   - Unknown word (Surrogateescape) -- def testSurrogateescapeBind(self):
./Lib/test/test_socket.py:5532:13   - Unknown word (Unencodable)     -- def testUnencodableAddr(self):
./Lib/test/test_socket.py:5635:7    - Unknown word (Tipc)            -- def isTipcAvailable():
./Lib/test/test_socket.py:5651:33   - Unknown word (tipc)            -- if line.startswith("tipc "):
./Lib/test/test_socket.py:5657:7    - Unknown word (TIPC)            -- class TIPCTest(unittest.TestCase
./Lib/test/test_socket.py:5665:9    - Unknown word (srvaddr)         -- srvaddr = (socket.TIPC_ADDR
./Lib/test/test_socket.py:5669:9    - Unknown word (sendaddr)        -- sendaddr = (socket.TIPC_ADDR
./Lib/test/test_socket.py:5673:14   - Unknown word (recvaddr)        -- msg, recvaddr = srv.recvfrom(1024
./Lib/test/test_socket.py:5708:14   - Unknown word (cliaddr)         -- self.cliaddr = self.cli.getsockname
./Lib/test/test_socket.py:5770:19   - Unknown word (CLOEXEC)         -- def test_SOCK_CLOEXEC(self):
./Lib/test/test_socket.py:5835:7    - Unknown word (Nonblock)        -- class NonblockConstantTest(unittest
./Lib/test/test_socket.py:5864:19   - Unknown word (NONBLOCK)        -- def test_SOCK_NONBLOCK(self):
./Lib/test/test_socket.py:58:25     - Unknown word (vsock)      -- with open("/dev/vsock", "rb") as f:
./Lib/test/test_socket.py:5906:9    - Unknown word (sdata)           -- sdata = q.get()
./Lib/test/test_socket.py:6334:9    - Unknown word (msglen)          -- msglen = len(msg)
./Lib/test/test_socket.py:6335:31   - Unknown word (skcipher)        -- with self.create_alg('skcipher', 'cbc(aes)') as algo
./Lib/test/test_socket.py:6339:28   - Unknown word (afalg)           -- op.sendmsg_afalg(op=socket.ALG_OP_ENCRYPT
./Lib/test/test_socket.py:6380:9    - Unknown word (taglen)          -- taglen = len(expected_tag)
./Lib/test/test_socket.py:6381:9    - Unknown word (assoclen)        -- assoclen = len(assoc)
./Lib/test/test_socket.py:6437:14   - Unknown word (drbg)            -- def test_drbg_pr_sha256(self):
./Lib/test/test_socket.py:6474:11   - Unknown word (salg)            -- # salg_type[14]
./Lib/test/test_socket.py:6488:14   - Unknown word (OSTCP)           -- class TestMacOSTCPFlags(unittest.TestCase
./Lib/test/test_socket.py:736:7     - Unknown word (SCTP)       -- class SCTPStreamBase(InetTestBase
./Lib/test/test_socket.py:75:22     - Unknown word (isotp)      -- def _have_socket_can_isotp():
./Lib/test/test_socket.py:775:9     - Unknown word (skipdec)    -- def skipdec(obj):
./Lib/test/test_socket.py:780:9     - Unknown word (noskipdec)  -- def noskipdec(obj):
./Lib/test/test_socket.py:852:14    - Unknown word (csocket)    -- def test_csocket_repr(self):
./Lib/test/test_socketserver.py:104:33    - Unknown word (svrcls)     -- make_server(self, addr, svrcls, hdlrbase):
./Lib/test/test_socketserver.py:104:41    - Unknown word (hdlrbase)   -- self, addr, svrcls, hdlrbase):
./Lib/test/test_socketserver.py:93:9      - Unknown word (pickaddr)   -- def pickaddr(self, proto):
./Lib/test/test_sort.py:155:9     - Unknown word (memorywaster) -- memorywaster = []
./Lib/test/test_sort.py:172:23    - Unknown word (Undecorate)   -- class TestDecorateSortUndecorate(unittest.TestCase):
./Lib/test/test_sort.py:180:13    - Unknown word (xlower)       -- xlower, ylower = x.lower()
./Lib/test/test_sort.py:180:21    - Unknown word (ylower)       -- xlower, ylower = x.lower(), y.lower
./Lib/test/test_sort.py:274:8     - Unknown word (richcompares) -- ## richcompares.
./Lib/test/test_sort.py:314:27    - Unknown word (ppperry)      -- # This test is by ppperry. It ensures that unsafe
./Lib/test/test_sort.py:43:13     - Unknown word (Stressfully) -- def testStressfully(self):
./Lib/test/test_sort.py:7:1       - Unknown word (nerrors)    -- nerrors = 0
./Lib/test/test_stat.py:15:5      - Unknown word (statmod)    -- statmod = None
./Lib/test/test_stat.py:160:40    - Unknown word (drwx)       -- assertEqual(modestr, 'drwx------')
./Lib/test/test_stat.py:187:36    - Unknown word (prwx)       -- assertEqual(modestr, 'prwx------')
./Lib/test/test_stat.py:197:13    - Unknown word (blockdev)   -- for blockdev in ("/dev/sda", "/dev
./Lib/test/test_stat.py:214:13    - Unknown word (modvalue)   -- modvalue = getattr(self.statmod
./Lib/test/test_stat.py:96:9      - Unknown word (modestr)    -- modestr = self.statmod.filemode
./Lib/test/test_statistics.py:1042:11   - Unknown word (Lteq)            -- class FindLteqTest(unittest.TestCase
./Lib/test/test_statistics.py:1065:11   - Unknown word (Rteq)            -- class FindRteqTest(unittest.TestCase
./Lib/test/test_statistics.py:1350:22   - Unknown word (extendedcontext) -- def test_decimal_extendedcontext_mismatched_infs_to_nan
./Lib/test/test_statistics.py:1357:22   - Unknown word (basiccontext)    -- def test_decimal_basiccontext_mismatched_infs_to_nan
./Lib/test/test_statistics.py:1865:17   - Unknown word (abcbdb)          -- data = 'abcbdb'
./Lib/test/test_statistics.py:1991:22   - Unknown word (Geremy)          -- # (Thanks to Geremy Condra.)
./Lib/test/test_statistics.py:1991:29   - Unknown word (Condra)          -- # (Thanks to Geremy Condra.)
./Lib/test/test_statistics.py:2415:11   - Unknown word (Bivariate)       -- class TestBivariateStatistics(unittest.TestCase
./Lib/test/test_statistics.py:2617:9    - Unknown word (cdfs)            -- cdfs = [X.cdf(x) for x in
./Lib/test/test_statistics.py:2619:18   - Unknown word (montonic)        -- # Verify montonic
./Lib/test/test_statistics.py:2725:31   - Unknown word (Imman)           -- Match examples from Imman and Bradley
./Lib/test/test_statistics.py:2879:15   - Unknown word (Lognormal)       -- class LognormalDist:
./Lib/test/test_statistics.py:602:9     - Unknown word (nzero)      -- nzero = math.copysign(0.0
./Lib/test/test_statistics.py:60:5      - Unknown word (aexp)       -- aexp = a.as_tuple()[2]
./Lib/test/test_statistics.py:61:5      - Unknown word (bexp)       -- bexp = b.as_tuple()[2]
./Lib/test/test_statistics.py:639:14    - Unknown word (numerictestcase) -- def test_numerictestcase_is_testcase(self):
./Lib/test/test_strftime.py:133:9     - Unknown word (nowsecs)    -- nowsecs = str(int(now))[:-1
./Lib/test/test_strftime.py:14:5      - Unknown word (fixasctime) -- def fixasctime(s):
./Lib/test/test_strftime.py:156:50    - Unknown word (fieldwidth) -- century rendered using fieldwidth'),
./Lib/test/test_strftime.py:19:21     - Unknown word (ampm)       -- def escapestr(text, ampm):
./Lib/test/test_strftime.py:19:5      - Unknown word (escapestr)  -- def escapestr(text, ampm):
./Lib/test/test_strftime.py:70:14     - Unknown word (strftest)   -- self.strftest1(now)
./Lib/test/test_string.py:256:14    - Unknown word (tupleargs)  -- def test_tupleargs(self):
./Lib/test/test_string.py:351:17    - Unknown word (badname)    -- (?P<badname>.*)
./Lib/test/test_string.py:372:9     - Unknown word (tmpl)       -- tmpl = 'PyCon in $@@location
./Lib/test/test_string.py:417:25    - Unknown word (xffm)       -- d = dict(who='t\xffm', what='f\xfe\fed')
./Lib/test/test_stringprep.py:54:39     - Unknown word (ufff)       -- assertTrue(in_table_c6("\ufff9"))
./Lib/test/test_strtod.py:213:14    - Unknown word (bigcomp)    -- def test_bigcomp(self):
./Lib/test/test_strtod.py:214:13    - Unknown word (ndigs)      -- for ndigs in 5, 10, 14, 15, 1
./Lib/test/test_strtod.py:344:43    - Unknown word (quorem)     -- oversized quotient in quorem' message.
./Lib/test/test_strtod.py:432:35    - Unknown word (Regan)      -- Value found by Rick Regan that gives a result
./Lib/test/test_strtod.py:49:57     - Unknown word (binade)     -- lies in a different binade from a/b
./Lib/test/test_strtod.py:74:5      - Unknown word (hexdigs)    -- hexdigs = 1 + (mant_dig-2)/
./Lib/test/test_strtod.py:86:7      - Unknown word (Strtod)     -- class StrtodTests(unittest.TestCase
./Lib/test/test_struct.py:186:22    - Unknown word (bitsize)             -- self.bitsize = self.bytesize * 8
./Lib/test/test_struct.py:18:1      - Unknown word (byteorders) -- byteorders = '', '@', '=', '<'
./Lib/test/test_struct.py:341:36    - Unknown word (expectedback)        -- code, input, expected, expectedback in [
./Lib/test/test_struct.py:373:13    - Unknown word (bigpacked)           -- bigpacked = struct.pack(">f",
./Lib/test/test_struct.py:37:14     - Unknown word (isbigendian) -- def test_isbigendian(self):
./Lib/test/test_struct.py:46:16     - Unknown word (cbxxxxxxhhhhiillffd) -- fmt = 'cbxxxxxxhhhhiillffd?'
./Lib/test/test_struct.py:528:9     - Unknown word (hugecount)           -- hugecount = '{}b'.format(sys.maxsize
./Lib/test/test_struct.py:560:52    - Unknown word (reinitializing)      -- was a memory leak when reinitializing a
./Lib/test/test_struct.py:568:9     - Unknown word (totalsize)           -- totalsize = support.calcobjsize
./Lib/test/test_struct.py:569:37    - Unknown word (formatcode)          -- size taken up by the 'formatcode' dynamic array
./Lib/test/test_struct.py:577:31    - Unknown word (Lfdsp)               -- self.check_sizeof('BHILfdspP', 9)
./Lib/test/test_struct.py:646:33    - Unknown word (decrefed)            -- the Struct object was decrefed twice and the reference
./Lib/test/test_struct.py:727:29    - Unknown word (ibcp)                -- s = struct.Struct('>ibcp')
./Lib/test/test_struct.py:72:29     - Unknown word (xcbhilfd)            -- for format in ('xcbhilfd?', 'xcBHILfd?'):
./Lib/test/test_struct.py:845:46    - Unknown word (Underflows)          -- \x00', 2.0**-25), # Underflows to zero (nearest even
./Lib/test/test_structseq.py:102:36    - Unknown word (structseqs) -- Devious code could crash structseqs' constructors
./Lib/test/test_structseq.py:98:14     - Unknown word (eviltuple)  -- def test_eviltuple(self):
./Lib/test/test_subclassinit.py:221:45    - Unknown word (otherarg)   -- MyClass(metaclass=MyMeta, otherarg=1):
./Lib/test/test_subprocess.py:104:62    - Unknown word (filehandles) -- cleanup of subprocess.PIPE filehandles when
./Lib/test/test_subprocess.py:1104:44   - Unknown word (eline)                -- assertTrue(stderr.startswith("eline2\neline6\neline7\n"
./Lib/test/test_subprocess.py:1104:51   - Unknown word (neline)               -- stderr.startswith("eline2\neline6\neline7\n"))
./Lib/test/test_subprocess.py:1442:19   - Unknown word (ifname)               -- ifhandle, ifname = tempfile.mkstemp(
./Lib/test/test_subprocess.py:1442:9    - Unknown word (ifhandle)             -- ifhandle, ifname = tempfile.mkstemp
./Lib/test/test_subprocess.py:1443:9    - Unknown word (ofhandle)             -- ofhandle, ofname = tempfile.mkstemp
./Lib/test/test_subprocess.py:1444:19   - Unknown word (efname)               -- efhandle, efname = tempfile.mkstemp(
./Lib/test/test_subprocess.py:1444:9    - Unknown word (efhandle)             -- efhandle, efname = tempfile.mkstemp
./Lib/test/test_subprocess.py:1513:26   - Unknown word (eintr)                -- def test_communicate_eintr(self):
./Lib/test/test_subprocess.py:1564:20   - Unknown word (getitems)             -- def test_class_getitems(self):
./Lib/test/test_subprocess.py:1766:34   - Unknown word (nogroup)              -- group in ('staff', 'nogroup', 'grp', 'nobody',
./Lib/test/test_subprocess.py:1766:62   - Unknown word (nfsnobody)            -- , 'grp', 'nobody', 'nfsnobody'):
./Lib/test/test_subprocess.py:1788:65   - Unknown word (perror)               -- errno value or the OS perror()
./Lib/test/test_subprocess.py:2200:17   - Unknown word (devzero)              -- devzero_fds = [os.open("/dev
./Lib/test/test_subprocess.py:2737:9    - Unknown word (envb)                 -- envb = os.environb.copy(
./Lib/test/test_subprocess.py:2743:63   - Unknown word (subprocessdata)       -- reader.py", subdir="subprocessdata")
./Lib/test/test_subprocess.py:2766:9    - Unknown word (qcat)                 -- qcat = support.findfile(
./Lib/test/test_subprocess.py:2767:9    - Unknown word (qgrep)                -- qgrep = support.findfile(
./Lib/test/test_subprocess.py:2769:9    - Unknown word (subdata)              -- subdata = b'zxcvbn'
./Lib/test/test_subprocess.py:2798:9    - Unknown word (readfiles)            -- readfiles, ignored1, ignored2
./Lib/test/test_subprocess.py:2857:32   - Unknown word (fdescfs)              -- "Requires fdescfs mounted on /dev/fd on
./Lib/test/test_subprocess.py:2859:61   - Unknown word (valgrind)             -- fixed (may fail under valgrind)."""
./Lib/test/test_subprocess.py:2866:55   - Unknown word (aftr)                 -- lowers its RLIMIT_NOFILE aftr setting up
./Lib/test/test_subprocess.py:2867:59   - Unknown word (rlimit)               -- above the new lower rlimit.
./Lib/test/test_subprocess.py:2900:9    - Unknown word (rlim)                 -- rlim_cur, rlim_max = resource
./Lib/test/test_subprocess.py:3001:46   - Unknown word (redirections)         -- if they are used in redirections.
./Lib/test/test_subprocess.py:3002:23   - Unknown word (izbyshev)             -- # Contributed by @izbyshev.
./Lib/test/test_subprocess.py:3047:24   - Unknown word (sigchild)             -- def test_wait_when_sigchild_ignored(self):
./Lib/test/test_subprocess.py:3512:28   - Unknown word (physalis)             -- newenv["FRUIT"] = "physalis"
./Lib/test/test_subprocess.py:3622:47   - Unknown word (popener)              -- yboardinterrupt_no_kill(self, popener, mock__communicate,
./Lib/test/test_subprocess.py:3768:14   - Unknown word (noshell)              -- def test_noshell_string_with_spaces(self
./Lib/test/test_subprocess.py:389:72    - Unknown word (memb)        -- doesn't expand Tru64 {memb}
./Lib/test/test_subprocess.py:458:24    - Unknown word (somethingyoudonthave) -- doesntexist = "somethingyoudonthave"
./Lib/test/test_subprocess.py:458:9     - Unknown word (doesntexist) -- doesntexist = "somethingyoudonthave
./Lib/test/test_subprocess.py:513:20    - Unknown word (filedes)              -- def test_stdin_filedes(self):
./Lib/test/test_subprocess.py:694:14    - Unknown word (pipesizes)            -- def test_pipesizes(self):
./Lib/test/test_super.py:123:24    - Unknown word (instancemethod) -- def test___class___instancemethod(self):
./Lib/test/test_support.py:530:16    - Unknown word (Wignore)    -- ['-Wignore'],
./Lib/test/test_support.py:597:39    - Unknown word (filetests)  -- support.set_match_tests(['filetests'], None)
./Lib/test/test_support.py:602:53    - Unknown word (metacharacter) -- containing '.' and a '*' metacharacter
./Lib/test/test_support.py:699:7     - Unknown word (umaks)         -- # umaks
./Lib/test/test_support.py:87:9      - Unknown word (subdirpath) -- subdirpath = os.path.join(dirpath
./Lib/test/test_symtable.py:221:13    - Unknown word (checkfilename) -- def checkfilename(brokencode, offset)
./Lib/test/test_symtable.py:221:27    - Unknown word (brokencode)    -- def checkfilename(brokencode, offset):
./Lib/test/test_syntax.py:1073:14   - Unknown word (Blech)       -- >>> class Blech(A):
./Lib/test/test_syntax.py:1293:9    - Unknown word (errtest)     -- errtest is a regular expression
./Lib/test/test_syntax.py:1470:31   - Unknown word (linecont)    -- test_empty_line_after_linecont(self):
./Lib/test/test_syntax.py:1551:29   - Unknown word (nfgdfgf)     -- self._check_error('\nfgdfgf\n1,\\#\n2\n',
./Lib/test/test_syntax.py:294:44    - Unknown word (spezialiced) -- missing commas or other spezialiced errors
./Lib/test/test_sys.py:1170:14   - Unknown word (longdigit)                     -- self.longdigit = sys.int_info.sizeof
./Lib/test/test_sys.py:1172:17   - Unknown word (headsize)                      -- self.gc_headsize = _testinternalcapi
./Lib/test/test_sys.py:1221:14   - Unknown word (objecttypes)                   -- def test_objecttypes(self):
./Lib/test/test_sys.py:1280:9    - Unknown word (longdict)                      -- longdict = {1:1, 2:2, 3:3, 4
./Lib/test/test_sys.py:1282:22   - Unknown word (keyview)                       -- # dictionary-keyview
./Lib/test/test_sys.py:1284:22   - Unknown word (valueview)                     -- # dictionary-valueview
./Lib/test/test_sys.py:1286:22   - Unknown word (itemview)                      -- # dictionary-itemview
./Lib/test/test_sys.py:1319:15   - Unknown word (floatinfo)                     -- # sys.floatinfo
./Lib/test/test_sys.py:1325:9    - Unknown word (ncells)                        -- ncells = len(x.f_code.co_cellvars
./Lib/test/test_sys.py:1326:9    - Unknown word (nfrees)                        -- nfrees = len(x.f_code.co_freevars
./Lib/test/test_sys.py:1356:11   - Unknown word (sortwrapper)                   -- # sortwrapper (list)
./Lib/test/test_sys.py:1358:11   - Unknown word (cmpwrapper)                    -- # cmpwrapper (list)
./Lib/test/test_sys.py:1360:11   - Unknown word (listiterator)                  -- # listiterator (list)
./Lib/test/test_sys.py:1362:11   - Unknown word (listreverseiterator)           -- # listreverseiterator (list)
./Lib/test/test_sys.py:1384:17   - Unknown word (delx)                          -- def delx(self): del self.__x
./Lib/test/test_sys.py:1389:11   - Unknown word (rangeiterator)                 -- # rangeiterator
./Lib/test/test_sys.py:1402:13   - Unknown word (minused)                       -- minused = len(sample)
./Lib/test/test_sys.py:1407:13   - Unknown word (newsize)                       -- newsize = PySet_MINSIZE
./Lib/test/test_sys.py:1416:11   - Unknown word (setiterator)                   -- # setiterator
./Lib/test/test_sys.py:1427:33   - Unknown word (PIPP)                          -- = 'P2nPI13Pl4Pn9Pn11PIPP'
./Lib/test/test_sys.py:1436:51   - Unknown word (Procs)                         -- # PyBufferProcs
./Lib/test/test_sys.py:1438:15   - Unknown word (newstyleclass)                 -- class newstyleclass(object): pass
./Lib/test/test_sys.py:1456:9    - Unknown word (asciifields)                   -- asciifields = "nnbP"
./Lib/test/test_sys.py:1457:9    - Unknown word (compactfields)                 -- compactfields = asciifields + "nPn
./Lib/test/test_sys.py:1458:9    - Unknown word (unicodefields)                 -- unicodefields = compactfields + "P
./Lib/test/test_sys.py:1460:13   - Unknown word (maxchar)                       -- maxchar = ord(max(s))
./Lib/test/test_sys.py:1482:11   - Unknown word (weakproxy)                     -- # weakproxy
./Lib/test/test_sys.py:1484:11   - Unknown word (weakcallableproxy)             -- # weakcallableproxy
./Lib/test/test_sys.py:1517:14   - Unknown word (pythontypes)                   -- def test_pythontypes(self):
./Lib/test/test_sys.py:173:45    - Unknown word (unflushed)      -- sys; sys.stderr.write("unflushed,"); sys.exit("message
./Lib/test/test_sys.py:217:9     - Unknown word (oldlimit)       -- oldlimit = sys.getrecursionlimit
./Lib/test/test_sys.py:315:40    - Unknown word (setdlopenflags) -- skipUnless(hasattr(sys, "setdlopenflags"),
./Lib/test/test_sys.py:317:14    - Unknown word (dlopenflags)    -- def test_dlopenflags(self):
./Lib/test/test_sys.py:318:39    - Unknown word (getdlopenflags) -- assertTrue(hasattr(sys, "getdlopenflags"))
./Lib/test/test_sys.py:320:9     - Unknown word (oldflags)       -- oldflags = sys.getdlopenflags
./Lib/test/test_sys.py:401:45    - Unknown word (sourceline)     -- filename, lineno, funcname, sourceline) in enumerate(stack
./Lib/test/test_sys.py:513:20    - Unknown word (primality)      -- # probable primality test (doesn't exclude
./Lib/test/test_sys.py:651:14    - Unknown word (ioencoding)     -- def test_ioencoding(self):
./Lib/test/test_sys.py:65:13     - Unknown word (baddisplayhook) -- def baddisplayhook(obj):
./Lib/test/test_sys.py:730:15    - Unknown word (fsencoding)     -- def check_fsencoding(self, fs_encoding, expected
./Lib/test/test_sys.py:844:14    - Unknown word (debugmallocstats) -- def test_debugmallocstats(self):
./Lib/test/test_sys.py:961:18    - Unknown word (tracebacklimit)   -- def test_sys_tracebacklimit(self):
./Lib/test/test_sys.py:997:41    - Unknown word (enablelegacywindowsfsencoding) -- skipUnless(hasattr(sys, "_enablelegacywindowsfsencoding"),
./Lib/test/test_sys_setprofile.py:17:14     - Unknown word (setget)     -- def test_setget(self):
./Lib/test/test_sys_setprofile.py:41:13     - Unknown word (frameno)    -- frameno = self.frames.index
./Lib/test/test_sys_settrace.py:12:7      - Unknown word (tracecontext) -- class tracecontext:
./Lib/test/test_sys_settrace.py:181:26    - Unknown word (tracefunc)         -- settrace_and_return(tracefunc):
./Lib/test/test_sys_settrace.py:212:5     - Unknown word (ireturn)           -- def ireturn_example():
./Lib/test/test_sys_settrace.py:228:5     - Unknown word (tightloop)         -- def tightloop_example():
./Lib/test/test_sys_settrace.py:24:7      - Unknown word (asynctracecontext) -- class asynctracecontext:
./Lib/test/test_sys_settrace.py:254:5     - Unknown word (tighterloop)       -- def tighterloop_example():
./Lib/test/test_sys_settrace.py:320:18    - Unknown word (Genexp)            -- def traceWithGenexp(self, frame, event,
./Lib/test/test_sys_settrace.py:331:7     - Unknown word (deallocators)      -- # deallocators may be traced as well
./Lib/test/test_sys_settrace.py:36:11     - Unknown word (asynciter)         -- async def asynciter(iterable):
./Lib/test/test_sys_settrace.py:429:17    - Unknown word (onliner)           -- def test_14_onliner_if(self):
./Lib/test/test_sys_settrace.py:430:13    - Unknown word (onliners)          -- def onliners():
./Lib/test/test_sys_settrace.py:58:5      - Unknown word (arigo)             -- def arigo_example0():
./Lib/test/test_sysconfig.py:106:9     - Unknown word (cvars)      -- cvars = get_config_vars()
./Lib/test/test_sysconfig.py:125:11    - Unknown word (macbook)    -- # macbook
./Lib/test/test_sysconfig.py:130:37    - Unknown word (macziade)   -- set_uname(('Darwin', 'macziade', '8.11.1',
./Lib/test/test_sysconfig.py:138:42    - Unknown word (fwrapv)     -- '-fwrapv -O3 -Wall -Wstrict-prototypes
./Lib/test/test_sysconfig.py:138:60    - Unknown word (Wstrict)    -- '-fwrapv -O3 -Wall -Wstrict-prototypes')
./Lib/test/test_sysconfig.py:221:36    - Unknown word (aglae)      -- set_uname(('Linux', 'aglae', '2.6.21.1dedibox-r
./Lib/test/test_sysconfig.py:221:53    - Unknown word (dedibox)    -- , 'aglae', '2.6.21.1dedibox-r7',
./Lib/test/test_sysconfig.py:392:23    - Unknown word (aarch)      -- if re.match('(aarch64|arm|mips|ppc|powerpc
./Lib/test/test_sysconfig.py:397:63    - Unknown word (gnux)       -- endswith('x86_64-linux-gnux32.so'),
./Lib/test/test_syslog.py:28:14     - Unknown word (setlogmask) -- def test_setlogmask(self):
./Lib/test/test_tabnanny.py:129:39    - Unknown word (testmsg)    -- tabnanny.NannyNag(5, "testmsg", "testline"),
./Lib/test/test_tabnanny.py:175:48    - Unknown word (lsdir)      -- files returned by `os.lsdir()` is not fixed, verify
./Lib/test/test_tarfile.py:1031:49   - Unknown word (longnametype) -- ssertEqual(tarinfo.type, self.longnametype)
./Lib/test/test_tarfile.py:1035:9    - Unknown word (longdir)      -- longdir = ('a' * 101) + '/'
./Lib/test/test_tarfile.py:1110:21   - Unknown word (evidentially) -- # Linux evidentially has 512 byte st_blocks
./Lib/test/test_tarfile.py:1177:49   - Unknown word (fileobjs)     -- fobj.closed, "external fileobjs must never closed")
./Lib/test/test_tarfile.py:1433:42   - Unknown word (testsymlinks) -- path.join(TEMPDIR, "testsymlinks")
./Lib/test/test_tarfile.py:1434:9    - Unknown word (temparchive)  -- temparchive = os.path.join(TEMPDIR
./Lib/test/test_tarfile.py:1497:19   - Unknown word (nonwritable)  -- def test_open_nonwritable_fileobj(self):
./Lib/test/test_tarfile.py:1601:11   - Unknown word (Longlink)     -- # and Longlink extended headers (cp
./Lib/test/test_tarfile.py:1651:22   - Unknown word (longnam)      -- self._test(("longnam/" * 127) + "longnam
./Lib/test/test_tarfile.py:1660:30   - Unknown word (longlnk)      -- self._test("name", ("longlnk/" * 127) + "longlnk
./Lib/test/test_tarfile.py:1668:14   - Unknown word (longnamelink) -- def test_longnamelink_1023(self):
./Lib/test/test_tarfile.py:1718:27   - Unknown word (posixheader)  -- # See `struct posixheader` in GNU docs for byte
./Lib/test/test_tarfile.py:1853:7    - Unknown word (Hardlink)     -- class HardlinkTest(unittest.TestCase
./Lib/test/test_tarfile.py:210:42    - Unknown word (linktest)    -- fileobj_link("./ustar/linktest2/lnktype",
./Lib/test/test_tarfile.py:2502:9    - Unknown word (tarfilecmd)   -- def tarfilecmd(self, *args, **kwargs
./Lib/test/test_tarfile.py:2516:17   - Unknown word (tardata)      -- for tardata in files:
./Lib/test/test_tarfile.py:2530:25   - Unknown word (testtarnames) -- for tar_name in testtarnames:
./Lib/test/test_tarfile.py:2543:37   - Unknown word (zipdir)       -- = support.findfile('zipdir.zip')
./Lib/test/test_tarfile.py:2543:9    - Unknown word (zipname)      -- zipname = support.findfile(
./Lib/test/test_tarfile.py:2683:55   - Unknown word (spamdir)      -- tarfilecmd('-e', tmpname, 'spamdir')
./Lib/test/test_tarfile.py:2791:30   - Unknown word (bzipped)      -- an empty or partial bzipped file.
./Lib/test/test_tarfile.py:2852:44   - Unknown word (tarfl)        -- open(tmpname, 'w') as tarfl:
./Lib/test/test_tarfile.py:38:49     - Unknown word (tardir)     -- os_helper.TESTFN) + "-tardir"
./Lib/test/test_tarfile.py:39:1      - Unknown word (tarextdir)  -- tarextdir = TEMPDIR + '-extract
./Lib/test/test_tarfile.py:403:61    - Unknown word (tarfiles)    -- non-existent gzipped tarfiles raising
./Lib/test/test_tarfile.py:40:1      - Unknown word (tarname)    -- tarname = support.findfile(
./Lib/test/test_tarfile.py:40:29     - Unknown word (testtar)    -- = support.findfile("testtar.tar")
./Lib/test/test_tarfile.py:43:1      - Unknown word (xzname)     -- xzname = os.path.join(TEMPDIR
./Lib/test/test_tarfile.py:44:1      - Unknown word (tmpname)    -- tmpname = os.path.join(TEMPDIR
./Lib/test/test_tarfile.py:45:1      - Unknown word (dotlessname) -- dotlessname = os.path.join(TEMPDIR
./Lib/test/test_tarfile.py:586:14    - Unknown word (xstar)       -- def test_xstar_type(self):
./Lib/test/test_tarfile.py:665:38    - Unknown word (extractdir)  -- path.join(TEMPDIR, "extractdir")
./Lib/test/test_tarfile.py:792:9     - Unknown word (tarinfos)    -- tarinfos = self.tar.getmembers
./Lib/test/test_tarfile.py:979:27    - Unknown word (oldv)        -- def test_find_regtype_oldv7(self):
./Lib/test/test_tarfile.py:992:7     - Unknown word (Longname)    -- class LongnameTest:
./Lib/test/test_tarfile.py:99:7      - Unknown word (Ustar)       -- class UstarReadTest(ReadTest, unittest
./Lib/test/test_telnetlib.py:278:7     - Unknown word (nego)       -- class nego_collector(object):
./Lib/test/test_telnetlib.py:299:56    - Unknown word (iacs)       -- tl.IAC + tl.IAC + b' iacs' + tl.IAC,
./Lib/test/test_telnetlib.py:335:20    - Unknown word (subnegotiations) -- # RFC 855, subnegotiations portion
./Lib/test/test_telnetlib.py:347:44    - Unknown word (aabb)            -- tl.IAC + tl.IAC + b'aabb' + tl.IAC + b'cc' +
./Lib/test/test_tempfile.py:102:10    - Unknown word (ndir)       -- (ndir, nbase) = os.path.split
./Lib/test/test_tempfile.py:103:9     - Unknown word (npre)       -- npre = nbase[:len(pre)]
./Lib/test/test_tempfile.py:104:9     - Unknown word (nsuf)       -- nsuf = nbase[len(nbase)
./Lib/test/test_tempfile.py:1359:24   - Unknown word (abdc)       -- roundtrip("abdc\n", "w+")
./Lib/test/test_tempfile.py:1447:14   - Unknown word (explict)    -- def test_explict_cleanup_ignore_errors
./Lib/test/test_tempfile.py:1507:71   - Unknown word (gced)       -- TemporaryDirectory is gced."""
./Lib/test/test_tempfile.py:160:9     - Unknown word (unexp)      -- unexp = []
./Lib/test/test_tempfile.py:23:5      - Unknown word (textmode)   -- has_textmode = (tempfile._text_openflags
./Lib/test/test_tempfile.py:378:11    - Unknown word (mkstemped)  -- class mkstemped:
./Lib/test/test_tempfile.py:379:10    - Unknown word (bflags)     -- _bflags = tempfile._bin_openflags
./Lib/test/test_tempfile.py:380:10    - Unknown word (tflags)     -- _tflags = tempfile._text_openflags
./Lib/test/test_tempfile.py:644:9     - Unknown word (adir)       -- adir = os.path.abspath(dir
./Lib/test/test_tempfile.py:871:11    - Unknown word (mktemped)   -- class mktemped:
./Lib/test/test_textwrap.py:1076:29   - Unknown word (Helloo)            -- self.check_shorten("Helloo", 5, "[...]")
./Lib/test/test_textwrap.py:130:53    - Unknown word (Hmmph)      -- Anyone for "tennis?"\nHmmph!'
./Lib/test/test_textwrap.py:176:46    - Unknown word (peters'ly)  -- reformatting-posts-from-tim-peters'ly")
./Lib/test/test_textwrap.py:19:20     - Unknown word (textin)     -- def show(self, textin):
./Lib/test/test_textwrap.py:302:50    - Unknown word (dryrun)     -- option, or --dry-run or --dryrun"
./Lib/test/test_textwrap.py:332:32    - Unknown word (wibble)     -- self.check_split("the 'wibble-wobble' widget",
./Lib/test/test_textwrap.py:354:45    - Unknown word (wubba)      -- split("blah (ding dong), wubba",
./Lib/test/test_textwrap.py:427:17    - Unknown word (yaba)       -- text = "yaba daba-doo"
./Lib/test/test_textwrap.py:427:22    - Unknown word (daba)       -- text = "yaba daba-doo"
./Lib/test/test_textwrap.py:440:21    - Unknown word (Empf)       -- text = "Die Empf\xe4nger-Auswahl"
./Lib/test/test_textwrap.py:440:29    - Unknown word (nger)       -- text = "Die Empf\xe4nger-Auswahl"
./Lib/test/test_textwrap.py:440:34    - Unknown word (Auswahl)    -- = "Die Empf\xe4nger-Auswahl"
./Lib/test/test_textwrap.py:586:40    - Unknown word (supercalifragilis) -- ['Did you say "supercalifragilis',
./Lib/test/test_textwrap.py:587:27    - Unknown word (ticexpialidocious) -- 'ticexpialidocious?" How *do*',
./Lib/test/test_textwrap.py:609:28    - Unknown word (supercalifr)       -- '"supercalifr',
./Lib/test/test_textwrap.py:610:27    - Unknown word (agilisticexp)      -- 'agilisticexp',
./Lib/test/test_textwrap.py:611:27    - Unknown word (ialidocious)       -- 'ialidocious?',
./Lib/test/test_textwrap.py:618:14    - Unknown word (nobreak)           -- def test_nobreak_long(self):
./Lib/test/test_textwrap.py:647:18    - Unknown word (succinyl)          -- We used enyzme 2-succinyl-6-hydroxy-2,4-cyclohexadiene
./Lib/test/test_textwrap.py:647:41    - Unknown word (cyclohexadiene)    -- succinyl-6-hydroxy-2,4-cyclohexadiene-1-carboxylate synthase
./Lib/test/test_textwrap.py:647:70    - Unknown word (synthase)          -- cyclohexadiene-1-carboxylate synthase.
./Lib/test/test_textwrap.py:647:9     - Unknown word (enyzme)            -- We used enyzme 2-succinyl-6-hydroxy
./Lib/test/test_textwrap.py:659:22    - Unknown word (cyclohexad)        -- 'cyclohexad', 'iene-1-', 'carboxylat
./Lib/test/test_textwrap.py:659:36    - Unknown word (iene)              -- 'cyclohexad', 'iene-1-', 'carboxylat',
./Lib/test/test_textwrap.py:659:47    - Unknown word (carboxylat)        -- cyclohexad', 'iene-1-', 'carboxylat', 'e', 'synthase.']
./Lib/test/test_textwrap.py:671:47    - Unknown word (uccinyl)           -- used', 'enyzme 2-s', 'uccinyl-6-', 'hydroxy-2,',
./Lib/test/test_textwrap.py:672:24    - Unknown word (cyclohex)          -- '4-cyclohex', 'adiene-1-c', 'arboxylate
./Lib/test/test_textwrap.py:672:36    - Unknown word (adiene)            -- '4-cyclohex', 'adiene-1-c', 'arboxylate',
./Lib/test/test_textwrap.py:672:50    - Unknown word (arboxylate)        -- cyclohex', 'adiene-1-c', 'arboxylate', 'synthase.']
./Lib/test/test_textwrap.py:772:21    - Unknown word (nomargin)          -- def test_dedent_nomargin(self):
./Lib/test/test_thread.py:230:14    - Unknown word (forkinthread) -- def test_forkinthread(self):
./Lib/test/test_thread.py:42:9      - Unknown word (newtask)    -- def newtask(self):
./Lib/test/test_threading.py:1013:13   - Unknown word (childpid)    -- childpid = os.fork()
./Lib/test/test_threading.py:1416:38   - Unknown word (noerror)     -- multithread_modify_file_noerror(self):
./Lib/test/test_threading.py:142:9     - Unknown word (numrunning) -- numrunning = Counter()
./Lib/test/test_threading.py:1668:29   - Unknown word (subthread)   -- test_interrupt_main_subthread(self):
./Lib/test/test_threading.py:307:44    - Unknown word (asynch)     -- attempting to raise asynch exception in worker
./Lib/test/test_threading.py:395:19    - Unknown word (nondaemon)  -- def test_join_nondaemon_on_shutdown(self):
./Lib/test/test_threading.py:56:53     - Unknown word (nrunning)   -- testcase, sema, mutex, nrunning):
./Lib/test/test_threading.py:625:42    - Unknown word (nonmain)    -- thread_after_fork_from_nonmain_thread(self):
./Lib/test/test_threading.py:687:27    - Unknown word (Subinterp)  -- # Test similar to SubinterpThreadingTests.test_threads
./Lib/test/test_threading.py:932:43    - Unknown word (Wdefault)   -- assert_python_ok("-Wdefault", "-c", "pass",
./Lib/test/test_threading.py:980:17    - Unknown word (joiningfunc) -- def joiningfunc(mainthread):
./Lib/test/test_threading.py:980:29    - Unknown word (mainthread)  -- def joiningfunc(mainthread):
./Lib/test/test_threading_local.py:18:19     - Unknown word (weaklist)   -- def target(local, weaklist):
./Lib/test/test_threading_local.py:45:9      - Unknown word (deadlist)   -- deadlist = [weak for weak in
./Lib/test/test_threading_local.py:49:15     - Unknown word (someothervar) -- local.someothervar = None
./Lib/test/test_time.py:1044:13   - Unknown word (floatpart)     -- floatpart, intpart = math.modf
./Lib/test/test_time.py:110:49    - Unknown word (getcpuclockid) -- hasattr(time, 'pthread_getcpuclockid'),
./Lib/test/test_time.py:129:47    - Unknown word (getres)        -- hasattr(time, 'clock_getres'),
./Lib/test/test_time.py:136:47    - Unknown word (settime)       -- hasattr(time, 'clock_settime'),
./Lib/test/test_time.py:219:35    - Unknown word (gettmarg)      -- Start check at -2 since gettmarg() increments value before
./Lib/test/test_time.py:275:13    - Unknown word (strf)          -- strf_output = time.strftime
./Lib/test/test_time.py:305:13    - Unknown word (bigyear)       -- for bigyear in TIME_MAXYEAR, TIME
./Lib/test/test_time.py:330:17    - Unknown word (testval)       -- testval = time.mktime((year
./Lib/test/test_time.py:460:7     - Unknown word (borks)         -- # borks the glibc's internal
./Lib/test/test_time.py:618:9     - Unknown word (yearstr)       -- def yearstr(self, y):
./Lib/test/test_time.py:645:15    - Unknown word (dyear)         -- def test_4dyear(self):
./Lib/test/test_time.py:706:19    - Unknown word (timemodule)    -- # Modules/timemodule.c checks for underflow
./Lib/test/test_time.py:719:11    - Unknown word (Pytime)        -- class TestPytime(unittest.TestCase):
./Lib/test/test_time.py:747:16    - Unknown word (localtimes)    -- # Make localtimes from the UNIX times
./Lib/test/test_time.py:799:46    - Unknown word (pytime)        -- icoseconds are only tested to pytime_converter accepting
./Lib/test/test_time.py:91:33     - Unknown word (gettime)    -- hasattr(time, 'clock_gettime'):
./Lib/test/test_time.py:972:16    - Unknown word (Timeval)       -- def test_AsTimeval(self):
./Lib/test/test_time.py:995:55    - Unknown word (Timespec)      -- testcapi, 'PyTime_AsTimespec'),
./Lib/test/test_timeit.py:352:41    - Unknown word (stringio)   -- captured_stderr() as error_stringio:
./Lib/test/test_timeit.py:356:55    - Unknown word (nsec)       -- unit. Please select nsec, usec, msec, or sec
./Lib/test/test_timeout.py:140:50    - Unknown word (unprecision) -- should account for timing unprecision
./Lib/test/test_timeout.py:161:9     - Unknown word (blackhole)   -- blackhole = resolve_address('blackhole
./Lib/test/test_timeout.py:163:11    - Unknown word (Blackhole)   -- # Blackhole has been configured
./Lib/test/test_timeout.py:170:14    - Unknown word (firewalling) -- # to firewalling or general network configurat
./Lib/test/test_timeout.py:171:69    - Unknown word (whitehole)   -- blackhole, a corresponding 'whitehole'
./Lib/test/test_timeout.py:184:11    - Unknown word (timeframe)   -- # timeframe).
./Lib/test/test_tokenize.py:1173:33   - Unknown word (noncommented) -- test_cookie_second_line_noncommented_first_line(self):
./Lib/test/test_tokenize.py:1382:14   - Unknown word (oneline)      -- def test_oneline_defs(self):
./Lib/test/test_tokenize.py:1394:36   - Unknown word (opstr)        -- assertExactTypeEqual(self, opstr, *optypes):
./Lib/test/test_tokenize.py:1394:44   - Unknown word (optypes)      -- tExactTypeEqual(self, opstr, *optypes):
./Lib/test/test_tokenize.py:1632:22   - Unknown word (ucpu)         -- # pass the '-ucpu' option to process the
./Lib/test/test_tokenize.py:1670:9    - Unknown word (codelines)    -- codelines = self.roundtrip(code
./Lib/test/test_tokenize.py:222:17    - Unknown word (toktype)    -- for toktype, token, start, end,
./Lib/test/test_tokenize.py:654:30    - Unknown word (Örter)      -- self.check_tokenize("Örter = 'places'\ngrün =
./Lib/test/test_tokenize.py:654:47    - Unknown word (ngrün)      -- tokenize("Örter = 'places'\ngrün = 'green'", """\
./Lib/test/test_tokenize.py:659:17    - Unknown word (grün)       -- NAME 'grün' (2, 0) (2,
./Lib/test/test_tokenize.py:961:5     - Unknown word (decistmt)   -- def decistmt(s):
./Lib/test/test_tokenize.py:964:17    - Unknown word (tokval)     -- for toknum, tokval, _, _, _  in g:
./Lib/test/test_tokenize.py:964:9     - Unknown word (toknum)     -- for toknum, tokval, _, _, _  in
./Lib/test/test_tomllib/__init__.py:2:32      - Unknown word (Taneli)     -- FileCopyrightText: 2021 Taneli Hukkinen
./Lib/test/test_tomllib/__init__.py:2:39      - Unknown word (Hukkinen)   -- ileCopyrightText: 2021 Taneli Hukkinen
./Lib/test/test_tomllib/burntsushi.py:5:41      - Unknown word (burntsushi) -- tests that are in the "burntsushi" format."""
./Lib/test/test_tomllib/burntsushi.py:82:27     - Unknown word (Burntsushi) -- raise AssertionError("Burntsushi fixtures should be dicts
./Lib/test/test_tomllib/data/invalid/array-missing-comma.toml:1:1       - Unknown word (arrr)       -- arrr = [true false]
./Lib/test/test_tomllib/data/invalid/invalid-escaped-unicode.toml:1:21      - Unknown word (uabag)      -- escaped-unicode = "\uabag"
./Lib/test/test_tomllib/data/invalid/invalid-hex.toml:1:8       - Unknown word (xgabba)     -- hex = 0xgabba00f1
./Lib/test/test_tomllib/data/invalid/keys-and-vals/ends-early-table-def.toml:1:2       - Unknown word (fwfw)       -- [fwfw.wafw
./Lib/test/test_tomllib/data/invalid/keys-and-vals/ends-early-table-def.toml:1:7       - Unknown word (wafw)       -- [fwfw.wafw
./Lib/test/test_tomllib/data/invalid/literal-str/unclosed.toml:1:11      - Unknown word (dwdd)       -- unclosed='dwdd
./Lib/test/test_tomllib/data/invalid/missing-closing-double-square-bracket.toml:2:1       - Unknown word (blaa)       -- blaa=2
./Lib/test/test_tomllib/data/invalid/missing-closing-square-bracket.toml:1:18      - Unknown word (missingö)   -- [closing-bracket.missingö
./Lib/test/test_tomllib/data/invalid/unclosed-multiline-string.toml:2:1       - Unknown word (diibaa)     -- diibaa
./Lib/test/test_tomllib/data/invalid/unclosed-multiline-string.toml:3:1       - Unknown word (blibae)     -- blibae ete
./Lib/test/test_tomllib/data/invalid/unclosed-multiline-string.toml:4:1       - Unknown word (eteta)      -- eteta
./Lib/test/test_tomllib/data/valid/array/array-subtables.json:4:9       - Unknown word (subtab)     -- {"subtab":
./Lib/test/test_tomllib/data/valid/dates-and-times/datetimes.json:2:24      - Unknown word (datetime)   -- local-dt": {"type":"datetime-local","value":"198
./Lib/test/test_tomllib/data/valid/multiline-basic-str/ends-in-whitespace-escape.json:1:3       - Unknown word (beee)       -- {"beee": {"type": "string"
./Lib/test/test_tomllib/data/valid/multiline-basic-str/ends-in-whitespace-escape.json:1:39      - Unknown word (heeee)      -- "string", "value": "heeee\ngeeee"}}
./Lib/test/test_tomllib/data/valid/multiline-basic-str/ends-in-whitespace-escape.json:1:45      - Unknown word (ngeeee)     -- string", "value": "heeee\ngeeee"}}
./Lib/test/test_tomllib/data/valid/multiline-basic-str/ends-in-whitespace-escape.toml:3:1       - Unknown word (geeee)      -- geeee\
./Lib/test/test_tomllib/test_error.py:34:31     - Unknown word (nfwfw)      -- tomllib.loads("\n\nfwfw=")
./Lib/test/test_tomllib/test_misc.py:44:15     - Unknown word (notnum)     -- notnum1=nan
./Lib/test/test_tomllib/test_misc.py:68:16     - Unknown word (bliibaa)    -- [bliibaa.diibaa]
./Lib/test/test_tomllib/test_misc.py:69:15     - Unknown word (offsettime) -- offsettime=[1979-05-27T00:32:0
./Lib/test/test_trace.py:123:47    - Unknown word (countfuncs)    -- Trace(count=1, trace=0, countfuncs=0, countcallers=0)
./Lib/test/test_trace.py:123:61    - Unknown word (countcallers)  -- trace=0, countfuncs=0, countcallers=0)
./Lib/test/test_trace.py:12:11     - Unknown word (tracedmodules) -- from test.tracedmodules import testmod
./Lib/test/test_trace.py:194:20    - Unknown word (compehentions) -- # List compehentions work differently in
./Lib/test/test_trace.py:272:11    - Unknown word (Funcs)         -- class TestFuncs(unittest.TestCase):
./Lib/test/test_trace.py:277:14    - Unknown word (filemod)       -- self.filemod = my_file_and_modname
./Lib/test/test_trace.py:293:48    - Unknown word (calledfuncs)   -- self.tracer.results().calledfuncs, expected)
./Lib/test/test_trace.py:438:26    - Unknown word (fullmodname)   -- modname = trace._fullmodname(sys.modules[modname
./Lib/test/test_trace.py:460:5     - Unknown word (codefile)      -- codefile = 'tmp.py'
./Lib/test/test_trace.py:461:5     - Unknown word (coverfile)     -- coverfile = 'tmp.cover'
./Lib/test/test_trace.py:467:22    - Unknown word (spœm)          -- x = 'spœm'
./Lib/test/test_trace.py:482:9     - Unknown word (tracecoverpath) -- tracecoverpath = os.path.join(tracedir
./Lib/test/test_trace.py:529:14    - Unknown word (listfuncs)      -- def test_listfuncs_flag_success(self):
./Lib/test/test_trace.py:557:9     - Unknown word (coverfilename)  -- coverfilename = f'{TESTFN}.cover'
./Lib/test/test_trace.py:79:5      - Unknown word (mylist)        -- mylist = [traced_doubler(i
./Lib/test/test_traceback.py:157:21    - Unknown word (firstlines) -- def do_test(firstlines, message, charset, lineno
./Lib/test/test_traceback.py:271:9     - Unknown word (excfile)    -- excfile = StringIO()
./Lib/test/test_traceback.py:329:47    - Unknown word (tbstderr)   -- output("stderr") as tbstderr:
./Lib/test/test_traceback.py:331:13    - Unknown word (tbfile)     -- tbfile = StringIO()
./Lib/test/test_traceback.py:333:47    - Unknown word (excstderr)  -- output("stderr") as excstderr:
./Lib/test/test_traceback.py:335:13    - Unknown word (excfmt)     -- excfmt = traceback.format_exc
./Lib/test/test_traceback.py:370:43    - Unknown word (ststderr)   -- output("stderr") as ststderr:
./Lib/test/test_traceback.py:372:9     - Unknown word (stfile)     -- stfile = StringIO()
./Lib/test/test_traceback.py:376:9     - Unknown word (stfmt)      -- stfmt = traceback.format_stack
./Lib/test/test_traceback.py:879:29    - Unknown word (extact)     -- It's enough to test extact_tb, extract_stack and
./Lib/test/test_traceback.py:923:13    - Unknown word (nolim)      -- nolim = extract()
./Lib/test/test_traceback.py:98:14     - Unknown word (nocaret)    -- def test_nocaret(self):
./Lib/test/test_tuple.py:113:25    - Unknown word (zlimit)         -- # fails if z > `zlimit`.
./Lib/test/test_tuple.py:114:13    - Unknown word (tryone)         -- def tryone_inner(tag, nbins, hashes
./Lib/test/test_tuple.py:176:9     - Unknown word (cands)          -- cands = list(range(-10, -
./Lib/test/test_tuple.py:209:40    - Unknown word (sdevs)          -- collisions is no more than 4 sdevs above the theoretically
./Lib/test/test_tuple.py:226:9     - Unknown word (inps)           -- inps = base + list(product
./Lib/test/test_tuple.py:401:4     - Unknown word (randomish)      -- # "randomish" here instead.  But
./Lib/test/test_tuple.py:470:33    - Unknown word (waaaaay)        -- statistical sense that's waaaaay too many collisions
./Lib/test/test_tuple.py:70:14     - Unknown word (tupleresizebug) -- def test_tupleresizebug(self):
./Lib/test/test_type_comments.py:16:1      - Unknown word (asyncdef)   -- asyncdef = """\
./Lib/test/test_type_comments.py:198:5     - Unknown word (favk)              -- def favk(
./Lib/test/test_type_comments.py:231:33    - Unknown word (minver)            -- parse_all(self, source, minver=lowest, maxver=highest
./Lib/test/test_type_comments.py:231:48    - Unknown word (maxver)            -- source, minver=lowest, maxver=highest, expected_regex
./Lib/test/test_type_comments.py:25:1      - Unknown word (asyncvar)   -- asyncvar = """\
./Lib/test/test_type_comments.py:30:1      - Unknown word (asynccomp)  -- asynccomp = """\
./Lib/test/test_type_comments.py:406:40    - Unknown word (ignorewhatever)    -- ways("pass # type: ignorewhatever\n")
./Lib/test/test_type_comments.py:407:40    - Unknown word (ignoreé)           -- ways("pass # type: ignoreé\n")
./Lib/test/test_type_comments.py:44:1      - Unknown word (underscorednumber) -- underscorednumber = """\
./Lib/test/test_type_comments.py:48:1      - Unknown word (redundantdef)      -- redundantdef = """\
./Lib/test/test_type_comments.py:54:1      - Unknown word (nonasciidef)       -- nonasciidef = """\
./Lib/test/test_type_comments.py:56:19     - Unknown word (àçčéñt)            -- # type: () -> àçčéñt
./Lib/test/test_type_comments.py:60:1      - Unknown word (forstmt)           -- forstmt = """\
./Lib/test/test_type_comments.py:65:1      - Unknown word (withstmt)          -- withstmt = """\
./Lib/test/test_type_comments.py:70:1      - Unknown word (vardecl)           -- vardecl = """\
./Lib/test/test_type_comments.py:89:10     - Unknown word (fabvk)             -- # named 'fabvk' would have two positional
./Lib/test/test_type_comments.py:90:58     - Unknown word (longargs)          -- is verified in test_longargs()
./Lib/test/test_types.py:1055:15   - Unknown word (dictmissing) -- class dictmissing(dict):
./Lib/test/test_types.py:1070:14   - Unknown word (customdict)  -- def test_customdict(self):
./Lib/test/test_types.py:144:23    - Unknown word (zsize)      -- xsize, ysize, zsize = 238, 356, 4
./Lib/test/test_types.py:1661:14   - Unknown word (attrget)     -- def test_attrget(self):
./Lib/test/test_types.py:1670:14   - Unknown word (attrset)     -- def test_attrset(self):
./Lib/test/test_types.py:1681:14   - Unknown word (attrdel)     -- def test_attrdel(self):
./Lib/test/test_types.py:1881:19   - Unknown word (corogen)     -- def test_duck_corogen(self):
./Lib/test/test_types.py:201:32    - Unknown word (xyzabcde)   -- 'xyz' + 'abcde' != 'xyzabcde': self.fail('string
./Lib/test/test_types.py:202:24    - Unknown word (xyzxyzxyz)  -- if 'xyz'*3 != 'xyzxyzxyz': self.fail('string
./Lib/test/test_types.py:2041:19   - Unknown word (corofunc)    -- async def corofunc():
./Lib/test/test_types.py:2087:24   - Unknown word (itercoro)    -- def test_returning_itercoro(self):
./Lib/test/test_types.py:2092:9    - Unknown word (gencoro)     -- gencoro = gen()
./Lib/test/test_types.py:2106:14   - Unknown word (genfunc)     -- def test_genfunc(self):
./Lib/test/test_types.py:419:9     - Unknown word (rfmt)       -- rfmt = ">20n"
./Lib/test/test_types.py:420:9     - Unknown word (lfmt)       -- lfmt = "<20n"
./Lib/test/test_types.py:421:9     - Unknown word (cfmt)       -- cfmt = "^20n"
./Lib/test/test_types.py:597:23    - Unknown word (Xobns)      -- for code in 'xXobns':
./Lib/test/test_typing.py:1985:20   - Unknown word (subscr)     -- def test_multi_subscr_base(self):
./Lib/test/test_typing.py:2236:35   - Unknown word (variabcles) -- Mapping, etc., and type variabcles are considered immutable
./Lib/test/test_typing.py:248:17    - Unknown word (bivariant)  -- def test_no_bivariant(self):
./Lib/test/test_typing.py:2946:21   - Unknown word (Noode)      -- def foo(a: 'Noode[T]'):
./Lib/test/test_typing.py:2955:21   - Unknown word (whatevers)  -- def foo(a: 'whatevers') -> {}:
./Lib/test/test_typing.py:2993:13   - Unknown word (clazz)      -- for clazz in [C, D, E, F]:
./Lib/test/test_typing.py:3177:10   - Unknown word (xrepr)      -- some_xrepr: 'XRepr'
./Lib/test/test_typing.py:3231:72   - Unknown word (globalns)   -- will find the right globalns
./Lib/test/test_typing.py:3285:13   - Unknown word (testf)      -- def testf(x, y): ...
./Lib/test/test_typing.py:3288:13   - Unknown word (testg)      -- def testg(x: None): ...
./Lib/test/test_typing.py:3308:37   - Unknown word (decoratored) -- get_type_hints_wrapped_decoratored_func(self):
./Lib/test/test_typing.py:4188:42   - Unknown word (Jelle)       -- CoolEmployeeWithDefault('Jelle')
./Lib/test/test_typing.py:4188:9    - Unknown word (jelle)       -- jelle = CoolEmployeeWithDefault
./Lib/test/test_typing.py:4399:16   - Unknown word (Dnew)        -- EmpDnew = pickle.loads(ZZ)
./Lib/test/test_typing.py:4466:15   - Unknown word (Untotal)     -- class Untotal(TypedDict, total=False
./Lib/test/test_typing.py:4467:13   - Unknown word (untotal)     -- untotal: str
./Lib/test/test_typing.py:4885:14   - Unknown word (stringized)  -- def test_stringized_usage(self):
./Lib/test/test_typing.py:5023:23   - Unknown word (paramspecs)  -- def test_multiple_paramspecs_in_user_generics(self
./Lib/test/test_typing.py:719:47    - Unknown word (maximium)   -- runtime to maintain maximium flexibility.
./Lib/test/test_typing.py:987:17    - Unknown word (ameth)      -- def ameth(self) -> int:
./Lib/test/test_ucn.py:177:13    - Unknown word (seqname)     -- for seqname, codepoints in sequences
./Lib/test/test_ucn.py:24:9      - Unknown word (checkletter) -- def checkletter(self, name, code):
./Lib/test/test_ucn.py:77:55     - Unknown word (uafe)        -- SYLLABLE GGWEOSS", "\uafe8")
./Lib/test/test_ucn.py:80:52     - Unknown word (ubba)        -- HANGUL SYLLABLE MWIK", "\ubba0")
./Lib/test/test_unicode.py:1135:56   - Unknown word (resultx)         -- .format('result'), 'resultx')
./Lib/test/test_unicode.py:1136:56   - Unknown word (resultxx)        -- .format('result'), 'resultxx')
./Lib/test/test_unicode.py:1186:67   - Unknown word (nonprintable)    -- 8'), "'\\u0378'") # nonprintable
./Lib/test/test_unicode.py:1549:25   - Unknown word (strsubclass)     -- def test_issue28598_strsubclass_rhs(self):
./Lib/test/test_unicode.py:1746:56   - Unknown word (Wenn)            -- 9b\u306b\u306f\u300cWenn ist das'
./Lib/test/test_unicode.py:1747:15   - Unknown word (Nunstuck)        -- ' Nunstuck git und'.encode('utf
./Lib/test/test_unicode.py:211:46    - Unknown word (memchr)          -- implementation details of the memchr fast path
./Lib/test/test_unicode.py:242:46    - Unknown word (memrchr)         -- implementation details of the memrchr fast path
./Lib/test/test_unicode.py:2439:20   - Unknown word (wstr)            -- # fill wstr internal field
./Lib/test/test_unicode.py:2610:13   - Unknown word (cargs)           -- cargs = tuple(
./Lib/test/test_unicode.py:2839:14   - Unknown word (aswidechar)      -- def test_aswidechar(self):
./Lib/test/test_unicode.py:2877:14   - Unknown word (aswidecharstring) -- def test_aswidecharstring(self):
./Lib/test/test_unicode.py:2901:14   - Unknown word (asucs)            -- def test_asucs4(self):
./Lib/test/test_unicode.py:2904:29   - Unknown word (udfffc)           -- 'a\ud800b\udfffc', '\ud834\udd1e']:
./Lib/test/test_unicode.py:2918:14   - Unknown word (asutf)            -- def test_asutf8(self):
./Lib/test/test_unicode.py:2932:20   - Unknown word (andsize)          -- def test_asutf8andsize(self):
./Lib/test/test_unicode.py:2946:14   - Unknown word (findchar)         -- def test_findchar(self):
./Lib/test/test_unicode.py:2969:14   - Unknown word (copycharacters)   -- def test_copycharacters(self):
./Lib/test/test_unicode.py:3013:39   - Unknown word (encodedecimal)    -- testcapi import unicode_encodedecimal
./Lib/test/test_unicode.py:3032:39   - Unknown word (transformdecimaltoascii) -- testcapi import unicode_transformdecimaltoascii as transform_decimal
./Lib/test/test_unicode.py:322:31    - Unknown word (bbbc)            -- self.checkequalnofix('bbbc', 'abababc', 'translate
./Lib/test/test_unicode.py:322:39    - Unknown word (abababc)         -- checkequalnofix('bbbc', 'abababc', 'translate',
./Lib/test/test_unicode.py:324:31    - Unknown word (iiic)            -- self.checkequalnofix('iiic', 'abababc', 'translate
./Lib/test/test_unicode.py:326:31    - Unknown word (iiix)            -- self.checkequalnofix('iiix', 'abababc', 'translate
./Lib/test/test_unicode.py:330:31    - Unknown word (xyyx)            -- self.checkequalnofix('xyyx', 'xzx', 'translate
./Lib/test/test_unicode.py:340:40    - Unknown word (abdcdcbdddd)     -- checkequalnofix('xyzzy', 'abdcdcbdddd', 'translate', tbl)
./Lib/test/test_unicode.py:461:32    - Unknown word (sval)            -- def __init__(self, sval): self.sval = sval
./Lib/test/test_unicode.py:562:22    - Unknown word (lecmp)           -- def test_lecmp(s, s2):
./Lib/test/test_unicode.py:639:47    - Unknown word (Fcitlecases)     -- ckequalnofix(True, 'Greek \u1FFcitlecases ...', 'istitle')
./Lib/test/test_unicode.py:64:9      - Unknown word (checkequalnofix) -- def checkequalnofix(self, result, object
./Lib/test/test_unicode.py:73:19     - Unknown word (usub)            -- class usub(str):
./Lib/test/test_unicode.py:763:14    - Unknown word (𝖀𝖓𝖎𝖈𝖔𝖉𝖊)  -- u = '𝖀𝖓𝖎𝖈𝖔𝖉𝖊'
./Lib/test/test_unicode.py:794:41    - Unknown word (DFFFB)           -- A\uD800B\uDFFF', 'A\uDFFFB\uD800',
./Lib/test/test_unicode.py:795:30    - Unknown word (DFFFA)           -- 'A\uD800B\uDFFFA', 'A\uDFFFB\uD800A'
./Lib/test/test_unicode.py:834:33    - Unknown word (fffe)            -- self.assertEqual('\U0008fffe'.lower(), '\U0008fffe
./Lib/test/test_unicode.py:85:51     - Unknown word (Ufffffffe)       -- SyntaxError, eval, '\'\\Ufffffffe\'')
./Lib/test/test_unicode.py:86:51     - Unknown word (Uffffffff)       -- SyntaxError, eval, '\'\\Uffffffff\'')
./Lib/test/test_unicode.py:879:27    - Unknown word (ﬁnnish)          -- self.assertEqual('ﬁnnish'.capitalize(), 'Finnish
./Lib/test/test_unicode.py:954:29    - Unknown word (abdb)            -- self.assertIn('a', 'abdb')
./Lib/test/test_unicode.py:955:29    - Unknown word (bdab)            -- self.assertIn('a', 'bdab')
./Lib/test/test_unicode.py:956:29    - Unknown word (bdaba)           -- self.assertIn('a', 'bdaba')
./Lib/test/test_unicode.py:957:29    - Unknown word (bdba)            -- self.assertIn('a', 'bdba')
./Lib/test/test_unicode.py:966:35    - Unknown word (abcxxxx)         -- assertNotIn('abcd', 'abcxxxx')
./Lib/test/test_unicode_file.py:129:55    - Unknown word (checkdir)   -- chdir with unicode, checkdir with encoded
./Lib/test/test_unicode_file.py:42:18     - Unknown word (copyish)    -- self._do_copyish(filename, filename)
./Lib/test/test_unicode_file_functions.py:14:19     - Unknown word (Gott)       -- '3_Gr\xfc\xdf-Gott',
./Lib/test/test_unicodedata.py:153:46    - Unknown word (FFFE)             -- self.db.category('\uFFFE'), 'Cn')
./Lib/test/test_unicodedata.py:23:5      - Unknown word (expectedchecksum) -- expectedchecksum = '9129d6f2bdf008a8
./Lib/test/test_unicodedata.py:357:14    - Unknown word (linebreak)        -- def test_linebreak_7643(self):
./Lib/test/test_urllib.py:1056:44   - Unknown word (xmlcharref)        -- in BMP, Latin-1, with xmlcharref error handling
./Lib/test/test_urllib.py:1110:24   - Unknown word (badpercent)        -- def test_unquoting_badpercent(self):
./Lib/test/test_urllib.py:114:9     - Unknown word (unfakehttp) -- def unfakehttp(self):
./Lib/test/test_urllib.py:1180:25   - Unknown word (Cckner)            -- given = 'br%C3%BCckner_sapporo_20050930.doc
./Lib/test/test_urllib.py:119:9     - Unknown word (fakeftp)    -- def fakeftp(self):
./Lib/test/test_urllib.py:1213:25   - Unknown word (fcckner)           -- expect = 'br\u00fcckner_sapporo_20050930.doc
./Lib/test/test_urllib.py:1271:19   - Unknown word (blueberryjam)      -- expect = 'blueberryjam'
./Lib/test/test_urllib.py:1278:34   - Unknown word (rsyltet)           -- expect = 'bl\u00e5b\u00e6rsyltet\u00f8y'
./Lib/test/test_urllib.py:1294:14   - Unknown word (inputtype)         -- def help_inputtype(self, given, test_type
./Lib/test/test_urllib.py:1347:14   - Unknown word (doseq)             -- def test_doseq(self):
./Lib/test/test_urllib.py:134:9     - Unknown word (unfakeftp)  -- def unfakeftp(self):
./Lib/test/test_urllib.py:1499:31   - Unknown word (pathame)           -- "url2pathame() failed; %s != %s"
./Lib/test/test_urllib.py:1503:58   - Unknown word (pathnam)           -- unquoting works for pathnam2url() and
./Lib/test/test_urllib.py:227:14    - Unknown word (relativelocalfile) -- def test_relativelocalfile(self):
./Lib/test/test_urllib.py:252:46    - Unknown word (anotherdomain)     -- PROXY', 'localhost, anotherdomain.com, newdomain.com:
./Lib/test/test_urllib.py:252:65    - Unknown word (newdomain)         -- anotherdomain.com, newdomain.com:1234')
./Lib/test/test_urllib.py:284:34    - Unknown word (prelocalhost)      -- assertFalse(bypass('prelocalhost'))
./Lib/test/test_urllib.py:329:46    - Unknown word (noproxy)           -- proxy'] = 'localhost, noproxy.com, my.proxy:1234'
./Lib/test/test_urllib.py:367:14    - Unknown word (willclose)         -- def test_willclose(self):
./Lib/test/test_urllib.py:379:13    - Unknown word (schemeless)        -- schemeless_url = f"//localhost
./Lib/test/test_urllib.py:384:63    - Unknown word (codepaths)         -- different url opening codepaths. Plain
./Lib/test/test_urllib.py:503:41    - Unknown word (maxtries)          -- range(FancyURLopener().maxtries):
./Lib/test/test_urllib.py:523:22    - Unknown word (localfile)         -- def test_missing_localfile(self):
./Lib/test/test_urllib.py:530:19    - Unknown word (notexists)         -- def test_file_notexists(self):
./Lib/test/test_urllib.py:532:13    - Unknown word (fileurl)           -- tmp_fileurl = 'file://localhost
./Lib/test/test_urllib.py:566:14    - Unknown word (userpass)          -- def test_userpass_inurl(self):
./Lib/test/test_urllib.py:566:23    - Unknown word (inurl)             -- def test_userpass_inurl(self):
./Lib/test/test_urllib.py:61:14     - Unknown word (fakedata)   -- def fakehttp(fakedata, mock_close=False):
./Lib/test/test_urllib.py:61:5      - Unknown word (fakehttp)   -- def fakehttp(fakedata, mock_close
./Lib/test/test_urllib.py:630:68    - Unknown word (IFVSTH)            -- ;base64,dGVzdCBkYXRhIFVSTHMgOjs"
./Lib/test/test_urllib.py:636:18    - Unknown word (AAAAAXNSR)         -- "QOjdAAAAAXNSR0IArs4c6QAAAA9JREFUCNdj
./Lib/test/test_urllib.py:636:35    - Unknown word (QAAAA)             -- QOjdAAAAAXNSR0IArs4c6QAAAA9JREFUCNdj%0AYGBg%2BP
./Lib/test/test_urllib.py:636:41    - Unknown word (JREFUC)            -- QOjdAAAAAXNSR0IArs4c6QAAAA9JREFUCNdj%0AYGBg%2BP//PwAGAQL
./Lib/test/test_urllib.py:636:65    - Unknown word (AGAQL)             -- JREFUCNdj%0AYGBg%2BP//PwAGAQL%2BCm8 "
./Lib/test/test_urllib.py:637:17    - Unknown word (AAAABJRU)          -- "vHgAAAABJRU5ErkJggg%3D%3D%0A%20
./Lib/test/test_urllib.py:637:29    - Unknown word (Jggg)              -- "vHgAAAABJRU5ErkJggg%3D%3D%0A%20")
./Lib/test/test_urllib.py:774:14    - Unknown word (reporthook)        -- def test_reporthook(self):
./Lib/test/test_urllib.py:776:13    - Unknown word (hooktester)        -- def hooktester(block_count, block_read
./Lib/test/test_urllib.py:935:40    - Unknown word (xfcb)              -- urllib.parse.quote("a\xfcb", encoding="latin-1
./Lib/test/test_urllib.py:94:24     - Unknown word (fakesock)   -- type(self).fakesock = self.sock
./Lib/test/test_urllib.py:996:34    - Unknown word (Bbeta)             -- 'alpha%2Bbeta+gamma')
./Lib/test/test_urllib2.py:1088:31   - Unknown word (someproxy)    -- ds_req.set_proxy("someproxy:3128", None)
./Lib/test/test_urllib2.py:1122:14   - Unknown word (fixpath)      -- def test_fixpath_in_weirdurls(self):
./Lib/test/test_urllib2.py:1122:25   - Unknown word (weirdurls)    -- def test_fixpath_in_weirdurls(self):
./Lib/test/test_urllib2.py:1133:46   - Unknown word (getspam)      -- newreq.selector, '/?getspam')
./Lib/test/test_urllib2.py:1151:9    - Unknown word (newr)         -- newr = h.http_response(req
./Lib/test/test_urllib2.py:121:11    - Unknown word (unredirected) -- r.unredirected_hdrs dictionaries
./Lib/test/test_urllib2.py:1306:9    - Unknown word (hdeh)         -- hdeh = urllib.request.HTTPDefaultE
./Lib/test/test_urllib2.py:138:38    - Unknown word (Unredirected) -- unredirected_header("Unredirected-spam", "Eggs")
./Lib/test/test_urllib2.py:1456:11   - Unknown word (httpsconn)    -- # httpsconn req_headers do not have
./Lib/test/test_urllib2.py:1480:18   - Unknown word (notinbypass)  -- 'notinbypass'):
./Lib/test/test_urllib2.py:1521:27   - Unknown word (Otherscheme)  -- other_no_realm = 'Otherscheme xxx'
./Lib/test/test_urllib2.py:175:59    - Unknown word (nibar)        -- foo/bar", "foobar", "nibar")
./Lib/test/test_urllib2.py:1865:62   - Unknown word (userinfo)     -- may optionally include userinfo
./Lib/test/test_urllib2.py:190:53    - Unknown word (ninini)       -- example.com/baz/", "baz", "ninini")
./Lib/test/test_urllib2.py:1999:18   - Unknown word (fullurl)      -- def test_url_fullurl_get_full_url(self):
./Lib/test/test_urllib2.py:516:21    - Unknown word (httpcon)      -- # properties of httpcon
./Lib/test/test_urllib2.py:520:14    - Unknown word (httpconn)     -- self.httpconn = MockHTTPClass()
./Lib/test/test_urllib2.py:552:41    - Unknown word (authuri)      -- password(self, realm, authuri):
./Lib/test/test_urllib2.py:707:5     - Unknown word (sanepathname) -- def sanepathname2url(path):
./Lib/test/test_urllib2.py:712:5     - Unknown word (urlpath)      -- urlpath = urllib.request.pathname
./Lib/test/test_urllib2.py:746:23    - Unknown word (rhaponicum)   -- data = "rheum rhaponicum"
./Lib/test/test_urllib2.py:794:9     - Unknown word (towrite)      -- towrite = b"hello, world\n"
./Lib/test/test_urllib2.py:80:23     - Unknown word (reasonstr)  -- def test_URLError_reasonstr(self):
./Lib/test/test_urllib2.py:819:21    - Unknown word (respurl)      -- respurl = r.geturl()
./Lib/test/test_urllib2.py:85:14     - Unknown word (Hdrs)       -- class RequestHdrsTests(unittest.TestCase
./Lib/test/test_urllib2.py:916:46    - Unknown word (badpost)      -- http://example.com/","badpost")
./Lib/test/test_urllib2.py:924:13    - Unknown word (newreq)       -- newreq = h.do_request_(req
./Lib/test/test_urllib2_localnet.py:138:27    - Unknown word (cnonce)     -- "%(cnonce)s:%(qop)s:%(HA2)s"
./Lib/test/test_urllib2_localnet.py:224:12    - Unknown word (AUTHHEAD)   -- def do_AUTHHEAD(self):
./Lib/test/test_urllib2_localnet.py:552:47    - Unknown word (weeble)     -- handler.requests, ["/weeble"])
./Lib/test/test_urllib2_localnet.py:601:25    - Unknown word (cadefault)  -- def test_https_with_cadefault(self):
./Lib/test/test_urllib2_localnet.py:68:22     - Unknown word (webserver)  -- """Stops the webserver if it's currently running
./Lib/test/test_urllib2net.py:174:40    - Unknown word (bitdiddle)  -- socket.gethostname() == 'bitdiddle':
./Lib/test/test_urllib2net.py:188:16    - Unknown word (bauth)      -- ## bauth = HTTPBasicAuthHandler
./Lib/test/test_urllib2net.py:189:67    - Unknown word (jhylton)    -- realm', localhost, 'jhylton',
./Lib/test/test_urllib2net.py:191:16    - Unknown word (dauth)      -- ## dauth = HTTPDigestAuthHandler
./Lib/test/test_urllib2net.py:197:14    - Unknown word (urlwithfrag) -- def test_urlwithfrag(self):
./Lib/test/test_urllib2net.py:198:9     - Unknown word (urlwith)     -- urlwith_frag = "http://www.pythontest
./Lib/test/test_urllib2net.py:205:27    - Unknown word (withfrag)    -- def test_redirect_url_withfrag(self):
./Lib/test/test_urllib_response.py:30:9      - Unknown word (closehook)  -- closehook_called = False
./Lib/test/test_urllib_response.py:50:9      - Unknown word (infourl)    -- infourl = urllib.response.addinfourl
./Lib/test/test_urllibnet.py:133:25    - Unknown word (sadflkjsasf) -- bogus_domain = "sadflkjsasf.i.nvali.d."
./Lib/test/test_urllibnet.py:133:39    - Unknown word (nvali)       -- domain = "sadflkjsasf.i.nvali.d."
./Lib/test/test_urllibnet.py:195:61    - Unknown word (fileheaders) -- as (file_location, fileheaders):
./Lib/test/test_urllibnet.py:196:13    - Unknown word (datevalue)   -- datevalue = fileheaders.get('Date
./Lib/test/test_urlparse.py:1025:14   - Unknown word (telurl)        -- def test_telurl_params(self):
./Lib/test/test_urlparse.py:1074:9    - Unknown word (denorm)        -- denorm_chars = [
./Lib/test/test_urlparse.py:1103:42   - Unknown word (opaquestring)  -- assertEqual(splittype('type:opaquestring'), ('type', 'opaquestring
./Lib/test/test_urlparse.py:151:29    - Unknown word (hinet)      -- ('mms://wms.sys.hinet.net/cts/Drama/09006
./Lib/test/test_urlparse.py:216:31    - Unknown word (relurl)     -- checkJoin(self, base, relurl, expected):
./Lib/test/test_urlparse.py:219:28    - Unknown word (baseb)      -- bytes_components = baseb, relurlb, expectedb
./Lib/test/test_urlparse.py:219:35    - Unknown word (relurlb)    -- components = baseb, relurlb, expectedb = [
./Lib/test/test_urlparse.py:219:44    - Unknown word (expectedb)  -- components = baseb, relurlb, expectedb = [
./Lib/test/test_urlparse.py:224:46    - Unknown word (newscheme)  -- Python', './Python','x-newscheme://foo.com/stuff','x
./Lib/test/test_urlparse.py:385:14    - Unknown word (urljoins)   -- def test_urljoins(self):
./Lib/test/test_urlparse.py:416:31    - Unknown word (pathtorepo) -- self.checkJoin('svn://pathtorepo/dir1', 'dir2', 'svn
./Lib/test/test_urlparse.py:448:35    - Unknown word (affe)       -- dead:beef:cafe:5417:affe:8fa3:deaf:feed', 54
./Lib/test/test_urlparse.py:477:13    - Unknown word (urlparsed)  -- urlparsed = urllib.parse.urlparse
./Lib/test/test_urlparse.py:506:18    - Unknown word (defrag)     -- for url, defrag, frag in str_cases
./Lib/test/test_urlparse.py:617:102   - Unknown word (nment)      -- query\n=\tsomething#frag\nment"
./Lib/test/test_urlparse.py:674:38    - Unknown word (maddr)      -- sip:alice@atlanta.com;maddr=239.255.255.1;ttl=1
./Lib/test/test_urlparse.py:716:14    - Unknown word (withoutscheme) -- def test_withoutscheme(self):
./Lib/test/test_urlparse.py:735:14    - Unknown word (portseparator) -- def test_portseparator(self):
./Lib/test/test_urlparse.py:73:14     - Unknown word (Roundtrips) -- def checkRoundtrips(self, url, parsed, split
./Lib/test/test_urlparse.py:753:14    - Unknown word (usingsys)      -- def test_usingsys(self):
./Lib/test/test_urlparse.py:757:14    - Unknown word (anyscheme)     -- def test_anyscheme(self):
./Lib/test/test_urlparse.py:977:51    - Unknown word (Fanother)      -- result, "a=some%20value%2Fanother")
./Lib/test/test_userdict.py:119:9     - Unknown word (ikeys)      -- ikeys = []
./Lib/test/test_userlist.py:49:14     - Unknown word (mixedcmp)   -- def test_mixedcmp(self):
./Lib/test/test_userlist.py:55:14     - Unknown word (mixedadd)   -- def test_mixedadd(self):
./Lib/test/test_userstring.py:49:15     - Unknown word (ustr)       -- class ustr2(UserString):
./Lib/test/test_utf8_mode.py:49:14     - Unknown word (xoption)    -- def test_xoption(self):
./Lib/test/test_utf8source.py:9:14      - Unknown word (Питон)      -- "Питон".encode("utf-8"),
./Lib/test/test_uu.py:104:14    - Unknown word (missingbegin)       -- def test_missingbegin(self):
./Lib/test/test_uu.py:152:9     - Unknown word (safefilename)       -- safefilename = b"test.txt\\n\\roverflow
./Lib/test/test_uu.py:17:1      - Unknown word (encodedtext) -- encodedtext = b"""\
./Lib/test/test_uu.py:190:14    - Unknown word (tmpin)              -- self.tmpin = os_helper.TESTFN
./Lib/test/test_uu.py:191:14    - Unknown word (tmpout)             -- self.tmpout = os_helper.TESTFN_ASCII
./Lib/test/test_uu.py:202:45    - Unknown word (fout)               -- self.tmpout, 'wb') as fout:
./Lib/test/test_uu.py:241:14    - Unknown word (decodetwice)        -- def test_decodetwice(self):
./Lib/test/test_uu.py:49:5      - Unknown word (encodedtextwrapped) -- def encodedtextwrapped(mode, filename, backtick
./Lib/test/test_uu.py:95:14     - Unknown word (truncatedinput)     -- def test_truncatedinput(self):
./Lib/test/test_uuid.py:149:15    - Unknown word (fffefdfcfffefffefffefffefdfcfbfa) -- 'fffefdfcfffefffefffefffefdfcfbfa',
./Lib/test/test_uuid.py:221:9     - Unknown word (badvalue)                         -- badvalue = lambda f: self.assertRaises
./Lib/test/test_uuid.py:222:9     - Unknown word (badtype)                          -- badtype = lambda f: self.assertRaises
./Lib/test/test_uuid.py:287:21    - Unknown word (bble)                             -- for bble in [[], [('bytes_le
./Lib/test/test_uuid.py:737:43    - Unknown word (Ipkts)                            -- Address Ipkts Ierrs    Opkts Oerrs
./Lib/test/test_uuid.py:737:49    - Unknown word (Ierrs)                            -- Address Ipkts Ierrs Opkts Oerrs  Coll
./Lib/test/test_uuid.py:737:58    - Unknown word (Opkts)                            -- Ipkts Ierrs    Opkts Oerrs  Coll
./Lib/test/test_uuid.py:737:64    - Unknown word (Oerrs)                            -- Ipkts Ierrs    Opkts Oerrs Coll
./Lib/test/test_uuid.py:764:60    - Unknown word (Idrop)                            -- Ipkts Ierrs Idrop Opkts Oerrs  Coll
./Lib/test/test_uuid.py:765:1     - Unknown word (vtnet)                            -- vtnet 1500 <Link#1>
./Lib/test/test_uuid.py:800:16    - Unknown word (encap)                            -- fake Link encap:UNSPEC hwaddr 00-0
./Lib/test/test_uuid.py:800:30    - Unknown word (hwaddr)                           -- Link encap:UNSPEC  hwaddr 00-00
./Lib/test/test_uuid.py:801:1     - Unknown word (cscotun)                          -- cscotun0 Link encap:UNSPEC
./Lib/test/test_uuid.py:846:33    - Unknown word (lanscan)                          -- unittest.skipUnless(_uuid._lanscan_getnode in _uuid._GETTERS
./Lib/test/test_venv.py:188:9     - Unknown word (envpy)      -- envpy = os.path.join(self
./Lib/test/test_venv.py:253:14    - Unknown word (unoverwritable) -- def test_unoverwritable_fails(self):
./Lib/test/test_venv.py:29:54     - Unknown word (venvs)      -- executable can create venvs from within
./Lib/test/test_venv.py:393:31    - Unknown word (pipefail)       -- f.write("set -euo pipefail\n"
./Lib/test/test_venv.py:54:18     - Unknown word (bindir)     -- self.bindir = 'Scripts'
./Lib/test/test_weakref.py:1025:7    - Unknown word (Subclassable)    -- class SubclassableWeakrefTestCase(TestBase
./Lib/test/test_weakref.py:123:14    - Unknown word (cfunction)  -- def test_cfunction(self):
./Lib/test/test_weakref.py:1418:16   - Unknown word (iterkeyrefs)     -- # Test iterkeyrefs()
./Lib/test/test_weakref.py:1493:67   - Unknown word (testcontext)     -- iterating(self, dict, testcontext):
./Lib/test/test_weakref.py:1510:9    - Unknown word (ddict)           -- ddict = copy.copy(dict)
./Lib/test/test_weakref.py:2150:17   - Unknown word (Finalizer)       -- class MyFinalizer(weakref.finalize):
./Lib/test/test_weakref.py:221:34    - Unknown word (getweakrefcount) -- assertEqual(weakref.getweakrefcount(o), 2,
./Lib/test/test_weakref.py:336:45    - Unknown word (makeref)         -- without_callback(self, makeref):
./Lib/test/test_weakref.py:412:9     - Unknown word (lyst)            -- lyst = List()
./Lib/test/test_weakref.py:521:14    - Unknown word (getweakrefs)     -- def test_getweakrefs(self):
./Lib/test/test_weakref.py:602:17    - Unknown word (endeth)          -- # There endeth the first part.  It
./Lib/test/test_weakref.py:616:61    - Unknown word (deallocs)        -- call the base classes' deallocs too,
./Lib/test/test_weakref.py:629:17    - Unknown word (acallback)       -- def acallback(self, ignore):
./Lib/test/test_weakref.py:73:14     - Unknown word (cbcalled)   -- self.cbcalled = 0
./Lib/test/test_weakref.py:976:17    - Unknown word (wself)           -- wself = weakref.ref(self)
./Lib/test/test_weakref.py:977:24    - Unknown word (wparent)         -- def cb(wparent):
./Lib/test/test_weakset.py:38:9      - Unknown word (weaksetmethods) -- weaksetmethods = dir(WeakSet)
./Lib/test/test_webbrowser.py:224:21    - Unknown word (tryorder)   -- self._saved_tryorder = webbrowser._tryorder
./Lib/test/test_webbrowser.py:294:29    - Unknown word (fakebrowser) -- webbrowser.get('fakebrowser')
./Lib/test/test_webbrowser.py:80:24     - Unknown word (autoraise)  -- def test_open_with_autoraise_false(self):
./Lib/test/test_with.py:236:7     - Unknown word (Nonexceptional) -- class NonexceptionalTestCase(unittest.TestCase
./Lib/test/test_with.py:5:14      - Unknown word (mbland)     -- __email__ = "mbland at acm dot org"
./Lib/test/test_with.py:663:22    - Unknown word (Doesnt)         -- def testExitFalseDoesntSwallowException(self
./Lib/test/test_wsgiref.py:444:27    - Unknown word (spammity)    -- SCRIPT_NAME="/spammity", PATH_INFO="/spam"
./Lib/test/test_wsgiref.py:4:16      - Unknown word (httpservers) -- from test.test_httpservers import NoLogRequestHandler
./Lib/test/test_wsgiref.py:584:63    - Unknown word (overriden)   -- variables which are not overriden
./Lib/test/test_wsgiref.py:69:9      - Unknown word (amock)       -- def run_amock(app=hello_app, data
./Lib/test/test_wsgiref.py:728:9     - Unknown word (stdpat)      -- stdpat = (
./Lib/test/test_wsgiref.py:733:9     - Unknown word (shortpat)    -- shortpat = (
./Lib/test/test_wsgiref.py:73:5      - Unknown word (olderr)      -- olderr = sys.stderr
./Lib/test/test_wsgiref.py:786:19    - Unknown word (Crashy)      -- class CrashyIterable(object):
./Lib/test/test_xdrlib.py:77:14     - Unknown word (uhyper)     -- def test_uhyper(self):
./Lib/test/test_xml_etree.py:1105:9    - Unknown word (stringlist)    -- stringlist = ET.tostringlist(elem
./Lib/test/test_xml_etree.py:1130:13   - Unknown word (bxml)          -- def bxml(encoding):
./Lib/test/test_xml_etree.py:123:5     - Unknown word (checkwarnings) -- def checkwarnings(*filters, quiet=False
./Lib/test/test_xml_etree.py:132:5     - Unknown word (convlinesep)   -- def convlinesep(data):
./Lib/test/test_xml_etree.py:1370:18   - Unknown word (olist)         -- check("//olist/item", ['//', 'olist
./Lib/test/test_xml_etree.py:1442:25   - Unknown word (cirriculum)    -- e = ET.Element('cirriculum', status='public', company
./Lib/test/test_xml_etree.py:1696:31   - Unknown word (pitarget)      -- self._feed(parser, "<?pitarget?>\n")
./Lib/test/test_xml_etree.py:1706:9    - Unknown word (eventset)      -- eventset = {'end', 'start'}
./Lib/test/test_xml_etree.py:2054:18   - Unknown word (xmltoolkit)    -- def test_bug_xmltoolkit21(self):
./Lib/test/test_xml_etree.py:2143:45   - Unknown word (ldots)         -- DOCTYPE doc [<!ENTITY ldots '&#x8230;'>]>"
./Lib/test/test_xml_etree.py:2176:22   - Unknown word (rsquo)         -- ENTITIES = {'rsquo': '\u2019', 'lsquo'
./Lib/test/test_xml_etree.py:2176:41   - Unknown word (lsquo)         -- 'rsquo': '\u2019', 'lsquo': '\u2018'}
./Lib/test/test_xml_etree.py:2182:2    - Unknown word (subdoc)        -- <subdoc-abstract>
./Lib/test/test_xml_etree.py:227:13    - Unknown word (direlem)       -- direlem = dir(element)
./Lib/test/test_xml_etree.py:2335:9    - Unknown word (newelem)       -- newelem = ET.XML(SAMPLE_XML
./Lib/test/test_xml_etree.py:2424:9    - Unknown word (xmlattr)       -- xmlattr = root.get('b')
./Lib/test/test_xml_etree.py:2590:11   - Unknown word (dummyref)      -- d.dummyref = ET.Element('joe',
./Lib/test/test_xml_etree.py:2591:9    - Unknown word (wref)          -- wref = weakref.ref(d)
./Lib/test/test_xml_etree.py:2893:14   - Unknown word (istype)        -- def test_istype(self):
./Lib/test/test_xml_etree.py:2926:17   - Unknown word (newmethod)     -- def newmethod(self):
./Lib/test/test_xml_etree.py:3126:32   - Unknown word (nsmaps)        -- test_findall_different_nsmaps(self):
./Lib/test/test_xml_etree.py:3133:9    - Unknown word (nsmap)         -- nsmap = {'xx': 'X'}
./Lib/test/test_xml_etree.py:318:14    - Unknown word (simpleops)     -- def test_simpleops(self):
./Lib/test/test_xml_etree.py:3214:10   - Unknown word (ilist)         -- def _ilist(self, elem, tag=None
./Lib/test/test_xml_etree.py:3319:28   - Unknown word (sometext)      -- sample2 = '''<toplevel>sometext</toplevel>'''
./Lib/test/test_xml_etree.py:3392:35   - Unknown word (texttail)      -- assertEqual(a.text, "texttail")
./Lib/test/test_xml_etree.py:340:34    - Unknown word (subtag)        -- subelement = ET.Element("subtag")
./Lib/test/test_xml_etree.py:3449:26   - Unknown word (elementfactory) -- def test_treebuilder_elementfactory_none(self):
./Lib/test/test_xml_etree.py:3492:13   - Unknown word (myfactory)      -- def myfactory(tag, attrib):
./Lib/test/test_xml_etree.py:3523:23   - Unknown word (TAL's)          -- # Mimic SimpleTAL's behaviour (issue #1
./Lib/test/test_xml_etree.py:3691:26   - Unknown word (elemlist)       -- def _elem_tags(self, elemlist):
./Lib/test/test_xml_etree.py:3697:40   - Unknown word (numchildren)    -- with_children(self, numchildren):
./Lib/test/test_xml_etree.py:377:9     - Unknown word (stringfile)    -- stringfile = io.BytesIO(SAMPLE
./Lib/test/test_xml_etree.py:40:49     - Unknown word (xmltestdata) -- simple.xml", subdir="xmltestdata")
./Lib/test/test_xml_etree.py:4278:24   - Unknown word (attrx)          -- <a x:attr="attrx">
./Lib/test/test_xml_etree.py:4279:20   - Unknown word (abtext)         -- <b>abtext</b>
./Lib/test/test_xml_etree.py:4281:16   - Unknown word (btext)          -- <b>btext</b>
./Lib/test/test_xml_etree.py:4353:19   - Unknown word (roundtripped)   -- # output, not roundtripped C14N (see above).
./Lib/test/test_xml_etree.py:4358:9    - Unknown word (datadir)        -- datadir = findfile("c14n-20
./Lib/test/test_xml_etree.py:4404:21   - Unknown word (qattrs)         -- qattrs = [
./Lib/test/test_xml_etree.py:4409:21   - Unknown word (qtags)          -- qtags = [
./Lib/test/test_xml_etree.py:4424:43   - Unknown word (Redecl)         -- if input_file == 'inNsRedecl' and not rewrite_prefixes
./Lib/test/test_xml_etree.py:4426:31   - Unknown word (Redeclared)     -- f"Redeclared namespace handling is
./Lib/test/test_xml_etree.py:453:19    - Unknown word (testb)         -- elem.set('testb', 'test2')
./Lib/test/test_xml_etree.py:461:22    - Unknown word (testc)         -- elem.attrib['testc'] = 'test2'
./Lib/test/test_xml_etree.py:479:9     - Unknown word (subelem)       -- subelem = elem.makeelement(
./Lib/test/test_xml_etree.py:545:14    - Unknown word (parseliteral)  -- def test_parseliteral(self):
./Lib/test/test_xml_etree.py:61:4      - Unknown word (nexttag)     -- <nexttag />
./Lib/test/test_xml_etree.py:62:4      - Unknown word (nextsection) -- <nextsection>
./Lib/test/test_xmlrpc.py:1141:11   - Unknown word (Keepalive)      -- class BaseKeepaliveServerTestCase(BaseServerTestC
./Lib/test/test_xmlrpc.py:1150:18   - Unknown word (reqidx)         -- self.reqidx = len(self.myRequests
./Lib/test/test_xmlrpc.py:116:45    - Unknown word (methodresponse) -- methodresponse=True))
./Lib/test/test_xmlrpc.py:1438:9    - Unknown word (flagval)        -- flagval = xmlrpc.server.SimpleXMLRPCS
./Lib/test/test_xmlrpc.py:1516:19   - Unknown word (sysout)         -- # get sysout output
./Lib/test/test_xmlrpc.py:1564:63   - Unknown word (datapassing)    -- inorder to avoid all the datapassing
./Lib/test/test_xmlrpc.py:1594:9    - Unknown word (mybytes)        -- mybytes, mydate = self.log
./Lib/test/test_xmlrpc.py:1603:14   - Unknown word (xmlrpcserver)   -- def test_xmlrpcserver_has_use_builtin_types
./Lib/test/test_xmlrpc.py:195:9     - Unknown word (strg)           -- strg = xmlrpclib.dumps(arg
./Lib/test/test_xmlrpc.py:306:17    - Unknown word (biginteger)     -- check('<biginteger>9876543210012345678
./Lib/test/test_xmlrpc.py:309:17    - Unknown word (bigdecimal)     -- check('<bigdecimal>9876543210.01234567
./Lib/test/test_xmlrpc.py:317:56    - Unknown word (Nlcg)           -- Authorization', 'Basic dXNlcg==')], {}))
./Lib/test/test_xmlrpc.py:32:12     - Unknown word (anotherlist) -- 'anotherlist': ['.zyx.41'],
./Lib/test/test_xmlrpc.py:38:12     - Unknown word (ukey)        -- 'ukey\u4000': 'regular value
./Lib/test/test_xmlrpc.py:479:10    - Unknown word (newf)           -- (newf,), m = xmlrpclib.loads
./Lib/test/test_xmlrpc.py:543:9     - Unknown word (dtime)          -- dtime = xmlrpclib.DateTime
./Lib/test/test_xmlrpc.py:561:9     - Unknown word (dbytes)         -- dbytes = dstr.encode('ascii
./Lib/test/test_xmlrpc.py:620:22    - Unknown word (numrequests)    -- def http_server(evt, numrequests, requestHandler=None
./Lib/test/test_xmlrpc.py:660:46    - Unknown word (têšt)           -- function(lambda x: x, 'têšt')
./Lib/test/test_xmlrpc.py:67:10     - Unknown word (newdt)       -- (newdt,) = result
./Lib/test/test_xmlrpc.py:906:13    - Unknown word (divhelp)        -- divhelp = p.system.methodHelp
./Lib/test/test_xmlrpc.py:922:13    - Unknown word (myfunction)     -- myfunction = p.system.methodHelp
./Lib/test/test_xmlrpc.py:937:13    - Unknown word (divsig)         -- divsig = p.system.methodSignature
./Lib/test/test_yield_from.py:1019:40   - Unknown word (stacktop)   -- and in particular f_stacktop was NULL).
./Lib/test/test_yield_from.py:866:35    - Unknown word (Vorpal)     -- raise ValueError("Vorpal bunny encountered")
./Lib/test/test_zipapp.py:251:24    - Unknown word (pathobj)    -- def test_read_from_pathobj(self):
./Lib/test/test_zipfile.py:1197:32   - Unknown word (testpackage) -- zipfp.writepy(fn, "testpackage")
./Lib/test/test_zipfile.py:1207:9    - Unknown word (packagedir)  -- packagedir = os.path.dirname(email
./Lib/test/test_zipfile.py:1237:43   - Unknown word (filterfunc)  -- writepy(packagedir, filterfunc=lambda whatever: False
./Lib/test/test_zipfile.py:1257:9    - Unknown word (optlevel)    -- optlevel = 1 if __debug__ else
./Lib/test/test_zipfile.py:1358:24   - Unknown word (fdata)       -- for fpath, fdata in SMALL_TEST_DATA:
./Lib/test/test_zipfile.py:1366:21   - Unknown word (writtenfile) -- writtenfile = zipfp.extract(fpath
./Lib/test/test_zipfile.py:1369:21   - Unknown word (correctfile) -- correctfile = os.path.join(os.getcwd
./Lib/test/test_zipfile.py:138:40    - Unknown word (zipopen)    -- zipfp.open(TESTFN) as zipopen1:
./Lib/test/test_zipfile.py:1400:28   - Unknown word (extdir)      -- with temp_dir() as extdir:
./Lib/test/test_zipfile.py:1455:16   - Unknown word (hacknames)   -- common_hacknames = [
./Lib/test/test_zipfile.py:1503:22   - Unknown word (fixedname)   -- for arcname, fixedname in hacknames:
./Lib/test/test_zipfile.py:1630:29   - Unknown word (приклад)     -- zipfp.writestr('приклад', b'sample')
./Lib/test/test_zipfile.py:1698:23   - Unknown word (zipfiles)    -- """Check that zipfiles with missing bytes at
./Lib/test/test_zipfile.py:1761:13   - Unknown word (dirsize)     -- for dirsize in 1, 2**32-1:
./Lib/test/test_zipfile.py:1857:51   - Unknown word (zipfr)       -- TESTFN, mode="r") as zipfr:
./Lib/test/test_zipfile.py:2275:9    - Unknown word (datacount)   -- datacount = randint(16, 64)*1
./Lib/test/test_zipfile.py:2422:47   - Unknown word (zopen)       -- zipf.open('ones') as zopen:
./Lib/test/test_zipfile.py:256:21    - Unknown word (linedata)   -- linedata = zipopen.readline(
./Lib/test/test_zipfile.py:2693:9    - Unknown word (zipfilecmd)  -- def zipfilecmd(self, *args, **kwargs
./Lib/test/test_zipfile.py:269:17    - Unknown word (ziplines)   -- ziplines = zipopen.readlines
./Lib/test/test_zipfile.py:270:23    - Unknown word (zipline)    -- for line, zipline in zip(self.line_gen
./Lib/test/test_zipfile.py:277:13    - Unknown word (iterlines)  -- def zip_iterlines_test(self, f, compression
./Lib/test/test_zipfile.py:2844:11   - Unknown word (alpharep)    -- def build_alpharep_fixture():
./Lib/test/test_zipfile.py:2905:17   - Unknown word (ondisk)      -- def zipfile_ondisk(self, alpharep):
./Lib/test/test_zipfile.py:298:43    - Unknown word (openobj)    -- zipfp.open("strfile") as openobj:
./Lib/test/test_zipfile.py:3023:23   - Unknown word (simplediv)   -- def test_traverse_simplediv(self, alpharep):
./Lib/test/test_zipfile.py:32:26     - Unknown word (datafiles)  -- DATAFILES_DIR = 'zipfile_datafiles'
./Lib/test/test_zipfile.py:330:74    - Unknown word (zipf)       -- self.compression) as zipf:
./Lib/test/test_zipfile.py:341:9     - Unknown word (zipfiledata) -- zipfiledata = fp.getvalue()
./Lib/test/test_zipfile.py:34:23     - Unknown word (ziptest)    -- SMALL_TEST_DATA = [('_ziptest1', '1q2w3e4r5t'),
./Lib/test/test_zipfile.py:35:47     - Unknown word (qawsedrftg) -- ziptest2dir/_ziptest2', 'qawsedrftg'),
./Lib/test/test_zipfile.py:36:59     - Unknown word (azsxdcfvgb) -- ziptest3dir/_ziptest3', 'azsxdcfvgb'),
./Lib/test/test_zipfile.py:468:13    - Unknown word (zinfo)       -- zinfo = zipfp.getinfo('strfile
./Lib/test/test_zipfile.py:478:23    - Unknown word (arcnames)    -- def test_absolute_arcnames(self):
./Lib/test/test_zipfile.py:497:17    - Unknown word (fpin)        -- # line "fpin.seek(-22, 2)" in _EndRecData
./Lib/test/test_zipfile.py:64:51     - Unknown word (zipfp)      -- f, "w", **kwargs) as zipfp:
./Lib/test/test_zipfile.py:659:34    - Unknown word (storeme)     -- zipfp.write(TESTFN, 'storeme', zipfile.ZIP_STORED
./Lib/test/test_zipfile.py:660:34    - Unknown word (deflateme)   -- zipfp.write(TESTFN, 'deflateme', zipfile.ZIP_DEFLATED
./Lib/test/test_zipfile.py:662:13    - Unknown word (dinfo)       -- dinfo = zipfp.getinfo('deflateme
./Lib/test/test_zipfile.py:67:29     - Unknown word (strfile)    -- zipfp.writestr("strfile", self.data)
./Lib/test/test_zipfile.py:689:15    - Unknown word (filecount)   -- self._filecount_limit = zipfile.ZIP
./Lib/test/test_zipfile.py:766:9     - Unknown word (numfiles)    -- numfiles = 15
./Lib/test/test_zipimport.py:101:17    - Unknown word (dname)          -- dname = os.path.dirname(path
./Lib/test/test_zipimport.py:227:9     - Unknown word (badmagic)       -- badmagic_pyc = bytearray(test
./Lib/test/test_zipimport.py:246:9     - Unknown word (badtime)        -- badtime_pyc = bytearray(test
./Lib/test/test_zipimport.py:263:9     - Unknown word (packdir)        -- packdir = TESTPACK + os.sep
./Lib/test/test_zipimport.py:332:9     - Unknown word (mpath)          -- mpath = list(mod.__path__
./Lib/test/test_zipimport.py:507:27    - Unknown word (archivepath)    -- # test prefix and archivepath members
./Lib/test/test_zipimport.py:52:12     - Unknown word (ziptestmodule) -- TESTMOD = "ziptestmodule"
./Lib/test/test_zipimport.py:53:13     - Unknown word (ziptestpackage) -- TESTPACK = "ziptestpackage"
./Lib/test/test_zipimport.py:783:32    - Unknown word (Adfjdk)         -- self.assertZipFailure('AdfjdkFJKDFJjdklfjs')
./Lib/test/test_zipimport.py:783:38    - Unknown word (FJKDF)          -- assertZipFailure('AdfjdkFJKDFJjdklfjs')
./Lib/test/test_zipimport.py:783:43    - Unknown word (Jjdklfjs)       -- assertZipFailure('AdfjdkFJKDFJjdklfjs')
./Lib/test/test_zlib.py:109:14    - Unknown word (badcompressobj) -- def test_badcompressobj(self):
./Lib/test/test_zlib.py:116:14    - Unknown word (baddecompressobj) -- def test_baddecompressobj(self):
./Lib/test/test_zlib.py:120:28    - Unknown word (badflush)         -- def test_decompressobj_badflush(self):
./Lib/test/test_zlib.py:242:9     - Unknown word (datasrc)          -- datasrc = HAMLET_SCENE * 12
./Lib/test/test_zlib.py:243:9     - Unknown word (datazip)          -- datazip = zlib.compress(datasrc
./Lib/test/test_zlib.py:272:31    - Unknown word (zdict)            -- zdict=b"")
./Lib/test/test_zlib.py:282:14    - Unknown word (compressoptions)  -- def test_compressoptions(self):
./Lib/test/test_zlib.py:297:14    - Unknown word (compressincremental) -- def test_compressincremental(self):
./Lib/test/test_zlib.py:305:9     - Unknown word (combuf)              -- combuf = b''.join(bufs)
./Lib/test/test_zlib.py:312:14    - Unknown word (decompinc)           -- def test_decompinc(self, flush=False, source
./Lib/test/test_zlib.py:323:9     - Unknown word (decombuf)            -- decombuf = zlib.decompress(combuf
./Lib/test/test_zlib.py:353:14    - Unknown word (decompincflush)      -- def test_decompincflush(self):
./Lib/test/test_zlib.py:356:14    - Unknown word (decompimax)          -- def test_decompimax(self, source=None, cx
./Lib/test/test_zlib.py:383:14    - Unknown word (decompressmaxlen)    -- def test_decompressmaxlen(self, flush=False):
./Lib/test/test_zlib.py:415:14    - Unknown word (decompressmaxlenflush) -- def test_decompressmaxlenflush(self):
./Lib/test/test_zlib.py:420:14    - Unknown word (maxlenmisc)            -- def test_maxlenmisc(self):
./Lib/test/test_zlib.py:446:9     - Unknown word (ddata)                 -- ddata = dco.decompress(cdata
./Lib/test/test_zlib.py:498:33    - Unknown word (Wichmann)              -- # In 2.3 and later, WichmannHill is the RNG of the
./Lib/test/test_zlib.py:628:9     - Unknown word (uncomp)                -- uncomp = dco.decompress(comp
./Lib/test/test_zlib.py:660:14    - Unknown word (compresscopy)          -- def test_compresscopy(self):
./Lib/test/test_zlib.py:684:14    - Unknown word (badcompresscopy)       -- def test_badcompresscopy(self):
./Lib/test/test_zlib.py:694:14    - Unknown word (decompresscopy)        -- def test_decompresscopy(self):
./Lib/test/test_zlib.py:719:14    - Unknown word (baddecompresscopy)     -- def test_baddecompresscopy(self):
./Lib/test/test_zlib.py:731:14    - Unknown word (compresspickle)        -- def test_compresspickle(self):
./Lib/test/test_zlib.py:738:14    - Unknown word (decompresspickle)      -- def test_decompresspickle(self):
./Lib/test/test_zlib.py:883:16    - Unknown word (unproportioned)        -- Nor any unproportioned thought his act.
./Lib/test/test_zlib.py:901:33    - Unknown word (ownself)               -- above all: to thine ownself be true,
./Lib/test/test_zlib.py:92:14     - Unknown word (badlevel)   -- def test_badlevel(self):
./Lib/test/testcodec.py:1:31      - Unknown word (charmapcodec) -- Codecs (used by test_charmapcodec)
./Lib/test/testtar.tar:115:164   - Unknown word (regtype)        --               ustar/regtype                    
./Lib/test/testtar.tar:1202:683  - Unknown word (suntar)         --        misc/regtype-suntar                    
./Lib/test/testtar.tar:1553:5    - Unknown word (linkpath)       -- 526 linkpath=pax/123/123/123/123
./Lib/test/testtar.tar:1554:1445  - Unknown word (Üäöüß)          -- path=pax/umlauts-ÄÖÜäöüß
./Lib/test/testtar.tar:1:266     - Unknown word (tarfile)    --             ustar 00tarfile                    
./Lib/test/testtar.tar:1:7       - Unknown word (conttype)   -- ustar/conttype                    
./Lib/test/testtar.tar:2264:11   - Unknown word (nlink)          -- 18 SCHILY.nlink=1
./Lib/test/testtar.tar:229:1188  - Unknown word (lnktype)        --               ustar/lnktype                    
./Lib/test/testtar.tar:229:164   - Unknown word (dirtype)        --               ustar/dirtype/                   
./Lib/test/testtar.tar:229:1700  - Unknown word (symtype)        --               ustar/symtype                    
./Lib/test/testtar.tar:229:2212  - Unknown word (blktype)        --               ustar/blktype                    
./Lib/test/testtar.tar:229:2724  - Unknown word (chrtype)        --               ustar/chrtype                    
./Lib/test/testtar.tar:229:3236  - Unknown word (fifotype)       --               ustar/fifotype                    
./Lib/test/testtar.tar:39:21     - Unknown word (ideosyncratic) -- For instance: ABC's ideosyncratic syntax (all uppercase
./Lib/test/testtar.tar:50:11     - Unknown word (Palo)          -- Center in Palo Alto). Imagine what
./Lib/test/testtar.tar:55:33     - Unknown word (ideosyncracies) -- individual creation has its ideosyncracies, and occasionally its
./Lib/test/testtar.tar:686:15    - Unknown word (numblocks)      -- 27 GNU.sparse.numblocks=11
./Lib/test/tokenize_tests-latin1-coding-cookie-and-utf8-bom-sig.txt:7:50      - Unknown word (doctest)    -- text (stolen from test_doctest2.py).
./Lib/test/tokenize_tests.txt:155:16    - Unknown word (restt)      -- def d01v(a=1, *restt, **restd): pass
./Lib/test/tokenize_tests.txt:155:25    - Unknown word (restd)      -- d01v(a=1, *restt, **restd): pass
./Lib/test/xmltestdata/c14n-20/README:14:36     - Unknown word (Keio)       -- 3 W3C® (MIT, ERCIM, Keio, Beihang),
./Lib/test/xmltestdata/c14n-20/README:14:42     - Unknown word (Beihang)    -- (MIT, ERCIM, Keio, Beihang),
./Lib/test/xmltestdata/c14n-20/c14nComment.xml:1:2       - Unknown word (dsig)       -- <dsig:CanonicalizationMethod
./Lib/test/xmltestdata/c14n-20/c14nComment.xml:1:7       - Unknown word (Canonicalization) -- <dsig:CanonicalizationMethod xmlns:dsig="http
./Lib/test/xmltestdata/c14n-20/doc.xsl:2:6       - Unknown word (stylesheet) -- <xsl:stylesheet version="1.0"
./Lib/test/xmltestdata/c14n-20/inC14N5.xml:6:24      - Unknown word (viewgif)    -- NOTATION gif SYSTEM "viewgif.exe">
./Lib/test/ziptestdata/README.md:11:1      - Unknown word (zipimport)  -- zipimport machinery (that'd look
./Lib/test/ziptestdata/README.md:4:58      - Unknown word (infozip's)  -- file. You must have infozip's zip utility
./Lib/test/ziptestdata/exe_with_z64:16:28     - Unknown word (infolist)   -- file_info in exe_zip.infolist():
./Lib/test/ziptestdata/exe_with_z64:9:8       - Unknown word (zipfile)    -- import zipfile
./Lib/test/ziptestdata/exe_with_zip:26:26     - Unknown word (testdata)   -- \*OI_?SE   E     testdata_module_inside_zip.pyUT
./Lib/textwrap.py:149:9     - Unknown word (Munge)      -- Munge whitespace in text:
./Lib/textwrap.py:192:9     - Unknown word (patsearch)  -- patsearch = self.sentence_end
./Lib/textwrap.py:67:5      - Unknown word (uspace)     -- uspace = ord(' ')
./Lib/this.py:10:1      - Unknown word (Fcrpvny)     -- Fcrpvny pnfrf nera'g fcrpvny
./Lib/this.py:10:15     - Unknown word (nera'g)      -- Fcrpvny pnfrf nera'g fcrpvny rabhtu gb oernx
./Lib/this.py:10:22     - Unknown word (fcrpvny)     -- Fcrpvny pnfrf nera'g fcrpvny rabhtu gb oernx gur
./Lib/this.py:10:30     - Unknown word (rabhtu)      -- pnfrf nera'g fcrpvny rabhtu gb oernx gur ehyrf.
./Lib/this.py:10:40     - Unknown word (oernx)       -- g fcrpvny rabhtu gb oernx gur ehyrf.
./Lib/this.py:10:50     - Unknown word (ehyrf)       -- rabhtu gb oernx gur ehyrf.
./Lib/this.py:10:9      - Unknown word (pnfrf)       -- Fcrpvny pnfrf nera'g fcrpvny rabhtu
./Lib/this.py:11:1      - Unknown word (Nygubhtu)    -- Nygubhtu cenpgvpnyvgl orngf chevgl
./Lib/this.py:11:10     - Unknown word (cenpgvpnyvgl) -- Nygubhtu cenpgvpnyvgl orngf chevgl.
./Lib/this.py:11:23     - Unknown word (orngf)        -- Nygubhtu cenpgvpnyvgl orngf chevgl.
./Lib/this.py:11:29     - Unknown word (chevgl)       -- Nygubhtu cenpgvpnyvgl orngf chevgl.
./Lib/this.py:12:1      - Unknown word (Reebef)       -- Reebef fubhyq arire cnff fvyragyl
./Lib/this.py:12:15     - Unknown word (arire)        -- Reebef fubhyq arire cnff fvyragyl.
./Lib/this.py:12:21     - Unknown word (cnff)         -- Reebef fubhyq arire cnff fvyragyl.
./Lib/this.py:12:26     - Unknown word (fvyragyl)     -- Reebef fubhyq arire cnff fvyragyl.
./Lib/this.py:12:8      - Unknown word (fubhyq)       -- Reebef fubhyq arire cnff fvyragyl
./Lib/this.py:13:1      - Unknown word (Hayrff)       -- Hayrff rkcyvpvgyl fvyraprq
./Lib/this.py:13:19     - Unknown word (fvyraprq)     -- Hayrff rkcyvpvgyl fvyraprq.
./Lib/this.py:13:8      - Unknown word (rkcyvpvgyl)   -- Hayrff rkcyvpvgyl fvyraprq.
./Lib/this.py:14:16     - Unknown word (nzovthvgl)    -- Va gur snpr bs nzovthvgl, ershfr gur grzcgngvba
./Lib/this.py:14:27     - Unknown word (ershfr)       -- gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff
./Lib/this.py:14:38     - Unknown word (grzcgngvba)   -- nzovthvgl, ershfr gur grzcgngvba gb thrff.
./Lib/this.py:14:52     - Unknown word (thrff)        -- ershfr gur grzcgngvba gb thrff.
./Lib/this.py:14:8      - Unknown word (snpr)         -- Va gur snpr bs nzovthvgl, ershfr
./Lib/this.py:15:1      - Unknown word (Gurer)        -- Gurer fubhyq or bar-- naq
./Lib/this.py:15:27     - Unknown word (cersrenoyl)   -- fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl
./Lib/this.py:15:38     - Unknown word (bayl)         -- bar-- naq cersrenoyl bayl bar --boivbhf jnl gb
./Lib/this.py:15:49     - Unknown word (boivbhf)      -- cersrenoyl bayl bar --boivbhf jnl gb qb vg.
./Lib/this.py:16:41     - Unknown word (svefg)        -- znl abg or boivbhf ng svefg hayrff lbh'er Qhgpu
./Lib/this.py:16:47     - Unknown word (hayrff)       -- or boivbhf ng svefg hayrff lbh'er Qhgpu.
./Lib/this.py:16:54     - Unknown word (lbh'er)       -- boivbhf ng svefg hayrff lbh'er Qhgpu.
./Lib/this.py:16:61     - Unknown word (Qhgpu)        -- svefg hayrff lbh'er Qhgpu.
./Lib/this.py:18:19     - Unknown word (bsgra)        -- Nygubhtu arire vf bsgra orggre guna *evtug*
./Lib/this.py:18:38     - Unknown word (evtug)        -- vf bsgra orggre guna *evtug* abj.
./Lib/this.py:19:26     - Unknown word (uneq)           -- gur vzcyrzragngvba vf uneq gb rkcynva, vg'f n onq
./Lib/this.py:19:34     - Unknown word (rkcynva)        -- vzcyrzragngvba vf uneq gb rkcynva, vg'f n onq vqrn.
./Lib/this.py:19:54     - Unknown word (vqrn)           -- rkcynva, vg'f n onq vqrn.
./Lib/this.py:19:8      - Unknown word (vzcyrzragngvba) -- Vs gur vzcyrzragngvba vf uneq gb rkcynva,
./Lib/this.py:1:19      - Unknown word (Clguba)     -- s = """Gur Mra bs Clguba, ol Gvz Crgref
./Lib/this.py:1:34      - Unknown word (Crgref)     -- Mra bs Clguba, ol Gvz Crgref
./Lib/this.py:20:26     - Unknown word (rnfl)           -- gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or
./Lib/this.py:20:55     - Unknown word (tbbq)           -- rkcynva, vg znl or n tbbq vqrn.
./Lib/this.py:21:1      - Unknown word (Anzrfcnprf)     -- Anzrfcnprf ner bar ubaxvat terng
./Lib/this.py:21:20     - Unknown word (ubaxvat)        -- Anzrfcnprf ner bar ubaxvat terng vqrn -- yrg'f
./Lib/this.py:21:28     - Unknown word (terng)          -- Anzrfcnprf ner bar ubaxvat terng vqrn -- yrg'f qb zber
./Lib/this.py:21:42     - Unknown word (yrg'f)          -- ubaxvat terng vqrn -- yrg'f qb zber bs gubfr!""
./Lib/this.py:21:51     - Unknown word (zber)           -- terng vqrn -- yrg'f qb zber bs gubfr!"""
./Lib/this.py:21:59     - Unknown word (gubfr)          -- -- yrg'f qb zber bs gubfr!"""
./Lib/this.py:3:1       - Unknown word (Ornhgvshy)  -- Ornhgvshy vf orggre guna htyl
./Lib/this.py:3:14      - Unknown word (orggre)     -- Ornhgvshy vf orggre guna htyl.
./Lib/this.py:3:21      - Unknown word (guna)       -- Ornhgvshy vf orggre guna htyl.
./Lib/this.py:3:26      - Unknown word (htyl)       -- Ornhgvshy vf orggre guna htyl.
./Lib/this.py:4:1       - Unknown word (Rkcyvpvg)   -- Rkcyvpvg vf orggre guna vzcyvpvg
./Lib/this.py:4:25      - Unknown word (vzcyvpvg)   -- Rkcyvpvg vf orggre guna vzcyvpvg.
./Lib/this.py:5:1       - Unknown word (Fvzcyr)     -- Fvzcyr vf orggre guna pbzcyrk
./Lib/this.py:5:23      - Unknown word (pbzcyrk)    -- Fvzcyr vf orggre guna pbzcyrk.
./Lib/this.py:6:1       - Unknown word (Pbzcyrk)    -- Pbzcyrk vf orggre guna pbzcyvpngrq
./Lib/this.py:6:24      - Unknown word (pbzcyvpngrq) -- Pbzcyrk vf orggre guna pbzcyvpngrq.
./Lib/this.py:7:1       - Unknown word (Syng)        -- Syng vf orggre guna arfgrq
./Lib/this.py:7:21      - Unknown word (arfgrq)      -- Syng vf orggre guna arfgrq.
./Lib/this.py:8:1       - Unknown word (Fcnefr)      -- Fcnefr vf orggre guna qrafr
./Lib/this.py:8:23      - Unknown word (qrafr)       -- Fcnefr vf orggre guna qrafr.
./Lib/this.py:9:1       - Unknown word (Ernqnovyvgl) -- Ernqnovyvgl pbhagf.
./Lib/this.py:9:13      - Unknown word (pbhagf)      -- Ernqnovyvgl pbhagf.
./Lib/threading.py:1038:39   - Unknown word (rebindings) -- just make redundant rebindings of ._is_stopped and
./Lib/threading.py:1352:38   - Unknown word (Itamar)     -- class was contributed by Itamar Shtull-Trauring
./Lib/threading.py:1352:45   - Unknown word (Shtull)     -- contributed by Itamar Shtull-Trauring
./Lib/threading.py:1352:52   - Unknown word (Trauring)   -- contributed by Itamar Shtull-Trauring
./Lib/threading.py:1490:12   - Unknown word (atexits)    -- _threading_atexits = []
./Lib/threading.py:1541:9    - Unknown word (tlock)      -- tlock = _main_thread._tstate
./Lib/threading.py:1556:20   - Unknown word (deamon)     -- # Join all non-deamon threads
./Lib/threading.py:317:9     - Unknown word (gotit)      -- gotit = False
./Lib/threading.py:989:42    - Unknown word (pystate)    -- underlying thread state (see pystate.h) gets deleted.
./Lib/timeit.py:112:13    - Unknown word (stmtprefix) -- stmtprefix = setup + '\n'
./Lib/timeit.py:176:11    - Unknown word (gcold)      -- # gcold = gc.isenabled()
./Lib/timeit.py:264:51    - Unknown word (tcpvh)      -- getopt(args, "n:u:s:r:tcpvh",
./Lib/tokenize.py:191:9     - Unknown word (startline)  -- startline = False
./Lib/tokenize.py:229:9     - Unknown word (prevstring) -- prevstring = False
./Lib/tokenize.py:25:22     - Unknown word (Montanaro)  -- 'Skip Montanaro, Raymond Hettinger,
./Lib/tokenize.py:26:25     - Unknown word (Foord)      -- 'Michael Foord')
./Lib/tokenize.py:272:9     - Unknown word (Untokenized) -- Untokenized source will match input
./Lib/tokenize.py:419:30    - Unknown word (srow)        -- token string; a 2-tuple (srow, scol) of ints specifying
./Lib/tokenize.py:419:36    - Unknown word (scol)        -- string; a 2-tuple (srow, scol) of ints specifying
./Lib/tokenize.py:420:61    - Unknown word (erow)        -- the source; a 2-tuple (erow, ecol) of
./Lib/tokenize.py:435:12    - Unknown word (parenlev)    -- lnum = parenlev = continued = 0
./Lib/tokenize.py:437:14    - Unknown word (needcont)    -- contstr, needcont = '', 0
./Lib/tokenize.py:438:5     - Unknown word (contline)    -- contline = None
./Lib/tokenize.py:466:62    - Unknown word (strstart)    -- multi-line string", strstart)
./Lib/tokenize.py:467:13    - Unknown word (endmatch)    -- endmatch = endprog.match(line
./Lib/tokenize.py:467:24    - Unknown word (endprog)     -- endmatch = endprog.match(line)
./Lib/tokenize.py:512:67    - Unknown word (dedents)     -- # count indents or dedents
./Lib/tokenize.py:530:13    - Unknown word (pseudomatch) -- pseudomatch = _compile(PseudoToken
./Lib/tokenize.py:533:17    - Unknown word (spos)        -- spos, epos, pos = (lnum,
./Lib/trace.py:10:19     - Unknown word (Mojam)         -- # Copyright 2000, Mojam Media, Inc., all rights
./Lib/trace.py:133:5     - Unknown word (comparepath)   -- comparepath = os.path.normcase(path
./Lib/trace.py:13:19     - Unknown word (Bioreason)     -- # Copyright 1999, Bioreason, Inc., all rights reserved
./Lib/trace.py:14:18     - Unknown word (Dalke)         -- # Author: Andrew Dalke
./Lib/trace.py:16:24     - Unknown word (Automatrix)    -- Copyright 1995-1997, Automatrix, Inc., all rights reserved
./Lib/trace.py:225:13    - Unknown word (lastfile)      -- lastfile = lastcfile = ""
./Lib/trace.py:225:24    - Unknown word (lastcfile)     -- lastfile = lastcfile = ""
./Lib/trace.py:226:19    - Unknown word (pfile)         -- for ((pfile, pmod, pfunc), (cfile
./Lib/trace.py:226:26    - Unknown word (pmod)          -- for ((pfile, pmod, pfunc), (cfile, cmod
./Lib/trace.py:226:32    - Unknown word (pfunc)         -- for ((pfile, pmod, pfunc), (cfile, cmod, cfunc
./Lib/trace.py:226:48    - Unknown word (cmod)          -- pmod, pfunc), (cfile, cmod, cfunc)) \
./Lib/trace.py:271:13    - Unknown word (coverpath)     -- coverpath = os.path.join(dir,
./Lib/trace.py:35:14     - Unknown word (trackcalls)    -- trace.py --trackcalls spam.py eggs
./Lib/trace.py:389:18    - Unknown word (ignoremods)    -- ignoremods=(), ignoredirs=(), infile
./Lib/trace.py:412:14    - Unknown word (pathtobasename) -- self.pathtobasename = {} # for memoizing
./Lib/trace.py:422:18    - Unknown word (globaltrace)    -- self.globaltrace = self.globaltrace_trackcalle
./Lib/trace.py:427:18    - Unknown word (localtrace)     -- self.localtrace = self.localtrace_trace
./Lib/trace.py:512:41    - Unknown word (classobj)       -- # ditto for new.classobj()
./Lib/trace.py:577:13    - Unknown word (bname)          -- bname = os.path.basename(filename
./Lib/trace.py:6:11      - Unknown word (Zooko)      -- # Author: Zooko O'Whielacronx
./Lib/trace.py:6:17      - Unknown word (O'Whielacronx) -- # Author: Zooko O'Whielacronx
./Lib/trace.py:89:44     - Unknown word (cmpcache)      -- mustn't mean ignoring "cmpcache" but ignoring
./Lib/traceback.py:162:5     - Unknown word (valuestr)   -- valuestr = _some_str(value)
./Lib/traceback.py:363:9     - Unknown word (fnames)     -- fnames = set()
./Lib/traceback.py:42:27     - Unknown word (Tracebacks) -- Printing and Extracting Tracebacks.
./Lib/traceback.py:605:9     - Unknown word (smod)       -- smod = self.exc_type.__module
./Lib/traceback.py:629:15    - Unknown word (rtext)      -- # rtext = "   foo"
./Lib/traceback.py:630:15    - Unknown word (ltext)      -- # ltext =    "foo"
./Lib/traceback.py:647:21    - Unknown word (caretspace) -- caretspace = ((c if c.isspace(
./Lib/types.py:161:71    - Unknown word (atributes)  -- of accessing virtual atributes
./Lib/types.py:196:9     - Unknown word (fdoc)       -- fdoc = fget.__doc__ if self
./Lib/types.py:216:16    - Unknown word (isgen)      -- self.__isgen = gen.__class__ is GeneratorT
./Lib/typing.py:1365:13   - Unknown word (gvars)      -- gvars = None
./Lib/typing.py:1374:17   - Unknown word (tvarset)    -- tvarset = set(tvars)
./Lib/typing.py:1375:17   - Unknown word (gvarset)    -- gvarset = set(gvars)
./Lib/typing.py:1488:21   - Unknown word (instancehook) -- # the lack of __instancehook__.
./Lib/typing.py:1840:13   - Unknown word (nsobj)        -- nsobj = obj
./Lib/typing.py:1902:16   - Unknown word (unsubscripted) -- """Get the unsubscripted version of a type.
./Lib/typing.py:214:5     - Unknown word (tvars)      -- tvars = []
./Lib/typing.py:223:37    - Unknown word (elen)       -- generic(cls, parameters, elen):
./Lib/typing.py:2246:11   - Unknown word (nmtuple)       -- def _make_nmtuple(name, types, module
./Lib/typing.py:229:5     - Unknown word (alen)       -- alen = len(parameters)
./Lib/typing.py:247:16    - Unknown word (tvar)       -- for p, tvar in zip(params, cls.
./Lib/typing.py:727:31    - Unknown word (Bivariant)  -- raise ValueError("Bivariant types are not supported
./Lib/typing.py:987:61    - Unknown word (nparams)    -- '_name', '_inst', '_nparams',
./Lib/unittest/case.py:1073:29   - Unknown word (ducktyping)    -- assertSetEqual uses ducktyping to support different
./Lib/unittest/case.py:1219:13   - Unknown word (secondlines)   -- secondlines = second.splitlines
./Lib/unittest/case.py:389:35    - Unknown word (typeobj)    -- addTypeEqualityFunc(self, typeobj, function):
./Lib/unittest/case.py:819:26    - Unknown word (automagically) -- # subtypes won't automagically use the detailed comparison
./Lib/unittest/loader.py:283:30    - Unknown word (minimise)   -- # in sys.path to minimise likelihood of conflicts
./Lib/unittest/loader.py:449:26    - Unknown word (noext)      -- fullpath_noext = _jython_aware_splitext
./Lib/unittest/loader.py:81:29     - Unknown word (entrancy)   -- # avoid infinite re-entrancy.
./Lib/unittest/mock.py:117:34    - Unknown word (skipfirst)   -- signature(func, mock, skipfirst, instance=False):
./Lib/unittest/mock.py:122:9     - Unknown word (checksig)    -- def checksig(self, /, *args, **kwargs
./Lib/unittest/mock.py:1256:66   - Unknown word (autospeccing) -- arguments related to autospeccing.
./Lib/unittest/mock.py:1258:15   - Unknown word (autospect)    -- typos = ("autospect", "auto_spec", "set
./Lib/unittest/mock.py:129:30    - Unknown word (funcopy)     -- copy_func_details(func, funcopy):
./Lib/unittest/mock.py:1344:48   - Unknown word (keywargs)     -- self, patched, args, keywargs):
./Lib/unittest/mock.py:1347:37   - Unknown word (patchings)    -- patching in patched.patchings:
./Lib/unittest/mock.py:1368:64   - Unknown word (newkeywargs)  -- keywargs) as (newargs, newkeywargs):
./Lib/unittest/mock.py:1461:17   - Unknown word (Klass)        -- Klass = AsyncMock
./Lib/unittest/mock.py:1819:23   - Unknown word (unpatch)      -- self._unpatch_dict()
./Lib/unittest/mock.py:1883:12   - Unknown word (Unpatch)      -- """Unpatch the dict."""
./Lib/unittest/mock.py:1916:12   - Unknown word (stopall)      -- def _patch_stopall():
./Lib/unittest/mock.py:1935:27   - Unknown word (idivmod)      -- because there is no idivmod
./Lib/unittest/mock.py:2207:43   - Unknown word (propogate)    -- It is impossible to propogate a StopIteration
./Lib/unittest/mock.py:2391:31   - Unknown word (asynctest)    -- on Martin Richard's asynctest project.
./Lib/unittest/mock.py:493:15    - Unknown word (asyncs)      -- _spec_asyncs = []
./Lib/unittest/mock.py:638:44    - Unknown word (assret)      -- startswith(('assert', 'assret', 'asert', 'aseert'
./Lib/unittest/mock.py:638:54    - Unknown word (asert)       -- assert', 'assret', 'asert', 'aseert', 'assrt'
./Lib/unittest/mock.py:638:63    - Unknown word (aseert)      -- 'assret', 'asert', 'aseert', 'assrt')):
./Lib/unittest/mock.py:80:7      - Unknown word (Autospecced) -- # Autospecced functions will return
./Lib/unittest/mock.py:835:25    - Unknown word (autospecced) -- # If an autospecced object is attached using
./Lib/unittest/mock.py:966:13    - Unknown word (kall)        -- for kall in expected:
./Lib/unittest/result.py:225:22    - Unknown word (usercode)      -- '''Truncates usercode tb at the first unittest
./Lib/unittest/result.py:32:34     - Unknown word (exceptioninfo) -- tuples of (testcase, exceptioninfo), where exceptioninfo
./Lib/unittest/suite.py:111:17    - Unknown word (isnotsuite) -- if _isnotsuite(test):
./Lib/unittest/test/__init__.py:17:59     - Unknown word (testmock)   -- dTestsFromName('unittest.test.testmock'))
./Lib/unittest/test/_test_warnings.py:17:5      - Unknown word (warnfun)    -- def warnfun():
./Lib/unittest/test/test_assertions.py:135:37    - Unknown word (kota)       -- assertNotRegex('Ala ma kota', r'r+')
./Lib/unittest/test/test_assertions.py:33:14     - Unknown word (Amost)      -- def test_AmostEqualWithDelta(self)
./Lib/unittest/test/test_case.py:121:19    - Unknown word (testfoo)    -- Test('testfoo')
./Lib/unittest/test/test_case.py:1237:27   - Unknown word (asdfabasdf) -- self.assertRegex('asdfabasdf', r'ab+')
./Lib/unittest/test/test_case.py:1239:28   - Unknown word (saaas)      -- 'saaas', r'aaaa')
./Lib/unittest/test/test_case.py:1531:51   - Unknown word (barz)       -- _runtime_warn, "barz")
./Lib/unittest/test/test_case.py:1938:13   - Unknown word (ninstance)  -- ninstance = 0
./Lib/unittest/test/test_case.py:711:54    - Unknown word (warninfo)   -- DeprecationWarning) as warninfo:
./Lib/unittest/test/test_case.py:998:60    - Unknown word (aaabccd)    -- count_diff_all_purpose('aaabccd', 'abbbcce'))
./Lib/unittest/test/test_case.py:998:71    - Unknown word (abbbcce)    -- purpose('aaabccd', 'abbbcce'))
./Lib/unittest/test/test_discovery.py:423:40    - Unknown word (startdir)   -- abspath('/toplevel'): ['startdir'],
./Lib/unittest/test/test_discovery.py:539:38    - Unknown word (skipperoo)  -- raise unittest.SkipTest('skipperoo')
./Lib/unittest/test/test_discovery.py:838:21    - Unknown word (packagename) -- def _import(packagename, *args, **kwargs):
./Lib/unittest/test/test_loader.py:408:43    - Unknown word (sdasfasfasdf) -- loader.loadTestsFromName('sdasfasfasdf')
./Lib/unittest/test/test_loader.py:588:42    - Unknown word (testmethod)   -- loadTestsFromName__relative_testmethod(self):
./Lib/unittest/test/test_program.py:143:7     - Unknown word (Initialisable) -- class InitialisableProgram(unittest.TestProgram
./Lib/unittest/test/test_program.py:248:36    - Unknown word (somevalue)     -- sys.warnoptions[:] = ['somevalue']
./Lib/unittest/test/test_program.py:316:14    - Unknown word (initialising)  -- # If initialising raises a type error
./Lib/unittest/test/test_program.py:82:22     - Unknown word (faketest)   -- sys.argv = ['faketest']
./Lib/unittest/test/test_result.py:343:29    - Unknown word (tracebacklocals) -- self.assertEqual('A tracebacklocals', formatted_exc)
./Lib/unittest/test/test_result.py:569:20    - Unknown word (Tesult)          -- def testOldTestTesultSetup(self):
./Lib/unittest/test/test_result.py:58:34     - Unknown word (aforenamed) -- Accordingly, tests for the aforenamed attributes are incorporated
./Lib/unittest/test/test_runner.py:1137:9    - Unknown word (expectedresult) -- expectedresult = (runner.stream, DESCRIPTION
./Lib/unittest/test/test_setups.py:149:24    - Unknown word (torndown)   -- def test_class_not_torndown_when_setup_fails(self
./Lib/unittest/test/test_setups.py:442:46    - Unknown word (teardowns)  -- executes_setups_and_teardowns(self):
./Lib/unittest/test/test_suite.py:313:23    - Unknown word (noncallable) -- def test_addTest__noncallable(self):
./Lib/unittest/test/test_suite.py:317:23    - Unknown word (casesuiteclass) -- def test_addTest__casesuiteclass(self):
./Lib/unittest/test/test_suite.py:353:40    - Unknown word (noniterables)   -- removeAtIndex raises for noniterables this next line will
./Lib/unittest/test/testmock/testasync.py:1022:34   - Unknown word (bamf)              -- self._runnable_test('bamf'))
./Lib/unittest/test/testmock/testasync.py:577:42    - Unknown word (sessionmock) -- session = MagicMock(name='sessionmock')
./Lib/unittest/test/testmock/testasync.py:690:54    - Unknown word (bahave)      -- mock and the real thing bahave the same
./Lib/unittest/test/testmock/testasync.py:691:57    - Unknown word (coroutinefunction) -- actually async, so not a coroutinefunction
./Lib/unittest/test/testmock/testasync.py:699:54    - Unknown word (corourtine)        -- test aiter and anext corourtine with {mock_type}"):
./Lib/unittest/test/testmock/testasync.py:829:9     - Unknown word (kalls)             -- kalls = [call('foo')]
./Lib/unittest/test/testmock/testcallable.py:2:11      - Unknown word (fuzzyman)   -- # E-mail: fuzzyman AT voidspace DOT org
./Lib/unittest/test/testmock/testcallable.py:2:23      - Unknown word (voidspace)  -- E-mail: fuzzyman AT voidspace DOT org DOT uk
./Lib/unittest/test/testmock/testhelpers.py:1080:27   - Unknown word (returnvalue)     -- def test_propertymock_returnvalue(self):
./Lib/unittest/test/testmock/testhelpers.py:1106:17   - Unknown word (staticfunc)      -- def staticfunc(): pass
./Lib/unittest/test/testmock/testhelpers.py:1117:17   - Unknown word (classfunc)       -- def classfunc(cls): pass
./Lib/unittest/test/testmock/testhelpers.py:381:16    - Unknown word (someclass)  -- def _check_someclass_mock(self, mock):
./Lib/unittest/test/testmock/testhelpers.py:56:28     - Unknown word (zinga)      -- mock.method(d, zinga=d, alpha=d)
./Lib/unittest/test/testmock/testhelpers.py:765:19    - Unknown word (attributeerrors) -- def test_skip_attributeerrors(self):
./Lib/unittest/test/testmock/testhelpers.py:905:17    - Unknown word (subprop)         -- def subprop(self): pass
./Lib/unittest/test/testmock/testhelpers.py:957:13    - Unknown word (myfunc)          -- def myfunc(x, y): pass
./Lib/unittest/test/testmock/testmock.py:158:32    - Unknown word (kablooie)   -- raise SystemError('kablooie')
./Lib/unittest/test/testmock/testmock.py:1714:27   - Unknown word (sideeffect)      -- def test_reset_return_sideeffect(self):
./Lib/unittest/test/testmock/testmock.py:1913:9    - Unknown word (mopen)           -- mopen = mock.mock_open(read
./Lib/unittest/test/testmock/testmock.py:1919:14   - Unknown word (namedtemp)       -- mock_namedtemp = mock.mock_open(mock
./Lib/unittest/test/testmock/testmock.py:1921:18   - Unknown word (filehandle)      -- mock_filehandle = mock_namedtemp.return
./Lib/unittest/test/testmock/testmock.py:204:40    - Unknown word (Bazinga)    -- effect = ValueError('Bazinga!')
./Lib/unittest/test/testmock/testmock.py:2162:48   - Unknown word (testpatch)       -- unittest.mock.patch. In testpatch.PatchTest
./Lib/unittest/test/testmock/testmock.py:2210:44   - Unknown word (Runtim)          -- explicitly and throw a RuntimError if found.
./Lib/unittest/test/testmock/testmock.py:35:9      - Unknown word (cmeth)      -- def cmeth(cls, a, b, c, d=None
./Lib/unittest/test/testmock/testmock.py:38:9      - Unknown word (smeth)      -- def smeth(a, b, c, d=None): pass
./Lib/unittest/test/testmock/testmock.py:616:30    - Unknown word (nondefault) -- test_wraps_call_with_nondefault_return_value(self):
./Lib/unittest/test/testmock/testmock.py:805:14    - Unknown word (baseexceptional) -- def test_baseexceptional_side_effect(self):
./Lib/unittest/test/testmock/testpatch.py:1122:33   - Unknown word (weeeee)        -- existent_attr = '%s.weeeee' % foo_name
./Lib/unittest/test/testmock/testpatch.py:1505:13   - Unknown word (additionals)   -- for additionals in [good, bad], [bad
./Lib/unittest/test/testmock/testpatch.py:1653:21   - Unknown word (squizz)        -- p1 = patch('squizz.squozz')
./Lib/unittest/test/testmock/testpatch.py:1653:28   - Unknown word (squozz)        -- p1 = patch('squizz.squozz')
./Lib/unittest/test/testmock/testpatch.py:1743:14   - Unknown word (falsey)        -- def test_falsey_spec(self):
./Lib/unittest/test/testmock/testpatch.py:1748:64   - Unknown word (doesnotexit)   -- AttributeError, getattr, m, 'doesnotexit')
./Lib/unittest/test/testmock/testpatch.py:1808:19   - Unknown word (mypatch)       -- class mypatch(_patch):
./Lib/unittest/test/testmock/testpatch.py:1823:9    - Unknown word (origdic)       -- origdic1 = dic1.copy()
./Lib/unittest/test/testmock/testpatch.py:1897:20   - Unknown word (orderdict)     -- def test_patch_orderdict(self):
./Lib/unittest/test/testmock/testpatch.py:1903:35   - Unknown word (cdefghijklmnopqrstuvwxyz) -- update_values = list(zip('cdefghijklmnopqrstuvwxyz', range(26)))
./Lib/unittest/test/testmock/testpatch.py:353:20    - Unknown word (frooble)     -- @patch('%s.frooble' % builtin_string, sentinel
./Lib/unittest/test/testmock/testpatch.py:353:56    - Unknown word (Frooble)     -- builtin_string, sentinel.Frooble, create=True)
./Lib/unittest/test/testmock/testpatch.py:398:26    - Unknown word (doesnotexists) -- fobj = open('doesnotexists.txt')
./Lib/unittest/test/testmock/testpatch.py:410:17    - Unknown word (woot)          -- def woot():
./Lib/unittest/test/testmock/testpatch.py:660:44    - Unknown word (delong)        -- os.environ', {'konrad_delong': 'some value'})
./Lib/unittest/test/testmock/testpatch.py:97:21     - Unknown word (patchobject) -- def test_single_patchobject(self):
./Lib/unittest/test/testmock/testsentinel.py:12:57     - Unknown word (whateverelse) -- sentinel.whatever, sentinel.whateverelse,
./Lib/unittest/util.py:18:28     - Unknown word (suffixlen)  -- shorten(s, prefixlen, suffixlen):
./Lib/urllib/parse.py:1032:2    - Unknown word (typeprog)     -- _typeprog = None
./Lib/urllib/parse.py:1053:2    - Unknown word (hostprog)     -- _hostprog = None
./Lib/urllib/parse.py:1103:2    - Unknown word (portprog)     -- _portprog = None
./Lib/urllib/parse.py:1118:22   - Unknown word (defport)      -- def splitnport(host, defport=-1):
./Lib/urllib/parse.py:1135:13   - Unknown word (nport)        -- nport = int(port)
./Lib/urllib/parse.py:14:66     - Unknown word (Zawinski)   -- Hoffman , L Masinter, J. Zawinski, July 1998.
./Lib/urllib/parse.py:161:26    - Unknown word (hostinfo)   -- hostname = self._hostinfo[0]
./Lib/urllib/parse.py:20:3      - Unknown word (Cahill)     -- McCahill, December 1994
./Lib/urllib/parse.py:396:24    - Unknown word (splitparams) -- url, params = _splitparams(url)
./Lib/urllib/parse.py:411:6     - Unknown word (splitnetloc) -- def _splitnetloc(url, start=0):
./Lib/urllib/parse.py:414:9     - Unknown word (wdelim)      -- wdelim = url.find(c, start
./Lib/urllib/parse.py:419:6     - Unknown word (checknetloc) -- def _checknetloc(netloc):
./Lib/urllib/parse.py:48:44     - Unknown word (shttp)      -- , 'file', 'https', 'shttp', 'mms',
./Lib/urllib/parse.py:49:19     - Unknown word (prospero)   -- 'prospero', 'rtsp', 'rtspu',
./Lib/urllib/parse.py:49:31     - Unknown word (rtsp)       -- 'prospero', 'rtsp', 'rtspu', 'sftp',
./Lib/urllib/parse.py:49:39     - Unknown word (rtspu)      -- prospero', 'rtsp', 'rtspu', 'sftp',
./Lib/urllib/parse.py:533:14    - Unknown word (bnetloc)     -- bscheme, bnetloc, bpath, bparams, bquery
./Lib/urllib/parse.py:533:30    - Unknown word (bparams)     -- bscheme, bnetloc, bpath, bparams, bquery, bfragment
./Lib/urllib/parse.py:533:39    - Unknown word (bquery)      -- bnetloc, bpath, bparams, bquery, bfragment = \
./Lib/urllib/parse.py:533:47    - Unknown word (bfragment)   -- bpath, bparams, bquery, bfragment = \
./Lib/urllib/parse.py:533:5     - Unknown word (bscheme)     -- bscheme, bnetloc, bpath, bparams
./Lib/urllib/parse.py:54:17     - Unknown word (snews)      -- 'snews', 'prospero', 'rtsp
./Lib/urllib/parse.py:596:28    - Unknown word (defragmented) -- Returns a tuple of the defragmented URL and the fragment
./Lib/urllib/parse.py:609:2     - Unknown word (hexdig)       -- _hexdig = '0123456789ABCDEFabcdef
./Lib/urllib/parse.py:642:2     - Unknown word (asciire)      -- _asciire = re.compile('([\x0
./Lib/urllib/parse.py:6:9       - Unknown word (Masinter)   -- and L.  Masinter, January 2005.
./Lib/urllib/parse.py:8:61      - Unknown word (Hinden)     -- Addresses in URL's by R.Hinden, B.Carpenter
./Lib/urllib/request.py:1077:2    - Unknown word (randombytes) -- _randombytes = os.urandom
./Lib/urllib/request.py:1125:9    - Unknown word (chal)        -- chal = parse_keqv_list(filter
./Lib/urllib/request.py:1168:13   - Unknown word (entdig)      -- entdig = self.get_entity_digest
./Lib/urllib/request.py:1179:13   - Unknown word (respdig)     -- respdig = KD(H(A1), "%s:%s"
./Lib/urllib/request.py:1186:13   - Unknown word (ncvalue)     -- ncvalue = '%08x' % self.nonce
./Lib/urllib/request.py:1188:13   - Unknown word (noncebit)    -- noncebit = "%s:%s:%s:%s:%s"
./Lib/urllib/request.py:1214:19   - Unknown word (sess)        -- # XXX MD5-sess
./Lib/urllib/request.py:1508:13   - Unknown word (mtype)       -- mtype = mimetypes.guess_type
./Lib/urllib/request.py:1517:21   - Unknown word (origurl)     -- origurl = 'file://' + host
./Lib/urllib/request.py:1572:17   - Unknown word (retrlen)     -- fp, retrlen = fw.retrfile(file,
./Lib/urllib/request.py:1721:14   - Unknown word (tempcache)   -- self.tempcache = None
./Lib/urllib/request.py:1768:9    - Unknown word (urltype)     -- urltype, url = _splittype(fullurl
./Lib/urllib/request.py:1773:22   - Unknown word (proxyhost)   -- urltype, proxyhost = _splittype(proxy)
./Lib/urllib/request.py:1809:13   - Unknown word (tempfilename) -- or (tempfilename, headers) for a remote
./Lib/urllib/request.py:1892:13   - Unknown word (realhost)     -- realhost = host
./Lib/urllib/request.py:2025:13   - Unknown word (urlfile)      -- urlfile = file
./Lib/urllib/request.py:222:6     - Unknown word (tempfiles)  -- _url_tempfiles = []
./Lib/urllib/request.py:2269:20   - Unknown word (proxyselector) -- proxyhost, proxyselector = _splithost(proxyhost
./Lib/urllib/request.py:2460:9    - Unknown word (ftpobj)        -- ftpobj = addclosehook(conn
./Lib/urllib/request.py:2538:5    - Unknown word (hostonly)      -- hostonly, port = _splitport(host
./Lib/urllib/request.py:2563:31   - Unknown word (scproxy)       -- settings come from _scproxy._get_proxy_settings
./Lib/urllib/request.py:262:13    - Unknown word (blocknum)   -- blocknum = 0
./Lib/urllib/request.py:55:29     - Unknown word (klem)       -- user='klem',
./Lib/urllib/request.py:56:31     - Unknown word (geheim)     -- passwd='geheim$parole')
./Lib/urllib/request.py:653:61    - Unknown word (newurl)     -- code, msg, headers, newurl):
./Lib/urllib/request.py:674:14    - Unknown word (conciliant) -- # Be conciliant with URIs containing
./Lib/urllib/request.py:818:13    - Unknown word (creds)      -- creds = base64.b64encode(user
./Lib/urllib/request.py:876:13    - Unknown word (dport)      -- dport = {"http": 80,
./Lib/urllib/request.py:986:37    - Unknown word (authreq)    -- error_auth_reqed(self, authreq, host, req, headers
./Lib/urllib/response.py:40:40     - Unknown word (hookargs)   -- self, fp, closehook, *hookargs):
./Lib/urllib/robotparser.py:123:31    - Unknown word (rulelines)  -- entry.rulelines.append(RuleLine(line
./Lib/urllib/robotparser.py:154:25    - Unknown word (useragent)  -- def can_fetch(self, useragent, url):
./Lib/urllib/robotparser.py:73:25     - Unknown word (useragents) -- if "*" in entry.useragents:
./Lib/uu.py:112:13    - Unknown word (hdrfields)  -- hdrfields = hdr.split(b' ', 2
./Lib/uu.py:161:17    - Unknown word (uudecode)   -- """uuencode/uudecode main program"""
./Lib/uu.py:43:8      - Unknown word (Uuencode)   -- """Uuencode file"""
./Lib/uuid.py:450:29    - Unknown word (macaddr)    -- # (Only) on AIX the macaddr value given is not prefixed
./Lib/uuid.py:617:65    - Unknown word (dlload)     -- are prefixed by a dll/dlload() method
./Lib/venv/__init__.py:118:18    - Unknown word (exename)    -- dirname, exename = os.path.split(os.path
./Lib/venv/__init__.py:123:13    - Unknown word (binname)    -- binname = 'Scripts'
./Lib/venv/__init__.py:124:13    - Unknown word (incpath)    -- incpath = 'Include'
./Lib/venv/__init__.py:141:28    - Unknown word (binpath)    -- context.bin_path = binpath = os.path.join(env_dir
./Lib/venv/__init__.py:219:25    - Unknown word (venvlauncher) -- # copies of venvlauncher.exe
./Lib/venv/__init__.py:221:13    - Unknown word (srcfn)        -- srcfn = os.path.join(os.path
./Lib/venv/__init__.py:234:33    - Unknown word (venvwlauncher) -- basename = 'venvwlauncher'
./Lib/venv/__init__.py:297:25    - Unknown word (tcldir)        -- tcldir = os.path.basename(root
./Lib/venv/__init__.py:386:21    - Unknown word (dstdir)        -- dstdir = binpath
./Lib/venv/__init__.py:391:17    - Unknown word (dstfile)       -- dstfile = os.path.join(dstdir
./Lib/venv/scripts/common/Activate.ps1:11:12     - Unknown word (Venv)       -- .Parameter VenvDir
./Lib/venv/scripts/common/Activate.ps1:149:14    - Unknown word (keyval)     -- $keyval = $PSItem -split "\s
./Lib/venv/scripts/common/Activate.ps1:174:28    - Unknown word (Fullname)   -- Verbose "VenvExecDir Fullname: '$($VenvExecDir.FullName
./Lib/venv/scripts/common/Activate.ps1:19:66     - Unknown word (venv)       -- single space (ie. '(.venv) ').
./Lib/venv/scripts/nt/activate.bat:4:61      - Unknown word (chcp)       -- SystemRoot%\System32\chcp.com"') do (
./Lib/venv/scripts/posix/activate.csh:3:14      - Unknown word (Davide)     -- # Created by Davide Di Blasi <davidedb@gmail
./Lib/venv/scripts/posix/activate.csh:3:24      - Unknown word (Blasi)      -- Created by Davide Di Blasi <davidedb@gmail.com
./Lib/venv/scripts/posix/activate.csh:4:39      - Unknown word (Svetlov)    -- Python 3.3 venv by Andrew Svetlov <andrew.svetlov@gmail
./Lib/venv/scripts/posix/activate.csh:6:52      - Unknown word (setenv)     -- VIRTUAL_PATH != 0 && setenv PATH "$_OLD_VIRTUAL
./Lib/warnings.py:13:6      - Unknown word (showwarnmsg) -- _showwarnmsg_impl(msg)
./Lib/warnings.py:18:13     - Unknown word (formatwarnmsg) -- return _formatwarnmsg_impl(msg)
./Lib/warnings.py:194:6     - Unknown word (processoptions) -- def _processoptions(args):
./Lib/warnings.py:211:15    - Unknown word (getaction)      -- action = _getaction(action)
./Lib/warnings.py:213:17    - Unknown word (getcategory)    -- category = _getcategory(category)
./Lib/warnings.py:364:18    - Unknown word (defaultaction)  -- action = defaultaction
./Lib/warnings.py:379:9     - Unknown word (oncekey)        -- oncekey = (text, category)
./Lib/warnings.py:380:12    - Unknown word (onceregistry)   -- if onceregistry.get(oncekey):
./Lib/warnings.py:387:9     - Unknown word (altkey)         -- altkey = (text, category,
./Lib/warnings.py:521:29    - Unknown word (regexs)         -- either if the compiled regexs are None, match anything
./Lib/weakref.py:574:35    - Unknown word (exitfunc)   -- atexit.register(self._exitfunc)
./Lib/webbrowser.py:213:51    - Unknown word (newwin)     -- for new=0 (open).  If newwin is not None, it is
./Lib/webbrowser.py:214:38    - Unknown word (newtab)     -- new=1 (open_new).  If newtab is not None, it is used
./Lib/webbrowser.py:354:25    - Unknown word (kfmclient)  -- See the output of ``kfmclient --commands``
./Lib/webbrowser.py:377:15    - Unknown word (kfmclient's) -- # kfmclient's return code unfortunately
./Lib/webbrowser.py:465:67    - Unknown word (gvfs)        -- environ and shutil.which("gvfs-open"):
./Lib/webbrowser.py:480:33    - Unknown word (iceweasel)   -- browser in ("firefox", "iceweasel", "iceape", "seamonkey
./Lib/webbrowser.py:480:46    - Unknown word (iceape)      -- firefox", "iceweasel", "iceape", "seamonkey"):
./Lib/webbrowser.py:480:56    - Unknown word (seamonkey)   -- iceweasel", "iceape", "seamonkey"):
./Lib/webbrowser.py:502:7     - Unknown word (Skipstone)   -- # Skipstone, another Gtk/Mozilla
./Lib/webbrowser.py:503:22    - Unknown word (skipstone)   -- if shutil.which("skipstone"):
./Lib/webbrowser.py:528:37    - Unknown word (OSXOSA)      -- register("MacOSX", None, MacOSXOSAScript('default'))
./Lib/webbrowser.py:535:25    - Unknown word (serenityos)  -- if sys.platform == "serenityos":
./Lib/webbrowser.py:544:9     - Unknown word (iexplore)    -- iexplore = os.path.join(os.environ
./Lib/webbrowser.py:584:9     - Unknown word (userchoices) -- userchoices = os.environ["BROWSER
./Lib/webbrowser.py:607:20    - Unknown word (startfile)   -- os.startfile(url)
./Lib/webbrowser.py:648:34    - Unknown word (Omni)        -- if self.name == "OmniWeb":
./Lib/webbrowser.py:659:48    - Unknown word (osascript)   -- AppleScript through osascript command
./Lib/webbrowser.py:660:13    - Unknown word (osapipe)     -- osapipe = os.popen("osascript
./Lib/webbrowser.py:663:31    - Unknown word (osascript's) -- # Write script to osascript's stdin
./Lib/wsgiref/handlers.py:350:36    - Unknown word (retarget)   -- Subclasses may override to retarget the output or change
./Lib/wsgiref/handlers.py:529:8     - Unknown word (metabase)   -- or metabase allowPathInfoForScriptMapping
./Lib/wsgiref/handlers.py:541:37    - Unknown word (vhost)      -- can only be made on a vhost level, affecting all
./Lib/wsgiref/handlers.py:74:42     - Unknown word (simplehttp) -- software.startswith('simplehttp/')
./Lib/wsgiref/simple_server.py:132:47    - Unknown word (backpointer) -- handler = self      # backpointer for logging
./Lib/wsgiref/util.py:157:2     - Unknown word (hoppish)    -- _hoppish = {
./Lib/wsgiref/validate.py:1:16      - Unknown word (Bicking)    -- # (c) 2005 Ian Bicking and contributors; written
./Lib/wsgiref/validate.py:3:8       - Unknown word (licenced)   -- # Also licenced under the Apache License
./Lib/xdrlib.py:153:26    - Unknown word (unextracted) -- raise Error('unextracted data remains')
./Lib/xdrlib.py:20:12     - Unknown word (ivars)      -- Public ivars:
./Lib/xml/__init__.py:11:54     - Unknown word (Garshol)    -- Python by Lars Marius Garshol. This
./Lib/xml/__init__.py:11:8      - Unknown word (Megginson)  -- Megginson and ported to Python
./Lib/xml/dom/expatbuilder.py:107:22    - Unknown word (euri)       -- def isIdNS(self, euri, ename, auri, aname
./Lib/xml/dom/expatbuilder.py:107:28    - Unknown word (ename)      -- def isIdNS(self, euri, ename, auri, aname):
./Lib/xml/dom/expatbuilder.py:107:35    - Unknown word (auri)       -- isIdNS(self, euri, ename, auri, aname):
./Lib/xml/dom/expatbuilder.py:375:13    - Unknown word (filt)       -- filt = self._filter.startContainer
./Lib/xml/dom/expatbuilder.py:377:42    - Unknown word (descendents) -- ignore this node & all descendents
./Lib/xml/dom/expatbuilder.py:54:41     - Unknown word (idref)      -- minidom.TypeInfo(None, "idref"),
./Lib/xml/dom/expatbuilder.py:55:41     - Unknown word (idrefs)     -- minidom.TypeInfo(None, "idrefs"),
./Lib/xml/dom/expatbuilder.py:56:41     - Unknown word (nmtoken)    -- minidom.TypeInfo(None, "nmtoken"),
./Lib/xml/dom/expatbuilder.py:57:41     - Unknown word (nmtokens)   -- minidom.TypeInfo(None, "nmtokens"),
./Lib/xml/dom/expatbuilder.py:637:9     - Unknown word (nsattrs)     -- nsattrs = self._getNSattrs(
./Lib/xml/dom/expatbuilder.py:690:20    - Unknown word (entref)      -- # this entref is the one that we made
./Lib/xml/dom/minidom.py:1039:13   - Unknown word (dotdotdot)  -- dotdotdot = "..."
./Lib/xml/dom/minidom.py:13:33     - Unknown word (linearizer) -- some of the writer and linearizer code into conformance
./Lib/xml/dom/minidom.py:1443:59   - Unknown word (Xerces)     -- obvious candidate. Since Xerces raises
./Lib/xml/dom/minidom.py:1658:13   - Unknown word (childclone) -- childclone = _clone_node(n, deep
./Lib/xml/dom/minidom.py:304:13    - Unknown word (datachars)  -- "Writes datachars to writer."
./Lib/xml/dom/minidom.py:403:9     - Unknown word (nsuri)      -- nsuri = self.namespaceURI
./Lib/xml/dom/minidom.py:49:40     - Unknown word (newl)       -- oprettyxml(self, indent="\t", newl="\n", encoding=None
./Lib/xml/dom/minidom.py:758:30    - Unknown word (nssplit)    -- prefix, localname = _nssplit(qualifiedName)
./Lib/xml/dom/minidom.py:869:43    - Unknown word (addindent)  -- writer, indent="", addindent="", newl=""):
./Lib/xml/dom/xmlbuilder.py:197:39    - Unknown word (cnode)      -- parseWithContext(self, input, cnode, action):
./Lib/xml/dom/xmlbuilder.py:251:31    - Unknown word (getplist)   -- for param in info.getplist():
./Lib/xml/dom/xmlbuilder.py:359:23    - Unknown word (snode)      -- def saveXML(self, snode):
./Lib/xml/dom/xmlbuilder.py:79:50     - Unknown word (xform)      -- self._settings[(_name_xform(name), state)]
./Lib/xml/etree/ElementInclude.py:131:57    - Unknown word (hrefs)      -- max_depth, _parent_hrefs):
./Lib/xml/etree/ElementTree.py:1243:5    - Unknown word (pullparser)  -- pullparser = XMLPullParser(events
./Lib/xml/etree/ElementTree.py:1288:23   - Unknown word (setevents)   -- self._parser._setevents(self._events_queue,
./Lib/xml/etree/ElementTree.py:1618:10   - Unknown word (raiseerror)  -- def _raiseerror(self, value):
./Lib/xml/etree/ElementTree.py:1624:10   - Unknown word (fixname)     -- def _fixname(self, key):
./Lib/xml/etree/ElementTree.py:1739:36   - Unknown word (serialised)  -- XML to its C14N 2.0 serialised form.
./Lib/xml/etree/ElementTree.py:1775:5    - Unknown word (Serialises)  -- Serialises parse events to XML
./Lib/xml/etree/ElementTree.py:194:38    - Unknown word (Subelements) -- creates a shallow copy. Subelements will be shared with
./Lib/xml/etree/ElementTree.py:546:10    - Unknown word (setroot)     -- def _setroot(self, element):
./Lib/xml/etree/ElementTree.py:741:17    - Unknown word (qnames)      -- qnames, namespaces = _namespaces
./Lib/xml/etree/ElementTree.py:747:11    - Unknown word (lxml)        -- # lxml.etree compatibility
./Lib/xml/etree/ElementTree.py:914:32    - Unknown word (basefont)    -- = ("area", "base", "basefont", "br", "col", "frame
./Lib/xml/etree/ElementTree.py:915:32    - Unknown word (isindex)     -- "img", "input", "isindex", "link", "meta", "param
./Lib/xml/etree/ElementTree.py:959:13    - Unknown word (ltag)        -- ltag = tag.lower()
./Lib/xml/etree/__init__.py:1:46      - Unknown word (fredrik)    -- 008-02-13 08:05:08Z fredrik $
./Lib/xml/sax/__init__.py:43:5      - Unknown word (inpsrc)     -- inpsrc = InputSource()
./Lib/xml/sax/_exceptions.py:69:15     - Unknown word (colnum)     -- self._colnum = self._locator.getColumnNumb
./Lib/xml/sax/expatreader.py:349:9     - Unknown word (newattrs)   -- newattrs = {}
./Lib/xml/sax/expatreader.py:357:17    - Unknown word (apair)      -- apair = (None, aname)
./Lib/xml/sax/expatreader.py:39:10     - Unknown word (mkproxy)    -- def _mkproxy(o):
./Lib/xml/sax/handler.py:217:60    - Unknown word (ndata)      -- publicId, systemId, ndata):
./Lib/xml/sax/handler.py:374:34    - Unknown word (identfier)  -- system_id the system identfier of the external subset
./Lib/xml/sax/saxutils.py:358:9     - Unknown word (basehead)      -- basehead = os.path.dirname(os
./Lib/xml/sax/saxutils.py:359:9     - Unknown word (sysidfilename) -- sysidfilename = os.path.join(basehead
./Lib/xml/sax/saxutils.py:71:6      - Unknown word (gettextwriter) -- def _gettextwriter(out, encoding):
./Lib/xml/sax/xmlreader.py:209:16    - Unknown word (bytefile)   -- self.__bytefile = None
./Lib/xml/sax/xmlreader.py:210:16    - Unknown word (charfile)   -- self.__charfile = None
./Lib/xml/sax/xmlreader.py:351:14    - Unknown word (nsname)     -- for (nsname, qname) in self._qnames
./Lib/xmlrpc/client.py:106:30    - Unknown word (boxcared)    -- MultiCall Executor of boxcared xmlrpc requests
./Lib/xmlrpc/client.py:113:18    - Unknown word (Unmarshal)   -- Unmarshaller Unmarshal an XML-RPC response
./Lib/xmlrpc/client.py:124:24    - Unknown word (unmarshalling) -- to an unmarshalling object
./Lib/xmlrpc/client.py:1256:9    - Unknown word (chost)         -- chost, self._extra_headers
./Lib/xmlrpc/client.py:33:29     - Unknown word (microtuning) -- 0-02 fl  More dumps microtuning
./Lib/xmlrpc/client.py:38:64     - Unknown word (Rucker)      -- possible (from James Rucker)
./Lib/xmlrpc/client.py:39:24     - Unknown word (pythondoc)   -- 002-04-07 fl  Added pythondoc comments
./Lib/xmlrpc/client.py:41:53     - Unknown word (Kuchling)    -- constants (from Andrew Kuchling)
./Lib/xmlrpc/client.py:52:17     - Unknown word (doko)        -- # 2014-12-02 ch/doko Add workaround for
./Lib/xmlrpc/client.py:534:19    - Unknown word (twouters)      -- # XXX(twouters): using "_arbitrary
./Lib/xmlrpc/client.py:914:13    - Unknown word (mkdatetime)    -- mkdatetime = _datetime_type
./Lib/xmlrpc/client.py:915:13    - Unknown word (mkbytes)       -- mkbytes = base64.decodebytes
./Lib/xmlrpc/client.py:937:4     - Unknown word (keyparam)      -- # @keyparam methodname If given
./Lib/xmlrpc/client.py:985:9     - Unknown word (xmlheader)     -- xmlheader = "<?xml version='1
./Lib/xmlrpc/server.py:609:8     - Unknown word (Multipath)  -- """Multipath XML-RPC Server
./Lib/xmlrpc/server.py:855:25    - Unknown word (argstring)  -- the _get_method_argstring(method_name) method
./Lib/zipfile.py:1110:9    - Unknown word (filepos)    -- filepos = self._orig_file_size
./Lib/zipfile.py:1312:19   - Unknown word (fpclose)    -- self._fpclose(fp)
./Lib/zipfile.py:1368:13   - Unknown word (centdir)    -- centdir = fp.read(sizeCentralDir
./Lib/zipfile.py:1539:13   - Unknown word (fheader)    -- fheader = zef_file.read(sizeFileHeade
./Lib/zipfile.py:1618:15   - Unknown word (writecheck) -- self._writecheck(zinfo)
./Lib/zipfile.py:1800:57   - Unknown word (drwxrwxr)   -- = 0o40775 << 16   # drwxrwxr-x
./Lib/zipfile.py:180:25    - Unknown word (xids)       -- _strip_extra(extra, xids):
./Lib/zipfile.py:1929:18   - Unknown word (locrec)     -- zip64locrec = struct.pack(
./Lib/zipfile.py:1984:13   - Unknown word (initname)   -- initname = os.path.join(pathname
./Lib/zipfile.py:2045:30   - Unknown word (archivename) -- ""Return (filename, archivename) for the path.
./Lib/zipfile.py:2168:2    - Unknown word (dedupe)      -- _dedupe = dict.fromkeys
./Lib/zipfile.py:223:33    - Unknown word (endrec)     -- EndRecData64(fpin, offset, endrec):
./Lib/zipfile.py:237:10    - Unknown word (diskno)     -- sig, diskno, reloff, disks = struct
./Lib/zipfile.py:237:18    - Unknown word (reloff)     -- sig, diskno, reloff, disks = struct.unpack
./Lib/zipfile.py:2442:13   - Unknown word (badfile)     -- badfile = zf.testzip()
./Lib/zipfile.py:2461:32   - Unknown word (zippath)     -- def addToZip(zf, path, zippath):
./Lib/zipfile.py:250:39    - Unknown word (diroffset)  -- dircount2, dirsize, diroffset = \
./Lib/zipfile.py:250:9     - Unknown word (dircount)   -- dircount, dircount2, dirsize
./Lib/zipfile.py:421:9     - Unknown word (dosdate)    -- dosdate = (dt[0] - 1980) <<
./Lib/zipfile.py:422:9     - Unknown word (dostime)    -- dostime = dt[3] << 11 | dt[
./Lib/zipfile.py:546:2     - Unknown word (crctable)   -- _crctable = None
./Lib/zipfile.py:560:16    - Unknown word (Decrypter)  -- # zd = _ZipDecrypter(mypwd)
./Lib/zipfile.py:560:26    - Unknown word (mypwd)      -- zd = _ZipDecrypter(mypwd)
./Lib/zipfile.py:587:9     - Unknown word (decrypter)  -- def decrypter(data):
./Lib/zipfile.py:668:10    - Unknown word (wavpack)    -- 97: 'wavpack',
./Lib/zipfile.py:669:10    - Unknown word (ppmd)       -- 98: 'ppmd',
./Lib/zipimport.py:344:8     - Unknown word (searchorder) -- # _zip_searchorder defines how we search
./Lib/zipimport.py:347:18    - Unknown word (initzipimport) -- # are swapped by initzipimport() if we run in optimized
./Lib/zipimport.py:373:17    - Unknown word (isbytecode)    -- for suffix, isbytecode, ispackage in _zip_searchorde
./Lib/zipimport.py:493:35    - Unknown word (fseek)         -- On Windows, calling fseek to skip over the fields
./Lib/zipimport.py:51:11     - Unknown word (myimport)   -- '/tmp/myimport.zip', or '/tmp/myimport
./Lib/zipimport.py:51:48     - Unknown word (mydirectory) -- or '/tmp/myimport.zip/mydirectory', if mydirectory is
./Lib/zipimport.py:534:7     - Unknown word (abcdefghijklmno) -- '`abcdefghijklmno'
./Lib/zipimport.py:632:41    - Unknown word (unmarshal)       -- contents of a .py[co] file, unmarshal the data
./README.md:157:4     - Unknown word (Greptime)   -- - [GreptimeDB](https://github.com
./README.md:158:4     - Unknown word (pyckitup)   -- - [pyckitup](https://github.com
./README.md:222:16    - Unknown word (rspython)      -- [windelbouwman/rspython](https://github.com
./README.md:222:2     - Unknown word (windelbouwman) -- [windelbouwman/rspython](https://github
./README.md:223:2     - Unknown word (shinglyu)      -- [shinglyu/RustPython](https:/
./README.md:66:46     - Unknown word (conda)      -- RustPython through the `conda` package manager, though
./README.md:82:8      - Unknown word (wasmer)     -- Run by wasmer
./README.md:87:8      - Unknown word (wapm)       -- Run by wapm
./README.md:9:4       - Unknown word (codecov)    -- [![codecov](https://codecov.io
./benches/README.md:10:16     - Unknown word (tracebacks) -- To view Python tracebacks during benchmarks, run
./benches/README.md:58:1      - Unknown word (rustflags)  -- rustflags = [
./benches/benchmarks/fannkuch.py:14:5      - Unknown word (fannkuch)   -- def fannkuch(n):
./benches/benchmarks/fannkuch.py:5:16      - Unknown word (Sokolov)    -- Contributed by Sokolov Yura, modified by Tupteq
./benches/benchmarks/fannkuch.py:5:24      - Unknown word (Yura)       -- Contributed by Sokolov Yura, modified by Tupteq
./benches/benchmarks/fannkuch.py:5:42      - Unknown word (Tupteq)     -- Sokolov Yura, modified by Tupteq.
./benches/benchmarks/fannkuch.py:8:10      - Unknown word (pyperf)     -- # import pyperf
./benches/benchmarks/nbody.py:5:23      - Unknown word (Fredrik)    -- modified by Tupteq, Fredrik Johansson, and Daniel
./benches/benchmarks/nbody.py:5:31      - Unknown word (Johansson)  -- modified by Tupteq, Fredrik Johansson, and Daniel Nanz
./benches/benchmarks/nbody.py:5:53      - Unknown word (Nanz)       -- Johansson, and Daniel Nanz
./benches/benchmarks/pystone.py:128:5     - Unknown word (benchtime)  -- benchtime = clock() - starttime
./benches/benchmarks/pystone.py:130:17    - Unknown word (Benchtime)  -- loopsPerBenchtime = 0.0
./benches/benchmarks/pystone.py:15:58     - Unknown word (Rossum)     -- Python by Guido van Rossum.
./benches/benchmarks/pystone.py:19:51     - Unknown word (Arndt)      -- version 1.1.1 by Chris Arndt:
./benches/benchmarks/pystone.py:52:40     - Unknown word (Discr)      -- self, PtrComp = None, Discr = 0, EnumComp = 0,
./benches/benchmarks/pystone.py:7:57      - Unknown word (Pystone)    -- corresponds to C/1.1 plus 2 Pystone fixes)
./benches/benchmarks/pystone.py:87:5      - Unknown word (starttime)  -- starttime = clock()
./benches/benchmarks/pystone.py:90:5      - Unknown word (nulltime)   -- nulltime = clock() - starttime
./benches/benchmarks/pystone.py:9:29      - Unknown word (Weicker)    -- Reinhold P. Weicker, CACM Vol 27, No 1
./benches/execution.rs:11:10     - Unknown word (cpython)    -- fn bench_cpython_code(b: &mut Bencher
./benches/execution.rs:24:10     - Unknown word (rustpy)     -- fn bench_rustpy_code(b: &mut Bencher
./benches/execution.rs:31:43     - Unknown word (builtins)   -- = vm.new_scope_with_builtins();
./benches/execution.rs:33:23     - Unknown word (pyresult)   -- vm.unwrap_pyresult(res);
./benches/execution.rs:5:5       - Unknown word (rustpython) -- use rustpython_compiler::Mode;
./benches/execution.rs:95:18     - Unknown word (pystone)    -- pub fn benchmark_pystone(group: &mut BenchmarkGroup
./benches/microbenchmarks.rs:114:14    - Unknown word (dont)           -- settings.dont_write_bytecode = true
./benches/microbenchmarks.rs:114:25    - Unknown word (bytecode)       -- settings.dont_write_bytecode = true;
./benches/microbenchmarks.rs:141:52    - Unknown word (pyobj)          -- ITERATIONS", vm.new_pyobj(idx), vm)
./benches/microbenchmarks.rs:173:40    - Unknown word (microbenchmarks) -- c.benchmark_group("microbenchmarks");
./benches/microbenchmarks.rs:198:49    - Unknown word (splitn)          -- Vec<&str> = contents.splitn(2, "# ---").collect
./benches/microbenchmarks.rs:35:35     - Unknown word (microbenchmark) -- panic!("Error running microbenchmark")
./benches/test_benchmarks.py:19:18     - Unknown word (nbody)      -- ['benchmarks/nbody.py'],
./common/Cargo.toml:13:1      - Unknown word (hexf)       -- hexf-parse = "0.2.1"
./common/Cargo.toml:24:1      - Unknown word (siphasher)  -- siphasher = "0.3"
./common/Cargo.toml:25:1      - Unknown word (unic)       -- unic-ucd-category = "0.9
./common/Cargo.toml:29:1      - Unknown word (widestring) -- widestring = "0.5.1"
./common/src/boxvec.rs:1:8       - Unknown word (unresizable) -- //! An unresizable vector backed by a
./common/src/boxvec.rs:264:23    - Unknown word (nonoverlapping) -- ptr::copy_nonoverlapping(other.as_ptr(), dst
./common/src/boxvec.rs:513:20    - Unknown word (memmove)        -- // memmove back untouched tail
./common/src/boxvec.rs:582:5     - Unknown word (Rawptr)         -- /// Rawptr add but uses arithmetic
./common/src/boxvec.rs:621:21    - Unknown word (elems)          -- let rhs_elems = rhs[self.len()..]
./common/src/boxvec.rs:7:22      - Unknown word (Uninit)      -- mem::{self, MaybeUninit},
./common/src/bytes.rs:10:13     - Unknown word (dquote)     -- let mut dquote = 0;
./common/src/bytes.rs:1:8       - Unknown word (repr)       -- pub fn repr(b: &[u8]) -> String
./common/src/bytes.rs:9:13      - Unknown word (squote)     -- let mut squote = 0;
./common/src/cmp.rs:9:42      - Unknown word (rustc)      -- avoid any optimizations rustc might do with slices
./common/src/crt_fd.rs:10:21     - Unknown word (chsize)     -- #[link_name = "_chsize_s"]
./common/src/crt_fd.rs:11:8      - Unknown word (ftruncate)  -- fn ftruncate(fd: i32, len: i64)
./common/src/crt_fd.rs:21:27     - Unknown word (longlong)   -- type Offset = libc::c_longlong;
./common/src/crt_fd.rs:26:24     - Unknown word (errno)      -- Err(crate::os::errno())
./common/src/crt_fd.rs:48:12     - Unknown word (wopen)      -- pub fn wopen(path: &widestring::WideCStr
./common/src/crt_fd.rs:55:38     - Unknown word (wasi)       -- any(unix, target_os = "wasi"), not(target_os =
./common/src/crt_fd.rs:56:12     - Unknown word (openat)     -- pub fn openat(&self, path: &ffi::CStr
./common/src/crt_fd.rs:78:21     - Unknown word (osfhandle)  -- fn _get_osfhandle(fd: i32) -> libc::intptr
./common/src/float_ops.rs:191:18    - Unknown word (fract)      -- always_shows_fract: bool,
./common/src/float_ops.rs:228:13    - Unknown word (significand) -- let significand = &lit[..position];
./common/src/float_ops.rs:336:8     - Unknown word (floordiv)    -- pub fn floordiv(v1: f64, v2: f64) -
./common/src/float_ops.rs:344:8     - Unknown word (divmod)      -- pub fn divmod(v1: f64, v2: f64) -
./common/src/float_ops.rs:358:4     - Unknown word (nextafter)   -- // nextafter algorithm based off
./common/src/float_ops.rs:370:27    - Unknown word (copysign)    -- f64::from_bits(1).copysign(y)
./common/src/float_ops.rs:400:35    - Unknown word (ndigits)     -- float_digits(x: f64, ndigits: i32) -> Option<f64
./common/src/float_ops.rs:404:18    - Unknown word (trunc)       -- if x.trunc() % 2.0 == 0.0 {
./common/src/float_ops.rs:414:73    - Unknown word (consts)      -- MIN_EXP) as f64 * f64::consts::LOG10_2) as i32;
./common/src/float_ops.rs:425:27    - Unknown word (powf)        -- (10.0.powf((ndigits - 22) as f
./common/src/float_ops.rs:5:8       - Unknown word (ufrexp)     -- pub fn ufrexp(value: f64) -> (f64
./common/src/hash.rs:104:9     - Unknown word (frexp)      -- let frexp = super::float_ops:
./common/src/hash.rs:132:43    - Unknown word (signum)     -- x as PyHash * value.signum() as PyHash))
./common/src/hash.rs:21:25     - Unknown word (siphash)    -- const ALGO: &str = "siphash24";
./common/src/hash.rs:35:14     - Unknown word (hasher)     -- fn build_hasher(&self) -> Self::Hasher
./common/src/hash.rs:3:24      - Unknown word (Hasher)     -- use siphasher::sip::SipHasher24;
./common/src/hash.rs:52:13     - Unknown word (urandom)    -- lcg_urandom(seed, &mut buf);
./common/src/hash.rs:67:58     - Unknown word (hashf)      -- E>(&self, iter: I, hashf: F) -> Result<PyHash
./common/src/lib.rs:9:9       - Unknown word (boxvec)     -- pub mod boxvec;
./common/src/linked_list.rs:279:5     - Unknown word (curr)       -- curr: Option<NonNull<T::Target
./common/src/linked_list.rs:97:45     - Unknown word (noalias)    -- compiler to put the `noalias` attribute on mutable
./common/src/lock.rs:18:28     - Unknown word (unsync)     -- pub use once_cell::unsync::{Lazy, OnceCell};
./common/src/lock.rs:42:28     - Unknown word (rwlock)     -- add fn const_{mutex,rwlock}() if necessary, but
./common/src/lock/cell_lock.rs:131:23    - Unknown word (upgradably) -- deadlock("upgradably+sharedly ", "RwLock
./common/src/lock/cell_lock.rs:199:13    - Unknown word (lockkind)   -- fn deadlock(lockkind: &str, ty: &str) ->
./common/src/lock/cell_lock.rs:72:23     - Unknown word (sharedly)   -- deadlock("sharedly ", "RwLock")
./common/src/macros.rs:12:34     - Unknown word (msvc)       -- windows, target_env = "msvc"))]
./common/src/os.rs:1:77      - Unknown word (posix)      -- interfaces from stdlib::{os, posix, nt} to here
./common/src/rc.rs:6:28      - Unknown word (newtypes)   -- type aliases instead of newtypes because you can't do
./common/src/rc.rs:7:4       - Unknown word (newtype)    -- // newtype; requires the arbitrary
./common/src/static_cell.rs:16:28     - Unknown word (localkey)   -- pub const fn _from_localkey(inner: &'static LocalKey
./common/src/static_cell.rs:79:28     - Unknown word (oncecell)   -- pub const fn _from_oncecell(inner: OnceCell<T>)
./common/src/str.rs:216:25    - Unknown word (Repr)       -- fn repr(s: &str) -> Repr<'_> {
./common/src/str.rs:234:5     - Unknown word (dquoted)    -- dquoted: bool,
./common/src/str.rs:285:21    - Unknown word (dquouted)   -- // the tuple is dquouted, out_len
./common/src/str.rs:320:24    - Unknown word (unicodedata) -- // unicodedata lookup just for ascii
./common/src/str.rs:356:42    - Unknown word (squotes)     -- quotes_for_repr(num_squotes: usize, num_dquotes
./common/src/str.rs:356:62    - Unknown word (dquotes)     -- squotes: usize, num_dquotes: usize) -> (char, usize
./common/src/str.rs:39:32     - Unknown word (nchars)     -- char_range_end(s: &str, nchars: usize) -> Option<usize
./common/src/str.rs:50:8      - Unknown word (zfill)      -- pub fn zfill(bytes: &[u8], width
./common/src/str.rs:68:52     - Unknown word (unicodes)   -- compatible, escaping unicodes into escape
./compiler/Cargo.toml:13:1      - Unknown word (thiserror)  -- thiserror = "1.0"
./compiler/ast/Cargo.toml:11:1      - Unknown word (unparse)    -- unparse = ["rustpython-common
./compiler/ast/Python.asdl:111:23    - Unknown word (posonlyargs)   -- arguments = (arg* posonlyargs, arg* args, arg? vararg
./compiler/ast/Python.asdl:111:52    - Unknown word (vararg)        -- posonlyargs, arg* args, arg? vararg, arg* kwonlyargs,
./compiler/ast/Python.asdl:111:65    - Unknown word (kwonlyargs)    -- args, arg? vararg, arg* kwonlyargs,
./compiler/ast/Python.asdl:112:42    - Unknown word (kwarg)         -- expr* kw_defaults, arg? kwarg, expr* defaults)
./compiler/ast/Python.asdl:117:66    - Unknown word (kwargs)        -- NULL identifier for **kwargs)
./compiler/ast/Python.asdl:122:43    - Unknown word (asname)        -- identifier name, identifier? asname)
./compiler/ast/Python.asdl:28:70     - Unknown word (parens)     -- simple name without parens
./compiler/ast/Python.asdl:31:19     - Unknown word (orelse)     -- -- use 'orelse' because else is a keyword
./compiler/ast/Python.asdl:36:18     - Unknown word (withitem)   -- | With(withitem* items, stmt* body,
./compiler/ast/Python.asdl:42:29     - Unknown word (excepthandler) -- | Try(stmt* body, excepthandler* handlers, stmt* orelse
./compiler/ast/Python.asdl:42:74     - Unknown word (finalbody)     -- stmt* orelse, stmt* finalbody)
./compiler/ast/Python.asdl:49:13     - Unknown word (Nonlocal)      -- | Nonlocal(identifier* names)
./compiler/ast/Python.asdl:57:19     - Unknown word (boolop)        -- expr = BoolOp(boolop op, expr* values)
./compiler/ast/Python.asdl:64:22     - Unknown word (elts)          -- | Set(expr* elts)
./compiler/ast/Python.asdl:75:31     - Unknown word (cmpop)         -- Compare(expr left, cmpop* ops, expr* comparators
./compiler/ast/Python.asdl:99:28     - Unknown word (Mult)          -- operator = Add | Sub | Mult | MatMult | Div | Mod
./compiler/ast/Python.asdl:9:30      - Unknown word (argtypes)   -- FunctionType(expr* argtypes, expr returns)
./compiler/ast/asdl.py:130:9     - Unknown word (klass)      -- klass = obj.__class__
./compiler/ast/asdl.py:133:13    - Unknown word (methname)   -- methname = "visit" + klass._
./compiler/ast/asdl.py:208:18    - Unknown word (ASDL)       -- parser = ASDLParser()
./compiler/ast/asdl.py:299:13    - Unknown word (sumlist)    -- sumlist = [Constructor(self
./compiler/ast/asdl_rs.py:104:13    - Unknown word (childinfo)  -- childinfo = typeinfo[child]
./compiler/ast/asdl_rs.py:113:11    - Unknown word (Userdata)   -- class FindUserdataTypesVisitor(asdl.VisitorBase
./compiler/ast/asdl_rs.py:119:24    - Unknown word (dfns)       -- for dfn in mod.dfns:
./compiler/ast/asdl_rs.py:11:8      - Unknown word (asdl)       -- import asdl
./compiler/ast/asdl_rs.py:179:28    - Unknown word (typedefs)   -- Visitor to generate typedefs for AST."""
./compiler/ast/asdl_rs.py:198:9     - Unknown word (rustname)   -- rustname = get_rust_type(name
./compiler/ast/asdl_rs.py:209:9     - Unknown word (enumname)   -- enumname = rustname = get_rust
./compiler/ast/asdl_rs.py:237:9     - Unknown word (fieldtype)  -- fieldtype = self.typeinfo.get
./compiler/ast/asdl_rs.py:253:9     - Unknown word (dataname)   -- dataname = rustname = get_rust
./compiler/ast/asdl_rs.py:259:13    - Unknown word (datadef)    -- datadef = f"{dataname}{generics
./compiler/ast/asdl_rs.py:360:9     - Unknown word (structname) -- structname = get_rust_type(name
./compiler/ast/asdl_rs.py:421:17    - Unknown word (pyclass)    -- f'#[pyclass(module = "_ast", name
./compiler/ast/asdl_rs.py:42:5      - Unknown word (unaryop)    -- unaryop = Invert | Not | UAdd
./compiler/ast/asdl_rs.py:431:18    - Unknown word (classdef)   -- self.gen_classdef(cons.name, cons.fields
./compiler/ast/asdl_rs.py:532:22    - Unknown word (fromobj)    -- self.gen_sum_fromobj(sum, name, enumname
./compiler/ast/asdl_rs.py:584:36    - Unknown word (sumname)    -- sum_fromobj(self, sum, sumname, enumname, depth):
./compiler/ast/asdl_rs.py:600:44    - Unknown word (prodname)   -- fromobj(self, product, prodname, structname, depth)
./compiler/ast/asdl_rs.py:644:18    - Unknown word (clippy)     -- #![allow(clippy::derive_partial_eq_without
./compiler/ast/asdl_rs.py:89:18     - Unknown word (userdata)   -- self.has_userdata = None
./compiler/ast/src/ast_gen.rs:119:20    - Unknown word (Withitem)   -- items: Vec<Withitem<U>>,
./compiler/ast/src/ast_gen.rs:138:23    - Unknown word (Excepthandler) -- handlers: Vec<Excepthandler<U>>,
./compiler/ast/src/ast_gen.rs:172:13    - Unknown word (Boolop)        -- op: Boolop,
./compiler/ast/src/ast_gen.rs:185:13    - Unknown word (Unaryop)       -- op: Unaryop,
./compiler/ast/src/ast_gen.rs:232:18    - Unknown word (Cmpop)         -- ops: Vec<Cmpop>,
./compiler/ast/src/constant.rs:13:26     - Unknown word (imag)       -- Complex { real: f64, imag: f64 },
./compiler/ast/src/lib.rs:5:5       - Unknown word (impls)      -- mod impls;
./compiler/ast/src/unparse.rs:134:25    - Unknown word (npos)       -- let npos = args.args.len() +
./compiler/ast/src/unparse.rs:259:43    - Unknown word (genexp)     -- make sure a single genexp doesn't get double parens
./compiler/ast/src/unparse.rs:26:8      - Unknown word (Unparser)   -- struct Unparser<'a> {
./compiler/ast/src/unparse.rs:286:60    - Unknown word (joinedstr)  -- values } => self.unparse_joinedstr(values, false)?,
./compiler/ast/src/unparse.rs:439:16    - Unknown word (fstring)    -- fn unparse_fstring_body<U>(&mut self, values
./compiler/ast/src/unparse.rs:51:22     - Unknown word (opprec)     -- macro_rules! opprec {
./compiler/ast/src/unparse.rs:52:15     - Unknown word (opty)       -- ($opty:ident, $x:expr, $enu
./compiler/ast/src/unparse.rs:52:74     - Unknown word (prec)       -- ident($op:literal, $prec:ident)),*$(,)?) =>
./compiler/ast/src/unparse.rs:92:21     - Unknown word (rassoc)     -- let rassoc = matches!(op, Operator
./compiler/codegen/Cargo.toml:14:1      - Unknown word (ahash)      -- ahash = "0.7.6"
./compiler/codegen/Cargo.toml:15:1      - Unknown word (bitflags)   -- bitflags = "1.3.2"
./compiler/codegen/Cargo.toml:16:1      - Unknown word (indexmap)   -- indexmap = "1.8.1"
./compiler/codegen/Cargo.toml:17:1      - Unknown word (itertools)  -- itertools = "0.10.3"
./compiler/codegen/Cargo.toml:19:49     - Unknown word (serde)      -- .4.0", features = ["serde"] }
./compiler/codegen/Cargo.toml:26:1      - Unknown word (insta)      -- insta = "1.14.0"
./compiler/codegen/src/compile.rs:1058:29   - Unknown word (finallyhandler) -- // We enter the finallyhandler block, without return
./compiler/codegen/src/compile.rs:1199:17   - Unknown word (freevars)       -- if code.freevars.is_empty() {
./compiler/codegen/src/compile.rs:11:5      - Unknown word (symboltable) -- symboltable::{self, SymbolFlags
./compiler/codegen/src/compile.rs:1296:13   - Unknown word (dunder)         -- let dunder_name = self.name("_
./compiler/codegen/src/compile.rs:1303:13   - Unknown word (qualname)       -- let qualname = self.name("__qualname
./compiler/codegen/src/compile.rs:1314:13   - Unknown word (classcell)      -- let classcell_idx = self
./compiler/codegen/src/compile.rs:1369:54   - Unknown word (bytecodes)      -- default None and no bytecodes unless it is Some
./compiler/codegen/src/compile.rs:14:16     - Unknown word (Itertools)   -- use itertools::Itertools;
./compiler/codegen/src/compile.rs:1553:9    - Unknown word (vals)           -- vals: &[ast::Expr],
./compiler/codegen/src/compile.rs:1594:26   - Unknown word (pseudocode)     -- // compile into (pseudocode):
./compiler/codegen/src/compile.rs:1820:50   - Unknown word (inplace)        -- op: &ast::Operator, inplace: bool) {
./compiler/codegen/src/compile.rs:1830:64   - Unknown word (Lshift)         -- bytecode::BinaryOperator::Lshift,
./compiler/codegen/src/compile.rs:1831:64   - Unknown word (Rshift)         -- bytecode::BinaryOperator::Rshift,
./compiler/codegen/src/compile.rs:1837:41   - Unknown word (Inplace)        -- Instruction::BinaryOperationInplace { op }
./compiler/codegen/src/compile.rs:204:13    - Unknown word (posonlyarg)  -- posonlyarg_count: 0,
./compiler/codegen/src/compile.rs:206:13    - Unknown word (kwonlyarg)   -- kwonlyarg_count: 0,
./compiler/codegen/src/compile.rs:2162:23   - Unknown word (listcomp)       -- "<listcomp>",
./compiler/codegen/src/compile.rs:216:13    - Unknown word (cellvar)     -- cellvar_cache: IndexSet::default
./compiler/codegen/src/compile.rs:2179:23   - Unknown word (setcomp)        -- "<setcomp>",
./compiler/codegen/src/compile.rs:217:13    - Unknown word (freevar)     -- freevar_cache: IndexSet::default
./compiler/codegen/src/compile.rs:2200:23   - Unknown word (dictcomp)       -- "<dictcomp>",
./compiler/codegen/src/compile.rs:2221:46   - Unknown word (genexpr)        -- compile_comprehension("<genexpr>", None, generators
./compiler/codegen/src/compile.rs:2263:13   - Unknown word (groupby)        -- let groupby = keywords.iter().group
./compiler/codegen/src/compile.rs:2264:28   - Unknown word (subkeywords)    -- for (is_unpacking, subkeywords) in &groupby {
./compiler/codegen/src/compile.rs:2271:25   - Unknown word (subsize)        -- let mut subsize = 0;
./compiler/codegen/src/compile.rs:2740:39   - Unknown word (codeobjects)    -- value.display_expand_codeobjects().to_string(),
./compiler/codegen/src/compile.rs:2783:24   - Unknown word (woohoo)         -- async with woohoo():
./compiler/codegen/src/compile.rs:326:40    - Unknown word (codeinfo)    -- cache(self.current_codeinfo());
./compiler/codegen/src/compile.rs:33:18     - Unknown word (nargs)       -- Positional { nargs: u32 },
./compiler/codegen/src/compile.rs:601:39    - Unknown word (fromlist)    -- from .... import (*fromlist)
./compiler/codegen/src/compile.rs:823:61    - Unknown word (augassign)   -- value } => self.compile_augassign(target, op, value)?
./compiler/codegen/src/compile.rs:905:17    - Unknown word (funcflags)   -- let mut funcflags = bytecode::MakeFunctionFlags
./compiler/codegen/src/compile.rs:935:25    - Unknown word (varargs)     -- let mut compile_varargs = |va: Option<&ast:
./compiler/codegen/src/compile.rs:9:13      - Unknown word (Codegen)    -- error::{CodegenError, CodegenErrorType
./compiler/codegen/src/ir.rs:109:13    - Unknown word (varnames)   -- varnames: varname_cache.into
./compiler/codegen/src/ir.rs:110:13    - Unknown word (cellvars)   -- cellvars: cellvar_cache.into
./compiler/codegen/src/ir.rs:126:23    - Unknown word (cellarg)    -- let mut found_cellarg = false;
./compiler/codegen/src/ir.rs:13:26     - Unknown word (petgraph)   -- TODO: look into using petgraph for handling blocks
./compiler/codegen/src/ir.rs:165:17    - Unknown word (maxdepth)   -- let mut maxdepth = 0u32;
./compiler/codegen/src/ir.rs:167:17    - Unknown word (startdepths) -- let mut startdepths = vec![u32::MAX; self
./compiler/codegen/src/ir.rs:48:17     - Unknown word (stackdepth) -- let max_stackdepth = self.max_stackdepth
./compiler/codegen/src/symboltable.rs:110:45    - Unknown word (unallowed)  -- assignment to detect unallowed re-assignment to iterator
./compiler/codegen/src/symboltable.rs:1273:31   - Unknown word (namedexpr)  -- && symbol.is_assign_namedexpr_in_comprehension*/
./compiler/codegen/src/symboltable.rs:19:66     - Unknown word (subscopes)  -- scope, and has a list of subscopes in this scope.
./compiler/codegen/src/symboltable.rs:28:32     - Unknown word (sourcecode) -- The line number in the sourcecode where this symboltable
./compiler/codegen/src/symboltable.rs:534:24    - Unknown word (Compr)      -- AssignedNamedExprInCompr,
./compiler/codegen/src/symboltable.rs:744:36    - Unknown word (mymodule)   -- // `import mymodule as myalias`
./compiler/codegen/src/symboltable.rs:744:48    - Unknown word (myalias)    -- `import mymodule as myalias`
./compiler/core/Cargo.toml:11:1      - Unknown word (bincode)    -- bincode = "1.3.3"
./compiler/core/Cargo.toml:13:1      - Unknown word (bstr)       -- bstr = "0.2.17"
./compiler/core/src/bytecode.rs:1075:13   - Unknown word (cellname)   -- let cellname = |i: u32| {
./compiler/core/src/bytecode.rs:1245:31   - Unknown word (bincode's)  -- // manually mimic bincode's seq encoding, which
./compiler/core/src/bytecode.rs:1299:21   - Unknown word (subslice)   -- let mut subslice = &self.data[self.pos
./compiler/core/src/bytecode.rs:1324:29   - Unknown word (Bincode)    -- impl<'storage> bincode::BincodeRead<'storage> for VecReader
./compiler/core/src/bytecode.rs:609:9     - Unknown word (varkwarg)   -- pub varkwarg: Option<&'a N>,
./compiler/core/src/bytecode.rs:62:7      - Unknown word (codeobject) -- /// a codeobject. Also a module has a
./compiler/core/src/bytecode.rs:631:22    - Unknown word (getargs)    -- /// like inspect.getargs
./compiler/core/src/bytecode.rs:634:13    - Unknown word (nkwargs)    -- let nkwargs = self.kwonlyarg_count
./compiler/core/src/bytecode.rs:635:17    - Unknown word (varargspos) -- let mut varargspos = nargs + nkwargs;
./compiler/core/src/bytecode.rs:809:17    - Unknown word (Bytecode)   -- /// Invalid Bytecode
./compiler/core/src/location.rs:3:5       - Unknown word (Sourcecode) -- /// Sourcecode location.
./compiler/parser/README.md:53:1      - Unknown word (Datatypes)  -- Datatypes to support source location
./compiler/parser/build.rs:103:13    - Unknown word (kwds)       -- let mut kwds = phf_codegen::Map:
./compiler/parser/build.rs:110:12    - Unknown word (moreso)     -- // moreso "standard" keywords
./compiler/parser/build.rs:5:10      - Unknown word (keccak)     -- use tiny_keccak::{Hasher, Sha3};
./compiler/parser/python.lalrpop:1299:13   - Unknown word (Cond)       -- ExpressionNoCond: ast::Expr = OrTest
./compiler/parser/python.lalrpop:1390:28   - Unknown word (Amper)      -- "&" => lexer::Tok::Amper,
./compiler/parser/python.lalrpop:1395:28   - Unknown word (Vbar)       -- "|" => lexer::Tok::Vbar,
./compiler/parser/python.lalrpop:1401:28   - Unknown word (Lsqb)       -- "[" => lexer::Tok::Lsqb,
./compiler/parser/python.lalrpop:1402:28   - Unknown word (Rsqb)       -- "]" => lexer::Tok::Rsqb,
./compiler/parser/python.lalrpop:1426:29   - Unknown word (Rarrow)     -- "->" => lexer::Tok::Rarrow,
./compiler/parser/python.lalrpop:1437:31   - Unknown word (Elif)       -- elif" => lexer::Tok::Elif,
./compiler/parser/python.lalrpop:272:29    - Unknown word (usize)      -- ImportFromLocation: (Option<usize>, Option<String>) =
./compiler/parser/python.lalrpop:326:20    - Unknown word (nonlocal)   -- <location:@L> "nonlocal" <names:OneOrMore<Identifier
./compiler/parser/python.lalrpop:361:77    - Unknown word (elif)       -- body:Suite> <s2:(@L "elif" NamedExpressionTest
./compiler/parser/python.lalrpop:518:19    - Unknown word (withitems)  -- <WithItem<"no-withitems">> => vec![<>],
./compiler/parser/python.lalrpop:591:46    - Unknown word (Kwarg)      -- ameterDefs<ArgType>> <kw:("," KwargParameter<ArgType>)>
./compiler/parser/src/error.rs:2:61      - Unknown word (maksing)    -- and a safe error API, maksing errors from LALR
./compiler/parser/src/error.rs:5:33      - Unknown word (Lalrpop)    -- util::ParseError as LalrpopError;
./compiler/parser/src/fstring.rs:26:26     - Unknown word (Peekable)   -- mut chars: iter::Peekable<str::Chars<'a>>,
./compiler/parser/src/fstring.rs:31:17     - Unknown word (delims)     -- let mut delims = Vec::new();
./compiler/parser/src/fstring.rs:356:31    - Unknown word (peekable)   -- parse(source.chars().peekable(), 0)
./compiler/parser/src/fstring.rs:38:54     - Unknown word (remainign)  -- integrated better with the remainign code, but as a starting
./compiler/parser/src/fstring.rs:39:67     - Unknown word (fstrings)   -- a tokenizing of the fstrings to omit this peeking
./compiler/parser/src/fstring.rs:404:27    - Unknown word (selfdocumenting) -- fn test_fstring_parse_selfdocumenting_base() {
./compiler/parser/src/fstring.rs:467:27    - Unknown word (selfdoc)         -- fn test_parse_fstring_selfdoc_prec_space() {
./compiler/parser/src/function.rs:46:13     - Unknown word (posonly)    -- let mut posonly = Vec::with_capacity
./compiler/parser/src/lexer.rs:1246:25   - Unknown word (whitespaces)  -- // Skip whitespaces
./compiler/parser/src/lexer.rs:1367:8    - Unknown word (stok)         -- fn stok(s: &str) -> Tok {
./compiler/parser/src/lexer.rs:1472:24   - Unknown word (avariable)    -- let source = r"avariable = 99 + 2-0";
./compiler/parser/src/lexer.rs:1738:28   - Unknown word (omkmok)       -- let source = r##"b"omkmok\Xaa""##;
./compiler/parser/src/lexer.rs:240:25    - Unknown word (feff)        -- if let Some('\u{feff}') = lxr.window[0]
./compiler/parser/src/lexer.rs:815:32    - Unknown word (dedentations) -- // One or more dedentations
./compiler/parser/src/lexer.rs:85:22     - Unknown word (Indetations) -- .expect("Indetations must have at least one
./compiler/parser/src/lib.rs:31:3      - Unknown word (rustfmt)    -- #[rustfmt::skip]
./compiler/parser/src/parser.rs:16:31     - Unknown word (antlr)      -- Grammar may be inspired by antlr grammar for python:
./compiler/parser/src/string.rs:35:13     - Unknown word (deduped)    -- let mut deduped: Vec<Expr> = vec![]
./compiler/src/lib.rs:46:16     - Unknown word (symtable)   -- pub fn compile_symtable(
./derive-impl/Cargo.toml:12:1      - Unknown word (maplit)     -- maplit = "1.0.2"
./derive-impl/Cargo.toml:18:1      - Unknown word (textwrap)   -- textwrap = { version = "0.15
./derive-impl/src/compile_bytecode.rs:139:68    - Unknown word (canonicalize) -- read_to_string(path.canonicalize().unwrap()) {
./derive-impl/src/compile_bytecode.rs:209:46    - Unknown word (badsyntax)    -- if stem.starts_with("badsyntax_")
./derive-impl/src/compile_bytecode.rs:234:5     - Unknown word (metas)        -- metas: Vec<Meta>,
./derive-impl/src/error.rs:139:28    - Unknown word (Punct)      -- dst.append(Punct::new('!', Spacing::Alone
./derive-impl/src/from_args.rs:141:9     - Unknown word (namestring)   -- let namestring = name.map(Ident::to
./derive-impl/src/from_args.rs:147:9     - Unknown word (fieldname)    -- let fieldname = match name {
./derive-impl/src/from_args.rs:156:9     - Unknown word (pyname)       -- let pyname = attr
./derive-impl/src/from_args.rs:38:33     - Unknown word (pyarg)      -- attr.path.is_ident("pyarg") {
./derive-impl/src/from_args.rs:89:39     - Unknown word (Unrecognised) -- bail_span!(path, "Unrecognised pyarg attribute");
./derive-impl/src/lib.rs:18:5      - Unknown word (pymodule)   -- mod pymodule;
./derive-impl/src/lib.rs:19:5      - Unknown word (pypayload)  -- mod pypayload;
./derive-impl/src/lib.rs:20:5      - Unknown word (pystructseq) -- mod pystructseq;
./derive-impl/src/lib.rs:42:40     - Unknown word (pyimpl)      -- tokens(pyclass::impl_pyimpl(attr, item))
./derive-impl/src/lib.rs:53:8      - Unknown word (pyexception) -- pub fn pyexception(attr: AttributeArgs
./derive-impl/src/lib.rs:61:8      - Unknown word (pystruct)    -- pub fn pystruct_sequence(input: DeriveInput
./derive-impl/src/pyclass.rs:1006:36   - Unknown word (nmeta)          -- meta_map = if let Some(nmeta) = nested.next() {
./derive-impl/src/pyclass.rs:1017:89   - Unknown word (slotname)       -- pyslot] or #[pyslot(slotname)]")
./derive-impl/src/pyclass.rs:1126:13   - Unknown word (withs)          -- let mut withs = Vec::new();
./derive-impl/src/pyclass.rs:142:25    - Unknown word (trai)           -- Item::Trait(mut trai) => {
./derive-impl/src/pyclass.rs:198:5     - Unknown word (metaclass)      -- metaclass: Option<String>,
./derive-impl/src/pyclass.rs:223:9     - Unknown word (basicsize)      -- let basicsize = quote!(std::mem::size
./derive-impl/src/pyclass.rs:247:23    - Unknown word (baseclass)      -- fn static_baseclass() -> &'static ::rustpython
./derive-impl/src/pyclass.rs:33:30     - Unknown word (pymethod)   -- Self::Method => "pymethod",
./derive-impl/src/pyclass.rs:34:35     - Unknown word (pyclassmethod) -- Self::ClassMethod => "pyclassmethod",
./derive-impl/src/pyclass.rs:35:36     - Unknown word (pystaticmethod) -- Self::StaticMethod => "pystaticmethod",
./derive-impl/src/pyclass.rs:363:15    - Unknown word (initproc)       -- // See: `(initproc)BaseException_init`
./derive-impl/src/pyclass.rs:365:46    - Unknown word (zelf)           -- quote! { #init_def(zelf, args, vm) },
./derive-impl/src/pyclass.rs:36:30     - Unknown word (pygetset)       -- Self::GetSet => "pygetset",
./derive-impl/src/pyclass.rs:37:28     - Unknown word (pyslot)         -- Self::Slot => "pyslot",
./derive-impl/src/pyclass.rs:38:28     - Unknown word (pyattr)         -- Self::Attr => "pyattr",
./derive-impl/src/pyclass.rs:40:30     - Unknown word (pymember)       -- Self::Member => "pymember",
./derive-impl/src/pyclass.rs:512:56    - Unknown word (classmethod)    -- ClassMethod => quote!(.build_classmethod(ctx, class)),
./derive-impl/src/pyclass.rs:513:57    - Unknown word (staticmethod)   -- StaticMethod => quote!(.build_staticmethod(ctx, class)),
./derive-impl/src/pyclass.rs:522:30    - Unknown word (funcdef)        -- ctx.make_funcdef(#py_name, Self::#ident
./derive-impl/src/pyclass.rs:68:5      - Unknown word (getset)         -- getset_items: GetSetNursery
./derive-impl/src/pyclass.rs:758:46    - Unknown word (deleter)        -- cfgs), (getter, setter, deleter)) in &self.map {
./derive-impl/src/pyclass.rs:83:18     - Unknown word (pyitems)        -- let (pyitems, cfgs) = attrs_to_content
./derive-impl/src/pyclass.rs:83:27     - Unknown word (cfgs)           -- let (pyitems, cfgs) = attrs_to_content
./derive-impl/src/pyclass.rs:84:17     - Unknown word (pyitem)         -- for pyitem in pyitems.iter().rev
./derive-impl/src/pymodule.rs:148:5     - Unknown word (pyattrs)    -- pyattrs: Vec<usize>,
./derive-impl/src/pymodule.rs:23:32     - Unknown word (pyfunction) -- Self::Function => "pyfunction",
./derive-impl/src/pymodule.rs:3:14      - Unknown word (idents)     -- iter_use_idents, pyclass_ident_and_attrs
./derive-impl/src/pymodule.rs:404:17    - Unknown word (noattr)     -- let noattr = class_attr.try_remove
./derive-impl/src/pystructseq.rs:37:77     - Unknown word (pyobject)   -- convert::ToPyObject::to_pyobject(
./derive-impl/src/pystructseq.rs:6:47      - Unknown word (struc)      -- syn::Data::Struct(ref struc) = input.data {
./examples/atexit_example.py:4:5       - Unknown word (myexit)     -- def myexit():
./examples/call_between_rust_and_python.rs:8:9       - Unknown word (interp)     -- let interp = rustpython_vm::Interpreter
./examples/parse_folder.rs:67:35     - Unknown word (Erreur)     -- Err(y) => error!("Erreur in file {:?} {:?}",
./extra_tests/custom_text_test_runner.py:220:39    - Unknown word (occured)    -- tests or some failure occured execution time may not
./extra_tests/custom_text_test_runner.py:7:22      - Unknown word (Abtin)      -- Copyright (c) 2015 Abtin Gramian
./extra_tests/custom_text_test_runner.py:7:28      - Unknown word (Gramian)    -- Copyright (c) 2015 Abtin Gramian
./extra_tests/custom_text_test_runner.py:88:36     - Unknown word (getargspec) -- [p for p in inspect.getargspec(func_ref).args if p
./extra_tests/jsontests.py:27:1      - Unknown word (resultsfile) -- resultsfile = os.path.join(os.path
./extra_tests/jsontests.py:3:11      - Unknown word (libregrtest) -- from test.libregrtest.runtest import findtests
./extra_tests/jsontests.py:3:38      - Unknown word (findtests)   -- libregrtest.runtest import findtests
./extra_tests/jsontests.py:7:1       - Unknown word (testnames)   -- testnames = findtests()
./extra_tests/snippets/builtin_all.py:1:6       - Unknown word (testutils)  -- from testutils import assert_raises
./extra_tests/snippets/builtin_bool.py:33:7      - Unknown word (Falsey)     -- class Falsey:
./extra_tests/snippets/builtin_bool.py:48:3      - Unknown word (Bools)      -- # Bools are also ints.
./extra_tests/snippets/builtin_bytearray.py:378:51    - Unknown word (maxsplit)   -- split(bytearray(b","), maxsplit=1) == [bytearray(b"
./extra_tests/snippets/builtin_bytearray.py:588:55    - Unknown word (keepends)   -- rkl\r\n").splitlines(keepends=True) == [
./extra_tests/snippets/builtin_bytearray.py:72:33     - Unknown word (unashable)  -- bytearray(b"abcd")) # unashable
./extra_tests/snippets/builtin_bytes.py:246:10    - Unknown word (azeazerazeazopia) -- assert b"azeazerazeazopia".count(b"aze") == 3
./extra_tests/snippets/builtin_bytes.py:316:10    - Unknown word (abcdabcda)        -- assert b"abcdabcda".find(b"a") == 0
./extra_tests/snippets/builtin_bytes.py:334:10    - Unknown word (hjhtuyjyujuyj)    -- assert b"hjhtuyjyujuyj".translate(bytes.maketrans
./extra_tests/snippets/builtin_bytes.py:339:10    - Unknown word (hjhtuyfjtyhuhjuyj) -- assert b"hjhtuyfjtyhuhjuyj".translate(None, b"ht
./extra_tests/snippets/builtin_bytes.py:40:19     - Unknown word (abcdé)      -- assert len(bytes("abcdé", "utf8")) == 6
./extra_tests/snippets/builtin_bytes.py:615:15    - Unknown word (bpython)           -- assert b'rust%bpython%b' % (b' ', b'!') =
./extra_tests/snippets/builtin_bytes.py:631:18    - Unknown word (bytess)            -- return b"bytess"
./extra_tests/snippets/builtin_complex.py:138:5     - Unknown word (getnewargs) -- # __getnewargs__
./extra_tests/snippets/builtin_dict_union.py:4:10      - Unknown word (dunion)     -- def test_dunion_ior0():
./extra_tests/snippets/builtin_exceptions.py:105:77    - Unknown word (excs)       -- ok, will print two excs
./extra_tests/snippets/builtin_exceptions.py:264:16    - Unknown word (strerror)   -- assert OSError.strerror
./extra_tests/snippets/builtin_exceptions.py:272:48    - Unknown word (winerror)   -- startswith("win") or w.winerror == None
./extra_tests/snippets/builtin_exceptions.py:95:9      - Unknown word (excepthook) -- sys.excepthook(type(exc), exc, exc
./extra_tests/snippets/builtin_float.py:257:40    - Unknown word (nans)       -- misspelt infinities and nans
./extra_tests/snippets/builtin_float.py:257:6     - Unknown word (infi)       -- "infi", # misspelt infinities
./extra_tests/snippets/builtin_float.py:258:7     - Unknown word (Infinit)    -- "-Infinit",
./extra_tests/snippets/builtin_float.py:263:6     - Unknown word (snan)       -- "snan",
./extra_tests/snippets/builtin_float.py:268:6     - Unknown word (nfinity)    -- "nfinity",
./extra_tests/snippets/builtin_float.py:269:6     - Unknown word (inity)      -- "inity",
./extra_tests/snippets/builtin_float.py:270:6     - Unknown word (iinity)     -- "iinity",
./extra_tests/snippets/builtin_float.py:271:7     - Unknown word (xnan)       -- "0xnan",
./extra_tests/snippets/builtin_float.py:302:22    - Unknown word (fullwidth)  -- "0x1p\uff10", # fullwidth Unicode digits
./extra_tests/snippets/builtin_float.py:392:21    - Unknown word (xbep)       -- identical(fromHex('0xbep0'), 190.0)
./extra_tests/snippets/builtin_float.py:404:28    - Unknown word (fdaa)       -- identical(fromHex('0x.00c90fdaa22168cp10'), pi)
./extra_tests/snippets/builtin_int.py:346:1     - Unknown word (subint)     -- subint = int.__new__(SubInt
./extra_tests/snippets/builtin_isinstance.py:25:17     - Unknown word (behaviour)  -- # weird cpython behaviour if exact match then
./extra_tests/snippets/builtin_issubclass.py:16:11     - Unknown word (subclasscheck) -- def __subclasscheck__(self, subclass):
./extra_tests/snippets/builtin_list.py:253:13    - Unknown word (refrences)  -- # make sure refrences are assigned correctly
./extra_tests/snippets/builtin_list.py:639:26    - Unknown word (daedlock)   -- Test for list entering daedlock or not (https://github
./extra_tests/snippets/builtin_memoryview.py:39:14     - Unknown word (tobytes)    -- assert m.tobytes() == b'123456789'
./extra_tests/snippets/builtin_object.py:10:10     - Unknown word (subclasshook) -- object.__subclasshook__() == NotImplemented
./extra_tests/snippets/builtin_object.py:6:1       - Unknown word (myobj)      -- myobj = MyObject()
./extra_tests/snippets/builtin_pow.py:125:15    - Unknown word (Rpow)       -- class TestRpow:
./extra_tests/snippets/builtin_pow.py:144:9     - Unknown word (fiveto)     -- fiveto = float(5 ** n)
./extra_tests/snippets/builtin_pow.py:146:38    - Unknown word (thereafer)  -- mantissa bits, though, and thereafer fiveto will be even
./extra_tests/snippets/builtin_pow.py:29:5      - Unknown word (powtest)    -- def powtest(type):
./extra_tests/snippets/builtin_pow.py:46:13     - Unknown word (othertype)  -- for othertype in (int,):
./extra_tests/snippets/builtin_pow.py:64:5      - Unknown word (asseq)      -- asseq = assert_equal
./extra_tests/snippets/builtin_pow.py:85:10     - Unknown word (powint)     -- def test_powint():
./extra_tests/snippets/builtin_pow.py:89:10     - Unknown word (powfloat)   -- def test_powfloat():
./extra_tests/snippets/builtin_property.py:4:7       - Unknown word (Fubar)      -- class Fubar:
./extra_tests/snippets/builtin_property.py:73:11     - Unknown word (fdel)       -- assert p1.fdel == "c"
./extra_tests/snippets/builtin_property.py:86:25     - Unknown word (pdoc)       -- property('a', doc='pdoc')
./extra_tests/snippets/builtin_set.py:373:27    - Unknown word (aruguments) -- TODO: Assert that empty aruguments raises exception.
./extra_tests/snippets/builtin_str.py:174:20    - Unknown word (txyz)       -- assert 'abc\t12345\txyz'.expandtabs() == 'abc
./extra_tests/snippets/builtin_str.py:338:7     - Unknown word (isisprintable) -- # str.isisprintable
./extra_tests/snippets/builtin_str.py:37:21     - Unknown word (xyxyxy)     -- assert "xy" * 3 == "xyxyxy"
./extra_tests/snippets/builtin_str.py:614:10    - Unknown word (foobarfoo)     -- s = 'foobarfoo'
./extra_tests/snippets/builtin_str.py:625:28    - Unknown word (afoo)          -- assert s.removeprefix('afoo') == s_ref
./extra_tests/snippets/builtin_str.py:670:28    - Unknown word (fooa)          -- assert s.removesuffix('fooa') == s_ref
./extra_tests/snippets/builtin_str.py:96:10     - Unknown word (koki)       -- assert ["koki".center(i, "|") for
./extra_tests/snippets/builtin_str_encode.py:11:42     - Unknown word (estás)     -- UnicodeEncodeError, "¿como estás?".encode, "ascii")
./extra_tests/snippets/builtin_str_encode.py:19:25     - Unknown word (𝕐𝕥)       -- round_trip("☢🐣 ᖇ𝓤𝕊тⓟ𝕐𝕥卄σ𝔫 ♬👣")
./extra_tests/snippets/builtin_str_encode.py:20:19     - Unknown word (ק𝔂t)       -- round_trip("💀👌 ק𝔂tℍⓞ𝓷 ３  🔥👤")
./extra_tests/snippets/builtin_str_unicode.py:30:9      - Unknown word (pyth)       -- assert "pyth\xf6n.org".encode("idna
./extra_tests/snippets/builtin_str_unicode.py:34:14     - Unknown word (pythn)      -- assert b"xn--pythn-mua.org".decode("idna
./extra_tests/snippets/builtin_str_unicode_slice.py:35:19     - Unknown word (רֵאשִ)      -- hebrew_text = "בְּרֵאשִׁית, בָּרָא אֱלֹהִים
./extra_tests/snippets/builtin_str_unicode_slice.py:35:36     - Unknown word (אֱלֹהִים)   -- בְּרֵאשִׁית, בָּרָא אֱלֹהִים, אֵת הַשָּׁמַיִם, ו
./extra_tests/snippets/builtin_str_unicode_slice.py:35:50     - Unknown word (הַשָּׁמַיִם) -- ָּרָא אֱלֹהִים, אֵת הַשָּׁמַיִם, וְאֵת הָאָרֶץ"
./extra_tests/snippets/builtin_str_unicode_slice.py:35:63     - Unknown word (וְאֵת)       -- ם, אֵת הַשָּׁמַיִם, וְאֵת הָאָרֶץ"
./extra_tests/snippets/builtin_str_unicode_slice.py:35:69     - Unknown word (הָאָרֶץ)     -- הַשָּׁמַיִם, וְאֵת הָאָרֶץ"
./extra_tests/snippets/builtin_str_unicode_slice.py:47:32     - Unknown word (מַיִם)       -- hebrew_text[-20:50] == 'מַיִם, וְא'
./extra_tests/snippets/builtin_str_unicode_slice.py:56:34     - Unknown word (אםהֱאּ)      -- hebrew_text[30:10:-3] == 'אםהֱאּ '
./extra_tests/snippets/builtin_str_unicode_slice.py:58:37     - Unknown word (םיִהֹלֱא)    -- text[30:10:-1] == 'א ,םיִהֹלֱא אָרָּב ,'
./extra_tests/snippets/builtin_str_unicode_slice.py:58:46     - Unknown word (אָרּ)        -- -1] == 'א ,םיִהֹלֱא אָרָּב ,'
./extra_tests/snippets/builtin_super.py:4:26      - Unknown word (thisclass)  -- assert test_super_list.__thisclass__ == list
./extra_tests/snippets/builtin_type.py:268:9     - Unknown word (clsmethod)  -- def clsmethod(cls):
./extra_tests/snippets/builtin_type.py:272:9     - Unknown word (stmethod)   -- def stmethod():
./extra_tests/snippets/builtin_type.py:330:3     - Unknown word (Regresesion) -- # Regresesion to
./extra_tests/snippets/builtin_type.py:531:6     - Unknown word (pyproperty)  -- # `#[pyproperty]`
./extra_tests/snippets/example_fizzbuzz.py:1:5       - Unknown word (fizzbuzz)   -- def fizzbuzz(n):
./extra_tests/snippets/example_interactive.py:15:14     - Unknown word (argcount)   -- assert c2.co_argcount == 2
./extra_tests/snippets/example_interactive.py:22:14     - Unknown word (firstlineno) -- assert c2.co_firstlineno == 5, str(c2.co_firstlineno
./extra_tests/snippets/example_interactive.py:25:14     - Unknown word (kwonlyargcount) -- assert c2.co_kwonlyargcount == 1, (c2.co_kwonlyargcount
./extra_tests/snippets/example_interactive.py:26:16     - Unknown word (lnotab)         -- # assert c2.co_lnotab == 0, c2.co_lnotab
./extra_tests/snippets/example_interactive.py:29:16     - Unknown word (nlocals)        -- # assert c2.co_nlocals == 4, c2.co_nlocals
./extra_tests/snippets/example_interactive.py:30:16     - Unknown word (stacksize)      -- # assert c2.co_stacksize == 2, 'co_stacksize
./extra_tests/snippets/forbidden_instantiation.py:18:1      - Unknown word (reviter)    -- reviter_types = [list, dict
./extra_tests/snippets/intro/3.1.2.5.py:1:9       - Unknown word (unununium)  -- assert 'unununium' == 3 * 'un' + 'ium
./extra_tests/snippets/intro/3.1.2.6.py:1:26      - Unknown word (thon)       -- assert 'Python' == 'Py' 'thon'
./extra_tests/snippets/protocol_index_bad.py:15:9      - Unknown word (setslice)   -- def run_setslice():
./extra_tests/snippets/protocol_index_bad.py:23:9      - Unknown word (delslice)   -- def run_delslice():
./extra_tests/snippets/stdlib_array.py:104:29    - Unknown word (enviroment) -- as 2 bytes character enviroment with CPython is failing
./extra_tests/snippets/stdlib_array.py:105:6     - Unknown word (itemsize)   -- if u.itemsize >= 4:
./extra_tests/snippets/stdlib_array.py:112:8     - Unknown word (arrayiterator) -- # test arrayiterator name
./extra_tests/snippets/stdlib_array.py:85:16     - Unknown word (frombytes)  -- def test_array_frombytes():
./extra_tests/snippets/stdlib_binascii.py:18:3      - Unknown word (unhexlify)  -- # unhexlify tests
./extra_tests/snippets/stdlib_binascii.py:5:3       - Unknown word (hexlify)    -- # hexlify tests
./extra_tests/snippets/stdlib_collections.py:7:3       - Unknown word (appendleft) -- d.appendleft(3)
./extra_tests/snippets/stdlib_datetime.py:1015:19   - Unknown word (mktime)     -- ts = time.mktime((year, month, day,
./extra_tests/snippets/stdlib_datetime.py:101:13    - Unknown word (refcnt)     -- # def test_refcnt_crash_bug_22044(self
./extra_tests/snippets/stdlib_datetime.py:1038:13   - Unknown word (todayagain) -- todayagain = self.theclass.fromtimestamp
./extra_tests/snippets/stdlib_datetime.py:1153:20   - Unknown word (excercise)  -- #at least, excercise them to make sure that
./extra_tests/snippets/stdlib_datetime.py:1207:9    - Unknown word (justasbig)  -- justasbig = timedelta(0, 0, n
./extra_tests/snippets/stdlib_datetime.py:1229:31   - Unknown word (mday)       -- assert_equal(t.tm_mday, 1+i)
./extra_tests/snippets/stdlib_datetime.py:1233:31   - Unknown word (wday)       -- assert_equal(t.tm_wday, (3+i)%7)
./extra_tests/snippets/stdlib_datetime.py:1234:31   - Unknown word (yday)       -- assert_equal(t.tm_yday, 61+i)
./extra_tests/snippets/stdlib_datetime.py:1235:31   - Unknown word (isdst)      -- assert_equal(t.tm_isdst, -1)
./extra_tests/snippets/stdlib_datetime.py:1360:19   - Unknown word (newval)     -- for name, newval in (("year", 2),
./extra_tests/snippets/stdlib_datetime.py:1363:13   - Unknown word (newargs)    -- newargs = args[:]
./extra_tests/snippets/stdlib_datetime.py:1386:17   - Unknown word (newmeth)    -- def newmeth(self, start):
./extra_tests/snippets/stdlib_datetime.py:161:13    - Unknown word (tzrep)      -- tzrep = repr(tz)
./extra_tests/snippets/stdlib_datetime.py:1645:9    - Unknown word (millisec)   -- millisec = timedelta(0, 0, 1
./extra_tests/snippets/stdlib_datetime.py:1783:25   - Unknown word (gmtime)     -- expected = time.gmtime(ts)
./extra_tests/snippets/stdlib_datetime.py:2010:9    - Unknown word (alsobog)    -- alsobog = AlsoBogus()
./extra_tests/snippets/stdlib_datetime.py:224:13    - Unknown word (utctime)    -- utctime = self.DT.replace(tzinfo
./extra_tests/snippets/stdlib_datetime.py:2351:23   - Unknown word (atribute)   -- theclass as a class atribute, and theclass(1, 1,
./extra_tests/snippets/stdlib_datetime.py:2408:17   - Unknown word (aofs)       -- aofs = abs(offset)
./extra_tests/snippets/stdlib_datetime.py:2433:43   - Unknown word (aname)      -- tzname(self, dt): return "aname"
./extra_tests/snippets/stdlib_datetime.py:2468:55   - Unknown word (comparands) -- gets ignored if the comparands have
./extra_tests/snippets/stdlib_datetime.py:2490:50   - Unknown word (uctoffset)  -- re different members, uctoffset is not ignored.
./extra_tests/snippets/stdlib_datetime.py:2491:59   - Unknown word (depedent)   -- actually have an operand-depedent offset,
./extra_tests/snippets/stdlib_datetime.py:252:17    - Unknown word (pickler)    -- for pickler, unpickler, proto in
./extra_tests/snippets/stdlib_datetime.py:252:26    - Unknown word (unpickler)  -- for pickler, unpickler, proto in pickle_choices
./extra_tests/snippets/stdlib_datetime.py:2600:15   - Unknown word (Badtzname)  -- class Badtzname(tzinfo):
./extra_tests/snippets/stdlib_datetime.py:2632:9    - Unknown word (tinfo)      -- tinfo = PicklableFixedOffset
./extra_tests/snippets/stdlib_datetime.py:2800:17   - Unknown word (afer)       -- # Equal afer adjustment.
./extra_tests/snippets/stdlib_datetime.py:284:31    - Unknown word (theclass)   -- Subclasses must define 'theclass', and theclass(1, 1
./extra_tests/snippets/stdlib_datetime.py:2933:9    - Unknown word (timeaware)  -- timeaware = now.time().replace
./extra_tests/snippets/stdlib_datetime.py:2934:9    - Unknown word (nowaware)   -- nowaware = self.theclass.combine
./extra_tests/snippets/stdlib_datetime.py:2953:9    - Unknown word (nowawareplus) -- nowawareplus = nowaware + delta
./extra_tests/snippets/stdlib_datetime.py:2968:59   - Unknown word (randomtimezone) -- randrange(-1439, 1440), "randomtimezone")
./extra_tests/snippets/stdlib_datetime.py:3017:13   - Unknown word (weirdtz)        -- for weirdtz in [FixedOffset(timedelta
./extra_tests/snippets/stdlib_datetime.py:3056:9    - Unknown word (utcdatetime)    -- utcdatetime = datetime.utcfromtimestamp
./extra_tests/snippets/stdlib_datetime.py:3093:32   - Unknown word (dstvalue)       -- def __init__(self, dstvalue):
./extra_tests/snippets/stdlib_datetime.py:3140:32   - Unknown word (uofs)           -- def __init__(self, uofs, dofs=None):
./extra_tests/snippets/stdlib_datetime.py:3140:38   - Unknown word (dofs)           -- _init__(self, uofs, dofs=None):
./extra_tests/snippets/stdlib_datetime.py:3216:17   - Unknown word (timestr)        -- timestr = '04:05:59' + (us and
./extra_tests/snippets/stdlib_datetime.py:3217:17   - Unknown word (ofsstr)         -- ofsstr = ofs is not None and
./extra_tests/snippets/stdlib_datetime.py:3218:17   - Unknown word (tailstr)        -- tailstr = timestr + ofsstr
./extra_tests/snippets/stdlib_datetime.py:3267:9    - Unknown word (fnone)          -- fnone = FixedOffset(None,
./extra_tests/snippets/stdlib_datetime.py:3337:53   - Unknown word (utcoffsets)     -- members are distinct, utcoffsets aren't
./extra_tests/snippets/stdlib_datetime.py:3387:23   - Unknown word (datetimetz)     -- def test_subclass_datetimetz(self):
./extra_tests/snippets/stdlib_datetime.py:3435:31   - Unknown word (reprname)       -- init__(self, hours, reprname, stdname, dstname):
./extra_tests/snippets/stdlib_datetime.py:3435:50   - Unknown word (dstname)        -- reprname, stdname, dstname):
./extra_tests/snippets/stdlib_datetime.py:3436:14   - Unknown word (stdoffset)      -- self.stdoffset = timedelta(hours=hours
./extra_tests/snippets/stdlib_datetime.py:3486:5    - Unknown word (dston)          -- dston = datetime(2002, 4,
./extra_tests/snippets/stdlib_datetime.py:3487:5    - Unknown word (dstoff)         -- dstoff = datetime(2002, 10
./extra_tests/snippets/stdlib_datetime.py:3492:9    - Unknown word (checkinside)    -- def checkinside(self, dt, tz, utc, dston
./extra_tests/snippets/stdlib_datetime.py:3498:9    - Unknown word (asutc)          -- asutc = dt.astimezone(utc
./extra_tests/snippets/stdlib_datetime.py:3531:9    - Unknown word (nexthour)       -- nexthour_utc = asutc + HOUR
./extra_tests/snippets/stdlib_datetime.py:3544:9    - Unknown word (checkoutside)   -- def checkoutside(self, dt, tz, utc):
./extra_tests/snippets/stdlib_datetime.py:3578:46   - Unknown word (endcases)       -- name of this test, the endcases are excruciating.
./extra_tests/snippets/stdlib_datetime.py:3603:9    - Unknown word (fourback)       -- fourback = self.dston - timedelta
./extra_tests/snippets/stdlib_datetime.py:3604:9    - Unknown word (ninewest)       -- ninewest = FixedOffset(-9*60
./extra_tests/snippets/stdlib_datetime.py:3619:9    - Unknown word (sixutc)         -- sixutc = self.dston.replace
./extra_tests/snippets/stdlib_datetime.py:3641:17   - Unknown word (asutcbase)      -- asutcbase = asutc.replace(tzinfo
./extra_tests/snippets/stdlib_datetime.py:3642:21   - Unknown word (tzhour)         -- for tzhour in (0, 1, 1, 2):
./extra_tests/snippets/stdlib_datetime.py:3643:21   - Unknown word (expectedbase)   -- expectedbase = self.dstoff.replace
./extra_tests/snippets/stdlib_datetime.py:3647:25   - Unknown word (astz)           -- astz = asutc.astimezone(tz
./extra_tests/snippets/stdlib_datetime.py:3662:15   - Unknown word (notok)          -- class notok(ok):
./extra_tests/snippets/stdlib_datetime.py:3701:9    - Unknown word (fstart)         -- fstart = start.replace(tzinfo
./extra_tests/snippets/stdlib_datetime.py:3763:3    - Unknown word (Neverthelss)    -- # Neverthelss, comparison should work
./extra_tests/snippets/stdlib_datetime.py:721:9     - Unknown word (zerotd)     -- zerotd = timedelta(0)
./extra_tests/snippets/stdlib_datetime.py:73:38     - Unknown word (dstoffset)  -- self, offset, name, dstoffset=42):
./extra_tests/snippets/stdlib_datetime.py:836:13    - Unknown word (fromord)    -- fromord = self.theclass.fromordinal
./extra_tests/snippets/stdlib_datetime.py:865:24    - Unknown word (maxday)     -- for month, maxday in zip(range(1, 13)
./extra_tests/snippets/stdlib_datetime.py:877:9     - Unknown word (aord)       -- aord = a.toordinal()
./extra_tests/snippets/stdlib_datetime.py:90:7      - Unknown word (Picklable)  -- class PicklableFixedOffset(FixedOffset
./extra_tests/snippets/stdlib_imghdr.py:15:21     - Unknown word (rast)       -- ('python.ras', 'rast'),
./extra_tests/snippets/stdlib_imghdr.py:23:57     - Unknown word (imghdrdata) -- dirname(__file__), 'imghdrdata')
./extra_tests/snippets/stdlib_io.py:31:11     - Unknown word (closefd)    -- assert fi.closefd
./extra_tests/snippets/stdlib_io.py:38:2      - Unknown word (nres)       -- nres = fio.read(1)
./extra_tests/snippets/stdlib_io_bytesio.py:49:37     - Unknown word (accpets)    -- that the write method accpets bytearray
./extra_tests/snippets/stdlib_itertools.py:185:5     - Unknown word (underten)   -- def underten(x):
./extra_tests/snippets/stdlib_itertools.py:526:58    - Unknown word (fillvalue)  -- range(3), [9, 8, 7, 99], fillvalue='d')) \
./extra_tests/snippets/stdlib_itertools.py:54:24     - Unknown word (evaluted)   -- iterables are lazily evaluted
./extra_tests/snippets/stdlib_json.py:65:33     - Unknown word (jsons)      -- reject non-str keys in jsons
./extra_tests/snippets/stdlib_math.py:11:9      - Unknown word (Conversible) -- # class Conversible():
./extra_tests/snippets/stdlib_math.py:149:12    - Unknown word (ninf)        -- # test_inf_ninf_nan(self): these should
./extra_tests/snippets/stdlib_math.py:18:3      - Unknown word (roundings)   -- # roundings
./extra_tests/snippets/stdlib_math.py:340:19    - Unknown word (eedf)        -- # '0x1.1475cc9eedf00p+5 0x1.921fb54442d
./extra_tests/snippets/stdlib_os.py:185:25    - Unknown word (scandir)    -- for dir_entry in os.scandir(tmpdir):
./extra_tests/snippets/stdlib_os.py:285:25    - Unknown word (geteuid)    -- if hasattr(os, 'geteuid'):
./extra_tests/snippets/stdlib_os.py:289:48    - Unknown word (getpwall)   -- pw_uid for u in pwd.getpwall()]
./extra_tests/snippets/stdlib_os.py:31:8      - Unknown word (lseek)      -- os.lseek(dest_fd, 0, 0)
./extra_tests/snippets/stdlib_os.py:329:25    - Unknown word (getgroups)  -- if hasattr(os, 'getgroups'):
./extra_tests/snippets/stdlib_os.py:368:22    - Unknown word (getpid)     -- assert isinstance(os.getpid(), int)
./extra_tests/snippets/stdlib_os.py:372:26    - Unknown word (getegid)    -- assert isinstance(os.getegid(), int)
./extra_tests/snippets/stdlib_os.py:373:26    - Unknown word (getgid)     -- assert isinstance(os.getgid(), int)
./extra_tests/snippets/stdlib_os.py:374:26    - Unknown word (getsid)     -- assert isinstance(os.getsid(os.getpid()), int)
./extra_tests/snippets/stdlib_os.py:375:26    - Unknown word (getuid)     -- assert isinstance(os.getuid(), int)
./extra_tests/snippets/stdlib_os.py:377:26    - Unknown word (getppid)    -- assert isinstance(os.getppid(), int)
./extra_tests/snippets/stdlib_os.py:378:26    - Unknown word (getpgid)    -- assert isinstance(os.getpgid(os.getpid()), int)
./extra_tests/snippets/stdlib_os.py:381:51    - Unknown word (setgid)     -- PermissionError, lambda: os.setgid(42))
./extra_tests/snippets/stdlib_os.py:382:51    - Unknown word (setegid)    -- PermissionError, lambda: os.setegid(42))
./extra_tests/snippets/stdlib_os.py:383:51    - Unknown word (setpgid)    -- PermissionError, lambda: os.setpgid(os.getpid(), 42))
./extra_tests/snippets/stdlib_os.py:385:51    - Unknown word (seteuid)    -- PermissionError, lambda: os.seteuid(42))
./extra_tests/snippets/stdlib_os.py:386:51    - Unknown word (setreuid)   -- PermissionError, lambda: os.setreuid(42, 42))
./extra_tests/snippets/stdlib_os.py:387:51    - Unknown word (setresuid)  -- PermissionError, lambda: os.setresuid(42, 42, 42))
./extra_tests/snippets/stdlib_os.py:393:26    - Unknown word (ttyname)    -- assert isinstance(os.ttyname(b), str)
./extra_tests/snippets/stdlib_os.py:59:8      - Unknown word (putenv)     -- os.putenv(ENV_KEY, ENV_VALUE)
./extra_tests/snippets/stdlib_os.py:60:8      - Unknown word (unsetenv)   -- os.unsetenv(ENV_KEY)
./extra_tests/snippets/stdlib_os.py:78:11     - Unknown word (fspath)     -- assert os.fspath("Testing") == "Testing
./extra_tests/snippets/stdlib_re.py:18:17     - Unknown word (abcabca)    -- s = p.sub('x', 'abcabca')
./extra_tests/snippets/stdlib_re.py:20:14     - Unknown word (xcxca)      -- assert s == 'xcxca'
./extra_tests/snippets/stdlib_re.py:34:11     - Unknown word (bigcharset) -- # test op bigcharset
./extra_tests/snippets/stdlib_re.py:40:35     - Unknown word (abcdddd)    -- compile('abcd*').match('abcdddd').group() == 'abcdddd
./extra_tests/snippets/stdlib_re.py:42:36     - Unknown word (abce)       -- compile('abcd*e').match('abce').group() == 'abce'
./extra_tests/snippets/stdlib_re.py:43:37     - Unknown word (abcddeee)   -- compile('abcd*e+').match('abcddeee').group() == 'abcddeee
./extra_tests/snippets/stdlib_re.py:44:35     - Unknown word (abcddd)     -- compile('abcd+').match('abcddd').group() == 'abcddd
./extra_tests/snippets/stdlib_re.py:52:41     - Unknown word (abcdcdcd)   -- a)(b)(cd)*').match('abcdcdcd').group(0, 1, 2, 3)
./extra_tests/snippets/stdlib_re.py:5:11      - Unknown word (ello)       -- needle = 'ello'
./extra_tests/snippets/stdlib_re.py:64:41     - Unknown word (Xtest)      -- ', 'X', 'test') == 'Xtest'
./extra_tests/snippets/stdlib_select.py:26:1      - Unknown word (recvr)      -- recvr = socket.socket()
./extra_tests/snippets/stdlib_select.py:34:1      - Unknown word (sendr)      -- sendr = socket.socket()
./extra_tests/snippets/stdlib_select.py:39:1      - Unknown word (rres)       -- rres, wres, xres = select
./extra_tests/snippets/stdlib_select.py:39:13     - Unknown word (xres)       -- rres, wres, xres = select.select([recvr
./extra_tests/snippets/stdlib_select.py:39:7      - Unknown word (wres)       -- rres, wres, xres = select.select
./extra_tests/snippets/stdlib_socket.py:134:9     - Unknown word (htonl)      -- socket.htonl(-1)
./extra_tests/snippets/stdlib_socket.py:143:20    - Unknown word (ntoa)       -- assert socket.inet_ntoa(b"\x7f\x00\x00\x01"
./extra_tests/snippets/stdlib_socket.py:164:13    - Unknown word (gaierror)   -- (socket.gaierror, "gaierror"),
./extra_tests/snippets/stdlib_socket.py:165:13    - Unknown word (herror)     -- (socket.herror, "herror"),
./extra_tests/snippets/stdlib_struct.py:45:15     - Unknown word (calcsize)   -- assert struct.calcsize("B") == 1
./extra_tests/snippets/stdlib_subprocess.py:18:36     - Unknown word (unixy)      -- make work in a non-unixy environment (something
./extra_tests/snippets/stdlib_sys.py:20:12     - Unknown word (getfilesystemencoding) -- assert sys.getfilesystemencoding() == 'utf-8'
./extra_tests/snippets/stdlib_sys.py:21:12     - Unknown word (getfilesystemencodeerrors) -- assert sys.getfilesystemencodeerrors().startswith('surrogate
./extra_tests/snippets/stdlib_sys.py:29:12     - Unknown word (maxunicode)                -- assert sys.maxunicode == 1114111
./extra_tests/snippets/stdlib_sys.py:67:5      - Unknown word (setrecursionlimit)         -- sys.setrecursionlimit(200)
./extra_tests/snippets/stdlib_sys.py:74:18     - Unknown word (getwindowsversion)         -- winver = sys.getwindowsversion()
./extra_tests/snippets/stdlib_sys.py:74:5      - Unknown word (winver)                    -- winver = sys.getwindowsversion
./extra_tests/snippets/stdlib_sys.py:90:74     - Unknown word (compatiblity)              -- correctly, this'll break on compatiblity mode or a build without
./extra_tests/snippets/stdlib_sys_getframe.py:4:20      - Unknown word (getframe)   -- locals_dict = sys._getframe().f_locals
./extra_tests/snippets/stdlib_xdrlib.py:1:25      - Unknown word (superceeded) -- This probably will be superceeded by the python unittests
./extra_tests/snippets/stdlib_xdrlib.py:1:51      - Unknown word (unittests)   -- superceeded by the python unittests when that works.
./extra_tests/snippets/stdlib_zlib.py:36:38     - Unknown word (amet)       -- Lorem ipsum dolor sit amet", "utf-8")
./extra_tests/snippets/syntax_async.py:6:16      - Unknown word (Entrada)    -- print("Entrada")
./extra_tests/snippets/syntax_async.py:76:13     - Unknown word (Aenter)     -- def testAenterAttributeError1(self
./extra_tests/snippets/syntax_async.py:89:29     - Unknown word (Aexit)      -- class LacksAenterAndAexit(object):
./extra_tests/snippets/syntax_class.py:231:20    - Unknown word (dbca)       -- assert D().f() == 'dbca', "Mro resolution using
./extra_tests/snippets/syntax_class.py:271:17    - Unknown word (mcls)       -- def __new__(mcls):
./extra_tests/snippets/syntax_class.py:42:9      - Unknown word (fubar)      -- def fubar(cls, x):
./extra_tests/snippets/syntax_class.py:48:9      - Unknown word (kungfu)     -- def kungfu(x):
./extra_tests/snippets/syntax_fstring.py:113:81    - Unknown word (alingment)  -- +'#' # TODO default alingment in cpython is left
./extra_tests/snippets/syntax_fstring.py:138:104   - Unknown word (flsg)            -- matspecifier after conversion flsg is currently not supported
./extra_tests/snippets/syntax_fstring.py:138:71    - Unknown word (formatspecifier) -- repr(x), '^20')) # TODO formatspecifier after conversion flsg
./extra_tests/snippets/syntax_fstring.py:147:1     - Unknown word (tenπ)            -- tenπ = 31.4
./extra_tests/snippets/syntax_fstring.py:16:14     - Unknown word (tersing)    -- # lets start tersing
./extra_tests/snippets/syntax_fstring.py:22:24     - Unknown word (barfoo)     -- assert f"{foo}foo" == 'barfoo'
./extra_tests/snippets/syntax_fstring.py:29:36     - Unknown word (barbarfoo)  -- f"{foo}" 'foo' == 'barbarfoo'
./extra_tests/snippets/syntax_function2.py:56:5      - Unknown word (revdocstr)  -- def revdocstr(f):
./extra_tests/snippets/syntax_function2.py:66:23     - Unknown word (abcw)       -- assert f5.__doc__ == 'abcw00t', f5.__doc__
./extra_tests/snippets/syntax_function_args.py:37:13     - Unknown word (kwdefaults) -- assert va.__kwdefaults__ is None
./extra_tests/snippets/syntax_generator.py:105:29    - Unknown word (stopiter)   -- except StopIteration as stopiter:
./extra_tests/snippets/syntax_generator.py:124:13    - Unknown word (coro)       -- def wrapper(coro):
./extra_tests/snippets/syntax_generator.py:171:13    - Unknown word (yieldfrom)  -- assert g.gi_yieldfrom is it
./extra_tests/snippets/syntax_global_nonlocal.py:3:28      - Unknown word (funkyness)  -- global and nonlocal funkyness
./extra_tests/snippets/syntax_short_circuit_bool.py:14:14     - Unknown word (booled)     -- self.booled = False
./extra_tests/snippets/syntax_short_circuit_bool.py:1:38      - Unknown word (bools)      -- carefully avoids evaluating bools more than once in a
./extra_tests/snippets/syntax_statement.py:4:15      - Unknown word (seperated)  -- # small ones, seperated by ';':
./extra_tests/snippets/syntax_try.py:35:12     - Unknown word (kablam)     -- print('kablam')
./extra_tests/snippets/syntax_with.py:30:16     - Unknown word (Ajuus)      -- print('Ajuus')
./extra_tests/snippets/testutils.py:18:14     - Unknown word (failmsg)    -- self.failmsg = msg
./extra_tests/snippets/testutils.py:69:53     - Unknown word (isisntance) -- isinstance(obj, klass), ['isisntance(', _typed(obj), ','
./extra_tests/test_snippets.py:27:5      - Unknown word (pushd)      -- def pushd(path):
./extra_tests/test_snippets.py:54:41     - Unknown word (jobserver)  -- = 'info,cargo=error,jobserver=error'
./jit/Cargo.toml:10:1      - Unknown word (autotests)  -- autotests = false
./jit/Cargo.toml:15:1      - Unknown word (cranelift)  -- cranelift = "0.88.0"
./jit/src/instructions.rs:125:46    - Unknown word (fcmp)       -- self.builder.ins().fcmp(FloatCC::NotEqual, val
./jit/src/instructions.rs:126:39    - Unknown word (bint)       -- Ok(self.builder.ins().bint(types::I8, val))
./jit/src/instructions.rs:129:47    - Unknown word (iconst)     -- self.builder.ins().iconst(types::I64, 0);
./jit/src/instructions.rs:239:36    - Unknown word (brnz)       -- self.builder.ins().brnz(val, then_block, &[
./jit/src/instructions.rs:366:62    - Unknown word (bxor)       -- self.builder.ins().bxor_imm(boolean, 1);
./jit/src/instructions.rs:379:63    - Unknown word (iadd)       -- self.builder.ins().iadd_ifcout(a, b);
./jit/src/instructions.rs:379:68    - Unknown word (ifcout)     -- self.builder.ins().iadd_ifcout(a, b);
./jit/src/instructions.rs:380:44    - Unknown word (trapif)     -- self.builder.ins().trapif(
./jit/src/instructions.rs:391:58    - Unknown word (sdiv)       -- Int(self.builder.ins().sdiv(a, b))
./jit/src/instructions.rs:394:58    - Unknown word (srem)       -- Int(self.builder.ins().srem(a, b))
./jit/src/instructions.rs:403:55    - Unknown word (ushr)       -- self.builder.ins().ushr_imm(b, 63);
./jit/src/instructions.rs:404:44    - Unknown word (trapnz)     -- self.builder.ins().trapnz(
./jit/src/instructions.rs:410:48    - Unknown word (ishl)       -- self.builder.ins().ishl(a, b)
./jit/src/instructions.rs:412:48    - Unknown word (sshr)       -- self.builder.ins().sshr(a, b)
./jit/src/instructions.rs:428:60    - Unknown word (fadd)       -- Float(self.builder.ins().fadd(a, b))
./jit/src/instructions.rs:431:60    - Unknown word (fsub)       -- Float(self.builder.ins().fsub(a, b))
./jit/src/instructions.rs:434:60    - Unknown word (fmul)       -- Float(self.builder.ins().fmul(a, b))
./jit/src/instructions.rs:437:60    - Unknown word (fdiv)       -- Float(self.builder.ins().fdiv(a, b))
./jit/src/instructions.rs:454:74    - Unknown word (isub)       -- doesn't special-case isub_ifbout
./jit/src/instructions.rs:454:79    - Unknown word (ifbout)     -- t special-case isub_ifbout
./jit/src/instructions.rs:460:40    - Unknown word (ineg)       -- self.builder.ins().ineg(b);
./jit/src/lib.rs:13:32     - Unknown word (jitted)     -- error("function can't be jitted")]
./jit/src/lib.rs:18:5      - Unknown word (Cranelift)  -- CraneliftError(#[from] ModuleError
./jit/src/lib.rs:285:23    - Unknown word (wasmtime)   -- TODO: confirm with wasmtime ppl that it's not unsound
./jit/src/lib.rs:38:65     - Unknown word (libcall)    -- cranelift_module::default_libcall_names())
./jit/tests/int_tests.rs:57:9      - Unknown word (lshift)     -- fn test_lshift() {
./jit/tests/int_tests.rs:72:9      - Unknown word (rshift)     -- fn test_rshift() {
./jit/tests/int_tests.rs:88:9      - Unknown word (bitand)     -- let bitand = jit_function! { bitand
./pdc.sh:26:90     - Unknown word (Dwarnings)  -- cargo clippy --all -- -Dwarnings" "cargo test --all"
./scripts/codecoverage-rustc-wrapper.sh:17:13     - Unknown word (Cinstrument) -- EXTRA=(-Cinstrument-coverage)
./scripts/install-openssl.ps1:1:12      - Unknown word (Actix)      -- # From the Actix Web windows workflow
./scripts/install-openssl.ps1:3:1       - Unknown word (vcpkg)      -- vcpkg integrate install
./scripts/install-openssl.ps1:5:46      - Unknown word (libcrypto)  -- installed\x64-windows\bin\libcrypto-1_1-x64.dll C:\vcpkg
./scripts/redox/comment-cargo.sh:7:11      - Unknown word (mktemp)     -- tmpfile=$(mktemp)
./scripts/redox/install.sh:30:36     - Unknown word (nrustpython) -- packages\]/[packages]\nrustpython = {}/' filesystem.toml
./scripts/redox/recipe.sh:7:11      - Unknown word (realpath)   -- dest="$(realpath "$1")"
./src/lib.rs:114:13    - Unknown word (getpip)     -- let get_getpip = rustpython_vm::py
./src/lib.rs:117:17    - Unknown word (urllib)     -- __import__("urllib.request").request.urlopen
./src/lib.rs:117:42    - Unknown word (urlopen)    -- urllib.request").request.urlopen("https://bootstrap.pypa
./src/lib.rs:133:4     - Unknown word (ensurepip)  -- fn ensurepip(_: Scope, vm: &VirtualMachine
./src/lib.rs:13:81     - Unknown word (otherthing) -- pass", module_name = "otherthing"));
./src/lib.rs:213:9     - Unknown word (Speedscope) -- Speedscope,
./src/lib.rs:71:17     - Unknown word (setmode)    -- fn _setmode(fd: i32, flags: i32
./src/lib.rs:88:9      - Unknown word (exitcode)   -- let exitcode = interp.run(move |vm
./src/settings.rs:238:17    - Unknown word (xopts)      -- if let Some(xopts) = matches.values_of
./src/shell.rs:134:25    - Unknown word (isinstance) -- if exc.fast_isinstance(vm.ctx.exceptions.system
./src/shell.rs:7:16      - Unknown word (Readline)   -- readline::{Readline, ReadlineResult},
./src/shell.rs:7:5       - Unknown word (readline)   -- readline::{Readline, ReadlineResult
./stdlib/Cargo.toml:101:1     - Unknown word (schannel)   -- schannel = "0.1.19"
./stdlib/Cargo.toml:108:16    - Unknown word (handleapi)  -- "winsock2", "handleapi", "ws2def", "std",
./stdlib/Cargo.toml:108:46    - Unknown word (winbase)    -- , "ws2def", "std", "winbase", "wincrypt", "fileapi
./stdlib/Cargo.toml:108:57    - Unknown word (wincrypt)   -- "std", "winbase", "wincrypt", "fileapi", "processenv
./stdlib/Cargo.toml:108:69    - Unknown word (fileapi)    -- winbase", "wincrypt", "fileapi", "processenv",
./stdlib/Cargo.toml:108:80    - Unknown word (processenv) -- wincrypt", "fileapi", "processenv",
./stdlib/Cargo.toml:109:29    - Unknown word (processthreadsapi) -- namedpipeapi", "winnt", "processthreadsapi", "errhandlingapi",
./stdlib/Cargo.toml:109:4     - Unknown word (namedpipeapi) -- "namedpipeapi", "winnt", "processthreadsapi
./stdlib/Cargo.toml:109:50    - Unknown word (errhandlingapi)    -- processthreadsapi", "errhandlingapi", "winuser", "synchapi
./stdlib/Cargo.toml:109:68    - Unknown word (winuser)           -- "errhandlingapi", "winuser", "synchapi", "wincon
./stdlib/Cargo.toml:109:79    - Unknown word (synchapi)          -- errhandlingapi", "winuser", "synchapi", "wincon",
./stdlib/Cargo.toml:109:91    - Unknown word (wincon)            -- winuser", "synchapi", "wincon",
./stdlib/Cargo.toml:10:10     - Unknown word (libz)       -- zlib = ["libz-sys", "flate2/zlib"
./stdlib/Cargo.toml:10:22     - Unknown word (flate)      -- zlib = ["libz-sys", "flate2/zlib"]
./stdlib/Cargo.toml:110:33    - Unknown word (ifdef)             -- default", "vcruntime", "ifdef", "netioapi"
./stdlib/Cargo.toml:110:42    - Unknown word (netioapi)          -- vcruntime", "ifdef", "netioapi"
./stdlib/Cargo.toml:42:10     - Unknown word (bidi)       -- unic-ucd-bidi = "0.9.0"
./stdlib/Cargo.toml:66:1      - Unknown word (puruspe)    -- puruspe = "0.1.5"
./stdlib/Cargo.toml:83:3      - Unknown word (mmap)       -- # mmap
./stdlib/Cargo.toml:89:1      - Unknown word (termios)    -- termios = "0.3.3"
./stdlib/build.rs:25:39     - Unknown word (osslconf)   -- println!("cargo:rustc-cfg=osslconf=\"{conf}\"");
./stdlib/build.rs:8:39      - Unknown word (ossl)       -- println!("cargo:rustc-cfg=ossl101");
./stdlib/src/array.rs:1121:13   - Unknown word (proto)          -- proto: usize,
./stdlib/src/array.rs:1299:12   - Unknown word (setstate)       -- fn setstate(&self, state: PyObjectRef
./stdlib/src/array.rs:1328:9    - Unknown word (arraytype)      -- arraytype: PyTypeRef,
./stdlib/src/array.rs:1465:22   - Unknown word (issubclass)     -- if !typ.fast_issubclass(PyArray::class(vm))
./stdlib/src/array.rs:20:22     - Unknown word (notimplemented) -- class_or_notimplemented,
./stdlib/src/array.rs:271:20    - Unknown word (getitem)        -- fn getitem_by_index(&self, i: isize
./stdlib/src/array.rs:337:20    - Unknown word (delitem)        -- fn delitem_by_index(&mut self,
./stdlib/src/array.rs:390:20    - Unknown word (imul)           -- fn imul(&mut self, value: isize
./stdlib/src/array.rs:44:43     - Unknown word (scode)          -- $t:ty, $c:literal, $scode:literal)),*$(,)?) =
./stdlib/src/array.rs:509:13    - Unknown word (pyfloat)        -- pyfloat_from_f32
./stdlib/src/array.rs:800:12    - Unknown word (tounicode)      -- fn tounicode(&self, vm: &VirtualMachine
./stdlib/src/array.rs:831:12    - Unknown word (fromfile)       -- fn fromfile(&self, f: PyObjectRef
./stdlib/src/array.rs:925:12    - Unknown word (tolist)         -- fn tolist(&self, vm: &VirtualMachine
./stdlib/src/array.rs:950:12    - Unknown word (deepcopy)       -- fn deepcopy(&self, _memo: PyObjectRef
./stdlib/src/binascii.rs:209:28    - Unknown word (uuencodes)  -- // there are a few uuencodes out there that use
./stdlib/src/binascii.rs:254:28    - Unknown word (roken)      -- // roken case from broken python
./stdlib/src/binascii.rs:265:28    - Unknown word (hexval)     -- // hexval
./stdlib/src/binascii.rs:309:21    - Unknown word (odatalen)   -- let mut odatalen = 0;
./stdlib/src/binascii.rs:313:21    - Unknown word (inidx)      -- let mut inidx;
./stdlib/src/binascii.rs:314:21    - Unknown word (outidx)     -- let mut outidx;
./stdlib/src/binascii.rs:508:29    - Unknown word (inend)      -- let mut inend = idx + 1;
./stdlib/src/binascii.rs:56:8      - Unknown word (unhex)      -- fn unhex_nibble(c: u8) -> Option
./stdlib/src/binascii.rs:9:20      - Unknown word (binascii)   -- #[pymodule(name = "binascii")]
./stdlib/src/bisect.rs:113:8     - Unknown word (insort)     -- fn insort_left(BisectArgs { a
./stdlib/src/cmath.rs:156:8     - Unknown word (isclose)    -- fn isclose(args: IsCloseArgs, vm
./stdlib/src/cmath.rs:38:8      - Unknown word (isinf)      -- fn isinf(z: ArgIntoComplex)
./stdlib/src/cmath.rs:44:8      - Unknown word (isfinite)   -- fn isfinite(z: ArgIntoComplex)
./stdlib/src/cmath.rs:49:8      - Unknown word (isnan)      -- fn isnan(z: ArgIntoComplex)
./stdlib/src/contextvars.rs:1:17      - Unknown word (contextvars) -- pub(crate) use _contextvars::make_module;
./stdlib/src/csv.rs:197:44    - Unknown word (nends)      -- res, nread, nwritten, nends) = reader.read_record
./stdlib/src/csv.rs:261:12    - Unknown word (writerow)   -- fn writerow(&self, row: PyObjectRef
./stdlib/src/csv.rs:316:12    - Unknown word (writerows)  -- fn writerows(&self, rows: ArgIterable
./stdlib/src/csv.rs:94:9      - Unknown word (quotechar)  -- quotechar: u8,
./stdlib/src/faulthandler.rs:21:13     - Unknown word (traceback)    -- fn dump_traceback(
./stdlib/src/faulthandler.rs:3:20      - Unknown word (faulthandler) -- #[pymodule(name = "faulthandler")]
./stdlib/src/fcntl.rs:12:45     - Unknown word (fnctl)      -- these from <asm-generic/fnctl.h> (please file an issue
./stdlib/src/fcntl.rs:16:35     - Unknown word (stropts)    -- these are/were from <stropts.h>, which may not be
./stdlib/src/fcntl.rs:1:16      - Unknown word (fcntl)      -- pub(crate) use fcntl::make_module;
./stdlib/src/fcntl.rs:58:13     - Unknown word (Fildes)     -- io::Fildes(fd): io::Fildes,
./stdlib/src/gc.rs:43:12     - Unknown word (refererts)  -- fn get_refererts(_args: FuncArgs, vm
./stdlib/src/grp.rs:12:14     - Unknown word (unistd)     -- use nix::unistd;
./stdlib/src/grp.rs:29:48     - Unknown word (cstring)    -- unwrap_or_else(|e| e.into_cstring().to_string_lossy()
./stdlib/src/grp.rs:82:12     - Unknown word (setgrent)   -- // setgrent, getgrent, etc are not
./stdlib/src/grp.rs:82:22     - Unknown word (getgrent)   -- // setgrent, getgrent, etc are not thread
./stdlib/src/grp.rs:82:67     - Unknown word (fgetgrent)  -- thread safe. Could use fgetgrent_r, but this is easier
./stdlib/src/grp.rs:93:24     - Unknown word (endgrent)   -- unsafe { libc::endgrent() };
./stdlib/src/hashlib.rs:104:12    - Unknown word (hexdigest)       -- fn hexdigest(&self) -> String {
./stdlib/src/hashlib.rs:1:16      - Unknown word (hashlib)    -- pub(crate) use hashlib::make_module;
./stdlib/src/hashlib.rs:26:9      - Unknown word (usedforsecurity) -- usedforsecurity: bool,
./stdlib/src/json.rs:72:13     - Unknown word (pystr)      -- pystr: PyStrRef,
./stdlib/src/json.rs:88:28     - Unknown word (scanstring) -- return scanstring(pystr, next_idx, OptionalArg
./stdlib/src/json/machinery.rs:44:7      - Unknown word (fedcba)     -- //fedcba9876543210_fedcba987
./stdlib/src/lib.rs:108:27    - Unknown word (sysmodule)  -- // crate::vm::sysmodule::sysconfigdata_name
./stdlib/src/math.rs:221:8     - Unknown word (isqrt)      -- fn isqrt(x: PyObjectRef, vm:
./stdlib/src/math.rs:346:38    - Unknown word (powi)       -- map(|x| (x / scale).powi(2))
./stdlib/src/math.rs:45:8      - Unknown word (fabs)       -- fn fabs(x: ArgIntoFloat, vm
./stdlib/src/math.rs:559:8     - Unknown word (ldexp)      -- fn ldexp(
./stdlib/src/math.rs:582:13    - Unknown word (argvec)     -- let argvec = args.into_vec();
./stdlib/src/math.rs:615:8     - Unknown word (fsum)       -- fn fsum(seq: ArgIterable<ArgIntoFloat
./stdlib/src/math.rs:623:17    - Unknown word (xsave)      -- let xsave = x;
./stdlib/src/math.rs:644:22    - Unknown word (nonfinite)  -- // a nonfinite x could arise either
./stdlib/src/math.rs:647:20    - Unknown word (summands)   -- // summands
./stdlib/src/math.rs:805:8     - Unknown word (modf)       -- fn modf(x: ArgIntoFloat) ->
./stdlib/src/math.rs:828:8     - Unknown word (fmod)       -- fn fmod(x: f64, y: f64) -> f
./stdlib/src/math.rs:860:17    - Unknown word (absx)       -- let absx = x.abs();
./stdlib/src/math.rs:861:17    - Unknown word (absy)       -- let absy = y.abs();
./stdlib/src/mmap.rs:24:27     - Unknown word (Mmap)       -- use memmap2::{Advice, Mmap, MmapMut, MmapOptions
./stdlib/src/mmap.rs:39:44     - Unknown word (Dont)       -- DONTNEED => Advice::DontNeed,
./stdlib/src/mmap.rs:47:45     - Unknown word (Mergeable)  -- MERGEABLE => Advice::Mergeable,
./stdlib/src/mmap.rs:49:47     - Unknown word (Unmergeable) -- UNMERGEABLE => Advice::Unmergeable,
./stdlib/src/mmap.rs:538:18    - Unknown word (resizeable)  -- fn check_resizeable(&self, vm: &VirtualMachine
./stdlib/src/mmap.rs:635:12    - Unknown word (rfind)       -- fn rfind(&self, options: FindOptions
./stdlib/src/mmap.rs:648:46    - Unknown word (rposition)   -- buf.windows(sub.len()).rposition(|window| window == sub
./stdlib/src/mmap.rs:825:71    - Unknown word (mremap)      -- resizing not available--no mremap()".to_owned()))
./stdlib/src/posixsubprocess.rs:142:17    - Unknown word (chdir)      -- unistd::chdir(cwd.s.as_c_str())?
./stdlib/src/posixsubprocess.rs:169:18    - Unknown word (setuid)     -- // TODO: setuid
./stdlib/src/posixsubprocess.rs:196:42    - Unknown word (readdir)    -- fds by brute force if readdir doesn't work:
./stdlib/src/posixsubprocess.rs:31:13     - Unknown word (cstrs)      -- let cstrs_to_ptrs = |cstrs: &
./stdlib/src/posixsubprocess.rs:31:22     - Unknown word (ptrs)       -- let cstrs_to_ptrs = |cstrs: &[CStrPathLike
./stdlib/src/posixsubprocess.rs:40:13     - Unknown word (envp)       -- let envp = args.env_list.as_ref
./stdlib/src/posixsubprocess.rs:7:18      - Unknown word (Errno)      -- use nix::{errno::Errno, unistd};
./stdlib/src/posixsubprocess.rs:85:30     - Unknown word (procargs)   -- args: &ForkExecArgs, procargs: ProcArgs) -> ! {
./stdlib/src/pyexpat.rs:138:42    - Unknown word (isfinal)    -- self, data: PyStrRef, _isfinal: OptionalArg<bool>,
./stdlib/src/pyexpat.rs:1:4       - Unknown word (Pyexpat)    -- /* Pyexpat builtin module
./stdlib/src/pyexpat.rs:46:23     - Unknown word (xmlparser)  -- #[pyclass(name = "xmlparser", module = false)]
./stdlib/src/pystruct.rs:311:9     - Unknown word (clearcache) -- fn _clearcache() {}
./stdlib/src/random.rs:116:12    - Unknown word (getrandbits) -- fn getrandbits(&self, k: isize, vm
./stdlib/src/random.rs:135:25    - Unknown word (wordarray)   -- let wordarray = (0..words)
./stdlib/src/random.rs:150:37    - Unknown word (biguint)     -- Ok(BigInt::from_biguint(sign, uint))
./stdlib/src/random.rs:16:16     - Unknown word (rngs)       -- use rand::{rngs::StdRng, RngCore, SeedableRng
./stdlib/src/random.rs:16:39     - Unknown word (Seedable)   -- rngs::StdRng, RngCore, SeedableRng};
./stdlib/src/re.rs:135:8     - Unknown word (findall)    -- fn findall(
./stdlib/src/re.rs:160:33    - Unknown word (replacen)   -- out = pattern.regex.replacen(
./stdlib/src/re.rs:342:12    - Unknown word (subn)       -- fn subn(&self, repl: PyStrRef
./stdlib/src/re.rs:49:9      - Unknown word (ignorecase) -- ignorecase: bool,
./stdlib/src/re.rs:53:9      - Unknown word (dotall)     -- dotall: bool,
./stdlib/src/resource.rs:115:64    - Unknown word (uninit)     -- MaybeUninit::<libc::rusage>::uninit();
./stdlib/src/resource.rs:31:72     - Unknown word (emscripten) -- android", target_os = "emscripten"))]
./stdlib/src/resource.rs:43:22     - Unknown word (illumos)    -- target_os = "illumos"
./stdlib/src/resource.rs:56:75     - Unknown word (freebds)    -- emscripten", target_os = "freebds"))]
./stdlib/src/resource.rs:64:30     - Unknown word (rusage)     -- pyclass(name = "struct_rusage")]
./stdlib/src/resource.rs:66:12     - Unknown word (Rusage)     -- struct Rusage {
./stdlib/src/resource.rs:67:12     - Unknown word (utime)      -- ru_utime: f64,
./stdlib/src/resource.rs:68:12     - Unknown word (stime)      -- ru_stime: f64,
./stdlib/src/resource.rs:69:12     - Unknown word (maxrss)     -- ru_maxrss: libc::c_long,
./stdlib/src/resource.rs:70:12     - Unknown word (ixrss)      -- ru_ixrss: libc::c_long,
./stdlib/src/resource.rs:71:12     - Unknown word (idrss)      -- ru_idrss: libc::c_long,
./stdlib/src/resource.rs:72:12     - Unknown word (isrss)      -- ru_isrss: libc::c_long,
./stdlib/src/resource.rs:73:12     - Unknown word (minflt)     -- ru_minflt: libc::c_long,
./stdlib/src/resource.rs:74:12     - Unknown word (majflt)     -- ru_majflt: libc::c_long,
./stdlib/src/resource.rs:75:12     - Unknown word (nswap)      -- ru_nswap: libc::c_long,
./stdlib/src/resource.rs:76:12     - Unknown word (inblock)    -- ru_inblock: libc::c_long,
./stdlib/src/resource.rs:77:12     - Unknown word (oublock)    -- ru_oublock: libc::c_long,
./stdlib/src/resource.rs:78:12     - Unknown word (msgsnd)     -- ru_msgsnd: libc::c_long,
./stdlib/src/resource.rs:79:12     - Unknown word (msgrcv)     -- ru_msgrcv: libc::c_long,
./stdlib/src/resource.rs:80:12     - Unknown word (nsignals)   -- ru_nsignals: libc::c_long,
./stdlib/src/resource.rs:81:12     - Unknown word (nvcsw)      -- ru_nvcsw: libc::c_long,
./stdlib/src/resource.rs:82:12     - Unknown word (nivcsw)     -- ru_nivcsw: libc::c_long,
./stdlib/src/select.rs:122:5     - Unknown word (nfds)       -- nfds: libc::c_int,
./stdlib/src/select.rs:123:5     - Unknown word (readfds)    -- readfds: &mut FdSet,
./stdlib/src/select.rs:124:5     - Unknown word (writefds)   -- writefds: &mut FdSet,
./stdlib/src/select.rs:125:5     - Unknown word (errfds)     -- errfds: &mut FdSet,
./stdlib/src/select.rs:173:9     - Unknown word (rlist)      -- rlist: PyObjectRef,
./stdlib/src/select.rs:174:9     - Unknown word (wlist)      -- wlist: PyObjectRef,
./stdlib/src/select.rs:271:19    - Unknown word (pollfd)     -- use libc::pollfd;
./stdlib/src/select.rs:295:25    - Unknown word (revents)    -- revents: 0,
./stdlib/src/select.rs:314:52    - Unknown word (eventmask)  -- Fildes(fd): Fildes, eventmask: OptionalArg<u16>)
./stdlib/src/select.rs:58:37     - Unknown word (WSAFDIs)    -- winapi::um::winsock2::__WSAFDIsSet;
./stdlib/src/select.rs:97:17     - Unknown word (fdset)      -- let mut fdset = std::mem::MaybeUninit
./stdlib/src/socket.rs:1025:67   - Unknown word (errorfds)   -- SelectKind::Connect fills the errorfds fd_set, so if we wake
./stdlib/src/socket.rs:1093:28   - Unknown word (getsockopt) -- c::getsockopt(
./stdlib/src/socket.rs:1181:13   - Unknown word (bufsize)    -- bufsize: usize,
./stdlib/src/socket.rs:1212:12   - Unknown word (recvfrom)   -- fn recvfrom(
./stdlib/src/socket.rs:1278:12   - Unknown word (sendall)    -- fn sendall(
./stdlib/src/socket.rs:1297:25   - Unknown word (subbuf)     -- let subbuf = &buf[buf_offset..
./stdlib/src/socket.rs:1307:12   - Unknown word (sendto)     -- fn sendto(
./stdlib/src/socket.rs:1358:12   - Unknown word (getsockname) -- fn getsockname(&self, vm: &VirtualMachine
./stdlib/src/socket.rs:1364:12   - Unknown word (getpeername) -- fn getpeername(&self, vm: &VirtualMachine
./stdlib/src/socket.rs:1371:12   - Unknown word (gettimeout)  -- fn gettimeout(&self) -> Option<f6
./stdlib/src/socket.rs:1381:12   - Unknown word (setblocking) -- fn setblocking(&self, block: bool)
./stdlib/src/socket.rs:1392:12   - Unknown word (settimeout)  -- fn settimeout(&self, timeout: Option
./stdlib/src/socket.rs:1413:25   - Unknown word (flagsize)    -- let mut flagsize = std::mem::size_of
./stdlib/src/socket.rs:1453:12   - Unknown word (setsockopt)  -- fn setsockopt(
./stdlib/src/socket.rs:1458:13   - Unknown word (optlen)      -- optlen: OptionalArg<u32>,
./stdlib/src/socket.rs:1616:25   - Unknown word (abstractaddrlen) -- let abstractaddrlen = addr_len - sun_path
./stdlib/src/socket.rs:1617:25   - Unknown word (abstractpath)    -- let abstractpath = &path_u8[..abstractaddrlen
./stdlib/src/socket.rs:1645:8    - Unknown word (inet)            -- fn inet_aton(ip_string: PyStrRef
./stdlib/src/socket.rs:1669:9    - Unknown word (servicename)     -- servicename: PyStrRef,
./stdlib/src/socket.rs:1670:9    - Unknown word (protocolname)    -- protocolname: OptionalArg<PyStrRef
./stdlib/src/socket.rs:1807:30   - Unknown word (subsec)          -- tv_usec: dur.subsec_micros() as _,
./stdlib/src/socket.rs:1839:8    - Unknown word (getaddrinfo)     -- fn getaddrinfo(
./stdlib/src/socket.rs:1885:41   - Unknown word (getnameinfo)     -- hostname, _) = dns_lookup::getnameinfo(&addr, 0)
./stdlib/src/socket.rs:1998:17   - Unknown word (ainfo)           -- let mut ainfo = res.next().unwrap
./stdlib/src/socket.rs:2091:23   - Unknown word (iface)           -- .map(|iface| {
./stdlib/src/socket.rs:2107:46   - Unknown word (Luid)            -- name(&entry.InterfaceLuid).map_err(|err| err.into
./stdlib/src/socket.rs:2115:17   - Unknown word (luid)            -- luid: &winapi::shared::ifdef
./stdlib/src/socket.rs:2215:35   - Unknown word (idna)            -- encode_text(pyname, "idna", None, vm)?;
./stdlib/src/socket.rs:2295:13   - Unknown word (strerr)          -- let strerr = {
./stdlib/src/socket.rs:2303:51   - Unknown word (hstrerror)       -- CStr::from_ptr(libc::hstrerror(err.error_num()))
./stdlib/src/socket.rs:29:71     - Unknown word (Addrs)      -- SocketAddr, ToSocketAddrs},
./stdlib/src/socket.rs:311:32    - Unknown word (riscv)      -- target_arch = "riscv64gc",
./stdlib/src/socket.rs:38:33     - Unknown word (mstcpip)    -- use winapi::shared::mstcpip::*;
./stdlib/src/socket.rs:41:36     - Unknown word (ipdef)      -- use winapi::shared::ws2ipdef::*;
./stdlib/src/socket.rs:48:32     - Unknown word (tcpip)      -- pub use winapi::um::ws2tcpip::*;
./stdlib/src/socket.rs:709:18    - Unknown word (errcode)    -- macro_rules! errcode {
./stdlib/src/ssl.rs:108:42    - Unknown word (Proto)      -- MINIMUM_SUPPORTED: i32 = ProtoVersion::MinSupported
./stdlib/src/ssl.rs:110:11    - Unknown word (PROTO)      -- const PROTO_SSLv3: i32 = ProtoVersion
./stdlib/src/ssl.rs:1148:22   - Unknown word (rsplit)      -- .rsplit_once(&['/', '\\'][.
./stdlib/src/ssl.rs:1151:21   - Unknown word (errstr)      -- let errstr = e.reason().unwrap
./stdlib/src/ssl.rs:1292:59   - Unknown word (ipaddress)   -- Some(ip) = gen_name.ipaddress() {
./stdlib/src/ssl.rs:1354:63   - Unknown word (cacerts)     -- system/etc/security/cacerts";
./stdlib/src/ssl.rs:1461:28   - Unknown word (Oids)        -- ValidUses::Oids(oids) => PyFrozenSet
./stdlib/src/ssl.rs:1461:33   - Unknown word (oids)        -- ValidUses::Oids(oids) => PyFrozenSet::from
./stdlib/src/ssl.rs:532:31    - Unknown word (cipherlist) -- fn set_ciphers(&self, cipherlist: PyStrRef, vm: &VirtualMachin
./stdlib/src/ssl.rs:614:47    - Unknown word (pbuf)       -- server = protos.with_ref(|pbuf| {
./stdlib/src/ssl.rs:626:72    - Unknown word (Alpn)       -- client).ok_or(ssl::AlpnError::NOACK)
./stdlib/src/ssl.rs:721:17    - Unknown word (certfile)   -- certfile,
./stdlib/src/ssl.rs:722:17    - Unknown word (keyfile)    -- keyfile,
./stdlib/src/ssl.rs:838:9     - Unknown word (Nonblocking) -- Nonblocking,
./stdlib/src/ssl.rs:951:12    - Unknown word (getpeercert) -- fn getpeercert(
./stdlib/src/syslog.rs:115:14    - Unknown word (cformat)    -- let (cformat, cmsg) = ("%s".to_cstring
./stdlib/src/syslog.rs:121:8     - Unknown word (closelog)   -- fn closelog() {
./stdlib/src/syslog.rs:130:19    - Unknown word (maskpri)    -- fn setlogmask(maskpri: i32) -> i32 {
./stdlib/src/syslog.rs:142:12    - Unknown word (upto)       -- fn log_upto(pri: i32) -> i32 {
./stdlib/src/syslog.rs:68:9      - Unknown word (logoption)  -- logoption: OptionalArg<i32>,
./stdlib/src/termios.rs:10:18     - Unknown word (Termios)    -- use termios::Termios;
./stdlib/src/termios.rs:15:37     - Unknown word (ttydefaults) -- supply these from <sys/ttydefaults.h> (please file an issue
./stdlib/src/termios.rs:171:13    - Unknown word (noncanon)    -- let noncanon = (termios.c_lflag
./stdlib/src/termios.rs:171:35    - Unknown word (lflag)       -- noncanon = (termios.c_lflag & termios::ICANON)
./stdlib/src/termios.rs:182:23    - Unknown word (iflag)       -- termios.c_iflag.to_pyobject(vm),
./stdlib/src/termios.rs:183:23    - Unknown word (oflag)       -- termios.c_oflag.to_pyobject(vm),
./stdlib/src/termios.rs:184:23    - Unknown word (cflag)       -- termios.c_cflag.to_pyobject(vm),
./stdlib/src/termios.rs:186:22    - Unknown word (cfgetispeed) -- termios::cfgetispeed(&termios).to_pyobject
./stdlib/src/termios.rs:187:22    - Unknown word (cfgetospeed) -- termios::cfgetospeed(&termios).to_pyobject
./stdlib/src/termios.rs:195:42    - Unknown word (ispeed)      -- oflag, cflag, lflag, ispeed, ospeed, cc] =
./stdlib/src/termios.rs:195:50    - Unknown word (ospeed)      -- cflag, lflag, ispeed, ospeed, cc] =
./stdlib/src/termios.rs:206:18    - Unknown word (cfsetispeed) -- termios::cfsetispeed(&mut termios, ispeed
./stdlib/src/termios.rs:208:18    - Unknown word (cfsetospeed) -- termios::cfsetospeed(&mut termios, ospeed
./stdlib/src/termios.rs:22:42     - Unknown word (cygwin)      -- only found NSWTCH on cygwin, so please alert the
./stdlib/src/termios.rs:235:8     - Unknown word (tcsendbreak) -- fn tcsendbreak(fd: i32, duration: i
./stdlib/src/termios.rs:241:8     - Unknown word (tcdrain)     -- fn tcdrain(fd: i32, vm: &VirtualMachine
./stdlib/src/termios.rs:247:8     - Unknown word (tcflush)     -- fn tcflush(fd: i32, queue: i32
./stdlib/src/termios.rs:253:8     - Unknown word (tcflow)      -- fn tcflow(fd: i32, action: i3
./stdlib/src/unicodedata.rs:126:32    - Unknown word (nfkc)       -- "NFKC" => text.nfkc().collect::<String>
./stdlib/src/unicodedata.rs:128:32    - Unknown word (nfkd)       -- "NFKD" => text.nfkd().collect::<String>
./stdlib/src/unicodedata.rs:35:24     - Unknown word (Bidi)       -- use unic_ucd_bidi::BidiClass;
./stdlib/src/uuid.rs:34:75     - Unknown word (nanos)      -- as_secs(), now.subsec_nanos());
./stdlib/src/zlib.rs:118:77    - Unknown word (miniz)      -- only enabled for zlib; miniz_oxide doesn't
./stdlib/src/zlib.rs:266:28    - Unknown word (Decompressobj) -- decompressobj(args: DecompressobjArgs, vm: &VirtualMachine
./stdlib/src/zlib.rs:322:39    - Unknown word (pyref)         -- unused_data = vm.new_pyref(unused);
./vm/Cargo.toml:111:1     - Unknown word (winreg)     -- winreg = "0.10.1"
./vm/Cargo.toml:126:54    - Unknown word (memoryapi)  -- ifdef", "netioapi", "memoryapi",
./vm/Cargo.toml:130:6     - Unknown word (bindgen)    -- wasm-bindgen = "0.2.80"
./vm/Cargo.toml:45:1      - Unknown word (chrono)     -- chrono = { version = "0.4.
./vm/Cargo.toml:45:45     - Unknown word (wasmbind)   -- 4.19", features = ["wasmbind"] }
./vm/Cargo.toml:63:1      - Unknown word (timsort)    -- timsort = "0.1.2"
./vm/Cargo.toml:72:1      - Unknown word (memoffset)  -- memoffset = "0.6.5"
./vm/build.rs:33:10     - Unknown word (sysvars)    -- "sysvars! {{ {} }}",
./vm/src/anystr.rs:187:9     - Unknown word (splitw)     -- splitw: SW,
./vm/src/anystr.rs:196:13    - Unknown word (splited)    -- let splited = if let Some(pattern
./vm/src/anystr.rs:215:11    - Unknown word (startsendswith) -- fn py_startsendswith<T, F>(
./vm/src/anystr.rs:304:11    - Unknown word (ljust)          -- fn py_ljust(&self, width: usize
./vm/src/anystr.rs:308:11    - Unknown word (rjust)          -- fn py_rjust(&self, width: usize
./vm/src/anystr.rs:355:11    - Unknown word (removeprefix)   -- fn py_removeprefix<FC>(&self, prefix:
./vm/src/anystr.rs:367:11    - Unknown word (removesuffix)   -- fn py_removesuffix<FC>(&self, suffix:
./vm/src/anystr.rs:417:11    - Unknown word (iscase)         -- fn py_iscase<F, G>(&'s self, is_case
./vm/src/anystr.rs:423:23    - Unknown word (islower)        -- // _Py_bytes_islower
./vm/src/anystr.rs:424:23    - Unknown word (isupper)        -- // Py_bytes_isupper
./vm/src/anystr.rs:73:58     - Unknown word (substr)     -- &'s S, len: usize, substr: F) -> Option<(PyObjectRef
./vm/src/buffer.rs:163:46    - Unknown word (schar)      -- native_info!(raw::c_schar),
./vm/src/buffer.rs:20:17     - Unknown word (Endianness) -- pub(crate) enum Endianness {
./vm/src/buffer.rs:456:24    - Unknown word (primint)    -- macro_rules! make_pack_primint {
./vm/src/builtins/asyncgenerator.rs:86:13     - Unknown word (aclose)          -- aclose: false,
./vm/src/builtins/asyncgenerator.rs:9:54      - Unknown word (Unconstructible) -- IterNext, IterNextIterable, Unconstructible},
./vm/src/builtins/builtinfunc.rs:141:26    - Unknown word (getattr)    -- // TODO: return (getattr, (self.object, self
./vm/src/builtins/builtinfunc.rs:262:13    - Unknown word (builtinfunc) -- let builtinfunc_getattr = vm.builtins
./vm/src/builtins/builtinfunc.rs:263:13    - Unknown word (classname)   -- let classname = vm.builtins.get_attr
./vm/src/builtins/bytearray.rs:10:5      - Unknown word (bytesinner) -- bytesinner::{
./vm/src/builtins/bytearray.rs:1:34      - Unknown word (bytearray)  -- Implementation of the python bytearray object.
./vm/src/builtins/bytearray.rs:245:8     - Unknown word (maketrans)  -- fn maketrans(from: PyBytesInner,
./vm/src/builtins/bytearray.rs:322:8     - Unknown word (isalnum)    -- fn isalnum(&self) -> bool {
./vm/src/builtins/bytearray.rs:327:8     - Unknown word (isalpha)    -- fn isalpha(&self) -> bool {
./vm/src/builtins/bytearray.rs:332:8     - Unknown word (isascii)    -- fn isascii(&self) -> bool {
./vm/src/builtins/bytearray.rs:337:8     - Unknown word (isdigit)    -- fn isdigit(&self) -> bool {
./vm/src/builtins/bytearray.rs:33:77     - Unknown word (Hashable)   -- Comparable, Constructor, Hashable, Initializer,
./vm/src/builtins/bytearray.rs:347:8     - Unknown word (isspace)    -- fn isspace(&self) -> bool {
./vm/src/builtins/bytearray.rs:34:80     - Unknown word (Unhashable) -- omparisonOp, Unconstructible, Unhashable,
./vm/src/builtins/bytearray.rs:357:8     - Unknown word (istitle)    -- fn istitle(&self) -> bool {
./vm/src/builtins/bytearray.rs:377:8     - Unknown word (swapcase)   -- fn swapcase(&self) -> Self {
./vm/src/builtins/bytearray.rs:392:8     - Unknown word (fromhex)    -- fn fromhex(cls: PyTypeRef, string
./vm/src/builtins/bytearray.rs:436:8     - Unknown word (endswith)   -- fn endswith(&self, options: anystr
./vm/src/builtins/bytearray.rs:453:8     - Unknown word (startswith) -- fn startswith(
./vm/src/builtins/bytearray.rs:492:8     - Unknown word (rindex)     -- fn rindex(&self, options: ByteInnerFind
./vm/src/builtins/bytearray.rs:512:8     - Unknown word (lstrip)     -- fn lstrip(&self, chars: OptionalOption
./vm/src/builtins/bytearray.rs:517:8     - Unknown word (rstrip)     -- fn rstrip(&self, chars: OptionalOption
./vm/src/builtins/bytearray.rs:573:66    - Unknown word (memoryview) -- bytearray even it's bytes or memoryview
./vm/src/builtins/bytearray.rs:585:8     - Unknown word (rpartition) -- fn rpartition(&self, sep: PyBytesInner
./vm/src/builtins/bytearray.rs:596:8     - Unknown word (expandtabs) -- fn expandtabs(&self, options: anystr
./vm/src/builtins/bytearray.rs:7:5       - Unknown word (anystr)     -- anystr::{self, AnyStr},
./vm/src/builtins/bytes.rs:516:45    - Unknown word (emplemented) -- 'utf-8' and 'ascii' emplemented
./vm/src/builtins/code.rs:139:13    - Unknown word (codeobj)    -- fn into_codeobj(self, ctx: &Context
./vm/src/builtins/complex.rs:112:18    - Unknown word (powc)       -- let ans = v1.powc(v2);
./vm/src/builtins/complex.rs:303:8     - Unknown word (truediv)    -- fn truediv(
./vm/src/builtins/complex.rs:51:61     - Unknown word (coereced)   -- complex originally or coereced into one
./vm/src/builtins/dict.rs:1007:18   - Unknown word (dictkeys)             -- ref _dictkeys @ PyDictKeys => {}
./vm/src/builtins/dict.rs:1020:8    - Unknown word (isdisjoint)           -- fn isdisjoint(zelf: PyRef<Self>, other
./vm/src/builtins/dict.rs:15:5      - Unknown word (dictdatatype) -- dictdatatype::{self, DictKey},
./vm/src/builtins/dict.rs:179:22    - Unknown word (setdefault)   -- self.entries.setdefault(vm, &*key, default)
./vm/src/builtins/dict.rs:217:8     - Unknown word (fromkeys)     -- fn fromkeys(
./vm/src/builtins/dict.rs:226:16    - Unknown word (pydict)       -- Ok(pydict) => {
./vm/src/builtins/dict.rs:369:13    - Unknown word (dicted)       -- let dicted: Result<PyDictRef,
./vm/src/builtins/dict.rs:403:8     - Unknown word (popitem)      -- fn popitem(&self, vm: &VirtualMachine
./vm/src/builtins/dict.rs:902:10    - Unknown word (reversekeyiterator) -- dict_reversekeyiterator_type,
./vm/src/builtins/dict.rs:915:10    - Unknown word (reversevalueiterator) -- dict_reversevalueiterator_type,
./vm/src/builtins/float.rs:477:13    - Unknown word (numer)      -- let numer = vm.ctx.new_bigint
./vm/src/builtins/function.rs:118:13    - Unknown word (argpos)     -- let argpos = |range: std::ops:
./vm/src/builtins/function.rs:171:17    - Unknown word (ndefs)      -- let ndefs = defaults.map_or(0
./vm/src/builtins/function.rs:173:17    - Unknown word (nrequired)  -- let nrequired = code.arg_count - ndefs
./vm/src/builtins/function.rs:2:5       - Unknown word (jitfunc)    -- mod jitfunc;
./vm/src/builtins/function.rs:487:8     - Unknown word (getattro)   -- fn getattro(zelf: &Py<Self>, name
./vm/src/builtins/function.rs:541:25    - Unknown word (qname)      -- if let Some(qname) = vm.get_attribute
./vm/src/builtins/function.rs:560:13    - Unknown word (funcself)   -- let funcself = self.object.clone
./vm/src/builtins/function.rs:79:17     - Unknown word (fastlocals) -- let mut fastlocals = frame.fastlocals.lock
./vm/src/builtins/function/jitfunc.rs:92:14     - Unknown word (Jitting)    -- "Jitting function requires arguments
./vm/src/builtins/genericalias.rs:185:8     - Unknown word (instancecheck) -- fn instancecheck(_zelf: PyRef<Self>,
./vm/src/builtins/genericalias.rs:207:7     - Unknown word (typevar)       -- fn is_typevar(obj: &PyObjectRef, vm
./vm/src/builtins/genericalias.rs:228:17    - Unknown word (subparam)      -- for subparam in &subparams {
./vm/src/builtins/genericalias.rs:248:5     - Unknown word (argitems)      -- argitems: &[PyObjectRef],
./vm/src/builtins/int.rs:407:8     - Unknown word (modpow)     -- fn modpow(&self, other: PyObjectRef
./vm/src/builtins/int.rs:608:33    - Unknown word (byteorder)  -- value = match (args.byteorder, signed) {
./vm/src/builtins/memory.rs:1063:55   - Unknown word (memoryviewiterator) -- class(ctx, ctx.types.memoryviewiterator_type);
./vm/src/builtins/memory.rs:239:18    - Unknown word (fortain)      -- // TODO: fortain order
./vm/src/builtins/memory.rs:47:37     - Unknown word (memeoryview) -- the possible another memeoryview is viewing from it
./vm/src/builtins/memory.rs:489:29    - Unknown word (setted)       -- // no suboffset setted, stride must be positive
./vm/src/builtins/memory.rs:492:13    - Unknown word (newlen)       -- let newlen = range.len();
./vm/src/builtins/memory.rs:524:40    - Unknown word (dimention)    -- length of the first dimention
./vm/src/builtins/memory.rs:54:8      - Unknown word (memoryview's) -- // memoryview's options could be different
./vm/src/builtins/memory.rs:875:23    - Unknown word (pybuffer)     -- .into_pybuffer_with_descriptor(self
./vm/src/builtins/mod.rs:33:16     - Unknown word (genericalias)   -- pub(crate) mod genericalias;
./vm/src/builtins/mod.rs:5:16      - Unknown word (asyncgenerator) -- pub(crate) mod asyncgenerator;
./vm/src/builtins/mod.rs:80:22     - Unknown word (Traceback)      -- pub use traceback::PyTraceback;
./vm/src/builtins/mod.rs:85:16     - Unknown word (weakref)        -- pub(crate) mod weakref;
./vm/src/builtins/module.rs:89:73     - Unknown word (dictoffsets) -- dict method above once dictoffsets land
./vm/src/builtins/object.rs:156:19    - Unknown word (setattr)    -- /// Implement setattr(self, name, value).
./vm/src/builtins/object.rs:167:19    - Unknown word (delattr)    -- /// Implement delattr(self, name).
./vm/src/builtins/object.rs:174:13    - Unknown word (setattro)   -- fn slot_setattro(
./vm/src/builtins/object.rs:294:29    - Unknown word (getattribute) -- vm_trace!("object.__getattribute__({:?}, {:?})", obj
./vm/src/builtins/object.rs:354:13    - Unknown word (reducelib)    -- let reducelib = vm.import("__reducelib
./vm/src/builtins/object.rs:358:13    - Unknown word (copyreg)      -- let copyreg = vm.import("copyreg
./vm/src/builtins/property.rs:31:5      - Unknown word (fget)       -- fget: Option<PyObjectRef
./vm/src/builtins/property.rs:33:5      - Unknown word (fset)       -- fset: Option<PyObjectRef
./vm/src/builtins/range.rs:298:19    - Unknown word (paramters)  -- let range_paramters: Vec<PyObjectRef> =
./vm/src/builtins/range.rs:347:26    - Unknown word (substart)   -- let (mut substart, mut substop, mut substep
./vm/src/builtins/range.rs:347:40    - Unknown word (substop)    -- let (mut substart, mut substop, mut substep) =
./vm/src/builtins/range.rs:347:53    - Unknown word (substep)    -- substart, mut substop, mut substep) =
./vm/src/builtins/range.rs:584:31    - Unknown word (isizes)     -- start, stop, step are isizes, we can use a faster
./vm/src/builtins/set.rs:274:8     - Unknown word (issuperset) -- fn issuperset(&self, other: ArgIterable
./vm/src/builtins/set.rs:283:8     - Unknown word (issubset)   -- fn issubset(&self, other: ArgIterable
./vm/src/builtins/set.rs:688:8     - Unknown word (iand)       -- fn iand(zelf: PyRef<Self>, set
./vm/src/builtins/set.rs:719:8     - Unknown word (ixor)       -- fn ixor(zelf: PyRef<Self>, set
./vm/src/builtins/set.rs:72:35     - Unknown word (frozenset)  -- module = false, name = "frozenset")]
./vm/src/builtins/slice.rs:1:4       - Unknown word (sliceobject) -- // sliceobject.{h,c} in CPython
./vm/src/builtins/str.rs:1138:8    - Unknown word (isidentifier) -- fn isidentifier(&self) -> bool {
./vm/src/builtins/str.rs:1554:15   - Unknown word (Getint)       -- ("Getint", "getInt"),
./vm/src/builtins/str.rs:1555:21   - Unknown word (Ωppercases)   -- ("Greek Ωppercases ...", "greek ωppercases
./vm/src/builtins/str.rs:1555:45   - Unknown word (ωppercases)   -- ppercases ...", "greek ωppercases ..."),
./vm/src/builtins/str.rs:1556:21   - Unknown word (ῼitlecases)   -- ("Greek ῼitlecases ...", "greek ῳitlecases
./vm/src/builtins/str.rs:1556:45   - Unknown word (ῳitlecases)   -- itlecases ...", "greek ῳitlecases ..."),
./vm/src/builtins/str.rs:1719:33   - Unknown word (rmatch)       -- (offset, _) in self.rmatch_indices(|c: char| c
./vm/src/builtins/str.rs:460:48    - Unknown word (cmpxchg)    -- len, we don't need a cmpxchg loop, since it'll always
./vm/src/builtins/str.rs:490:73    - Unknown word (maxsize)    -- vec.capacity() < sys.maxsize
./vm/src/builtins/str.rs:556:8     - Unknown word (casefold)   -- // casefold is much more aggressive
./vm/src/builtins/str.rs:629:29    - Unknown word (rsplitn)    -- |v, s, n, vm| v.rsplitn(n, s).map(|s| vm.ctx
./vm/src/builtins/str.rs:70:43     - Unknown word (uncomputed) -- MAX as a sentinel for "uncomputed"
./vm/src/builtins/str.rs:735:8     - Unknown word (isnumeric)  -- fn isnumeric(&self) -> bool {
./vm/src/builtins/str.rs:753:8     - Unknown word (isdecimal)  -- fn isdecimal(&self) -> bool {
./vm/src/builtins/str.rs:880:8     - Unknown word (isprintable) -- fn isprintable(&self) -> bool {
./vm/src/builtins/super.rs:106:28    - Unknown word (supercheck) -- let obj_type = supercheck(typ.clone(), obj.clone
./vm/src/builtins/super.rs:129:13    - Unknown word (typname)    -- let typname = &self.typ.name();
./vm/src/builtins/tuple.rs:311:39    - Unknown word (tuplesubclass) -- just return tup, or tuplesubclass(tup), which'll copy
./vm/src/builtins/tuple.rs:44:13     - Unknown word (pytuple)    -- fn into_pytuple(self, vm: &VirtualMachine
./vm/src/builtins/tuple.rs:59:19     - Unknown word (intopyobj)  -- macro_rules! impl_intopyobj_tuple {
./vm/src/builtins/type.rs:1064:21   - Unknown word (dictoffset) -- // cls.slot_dictoffset != 0 && !cls.flags.contains
./vm/src/builtins/type.rs:1132:20   - Unknown word (unionable)  -- if !union_::is_unionable(zelf.clone(), vm) |
./vm/src/builtins/type.rs:1159:16   - Unknown word (Linearising) -- vm_trace!("Linearising MRO: {:?}", bases);
./vm/src/builtins/type.rs:1166:37   - Unknown word (Mros)        -- base = &base_mro[0]; // Mros cannot be empty.
./vm/src/builtins/type.rs:1201:27   - Unknown word (Metaclass)   -- = _PyType_CalculateMetaclass
./vm/src/builtins/type.rs:179:19    - Unknown word (linearise)  -- let mro = linearise_mro(mros)?;
./vm/src/builtins/type.rs:293:21    - Unknown word (intrinsics) -- // try std::intrinsics::likely once it is stablized
./vm/src/builtins/type.rs:293:51    - Unknown word (stablized)  -- intrinsics::likely once it is stablized
./vm/src/builtins/type.rs:39:9      - Unknown word (heaptype)   -- pub heaptype_ext: Option<Pin<Box
./vm/src/builtins/type.rs:641:17    - Unknown word (metatype)   -- fn slot_new(metatype: PyTypeRef, args: FuncArgs
./vm/src/builtins/type.rs:871:21    - Unknown word (initter)    -- if let Some(initter) = typ.get_super_attr
./vm/src/bytesinner.rs:1051:48   - Unknown word (byteset)    -- offset) = haystack.find_byteset(ASCII_WHITESPACES)
./vm/src/bytesinner.rs:1126:13   - Unknown word (unchunked)  -- let unchunked = len - chunked;
./vm/src/bytesinner.rs:846:12    - Unknown word (stringlib)  -- // stringlib_replace in CPython
./vm/src/cformat.rs:380:33    - Unknown word (preconversor) -- CFormatType::String(preconversor) => match preconversor
./vm/src/cformat.rs:446:43    - Unknown word (bytesobject)  -- // formatfloat in bytesobject.c generates its own
./vm/src/cformat.rs:58:13     - Unknown word (Preconversor) -- enum CFormatPreconversor {
./vm/src/codecs.rs:109:45    - Unknown word (incrementalencoder) -- self.0.as_object(), "incrementalencoder", args)
./vm/src/codecs.rs:121:45    - Unknown word (incrementaldecoder) -- self.0.as_object(), "incrementaldecoder", args)
./vm/src/coroutine.rs:33:9      - Unknown word (weakreflist) -- // _weakreflist
./vm/src/dictdatatype.rs:19:62     - Unknown word (pyhash)     -- compatible with actual pyhash value
./vm/src/dictdatatype.rs:662:29    - Unknown word (usecases)   -- dictionary. Typical usecases are:
./vm/src/format.rs:1128:39   - Unknown word (ddfe)          -- FormatPart::Literal("}ddfe".to_owned()),
./vm/src/format.rs:695:9     - Unknown word (preconversion) -- preconversion_spec: Option<char>,
./vm/src/format.rs:758:82    - Unknown word (conversor)     -- the comma is maybe a conversor spec.
./vm/src/frame.rs:1298:36   - Unknown word (Kwargs)     -- vm.new_type_error("Kwargs must be a dict.".to
./vm/src/frame.rs:1592:61   - Unknown word (matmul)     -- MatrixMultiply => vm._matmul(a_ref, b_ref),
./vm/src/frame.rs:1618:61   - Unknown word (imatmul)    -- MatrixMultiply => vm._imatmul(a_ref, b_ref),
./vm/src/frame.rs:1619:52   - Unknown word (ipow)       -- BinaryOperator::Power => vm._ipow(a_ref, b_ref),
./vm/src/frame.rs:1620:53   - Unknown word (itruediv)   -- BinaryOperator::Divide => vm._itruediv(a_ref, b_ref),
./vm/src/frame.rs:1621:58   - Unknown word (ifloordiv)  -- :FloorDivide => vm._ifloordiv(a_ref, b_ref),
./vm/src/frame.rs:1622:53   - Unknown word (imod)       -- BinaryOperator::Modulo => vm._imod(a_ref, b_ref),
./vm/src/frame.rs:1623:53   - Unknown word (ilshift)    -- BinaryOperator::Lshift => vm._ilshift(a_ref, b_ref),
./vm/src/frame.rs:1624:53   - Unknown word (irshift)    -- BinaryOperator::Rshift => vm._irshift(a_ref, b_ref),
./vm/src/frame.rs:1677:13   - Unknown word (displayhook) -- let displayhook = vm
./vm/src/frame.rs:353:13    - Unknown word (instrs)     -- let instrs = &self.code.instructions
./vm/src/frame.rs:915:21    - Unknown word (aiterable)  -- let aiterable = self.pop_value();
./vm/src/frame.rs:94:6      - Unknown word (Lasti)      -- type Lasti = atomic::AtomicU32
./vm/src/function/argument.rs:113:13    - Unknown word (kwargc)     -- let kwargc = kwarg_names.len()
./vm/src/function/argument.rs:114:13    - Unknown word (posargc)    -- let posargc = total_argc - kwargc
./vm/src/function/argument.rs:116:13    - Unknown word (posargs)    -- let posargs = args.by_ref().take
./vm/src/function/argument.rs:200:46    - Unknown word (arity)      -- e.into_exception(T::arity(), given_args, vm))
./vm/src/function/argument.rs:267:53    - Unknown word (keyqord)    -- error(format!("Required keyqord only argument {name
./vm/src/function/builtin.rs:148:13    - Unknown word (intonativefunc) -- fn test_intonativefunc_noalloc() {
./vm/src/function/builtin.rs:148:28    - Unknown word (noalloc)        -- test_intonativefunc_noalloc() {
./vm/src/function/getset.rs:114:13    - Unknown word (noresult)   -- fn into_noresult(self) -> PyResult<(
./vm/src/function/protocol.rs:64:5      - Unknown word (iterfn)     -- iterfn: Option<crate::types
./vm/src/import.rs:16:47     - Unknown word (inlines)    -- bootstrap needs these and it inlines checks to sys.modules
./vm/src/import.rs:25:13     - Unknown word (impmod)     -- let impmod = import_builtin(vm
./vm/src/import.rs:62:17     - Unknown word (zipimporter) -- let zipimporter = zipimport.get_attr
./vm/src/intern.rs:35:29     - Unknown word (Internable) -- unsafe fn intern<S: Internable>(&self, s: S, typ: PyTypeRef
./vm/src/macros.rs:187:54    - Unknown word (logbuffers) -- Might soon overflow your logbuffers
./vm/src/macros.rs:62:9      - Unknown word (uncasted)   -- /// the uncasted object is required.
./vm/src/macros.rs:88:27     - Unknown word (downcasted) -- With a binding to the downcasted type:
./vm/src/object/core.rs:1080:5    - Unknown word (Paritally)  -- /// Paritally initialize a struct
./vm/src/object/core.rs:1218:8    - Unknown word (miri)       -- fn miri_test_type_initialization
./vm/src/object/core.rs:1225:35   - Unknown word (dfghjkl)    -- obj = ctx.new_bytes(b"dfghjkl".to_vec());
./vm/src/object/core.rs:200:54    - Unknown word (Weaks)      -- actually own the PyObjectWeaks inside `list`, and every
./vm/src/object/core.rs:218:32    - Unknown word (arrayvec)   -- // TODO: can be an arrayvec
./vm/src/object/core.rs:227:66    - Unknown word (incref)     -- want ownership (and so incref these *while the lock
./vm/src/object/core.rs:361:17    - Unknown word (pyinner)    -- let pyinner = (self as *const Self
./vm/src/object/core.rs:42:79     - Unknown word (vtable)     -- manually creating a vtable, and putting
./vm/src/object/core.rs:767:24    - Unknown word (decref)     -- // the decref right above set ref
./vm/src/object/core.rs:93:15     - Unknown word (Vtable)     -- trait VtableHelper {
./vm/src/protocol/buffer.rs:132:32    - Unknown word (Manaully)   -- wrap PyBuffer in the ManaullyDrop to prevent drop
./vm/src/protocol/buffer.rs:265:43    - Unknown word (conti)      -- segment<F>(&self, try_conti: bool, mut f: F)
./vm/src/protocol/iter.rs:121:13    - Unknown word (getiter)    -- let getiter = {
./vm/src/protocol/iter.rs:20:39     - Unknown word (iternext)   -- find_map(|x| x.slots.iternext.load())
./vm/src/protocol/iter.rs:239:19    - Unknown word (iret)       -- .map(|iret| iret.into_result()
./vm/src/protocol/object.rs:453:30    - Unknown word (icls)       -- } else if let Ok(icls) = PyTypeRef::try_from
./vm/src/protocol/object.rs:522:26    - Unknown word (unhashable) -- format!("unhashable type: '{}'", self.class
./vm/src/protocol/sequence.rs:119:30    - Unknown word (apear)      -- / if both arguments apear to be sequences, try
./vm/src/protocol/sequence.rs:231:59    - Unknown word (unsliceable) -- format!("'{}' object is unsliceable", self.obj.class())
./vm/src/py_serde.rs:206:39    - Unknown word (deserializers) -- can be reused by other deserializers without such limit
./vm/src/stdlib/ast.rs:43:17     - Unknown word (numargs)    -- let numargs = args.args.len();
./vm/src/stdlib/atexit.rs:1:9       - Unknown word (atexit)     -- pub use atexit::_run_exitfuncs;
./vm/src/stdlib/builtins.rs:347:8     - Unknown word (hasattr)    -- fn hasattr(obj: PyObjectRef, attr
./vm/src/stdlib/builtins.rs:393:26    - Unknown word (normalish)  -- // everything is normalish, we can just rely on
./vm/src/stdlib/builtins.rs:648:40    - Unknown word (ternop)     -- Err(vm.new_unsupported_ternop_error(&x, &y, &z, "pow
./vm/src/stdlib/builtins.rs:999:33    - Unknown word (hierarachy) -- ordered by exception_hierarachy.txt
./vm/src/stdlib/codecs.rs:351:17    - Unknown word (pycodecs)   -- fn delegate_pycodecs(
./vm/src/stdlib/codecs.rs:373:8     - Unknown word (mbcs)       -- fn mbcs_encode(args: FuncArgs
./vm/src/stdlib/codecs.rs:425:8     - Unknown word (charmap)    -- fn charmap_encode(args: FuncArgs
./vm/src/stdlib/collections.rs:27:30     - Unknown word (Deque)      -- std::collections::VecDeque;
./vm/src/stdlib/collections.rs:30:23     - Unknown word (deque)      -- #[pyclass(name = "deque")]
./vm/src/stdlib/collections.rs:34:9      - Unknown word (maxlen)     -- maxlen: Option<usize>,
./vm/src/stdlib/errno.rs:42:44     - Unknown word (winerrs)    -- should be here once winerrs are translated to errnos
./vm/src/stdlib/functools.rs:1:17      - Unknown word (functools)  -- pub(crate) use _functools::make_module;
./vm/src/stdlib/io.rs:1144:25   - Unknown word (readbuf)       -- let readbuf = VecBuffer::from(std
./vm/src/stdlib/io.rs:1345:17   - Unknown word (fileobj)       -- pub fn repr_fileobj_name(obj: &PyObject
./vm/src/stdlib/io.rs:1555:13   - Unknown word (exeption)      -- exeption_chain(flush_res, close
./vm/src/stdlib/io.rs:2022:8    - Unknown word (textio)        -- fn textio_encode_utf8(s: PyStrRef
./vm/src/stdlib/io.rs:211:19    - Unknown word (seekfrom)      -- pub(super) fn seekfrom(
./vm/src/stdlib/io.rs:247:12    - Unknown word (getvalue)      -- fn getvalue(&self) -> Vec<u8> {
./vm/src/stdlib/io.rs:2496:25   - Unknown word (getstate)      -- let decoder_getstate = || {
./vm/src/stdlib/io.rs:2512:21   - Unknown word (ndecoded)      -- let ndecoded = decoder_decode(input
./vm/src/stdlib/io.rs:356:14    - Unknown word (seekable)      -- fn check_seekable(file: &PyObject, vm
./vm/src/stdlib/io.rs:3678:10   - Unknown word (stacklevel)    -- _stacklevel: OptionalArg<i32>,
./vm/src/stdlib/io.rs:3917:28   - Unknown word (msvcrt)        -- crate::stdlib::msvcrt::setmode_binary(fd)
./vm/src/stdlib/io.rs:442:12    - Unknown word (isatty)        -- fn isatty(_self: PyObjectRef)
./vm/src/stdlib/io.rs:453:13    - Unknown word (iobase)        -- iobase_close(&instance, vm
./vm/src/stdlib/io.rs:479:12    - Unknown word (readlines)     -- fn readlines(
./vm/src/stdlib/io.rs:505:12    - Unknown word (writelines)    -- fn writelines(
./vm/src/stdlib/io.rs:532:34    - Unknown word (Seekable)      -- pymethod(name = "_checkSeekable")]
./vm/src/stdlib/io.rs:56:35     - Unknown word (unsupportedop) -- or_init(|| _io::make_unsupportedop(ctx))
./vm/src/stdlib/io.rs:598:48    - Unknown word (readinto)      -- call_method(&instance, "readinto", (b.clone(),))?,
./vm/src/stdlib/io.rs:659:13    - Unknown word (bufobj)        -- bufobj: PyObjectRef,
./vm/src/stdlib/io.rs:914:21    - Unknown word (memobj)        -- let memobj = PyMemoryView::from
./vm/src/stdlib/itertools.rs:1146:12   - Unknown word (teedata)     -- // teedata a python class
./vm/src/stdlib/itertools.rs:1728:21   - Unknown word (numactive)   -- let mut numactive = zelf.iterators.len
./vm/src/stdlib/itertools.rs:426:23    - Unknown word (starmap)    -- #[pyclass(name = "starmap")]
./vm/src/stdlib/itertools.rs:428:23    - Unknown word (Starmap)    -- struct PyItertoolsStarmap {
./vm/src/stdlib/itertools.rs:481:23    - Unknown word (takewhile)  -- #[pyclass(name = "takewhile")]
./vm/src/stdlib/itertools.rs:483:23    - Unknown word (Takewhile)  -- struct PyItertoolsTakewhile {
./vm/src/stdlib/itertools.rs:562:23    - Unknown word (dropwhile)  -- #[pyclass(name = "dropwhile")]
./vm/src/stdlib/itertools.rs:564:23    - Unknown word (Dropwhile)  -- struct PyItertoolsDropwhile {
./vm/src/stdlib/itertools.rs:831:23    - Unknown word (islice)     -- #[pyclass(name = "islice")]
./vm/src/stdlib/itertools.rs:833:23    - Unknown word (Islice)     -- struct PyItertoolsIslice {
./vm/src/stdlib/itertools.rs:86:59     - Unknown word (leat)       -- from("function takes at leat 1 arguments (0 given
./vm/src/stdlib/itertools.rs:958:23    - Unknown word (filterfalse) -- #[pyclass(name = "filterfalse")]
./vm/src/stdlib/marshal.rs:121:17    - Unknown word (pyint)      -- pyint @ PyInt => {
./vm/src/stdlib/marshal.rs:153:17    - Unknown word (pylist)     -- pylist @ PyList => {
./vm/src/stdlib/marshal.rs:158:17    - Unknown word (pyset)      -- pyset @ PySet => {
./vm/src/stdlib/marshal.rs:163:17    - Unknown word (pyfrozen)   -- pyfrozen @ PyFrozenSet => {
./vm/src/stdlib/msvcrt.rs:13:17     - Unknown word (minwindef)  -- shared::minwindef::UINT,
./vm/src/stdlib/msvcrt.rs:28:13     - Unknown word (getch)      -- fn _getch() -> i32;
./vm/src/stdlib/msvcrt.rs:30:13     - Unknown word (getche)     -- fn _getche() -> i32;
./vm/src/stdlib/msvcrt.rs:31:13     - Unknown word (getwche)    -- fn _getwche() -> u32;
./vm/src/stdlib/msvcrt.rs:32:13     - Unknown word (putch)      -- fn _putch(c: u32) -> i32;
./vm/src/stdlib/nt.rs:112:8     - Unknown word (cwait)       -- // cwait is available on MSVC
./vm/src/stdlib/nt.rs:115:19    - Unknown word (termstat)    -- fn _cwait(termstat: *mut i32, procHandle
./vm/src/stdlib/nt.rs:167:17    - Unknown word (stdhandle)   -- let stdhandle = match fd {
./vm/src/stdlib/nt.rs:180:21    - Unknown word (csbi)        -- let mut csbi = wincon::CONSOLE_SCREEN
./vm/src/stdlib/nt.rs:196:13    - Unknown word (wexecv)      -- fn _wexecv(cmdname: *const u16
./vm/src/stdlib/nt.rs:196:20    - Unknown word (cmdname)     -- fn _wexecv(cmdname: *const u16, argv:
./vm/src/stdlib/nt.rs:252:13    - Unknown word (wpath)       -- let wpath = path.to_widecstring
./vm/src/stdlib/nt.rs:315:13    - Unknown word (wbuf)        -- let wbuf = windows::core::PCWSTR
./vm/src/stdlib/nt.rs:339:30    - Unknown word (ntdef)       -- use winapi::shared::{ntdef::ULARGE_INTEGER, winerror
./vm/src/stdlib/nt.rs:40:65     - Unknown word (widecstring) -- GetFileAttributesW(path.to_widecstring(vm)?.as_ptr()) };
./vm/src/stdlib/nt.rs:48:23     - Unknown word (Simlink)     -- pub(super) struct SimlinkArgs {
./vm/src/stdlib/operator.rs:251:8     - Unknown word (iconcat)    -- fn iconcat(a: PyObjectRef, b: PyObjectRe
./vm/src/stdlib/operator.rs:345:9     - Unknown word (attrgetter) -- /// attrgetter(attr, ...) --> attrgetter
./vm/src/stdlib/operator.rs:405:17    - Unknown word (nattr)      -- let nattr = args.args.len();
./vm/src/stdlib/operator.rs:443:9     - Unknown word (itemgetter) -- /// itemgetter(item, ...) --> itemgetter
./vm/src/stdlib/operator.rs:510:9     - Unknown word (methodcaller) -- /// methodcaller(name, ...) --> methodcaller
./vm/src/stdlib/operator.rs:559:25    - Unknown word (pargs)        -- let mut pargs = vec![zelf.name.as
./vm/src/stdlib/os.rs:1063:33   - Unknown word (fileutils)      -- // Based on CPython fileutils.c' attributes_to_mode
./vm/src/stdlib/os.rs:1078:20   - Unknown word (systime)        -- let sec = |systime: SystemTime| match systime
./vm/src/stdlib/os.rs:1109:44   - Unknown word (xstat)          -- replicate CPython's win32_xstat
./vm/src/stdlib/os.rs:1141:21   - Unknown word (fstatat)        -- let fstatat_ret = dir_fd.get_opt
./vm/src/stdlib/os.rs:1191:8    - Unknown word (curdir)         -- fn curdir_inner(vm: &VirtualMachine
./vm/src/stdlib/os.rs:1196:8    - Unknown word (getcwd)         -- fn getcwd(vm: &VirtualMachine
./vm/src/stdlib/os.rs:124:17    - Unknown word (pathlike)   -- let pathlike = match_class!(match
./vm/src/stdlib/os.rs:1311:12   - Unknown word (Utime)          -- struct UtimeArgs {
./vm/src/stdlib/os.rs:1519:21   - Unknown word (cutime)         -- tms_cutime: 0,
./vm/src/stdlib/os.rs:1520:21   - Unknown word (cstime)         -- tms_cstime: 0,
./vm/src/stdlib/os.rs:1624:17   - Unknown word (loadavg)        -- let mut loadavg = [0f64; 3];
./vm/src/stdlib/os.rs:162:42    - Unknown word (osstr)      -- Bytes(b) => bytes_as_osstr(b.as_bytes(), vm),
./vm/src/stdlib/os.rs:1639:8    - Unknown word (waitstatus)     -- fn waitstatus_to_exitcode(status:
./vm/src/stdlib/os.rs:1673:47   - Unknown word (consoleapi)     -- unsafe { winapi::um::consoleapi::GetConsoleCP() },
./vm/src/stdlib/os.rs:1710:13   - Unknown word (nodename)       -- pub nodename: String,
./vm/src/stdlib/os.rs:274:13    - Unknown word (excp)       -- let excp = self.error.into_pyexception
./vm/src/stdlib/os.rs:558:38    - Unknown word (mkdirat)    -- res = unsafe { libc::mkdirat(fd, path.as_ptr(), mode
./vm/src/stdlib/os.rs:573:8     - Unknown word (mkdirs)     -- fn mkdirs(path: PyStrRef, vm:
./vm/src/stdlib/os.rs:587:8     - Unknown word (listdir)    -- fn listdir(path: OptionalArg<PathOrFd
./vm/src/stdlib/os.rs:684:8     - Unknown word (readlink)   -- fn readlink(path: PyPathLike, dir
./vm/src/stdlib/os.rs:945:26    - Unknown word (structsequence) -- // TODO: unnamed structsequence fields
./vm/src/stdlib/os.rs:979:49    - Unknown word (atimensec)      -- stat.st_atime, stat.st_atimensec);
./vm/src/stdlib/os.rs:980:49    - Unknown word (mtimensec)      -- stat.st_mtime, stat.st_mtimensec);
./vm/src/stdlib/os.rs:981:49    - Unknown word (ctimensec)      -- stat.st_ctime, stat.st_ctimensec);
./vm/src/stdlib/os.rs:985:34    - Unknown word (atim)           -- atime = (stat.st_atim.tv_sec, stat.st_atim
./vm/src/stdlib/os.rs:986:34    - Unknown word (mtim)           -- mtime = (stat.st_mtim.tv_sec, stat.st_mtim
./vm/src/stdlib/os.rs:987:34    - Unknown word (ctim)           -- ctime = (stat.st_ctim.tv_sec, stat.st_ctim
./vm/src/stdlib/posix.rs:1051:17   - Unknown word (ruid)         -- fn setreuid(ruid: Option<Uid>, euid:
./vm/src/stdlib/posix.rs:1087:8    - Unknown word (openpty)      -- fn openpty(vm: &VirtualMachine
./vm/src/stdlib/posix.rs:1150:17   - Unknown word (rgid)         -- let mut rgid = 0;
./vm/src/stdlib/posix.rs:1152:17   - Unknown word (sgid)         -- let mut sgid = 0;
./vm/src/stdlib/posix.rs:1333:64   - Unknown word (addopen)      -- posix_spawn_file_actions_addopen(
./vm/src/stdlib/posix.rs:1345:64   - Unknown word (addclose)     -- posix_spawn_file_actions_addclose(&mut file_actions, fd
./vm/src/stdlib/posix.rs:1351:64   - Unknown word (adddup)       -- posix_spawn_file_actions_adddup2(&mut file_actions,
./vm/src/stdlib/posix.rs:1363:21   - Unknown word (attrp)        -- let mut attrp = unsafe {
./vm/src/stdlib/posix.rs:1365:37   - Unknown word (spawnattr)    -- assert!(libc::posix_spawnattr_init(sa.as_mut_ptr(
./vm/src/stdlib/posix.rs:1379:52   - Unknown word (setsigdefault) -- libc::posix_spawnattr_setsigdefault(&mut attrp, set.as_ref
./vm/src/stdlib/posix.rs:1449:8    - Unknown word (wifsignaled)   -- fn wifsignaled(status: i32) -> bool
./vm/src/stdlib/posix.rs:1453:8    - Unknown word (wifstopped)    -- fn wifstopped(status: i32) -> bool
./vm/src/stdlib/posix.rs:1457:8    - Unknown word (wifexited)     -- fn wifexited(status: i32) -> bool
./vm/src/stdlib/posix.rs:1461:8    - Unknown word (wtermsig)      -- fn wtermsig(status: i32) -> i32
./vm/src/stdlib/posix.rs:1465:8    - Unknown word (wstopsig)      -- fn wstopsig(status: i32) -> i32
./vm/src/stdlib/posix.rs:1469:8    - Unknown word (wexitstatus)   -- fn wexitstatus(status: i32) -> i32
./vm/src/stdlib/posix.rs:1503:65   - Unknown word (winsize)       -- libc::TIOCGWINSZ, libc::winsize);
./vm/src/stdlib/posix.rs:1507:20   - Unknown word (xpixel)        -- ws_xpixel: 0,
./vm/src/stdlib/posix.rs:1508:20   - Unknown word (ypixel)        -- ws_ypixel: 0,
./vm/src/stdlib/posix.rs:1517:13   - Unknown word (libstd)        -- // from libstd:
./vm/src/stdlib/posix.rs:1524:42   - Unknown word (copyfile)      -- mut libc::c_void, // copyfile_state_t (unused)
./vm/src/stdlib/posix.rs:1598:28   - Unknown word (cuserid)       -- // function or to `cuserid()`. See man getlogin
./vm/src/stdlib/posix.rs:161:35    - Unknown word (Posix)      -- POSIX_SPAWN_OPEN: i32 = PosixSpawnFileActionIdentifier
./vm/src/stdlib/posix.rs:1654:13   - Unknown word (retval)        -- let retval = unsafe { libc::getpriority
./vm/src/stdlib/posix.rs:1686:40   - Unknown word (Pathconf)      -- s.as_str().parse::<PathconfVar>().map_err(|_| {
./vm/src/stdlib/posix.rs:1919:8    - Unknown word (sendfile)      -- fn sendfile(args: SendFileArgs,
./vm/src/stdlib/posix.rs:324:26    - Unknown word (symlinkat)  -- nix::unistd::symlinkat(&*src, args.dir_fd.get
./vm/src/stdlib/posix.rs:386:26    - Unknown word (Fchownat)   -- nix::unistd::FchownatFlags::FollowSymlink
./vm/src/stdlib/posix.rs:433:12    - Unknown word (Mknod)      -- struct MknodArgs {
./vm/src/stdlib/posix.rs:505:8     - Unknown word (sched)      -- fn sched_get_priority_max(policy
./vm/src/stdlib/posix.rs:533:12    - Unknown word (Sched)      -- struct SchedParam {
./vm/src/stdlib/posix.rs:622:17    - Unknown word (Setscheduler) -- struct SchedSetschedulerArgs {
./vm/src/stdlib/posix.rs:6:75      - Unknown word (Fcntl)      -- fcntl::fcntl(fd, fcntl::FcntlArg::F_GETFD)?);
./vm/src/stdlib/posix.rs:766:13    - Unknown word (oflags)       -- let oflags = fcntl::OFlag::from
./vm/src/stdlib/posix.rs:844:8     - Unknown word (lchmod)       -- fn lchmod(path: PyPathLike, mode
./vm/src/stdlib/posix.rs:927:13    - Unknown word (ppid)         -- let ppid = unistd::getppid()
./vm/src/stdlib/posix.rs:939:13    - Unknown word (egid)         -- let egid = unistd::getegid()
./vm/src/stdlib/posix.rs:945:13    - Unknown word (pgid)         -- let pgid =
./vm/src/stdlib/posix.rs:971:13    - Unknown word (euid)         -- let euid = unistd::geteuid()
./vm/src/stdlib/posix_compat.rs:26:12     - Unknown word (unimpl)     -- os_unimpl("os.access", vm)
./vm/src/stdlib/pwd.rs:105:24    - Unknown word (endpwent)   -- unsafe { libc::endpwent() };
./vm/src/stdlib/pwd.rs:37:17     - Unknown word (pathbuf)    -- let pathbuf_lossy = |p: std::path
./vm/src/stdlib/pwd.rs:72:8      - Unknown word (getpwuid)   -- fn getpwuid(uid: PyIntRef, vm:
./vm/src/stdlib/pwd.rs:94:12     - Unknown word (setpwent)   -- // setpwent, getpwent, etc are not
./vm/src/stdlib/pwd.rs:94:22     - Unknown word (getpwent)   -- // setpwent, getpwent, etc are not thread
./vm/src/stdlib/pwd.rs:94:67     - Unknown word (fgetpwent)  -- thread safe. Could use fgetpwent_r, but this is easier
./vm/src/stdlib/signal.rs:106:69    - Unknown word (sigint)     -- expect("Failed to set sigint handler");
./vm/src/stdlib/signal.rs:150:8     - Unknown word (getsignal)  -- fn getsignal(signalnum: i32, vm:
./vm/src/stdlib/signal.rs:190:12    - Unknown word (wakeup)     -- fn set_wakeup_fd(args: SetWakeupFdArgs
./vm/src/stdlib/signal.rs:22:18     - Unknown word (Wakeup)     -- type WakeupFd = libc::SOCKET;
./vm/src/stdlib/signal.rs:261:17    - Unknown word (sigbyte)    -- let sigbyte = signum as u8;
./vm/src/stdlib/sre.rs:174:12    - Unknown word (pymatch)     -- fn pymatch(
./vm/src/stdlib/sre.rs:195:12    - Unknown word (fullmatch)   -- fn fullmatch(
./vm/src/stdlib/sre.rs:236:25    - Unknown word (matchlist)   -- let mut matchlist: Vec<PyObjectRef> =
./vm/src/stdlib/sre.rs:258:12    - Unknown word (finditer)    -- fn finditer(
./vm/src/stdlib/sre.rs:311:25    - Unknown word (splitlist)   -- let mut splitlist: Vec<PyObjectRef> =
./vm/src/stdlib/sre.rs:33:8      - Unknown word (getcodesize) -- fn getcodesize() -> usize {
./vm/src/stdlib/sre.rs:434:25    - Unknown word (sublist)     -- let mut sublist: Vec<PyObjectRef> =
./vm/src/stdlib/sre.rs:685:12    - Unknown word (groupdict)   -- fn groupdict(
./vm/src/stdlib/sys.rs:261:9     - Unknown word (xoptions)   -- fn _xoptions(vm: &VirtualMachine
./vm/src/stdlib/sys.rs:275:8     - Unknown word (warnoptions) -- fn warnoptions(vm: &VirtualMachine
./vm/src/stdlib/sys.rs:362:14    - Unknown word (modulepath)  -- let (modulepath, attrname) = if last
./vm/src/stdlib/sys.rs:413:8     - Unknown word (getrecursionlimit) -- fn getrecursionlimit(vm: &VirtualMachine
./vm/src/stdlib/sys.rs:442:8     - Unknown word (getprofile)        -- fn getprofile(vm: &VirtualMachine
./vm/src/stdlib/sys.rs:458:8     - Unknown word (gettrace)          -- fn gettrace(vm: &VirtualMachine
./vm/src/stdlib/sys.rs:468:13    - Unknown word (sysinfoapi)        -- sysinfoapi::GetVersionExW,
./vm/src/stdlib/sys.rs:477:17    - Unknown word (osvi)              -- let osvi = &mut version as LPOSVERSION
./vm/src/stdlib/sys.rs:600:19    - Unknown word (profilefunc)       -- fn setprofile(profilefunc: PyObjectRef, vm: &VirtualMac
./vm/src/stdlib/sys.rs:600:8     - Unknown word (setprofile)        -- fn setprofile(profilefunc: PyObjectRef
./vm/src/stdlib/sys.rs:628:8     - Unknown word (settrace)          -- fn settrace(tracefunc: PyObjectRef
./vm/src/stdlib/thread.rs:297:25    - Unknown word (sents)      -- SENTINELS.with(|sents| {
./vm/src/stdlib/thread.rs:348:12    - Unknown word (ldict)      -- fn ldict(&self, vm: &VirtualMachine
./vm/src/stdlib/time.rs:132:21    - Unknown word (nsecs)      -- let nsecs = (float.fract() *
./vm/src/stdlib/time.rs:143:25    - Unknown word (localtime)  -- /// Construct a localtime from the optional seconds
./vm/src/stdlib/time.rs:196:8     - Unknown word (asctime)    -- fn asctime(t: OptionalArg<PyStructTime
./vm/src/stdlib/time.rs:209:8     - Unknown word (strftime)   -- fn strftime(format: PyStrRef, t
./vm/src/stdlib/time.rs:216:8     - Unknown word (strptime)   -- fn strptime(
./vm/src/stdlib/time.rs:252:24    - Unknown word (muldiv)     -- pub(super) fn time_muldiv(ticks: i64, mul: i6
./vm/src/stdlib/time.rs:29:19     - Unknown word (Timelike)   -- Datelike, Timelike,
./vm/src/stdlib/time.rs:29:9      - Unknown word (Datelike)   -- Datelike, Timelike,
./vm/src/stdlib/time.rs:372:55    - Unknown word (basetype)   -- because this is not a basetype
./vm/src/stdlib/time.rs:586:34    - Unknown word (nanosleep)  -- res = unsafe { libc::nanosleep(&ts, &mut ts) };
./vm/src/stdlib/time.rs:615:48    - Unknown word (gethrvtime) -- nanos(unsafe { libc::gethrvtime() }))
./vm/src/stdlib/time.rs:680:21    - Unknown word (profileapi) -- use winapi::um::profileapi::{QueryPerformanceCounter
./vm/src/stdlib/time.rs:683:17    - Unknown word (filetime)   -- fn u64_from_filetime(time: FILETIME) -> u
./vm/src/stdlib/time.rs:821:13    - Unknown word (ktime)      -- let ktime = u64_from_filetime
./vm/src/stdlib/winapi.rs:213:22    - Unknown word (getenvironment) -- .map(|m| getenvironment(m, vm))
./vm/src/stdlib/winapi.rs:217:17    - Unknown word (attrlist)       -- let mut attrlist =
./vm/src/stdlib/winapi.rs:218:13    - Unknown word (getattributelist) -- getattributelist(args.startup_info.get
./vm/src/stdlib/winapi.rs:242:13    - Unknown word (procinfo)         -- let procinfo = unsafe {
./vm/src/stdlib/winapi.rs:307:9     - Unknown word (handlelist)       -- handlelist: Option<Vec<usize>>
./vm/src/stdlib/winapi.rs:39:13     - Unknown word (minwinbase) -- minwinbase::STILL_ACTIVE,
./vm/src/stdlib/winapi.rs:412:14    - Unknown word (ctypes)           -- // TODO: ctypes.LibraryLoader.LoadLibrary
./vm/src/stdlib/winapi.rs:69:8      - Unknown word (husize)     -- fn husize(h: HANDLE) -> usize
./vm/src/stdlib/winreg.rs:127:32    - Unknown word (hkey)       -- Self::Constant(hkey) => {
./vm/src/stdlib/winreg.rs:193:24    - Unknown word (regval)     -- .and_then(|regval| {
./vm/src/stdlib/winreg.rs:195:33    - Unknown word (vtype)      -- let ty = regval.vtype.clone() as usize;
./vm/src/stdlib/winreg.rs:55:42     - Unknown word (HKEY)       -- = "winreg", name = "HKEYType")]
./vm/src/stdlib/winreg.rs:57:14     - Unknown word (Hkey)       -- struct PyHkey {
./vm/src/stdlib/winreg.rs:85:36     - Unknown word (predef)     -- let null_key = RegKey::predef(0 as ::winreg::HKEY
./vm/src/types/slot.rs:48:37     - Unknown word (Getattro)   -- getattro: AtomicCell<Option<GetattroFunc>>,
./vm/src/types/slot.rs:49:37     - Unknown word (Setattro)   -- setattro: AtomicCell<Option<SetattroFunc>>,
./vm/src/vm/compile.rs:32:17     - Unknown word (runpy)      -- let runpy = self.import("runpy
./vm/src/vm/context.rs:129:7     - Unknown word (idiv)       -- __idiv__,
./vm/src/vm/context.rs:178:7     - Unknown word (rdiv)       -- __rdiv__,
./vm/src/vm/context.rs:46:66     - Unknown word (strs)       -- str in here, no non-strs and no subclasses
./vm/src/vm/mod.rs:221:13    - Unknown word (getregentry) -- let getregentry = encoding_module.get
./vm/src/vm/mod.rs:534:29    - Unknown word (pyiter)      -- return self.map_pyiter(value, func);
./vm/src/vm/setting.rs:40:10     - Unknown word (Xfoo)       -- /// -Xfoo[=bar]
./vm/src/vm/setting.rs:46:10     - Unknown word (Xdev)       -- /// -Xdev
./vm/src/vm/setting.rs:52:10     - Unknown word (Wfoo)       -- /// -Wfoo
./vm/src/vm/thread.rs:38:24     - Unknown word (intp)       -- let vm_owns_obj = |intp: NonNull<VirtualMachine
./vm/src/vm/vm_new.rs:60:27     - Unknown word (costructor) -- // TODO: this costructor might be invalid, because
./wasm/README.md:1:16      - Unknown word (webassembly) -- # Compiling to webassembly
./wasm/demo/package.json:33:21     - Unknown word (Liddle)     -- "author": "Ryan Liddle",
./wasm/demo/package.json:7:10      - Unknown word (codemirror) -- "codemirror": "^5.42.0",
./wasm/demo/snippets/asyncbrowser.py:2:8       - Unknown word (asyncweb)   -- import asyncweb
./wasm/demo/snippets/import_pypi.py:19:5      - Unknown word (fmter)      -- fmter = pygments.formatters
./wasm/demo/snippets/import_pypi.py:19:52     - Unknown word (noclasses)  -- formatters.html.HtmlFormatter(noclasses=True, style="default
./wasm/demo/snippets/import_pypi.py:2:8       - Unknown word (whlimport)  -- import whlimport
./wasm/demo/snippets/mandelbrot.py:4:5       - Unknown word (mandel)     -- def mandel():
./wasm/lib/Cargo.toml:11:16     - Unknown word (cdylib)     -- crate-type = ["cdylib", "rlib"]
./wasm/lib/Cargo.toml:11:26     - Unknown word (rlib)       -- crate-type = ["cdylib", "rlib"]
./wasm/lib/Cargo.toml:28:29     - Unknown word (bingden)    -- parking_lot use wasm-bingden for instant
./wasm/lib/Lib/_microdistlib.py:24:5      - Unknown word (distname)   -- distname = m.groups()[0]
./wasm/lib/Lib/asyncweb.py:204:18    - Unknown word (jsclosure)  -- @browser.jsclosure_once
./wasm/lib/Lib/asyncweb.py:209:47    - Unknown word (jsfloat)    -- cb.detach(), browser.jsfloat(ms))
./wasm/lib/Lib/browser.py:14:6      - Unknown word (jsstr)      -- "jsstr",
./wasm/lib/Lib/whlimport.py:106:13    - Unknown word (zname)        -- for zname, z in cls._packages
./wasm/lib/Lib/whlimport.py:45:9      - Unknown word (urlobj)       -- urlobj = urlparse(pkg)
./wasm/lib/Lib/whlimport.py:65:37     - Unknown word (distlib)      -- VersionMatcher from distlib
./wasm/lib/Lib/whlimport.py:76:53     - Unknown word (packagetype)  -- ver_downloads if dl["packagetype"] == "bdist_wheel")
./wasm/lib/Lib/whlimport.py:9:9       - Unknown word (microdistlib) -- import _microdistlib
./wasm/lib/src/browser_module.rs:32:45     - Unknown word (Unkown)     -- Err(vm.new_type_error("Unkown fetch response_format
./wasm/lib/src/browser_module.rs:85:43     - Unknown word (typeerror)  -- err| convert::js_py_typeerror(vm, err))?;
./wasm/lib/src/convert.rs:117:33    - Unknown word (jsresult)   -- pyresult_to_jsresult(vm, result)
./wasm/lib/src/convert.rs:190:58    - Unknown word (Byffer)     -- if it's not an ArrayByffer it could either be a
./wasm/lib/src/convert.rs:34:9      - Unknown word (jserr)      -- let jserr = vm.try_class("_js
./wasm/lib/src/js_module.rs:29:56     - Unknown word (instanceof) -- lhs, rhs) { return lhs instanceof rhs; }
./wasm/lib/src/js_module.rs:321:29    - Unknown word (pyargs)     -- let mut pyargs = vec![PyJsValue::new
./wasm/lib/src/js_module.rs:349:27    - Unknown word (jsval)      -- .map(|(_, jsval)| jsval.clone())
./wasm/lib/src/js_module.rs:577:62    - Unknown word (awaitpromise) -- non-None value to an awaitpromise".to_owned(),
./wasm/lib/src/js_module.rs:85:17     - Unknown word (jsvalue)    -- fn into_jsvalue(self) -> JsValue {
./wasm/lib/src/vm_class.rs:83:55     - Unknown word (varible)    -- a normal-ish static varible, like Atomic* types
./wasm/notebook/README.md:99:73     - Unknown word (Etherpad)   -- Think Google Doc or Etherpad editing but for code
./wasm/notebook/package.json:9:10      - Unknown word (katex)      -- "katex": "^0.12.0",
./wasm/notebook/snippets/python-js.txt:15:7      - Unknown word (xrightarrow) -- H(t) \xrightarrow{write} \Big[A(t+1),
./wasm/notebook/snippets/python-markdown-math.txt:45:23     - Unknown word (infty)      -- f\relax{x} = \int_{-\infty}^\infty
./wasm/notebook/snippets/python-markdown-math.txt:50:8      - Unknown word (Bmatrix)    -- \begin{Bmatrix}
./wasm/notebook/snippets/python-markdown-math.txt:55:2      - Unknown word (dbinom)     -- \dbinom{n}{k}
./wasm/notebook/snippets/python-markdown-math.txt:67:14     - Unknown word (randint)    -- rnd = random.randint(1,5)
./wasm/notebook/src/index.js:142:5     - Unknown word (pyvm)       -- let pyvm = null;
./wasm/notebook/src/index.js:20:10     - Unknown word (iomd)       -- import { iomdParser } from './parse
./wasm/notebook/src/index.js:232:39    - Unknown word (somthing)   -- each type of chunk, do somthing
./wasm/notebook/src/index.js:9:25      - Unknown word (stex)       -- import 'codemirror/mode/stex/stex';
./wasm/notebook/src/parse.js:19:32     - Unknown word (Iomd)       -- function iomdParser(fullIomd) {
./wasm/notebook/src/process.js:20:21     - Unknown word (Katex)      -- // Render Math with Katex
./wasm/notebook/src/process.js:22:14     - Unknown word (definetly)  -- // TODO: definetly add error handling.
./wasm/tests/conftest.py:23:12     - Unknown word (sessionstart) -- def pytest_sessionstart(session):
./wasm/tests/conftest.py:34:12     - Unknown word (sessionfinish) -- def pytest_sessionfinish(session):
./wasm/tests/conftest.py:92:5      - Unknown word (wdriver)       -- def wdriver(request):
./whats_left.py:348:16    - Unknown word (incompatability) -- def method_incompatability_reason(typ, method_name
./whats_left.py:363:9     - Unknown word (implementeds)    -- not_implementeds = {}
./whats_left.py:386:5     - Unknown word (rustpymods)      -- rustpymods = {mod: dir_of_mod_or
./whats_left.py:397:18    - Unknown word (cpymod)          -- for modname, cpymod in cpymods.items():
./whats_left.py:398:9     - Unknown word (rustpymod)       -- rustpymod = rustpymods.get(modname
./whats_left.py:5:3       - Unknown word (cpymods)    -- # cpymods - a dictionary mapping
./whats_left.py:78:6      - Unknown word (fpectl)     -- "fpectl",
./whats_left.py:81:6      - Unknown word (macpath)    -- "macpath",
./whats_left.py:99:18     - Unknown word (xxsubtype)  -- 'xxmodule', 'xxsubtype', 'xxlimited', '_xxtestfuzz
./whats_left.py:99:31     - Unknown word (xxlimited)  -- xxmodule', 'xxsubtype', 'xxlimited', '_xxtestfuzz'
./whats_left.py:99:45     - Unknown word (xxtestfuzz) -- xxsubtype', 'xxlimited', '_xxtestfuzz'
./whats_left.py:99:6      - Unknown word (xxmodule)   -- 'xxmodule', 'xxsubtype', 'xxlimited

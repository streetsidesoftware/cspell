import type { FileTypeDefinitions } from './types.js';

export const definitions: FileTypeDefinitions = [
    { id: 'ada', extensions: ['.adb', '.ads'] },
    { id: 'apiblueprint', extensions: ['.apib', '.apiblueprint'] },
    { id: 'argdown', extensions: ['.ad', '.adown', '.argdn', '.argdown'] },
    { id: 'asciidoc', extensions: ['.adoc', '.asc', '.asciidoc'] },
    { id: 'bat', extensions: ['.bat', '.cmd'] },
    { id: 'bazel', extensions: ['.bazel', '.bzl'] },
    { id: 'bibtex', extensions: ['.bib'] },
    { id: 'bicep', extensions: ['.bicep'] },
    { id: 'c', extensions: ['.c', '.i'] },
    { id: 'cache_files', extensions: [], filenames: ['.DS_Store', '.cspellcache', '.eslintcache'] },
    { id: 'clojure', extensions: ['.clj', '.cljc', '.cljs', '.cljx', '.clojure', '.edn'] },
    { id: 'cmake', extensions: ['.cmake'], filenames: ['CMakeLists.txt'] },
    { id: 'coffeescript', extensions: ['.coffee', '.cson', '.iced'] },
    {
        id: 'cpp',
        extensions: [
            '.c++',
            '.c++m',
            '.cc',
            '.ccm',
            '.cpp',
            '.cppm',
            '.cxx',
            '.cxxm',
            '.h',
            '.h++',
            '.h.in',
            '.hh',
            '.hpp',
            '.hpp.in',
            '.hxx',
            '.ii',
            '.inl',
            '.ino',
            '.ipp',
            '.ixx',
            '.mm',
            '.tpp',
            '.txx',
        ],
    },
    { id: 'cpp_embedded_latex', extensions: [] },
    { id: 'csharp', extensions: ['.cake', '.cs', '.csx'] },
    { id: 'css', extensions: ['.css'] },
    { id: 'cuda-cpp', extensions: ['.cu', '.cuh'] },
    { id: 'dart', extensions: ['.dart'] },
    { id: 'dhall', extensions: ['.dhall'] },
    { id: 'diff', extensions: ['.diff', '.patch', '.rej'] },
    { id: 'dockercompose', extensions: [], filenames: ['*docker*compose*.yaml', '*docker*compose*.yml', 'compose.*.yaml', 'compose.*.yml', 'compose.yaml', 'compose.yml'] },
    {
        id: 'dockerfile',
        extensions: ['.containerfile', '.dockerfile'],
        filenames: ['*.Dockerfile.*', 'Containerfile', 'Containerfile.*', 'Dockerfile', 'Dockerfile.*', 'Dockerfile.dev', 'dockerfile'],
    },
    { id: 'elisp', extensions: ['.el'] },
    { id: 'elixir', extensions: ['.ex', '.exs'] },
    { id: 'elm', extensions: ['.elm'] },
    { id: 'erb', extensions: ['.erb', '.html.erb', '.rhtml'] },
    { id: 'fsharp', extensions: ['.fs', '.fsi', '.fsscript', '.fsx'] },
    { id: 'git-commit', extensions: [], filenames: ['COMMIT_EDITMSG', 'MERGE_MSG'] },
    { id: 'git-rebase', extensions: [], filenames: ['git-rebase-todo'] },
    { id: 'github-issues', extensions: ['.github-issues'] },
    { id: 'go', extensions: ['.go'] },
    { id: 'godot', extensions: ['.gd', '.godot', '.tres', '.tscn'] },
    { id: 'gradle', extensions: ['.gradle'] },
    { id: 'groovy', extensions: ['.gradle', '.groovy', '.gvy', '.jenkinsfile', '.nf'], filenames: ['Jenkinsfile', 'Jenkinsfile*'] },
    { id: 'haml', extensions: ['.haml'] },
    { id: 'handlebars', extensions: ['.handlebars', '.hbs', '.hjs'] },
    { id: 'haskell', extensions: ['.hs', '.lhs'] },
    { id: 'haxe', extensions: ['.hx'] },
    { id: 'hlsl', extensions: ['.cginc', '.compute', '.fx', '.fxh', '.hlsl', '.hlsli', '.psh', '.vsh'] },
    { id: 'html', extensions: ['.asp', '.aspx', '.ejs', '.htm', '.html', '.jshtm', '.jsp', '.mdoc', '.rhtml', '.shtml', '.volt', '.vue', '.xht', '.xhtml'] },
    { id: 'ignore', extensions: ['.git-blame-ignore-revs', '.gitignore', '.gitignore_global', '.npmignore'], filenames: ['.vscodeignore'] },
    { id: 'ini', extensions: ['.conf', '.ini'] },
    { id: 'jade', extensions: ['.jade', '.pug'] },
    { id: 'java', extensions: ['.jav', '.java'] },
    { id: 'javascript', extensions: ['.cjs', '.es6', '.js', '.mjs', '.pac'], filenames: ['jakefile'] },
    { id: 'javascriptreact', extensions: ['.jsx'] },
    { id: 'jinja', extensions: ['.jinja'] },
    {
        id: 'json',
        extensions: [
            '.babelrc',
            '.bowerrc',
            '.code-profile',
            '.css.map',
            '.eslintrc',
            '.geojson',
            '.har',
            '.ipynb',
            '.js.map',
            '.jscsrc',
            '.jshintrc',
            '.jslintrc',
            '.json',
            '.jsonc',
            '.jsonld',
            '.ts.map',
            '.tsbuildinfo',
            '.vuerc',
            '.webmanifest',
        ],
        filenames: ['.watchmanconfig', 'composer.lock'],
    },
    {
        id: 'jsonc',
        extensions: [
            '.babelrc',
            '.code-workspace',
            '.color-theme.json',
            '.eslintrc',
            '.eslintrc.json',
            '.hintrc',
            '.icon-theme.json',
            '.jsfmtrc',
            '.jshintrc',
            '.jsonc',
            '.language-configuration.json',
            '.swcrc',
        ],
        filenames: [
            '.babelrc.json',
            '.code-workspace',
            '.devcontainer.json',
            '.ember-cli',
            'argv.json',
            'babel.config.json',
            'devcontainer.json',
            'extensions.json',
            'jsconfig-*.json',
            'jsconfig.*.json',
            'jsconfig.json',
            'keybindings.json',
            'launch.json',
            'profiles.json',
            'settings.json',
            'tasks.json',
            'tsconfig-*.json',
            'tsconfig.*.json',
            'tsconfig.json',
            'typedoc.json',
        ],
    },
    { id: 'jsonl', extensions: ['.jsonl'] },
    { id: 'jsx-tags', extensions: [] },
    { id: 'julia', extensions: ['.jl'] },
    { id: 'juliamarkdown', extensions: ['.jmd'] },
    { id: 'jungle', extensions: ['.jungle'] },
    { id: 'kotlin', extensions: ['.kt'] },
    { id: 'latex', extensions: ['.ctx', '.ltx', '.tex'] },
    { id: 'less', extensions: ['.less'] },
    { id: 'lisp', extensions: ['.fasl', '.l', '.lisp', '.lsp'] },
    { id: 'literate haskell', extensions: ['.lhs'] },
    { id: 'lock', extensions: ['.lock'], filenames: ['Cargo.lock', 'berksfile.lock', 'composer.lock', 'package-lock.json'] },
    { id: 'log', extensions: ['.log'], filenames: ['*.log.?'] },
    { id: 'lua', extensions: ['.lua'] },
    { id: 'makefile', extensions: ['.mak', '.mk'], filenames: ['GNUmakefile', 'Makefile', 'OCamlMakefile', 'makefile'] },
    { id: 'map', extensions: ['.map', '.css.map', '.ts.map', '.js.map'] },
    { id: 'markdown', extensions: ['.markdn', '.markdown', '.md', '.mdown', '.mdtext', '.mdtxt', '.mdwn', '.mkd', '.workbook'] },
    { id: 'markdown_latex_combined', extensions: [] },
    { id: 'markdown-math', extensions: [] },
    { id: 'mdx', extensions: ['.mdx'] },
    { id: 'monkeyc', extensions: ['.mb', '.mc'] },
    { id: 'mustache', extensions: ['.mst', '.mu', '.mustache', '.stache'] },
    { id: 'nix', extensions: ['.nix'] },
    { id: 'nunjucks', extensions: ['.nj', '.njk', '.nunj', '.nunjs', '.nunjucks', '.tmpl', '.tpl'] },
    { id: 'objective-c', extensions: ['.m'] },
    { id: 'objective-cpp', extensions: ['.mm'] },
    { id: 'ocaml', extensions: ['.eliom', '.eliomi', '.ml', '.mli', '.mll', '.mly'] },
    { id: 'pdf', extensions: ['.pdf'] },
    { id: 'pem', extensions: ['.pem', '.private-key.pem'] },
    { id: 'pem-private-key', extensions: ['.private-key.pem'] },
    { id: 'perl', extensions: ['.PL', '.pl', '.pm', '.pod', '.psgi', '.t'] },
    { id: 'perl6', extensions: ['.nqp', '.p6', '.pl6', '.pm6'] },
    { id: 'php', extensions: ['.ctp', '.php', '.php4', '.php5', '.phtml'] },
    { id: 'plaintext', extensions: ['.txt'] },
    { id: 'powershell', extensions: ['.ps1', '.psd1', '.psm1', '.psrc', '.pssc'] },
    {
        id: 'properties',
        extensions: ['.cfg', '.conf', '.directory', '.editorconfig', '.gitattributes', '.gitconfig', '.gitmodules', '.npmrc', '.properties', '.repo'],
        filenames: ['.env', 'gitconfig'],
    },
    { id: 'puppet', extensions: ['.puppet'] },
    { id: 'purescript', extensions: ['.purs'] },
    { id: 'python', extensions: ['.cpy', '.gyp', '.gypi', '.ipy', '.py', '.pyi', '.pyt', '.pyw', '.rpy'], filenames: ['SConscript', 'SConstruct'] },
    { id: 'r', extensions: ['.R', '.r', '.rhistory', '.rprofile', '.rt'] },
    { id: 'raku', extensions: ['.nqp', '.p6', '.pl6', '.pm6', '.raku', '.rakudoc', '.rakumod', '.rakutest'] },
    { id: 'razor', extensions: ['.cshtml', '.razor'] },
    { id: 'rescript', extensions: ['.res', '.resi'] },
    { id: 'restructuredtext', extensions: ['.rst'] },
    { id: 'rsa', extensions: ['.pub'], filenames: ['id_rsa', 'id_rsa.pub'] },
    {
        id: 'ruby',
        extensions: ['.erb', '.gemspec', '.podspec', '.rake', '.rb', '.rbi', '.rbx', '.rjs', '.ru'],
        filenames: [
            'Gemfile',
            'appfile',
            'appraisals',
            'berksfile',
            'berksfile.lock',
            'brewfile',
            'capfile',
            'cheffile',
            'dangerfile',
            'deliverfile',
            'fastfile',
            'gemfile',
            'guardfile',
            'gymfile',
            'hobofile',
            'matchfile',
            'podfile',
            'puppetfile',
            'rakefile',
            'rantfile',
            'scanfile',
            'snapfile',
            'thorfile',
            'vagrantfile',
        ],
    },
    { id: 'rust', extensions: ['.rs'] },
    { id: 'sass', extensions: ['.sass'] },
    { id: 'scala', extensions: ['.sbt', '.sc', '.scala'] },
    { id: 'scss', extensions: ['.scss'] },
    { id: 'search-result', extensions: ['.code-search'] },
    { id: 'shaderlab', extensions: ['.cginc', '.shader'] },
    {
        id: 'shellscript',
        extensions: [
            '.Xsession',
            '.bash',
            '.bash_aliases',
            '.bash_login',
            '.bash_logout',
            '.bash_profile',
            '.bashrc',
            '.csh',
            '.cshrc',
            '.ebuild',
            '.eclass',
            '.fish',
            '.install',
            '.ksh',
            '.profile',
            '.sh',
            '.tcshrc',
            '.xprofile',
            '.xsession',
            '.xsessionrc',
            '.yash_profile',
            '.yashrc',
            '.zlogin',
            '.zlogout',
            '.zprofile',
            '.zsh',
            '.zsh-theme',
            '.zshenv',
            '.zshrc',
        ],
        filenames: ['.env.*', '.envrc', '.hushlogin', 'APKBUILD', 'PKGBUILD', 'bashrc_Apple_Terminal', 'zlogin', 'zlogout', 'zprofile', 'zshenv', 'zshrc', 'zshrc_Apple_Terminal'],
    },
    { id: 'snippets', extensions: ['.code-snippets'] },
    { id: 'sql', extensions: ['.dsql', '.sql'] },
    { id: 'stylus', extensions: ['.styl'] },
    { id: 'svelte', extensions: ['.svelte'] },
    { id: 'swift', extensions: ['.swift'] },
    { id: 'terraform', extensions: ['.hcl', '.tf', '.tf.json', '.tfvars'] },
    { id: 'tex', extensions: ['.bbx', '.cbx', '.cls', '.sty'] },
    { id: 'tfvars', extensions: ['.tfvars'], description: 'Terraform Variables' },
    { id: 'todo', extensions: [], filenames: ['todo'] },
    { id: 'toml', extensions: ['.toml'], filenames: ['Cargo.lock', 'Cargo.toml'] },
    { id: 'typescript', extensions: ['.cts', '.mts', '.ts'] },
    { id: 'typescriptreact', extensions: ['.tsx'] },
    { id: 'typst', extensions: ['.typst'] },
    { id: 'vala', extensions: ['.vala'] },
    { id: 'vb', extensions: ['.bas', '.brs', '.vb', '.vba', '.vbs'] },
    { id: 'vue', extensions: ['.vue'] },
    {
        id: 'xml',
        extensions: [
            '.ascx',
            '.atom',
            '.axaml',
            '.axml',
            '.bpmn',
            '.config',
            '.cpt',
            '.csl',
            '.csproj',
            '.csproj.user',
            '.dita',
            '.ditamap',
            '.dtd',
            '.dtml',
            '.ent',
            '.fsproj',
            '.fxml',
            '.iml',
            '.isml',
            '.jmx',
            '.launch',
            '.menu',
            '.mod',
            '.mxml',
            '.nuspec',
            '.opml',
            '.owl',
            '.proj',
            '.props',
            '.pt',
            '.publishsettings',
            '.pubxml',
            '.pubxml.user',
            '.rbxlx',
            '.rbxmx',
            '.rdf',
            '.rng',
            '.rss',
            '.shproj',
            '.storyboard',
            '.svg',
            '.targets',
            '.tld',
            '.tmx',
            '.vbproj',
            '.vbproj.user',
            '.vcxproj',
            '.vcxproj.filters',
            '.wsdl',
            '.wxi',
            '.wxl',
            '.wxs',
            '.xaml',
            '.xbl',
            '.xib',
            '.xlf',
            '.xliff',
            '.xml',
            '.xoml',
            '.xpdl',
            '.xsd',
            '.xul',
        ],
    },
    { id: 'xsl', extensions: ['.xsl', '.xslt'] },
    { id: 'yaml', extensions: ['.cff', '.eyaml', '.eyml', '.yaml', '.yaml-tmlanguage', '.yaml-tmpreferences', '.yaml-tmtheme', '.yml'] },
    { id: 'binary', extensions: ['.bin', '.cur', '.dll', '.eot', '.exe', '.gz', '.lib', '.o', '.obj', '.phar', '.zip'], format: 'Binary' },
    { id: 'dll', extensions: ['.dll'], format: 'Binary' },
    { id: 'exe', extensions: ['.exe'], format: 'Binary' },
    { id: 'fonts', extensions: ['.ttf', '.woff', '.woff2'], format: 'Binary' },
    { id: 'gzip', extensions: ['.gz'], format: 'Binary' },
    {
        id: 'image',
        extensions: ['.bmp', '.exr', '.gif', '.heic', '.ico', '.jpeg', '.jpg', '.pbm', '.pgm', '.png', '.ppm', '.ras', '.sgi', '.tiff', '.webp', '.xbm'],
        format: 'Binary',
        description: 'Some image extensions',
    },
    { id: 'jar', extensions: ['.jar'], format: 'Binary' },
    { id: 'mdb', extensions: ['.mdb'], format: 'Binary', description: 'Microsoft Access DB' },
    { id: 'object-file', extensions: ['.o', '.obj'], format: 'Binary' },
    { id: 'spv', extensions: ['.spv'], format: 'Binary', description: 'SPSS Output Document' },
    { id: 'trie', extensions: ['.trie'], format: 'Binary', description: 'CSpell dictionary file.' },
    { id: 'video', extensions: ['.avi', '.flv', '.mkv', '.mov', '.mp4', '.mpeg', '.mpg', '.wmv'], format: 'Binary' },
    { id: 'webm', extensions: ['.webm'], format: 'Binary', description: 'WebM is an audiovisual media file format.' },
    { id: 'wheel', extensions: ['.whl'], format: 'Binary' },
];

// cspell:ignoreRegExp /id: '.*?'/g
// cspell:ignoreRegExp /extensions: \[[^\]]*?\]/g
// cspell:ignoreRegExp /filenames: \[[^\]]*?\]/g
// cspell:ignore SPSS

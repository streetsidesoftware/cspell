import type { Glob } from '@cspell/cspell-types';
import { describe, expect, test } from 'vitest';

import { extractGlobsFromExcludeFilesGlobMap, generateExclusionFunctionForUri } from './exclusionHelper';

describe('Verify Exclusion Helper functions', () => {
    test('checks extractGlobsFromExcludeFilesGlobMap', () => {
        const excludeDef = {
            '**/node_modules': true,
            '**/typings': true,
        };
        // 'get list of globs'
        expect(extractGlobsFromExcludeFilesGlobMap(excludeDef)).toEqual(['**/node_modules', '**/typings']);
    });

    const excludeGlobs: Glob[] = ['**/node_modules', '**/typings', { glob: '.vscode' }];
    const fnExcludeGlobs = generateExclusionFunctionForUri(excludeGlobs, '/project/myProject');

    test.each`
        uri                                                             | expected
        ${'file:///project/myProject/node_modules'}                     | ${true}
        ${'file:///project/myProject/node_modules/test/test.js'}        | ${true}
        ${'file:///project/myProject/.vscode/cSpell.json'}              | ${true}
        ${'file:///project/myProject/.github/node_modules/cSpell.json'} | ${true}
    `('generated matching function "$uri" expected: $expected', ({ uri, expected }) => {
        expect(fnExcludeGlobs(uri)).toBe(expected);
    });

    test('the generated matching function', () => {
        const globs = ['**/node_modules', '**/typings', '.vscode'];
        const filesMatching = [
            'file:///project/myProject/node_modules',
            'file:///project/myProject/node_modules/test/test.js',
            'file:///project/myProject/.vscode/cSpell.json',
        ];
        const fn = generateExclusionFunctionForUri(globs, '/project/myProject');

        filesMatching.forEach((filepath) => {
            const r = fn(filepath);
            // Path: ${filepath} to not be included.
            expect(r).toBe(true);
        });
    });

    test('the generated matching function for nested projects', () => {
        const globs = ['/**/node_modules', '**/typings', '.vscode'];
        const filesMatching = [
            'file:///User/projects/myProject/node_modules/test/test.js',
            'file:///User/projects/myProject/node_modules/test/test.json',
            'untitled:///User/projects/myProject/node_modules/test/test.js',
        ];
        const fn = generateExclusionFunctionForUri(globs, '/User/projects/myProject/node_modules/test');

        filesMatching.forEach((filepath) => {
            const r = fn(filepath);
            // Path: ${filepath} to not be excluded.
            expect(r).toBe(false);
        });
    });

    test('against generated files', () => {
        const globs = ['debug:/**', '**/*.rendered', 'git-index:/**'];
        const files = [
            'debug://internal/1014/extHostCommands.ts',
            'file:///project/myProject/README.md.rendered',
            'git-index:///projects/myProject/node_modules/test/test.js',
            'git-index:///projects/myProject/node_modules/test/test.json',
        ];

        const fn = generateExclusionFunctionForUri(globs, '/project/myProject');

        files.forEach((filepath) => {
            const r = fn(filepath);
            // Path: ${filepath} to not be included.
            expect(r).toBe(true);
        });
    });

    test('to make sure normal files are loaded', () => {
        const globs = [
            'debug:/**', // Files that are generated while debugging (generally from a .map file)
            'vscode:/**', // VS Code generated files (settings.json for example)
            'private:/**',
            'markdown:/**', // The HTML generated by the markdown previewer
            '**/*.rendered',
            '**/*.*.rendered',
        ];
        const files = ['file:///src/extHostCommands.ts', 'file:///test/test.ts'];

        const fn = generateExclusionFunctionForUri(globs, '/project/myProject');

        files.forEach((filepath) => {
            const r = fn(filepath);
            // Path: ${filepath} to not be excluded.
            expect(r).toBe(false);
        });
    });
});

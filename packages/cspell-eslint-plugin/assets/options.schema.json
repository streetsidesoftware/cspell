{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "definitions": {},
  "properties": {
    "autoFix": {
      "default": false,
      "description": "Automatically fix common mistakes. This is only possible if a single preferred suggestion is available.",
      "type": "boolean"
    },
    "checkComments": {
      "default": true,
      "description": "Spell check comments",
      "type": "boolean"
    },
    "checkIdentifiers": {
      "default": true,
      "description": "Spell check identifiers (variables names, function names, class names, etc.)",
      "type": "boolean"
    },
    "checkJSXText": {
      "default": true,
      "description": "Spell check JSX Text",
      "type": "boolean"
    },
    "checkStringTemplates": {
      "default": true,
      "description": "Spell check template strings",
      "type": "boolean"
    },
    "checkStrings": {
      "default": true,
      "description": "Spell check strings",
      "type": "boolean"
    },
    "cspell": {
      "additionalProperties": false,
      "description": "CSpell options to pass to the spell checker.",
      "properties": {
        "allowCompoundWords": {
          "default": false,
          "description": "True to enable compound word checking. See [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.",
          "type": "boolean"
        },
        "dictionaries": {
          "description": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/) and [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
          "items": {
            "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
            "type": "string"
          },
          "type": "array"
        },
        "dictionaryDefinition": {
          "additionalProperties": false,
          "properties": {
            "description": {
              "description": "Optional description.",
              "type": "string"
            },
            "name": {
              "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
              "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
              "type": "string"
            },
            "noSuggest": {
              "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
              "type": "boolean"
            },
            "path": {
              "description": "Path to the file.",
              "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
              "type": "string"
            },
            "repMap": {
              "description": "Replacement pairs.",
              "items": {
                "items": {
                  "type": "string"
                },
                "maxItems": 2,
                "minItems": 2,
                "type": "array"
              },
              "type": "array"
            },
            "type": {
              "default": "S",
              "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
              "enum": [
                "S",
                "W",
                "C",
                "T"
              ],
              "type": "string"
            },
            "useCompounds": {
              "description": "Use Compounds.",
              "type": "boolean"
            }
          },
          "required": [
            "name",
            "path"
          ],
          "type": "object"
        },
        "enabled": {
          "default": true,
          "description": "Is the spell checker enabled.",
          "type": "boolean"
        },
        "flagWords": {
          "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ignoreRegExpList": {
          "description": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON ```json \"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"] ```\n\nYAML ```yaml ignoreRegExpList:   - >-    /\\b[A-Z]+\\b/g ```\n\nBy default, several patterns are excluded. See [Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are [built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
          "items": {
            "description": "A PatternRef is a Pattern or PatternId.",
            "type": "string"
          },
          "type": "array"
        },
        "ignoreWords": {
          "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "import": {
          "anyOf": [
            {
              "description": "A File System Path. Relative paths are relative to the configuration file.",
              "type": "string"
            },
            {
              "items": {
                "description": "A File System Path. Relative paths are relative to the configuration file.",
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "Allows this configuration to inherit configuration for one or more other files.\n\nSee [Importing / Extending Configuration](https://cspell.org/configuration/imports/) for more details."
        },
        "includeRegExpList": {
          "description": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are [built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
          "items": {
            "description": "A PatternRef is a Pattern or PatternId.",
            "type": "string"
          },
          "type": "array"
        },
        "words": {
          "description": "List of words to be considered correct.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "customWordListFile": {
      "anyOf": [
        {
          "description": "Specify a path to a custom word list file",
          "type": "string"
        },
        {
          "additionalProperties": false,
          "properties": {
            "path": {
              "description": "Path to word list file. File format: 1 word per line",
              "type": "string"
            }
          },
          "required": [
            "path"
          ],
          "type": "object"
        }
      ],
      "description": "Specify a path to a custom word list file.\n\nexample: ```js customWordListFile: \"./myWords.txt\" ```"
    },
    "debugMode": {
      "default": false,
      "description": "Output debug logs",
      "type": "boolean"
    },
    "generateSuggestions": {
      "default": true,
      "description": "Generate suggestions",
      "type": "boolean"
    },
    "ignoreImportProperties": {
      "default": true,
      "description": "Ignore the properties of imported variables, structures, and types.\n\nExample: ``` import { example } from 'third-party';\n\nconst msg = example.property; // `property` is not spell checked. ```",
      "type": "boolean"
    },
    "ignoreImports": {
      "default": true,
      "description": "Ignore import and require names",
      "type": "boolean"
    },
    "numSuggestions": {
      "default": 8,
      "description": "Number of spelling suggestions to make.",
      "type": "number"
    }
  },
  "required": [
    "numSuggestions",
    "generateSuggestions",
    "autoFix"
  ],
  "type": "object"
}
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "definitions": {},
  "properties": {
    "autoFix": {
      "default": false,
      "description": "Automatically fix common mistakes. This is only possible if a single preferred suggestion is available.",
      "type": "boolean"
    },
    "checkComments": {
      "default": true,
      "description": "Spell check comments",
      "type": "boolean"
    },
    "checkIdentifiers": {
      "default": true,
      "description": "Spell check identifiers (variables names, function names, class names, etc.)",
      "type": "boolean"
    },
    "checkJSXText": {
      "default": true,
      "description": "Spell check JSX Text",
      "type": "boolean"
    },
    "checkStringTemplates": {
      "default": true,
      "description": "Spell check template strings",
      "type": "boolean"
    },
    "checkStrings": {
      "default": true,
      "description": "Spell check strings",
      "type": "boolean"
    },
    "cspell": {
      "additionalProperties": false,
      "description": "CSpell options to pass to the spell checker.",
      "properties": {
        "allowCompoundWords": {
          "default": false,
          "description": "True to enable compound word checking. See [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.",
          "type": "boolean"
        },
        "dictionaries": {
          "description": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/) and [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
          "items": {
            "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
            "type": "string"
          },
          "type": "array"
        },
        "dictionaryDefinitions": {
          "description": "Define additional available dictionaries.\n\nFor example, you can use the following to add a custom dictionary:\n\n```json \"dictionaryDefinitions\": [   { \"name\": \"custom-words\", \"path\": \"./custom-words.txt\"} ], \"dictionaries\": [\"custom-words\"] ```",
          "items": {
            "anyOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "description": {
                    "description": "Optional description.",
                    "type": "string"
                  },
                  "name": {
                    "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                    "type": "string"
                  },
                  "noSuggest": {
                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                    "type": "boolean"
                  },
                  "path": {
                    "description": "Path to the file.",
                    "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                    "type": "string"
                  },
                  "repMap": {
                    "description": "Replacement pairs.",
                    "items": {
                      "items": {
                        "type": "string"
                      },
                      "maxItems": 2,
                      "minItems": 2,
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "type": {
                    "default": "S",
                    "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                    "enum": [
                      "S",
                      "W",
                      "C",
                      "T"
                    ],
                    "type": "string"
                  },
                  "useCompounds": {
                    "description": "Use Compounds.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "path"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "description": "For Defining Custom dictionaries. They are generally scoped to a `user`, `workspace`, or `folder`. When `addWords` is true, indicates that the spell checker can add words to the file. Note: only plain text files with one word per line are supported at this moment.",
                "properties": {
                  "addWords": {
                    "description": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Optional description.",
                    "type": "string"
                  },
                  "name": {
                    "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                    "type": "string"
                  },
                  "noSuggest": {
                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                    "type": "boolean"
                  },
                  "path": {
                    "description": "Path to custom dictionary text file.",
                    "type": "string"
                  },
                  "repMap": {
                    "description": "Replacement pairs.",
                    "items": {
                      "items": {
                        "type": "string"
                      },
                      "maxItems": 2,
                      "minItems": 2,
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "scope": {
                    "anyOf": [
                      {
                        "description": "Specifies the scope of a dictionary.",
                        "enum": [
                          "user",
                          "workspace",
                          "folder"
                        ],
                        "type": "string"
                      },
                      {
                        "items": {
                          "description": "Specifies the scope of a dictionary.",
                          "enum": [
                            "user",
                            "workspace",
                            "folder"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "description": "Defines the scope for when words will be added to the dictionary. Scope values: `user`, `workspace`, `folder`."
                  },
                  "type": {
                    "default": "S",
                    "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                    "enum": [
                      "S",
                      "W",
                      "C",
                      "T"
                    ],
                    "type": "string"
                  },
                  "useCompounds": {
                    "description": "Use Compounds.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "addWords",
                  "name",
                  "path"
                ],
                "type": "object"
              },
              {
                "additionalProperties": false,
                "description": "Used to provide extra data related to the dictionary",
                "properties": {
                  "description": {
                    "description": "Optional description.",
                    "type": "string"
                  },
                  "dictionaryInformation": {
                    "additionalProperties": false,
                    "description": "Use by dictionary authors to help improve the quality of suggestions given from the dictionary.\n\nAdded with `v5.16.0`.",
                    "properties": {
                      "accents": {
                        "anyOf": [
                          {
                            "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                            "type": "string"
                          },
                          {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "characters": {
                                  "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                                  "type": "string"
                                },
                                "cost": {
                                  "description": "the cost to insert / delete / replace / swap the characters in a group",
                                  "type": "number"
                                },
                                "penalty": {
                                  "description": "The penalty cost to apply if the accent is used. This is used to discourage",
                                  "type": "number"
                                }
                              },
                              "required": [
                                "characters",
                                "cost"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          }
                        ],
                        "description": "The accent characters.\n\nDefault: `\"\\u0300-\\u0341\"`"
                      },
                      "adjustments": {
                        "description": "A collection of patterns to test against the suggested words. If the word matches the pattern, then the penalty is applied.",
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "description": "Id of the Adjustment, i.e. `short-compound`",
                              "type": "string"
                            },
                            "penalty": {
                              "description": "The amount of penalty to apply.",
                              "type": "number"
                            },
                            "regexp": {
                              "description": "RegExp pattern to match",
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "regexp",
                            "penalty"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "alphabet": {
                        "anyOf": [
                          {
                            "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                            "type": "string"
                          },
                          {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "characters": {
                                  "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                                  "type": "string"
                                },
                                "cost": {
                                  "description": "the cost to insert / delete / replace / swap the characters in a group",
                                  "type": "number"
                                },
                                "penalty": {
                                  "description": "The penalty cost to apply if the accent is used. This is used to discourage",
                                  "type": "number"
                                }
                              },
                              "required": [
                                "characters",
                                "cost"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          }
                        ],
                        "default": "a-zA-Z",
                        "description": "The alphabet to use."
                      },
                      "costs": {
                        "additionalProperties": false,
                        "description": "Define edit costs.",
                        "properties": {
                          "accentCosts": {
                            "default": 1,
                            "description": "The cost to add / remove an accent This should be very cheap, it helps with fixing accent issues.",
                            "type": "number"
                          },
                          "baseCost": {
                            "default": 100,
                            "description": "This is the base cost for making an edit.",
                            "type": "number"
                          },
                          "capsCosts": {
                            "default": 1,
                            "description": "The cost to change capitalization. This should be very cheap, it helps with fixing capitalization issues.",
                            "type": "number"
                          },
                          "firstLetterPenalty": {
                            "default": 4,
                            "description": "The extra cost incurred for changing the first letter of a word. This value should be less than `100 - baseCost`.",
                            "type": "number"
                          },
                          "nonAlphabetCosts": {
                            "default": 110,
                            "description": "This is the cost for characters not in the alphabet.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "hunspellInformation": {
                        "additionalProperties": false,
                        "description": "Used by dictionary authors",
                        "properties": {
                          "aff": {
                            "description": "Selected Hunspell AFF content. The content must be UTF-8\n\nSections:\n- TRY\n- MAP\n- REP\n- KEY\n- ICONV\n- OCONV\n\nExample: ```hunspell # Comment TRY aeistlunkodmrvpgjhäõbüoöfcwzxðqþ` MAP aàâäAÀÂÄ MAP eéèêëEÉÈÊË MAP iîïyIÎÏY MAP oôöOÔÖ MAP (IJ)(Ĳ) ```",
                            "type": "string"
                          },
                          "costs": {
                            "additionalProperties": false,
                            "description": "The costs to apply when using the hunspell settings",
                            "properties": {
                              "accentCosts": {
                                "default": 1,
                                "description": "The cost to add / remove an accent This should be very cheap, it helps with fixing accent issues.",
                                "type": "number"
                              },
                              "baseCost": {
                                "default": 100,
                                "description": "This is the base cost for making an edit.",
                                "type": "number"
                              },
                              "capsCosts": {
                                "default": 1,
                                "description": "The cost to change capitalization. This should be very cheap, it helps with fixing capitalization issues.",
                                "type": "number"
                              },
                              "firstLetterPenalty": {
                                "default": 4,
                                "description": "The extra cost incurred for changing the first letter of a word. This value should be less than `100 - baseCost`.",
                                "type": "number"
                              },
                              "ioConvertCost": {
                                "default": 30,
                                "description": "The cost to convert between convert pairs.\n\nThe value should be slightly higher than the mapCost.",
                                "type": "number"
                              },
                              "keyboardCost": {
                                "default": 99,
                                "description": "The cost of replacing or swapping any adjacent keyboard characters.\n\nThis should be slightly cheaper than `tryCharCost`.",
                                "type": "number"
                              },
                              "mapCost": {
                                "default": 25,
                                "description": "mapSet replacement cost is the cost to substitute one character with another from the same set.\n\nMap characters are considered very similar to each other and are often the cause of simple mistakes.",
                                "type": "number"
                              },
                              "nonAlphabetCosts": {
                                "default": 110,
                                "description": "This is the cost for characters not in the alphabet.",
                                "type": "number"
                              },
                              "replaceCosts": {
                                "default": 75,
                                "description": "The cost to substitute pairs found in the replace settings.",
                                "type": "number"
                              },
                              "tryCharCost": {
                                "description": "The cost of inserting / deleting / or swapping any `tryChars` Defaults to `baseCosts`",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": [
                          "aff"
                        ],
                        "type": "object"
                      },
                      "ignore": {
                        "description": "An optional set of characters that can possibly be removed from a word before checking it.\n\nThis is useful in languages like Arabic where Harakat accents are optional.\n\nNote: All matching characters are removed or none. Partial removal is not supported.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the dictionary. Example: `nl,nl-be`",
                        "type": "string"
                      },
                      "suggestionEditCosts": {
                        "description": "Used in making suggestions. The lower the value, the more likely the suggestion will be near the top of the suggestion list.",
                        "items": {
                          "anyOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "description": {
                                  "description": "A description to describe the purpose of the map.",
                                  "type": "string"
                                },
                                "insDel": {
                                  "description": "The cost to insert/delete one of the substrings in the map. Note: insert/delete costs are symmetrical.",
                                  "type": "number"
                                },
                                "map": {
                                  "description": "The set of substrings to map, these are generally single character strings.\n\nMultiple sets can be defined by using a `|` to separate them.\n\nExample: `\"eéê|aåá\"` contains two different sets.\n\nTo add a multi-character substring use `()`.\n\nExample: `\"f(ph)(gh)\"` results in the following set: `f`, `ph`, `gh`.\n\n- To match the beginning of a word, use `^`: `\"(^I)\"\"`.\n- To match the end of a word, use `$`: `\"(e$)(ing$)\"`.",
                                  "type": "string"
                                },
                                "penalty": {
                                  "description": "Add a penalty to the final cost. This is used to discourage certain suggestions.\n\nExample: ```yaml # Match adding/removing `-` to the end of a word. map: \"$(-$)\" replace: 50 penalty: 100 ```\n\nThis makes adding a `-` to the end of a word more expensive.\n\nThink of it as taking the toll way for speed but getting the bill later.",
                                  "type": "number"
                                },
                                "replace": {
                                  "description": "The cost to replace of of the substrings in the map with another substring in the map. Example: Map['a', 'i'] This would be the cost to substitute `a` with `i`: Like `bat` to `bit` or the reverse.",
                                  "type": "number"
                                },
                                "swap": {
                                  "description": "The cost to swap two adjacent substrings found in the map. Example: Map['e', 'i'] This represents the cost to change `ei` to `ie` or the reverse.",
                                  "type": "number"
                                }
                              },
                              "required": [
                                "map",
                                "replace"
                              ],
                              "type": "object"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "description": {
                                  "description": "A description to describe the purpose of the map.",
                                  "type": "string"
                                },
                                "insDel": {
                                  "description": "The cost to insert/delete one of the substrings in the map. Note: insert/delete costs are symmetrical.",
                                  "type": "number"
                                },
                                "map": {
                                  "description": "The set of substrings to map, these are generally single character strings.\n\nMultiple sets can be defined by using a `|` to separate them.\n\nExample: `\"eéê|aåá\"` contains two different sets.\n\nTo add a multi-character substring use `()`.\n\nExample: `\"f(ph)(gh)\"` results in the following set: `f`, `ph`, `gh`.\n\n- To match the beginning of a word, use `^`: `\"(^I)\"\"`.\n- To match the end of a word, use `$`: `\"(e$)(ing$)\"`.",
                                  "type": "string"
                                },
                                "penalty": {
                                  "description": "Add a penalty to the final cost. This is used to discourage certain suggestions.\n\nExample: ```yaml # Match adding/removing `-` to the end of a word. map: \"$(-$)\" replace: 50 penalty: 100 ```\n\nThis makes adding a `-` to the end of a word more expensive.\n\nThink of it as taking the toll way for speed but getting the bill later.",
                                  "type": "number"
                                },
                                "replace": {
                                  "description": "The cost to replace of of the substrings in the map with another substring in the map. Example: Map['a', 'i'] This would be the cost to substitute `a` with `i`: Like `bat` to `bit` or the reverse.",
                                  "type": "number"
                                },
                                "swap": {
                                  "description": "The cost to swap two adjacent substrings found in the map. Example: Map['e', 'i'] This represents the cost to change `ei` to `ie` or the reverse.",
                                  "type": "number"
                                }
                              },
                              "required": [
                                "insDel",
                                "map"
                              ],
                              "type": "object"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "description": {
                                  "description": "A description to describe the purpose of the map.",
                                  "type": "string"
                                },
                                "insDel": {
                                  "description": "The cost to insert/delete one of the substrings in the map. Note: insert/delete costs are symmetrical.",
                                  "type": "number"
                                },
                                "map": {
                                  "description": "The set of substrings to map, these are generally single character strings.\n\nMultiple sets can be defined by using a `|` to separate them.\n\nExample: `\"eéê|aåá\"` contains two different sets.\n\nTo add a multi-character substring use `()`.\n\nExample: `\"f(ph)(gh)\"` results in the following set: `f`, `ph`, `gh`.\n\n- To match the beginning of a word, use `^`: `\"(^I)\"\"`.\n- To match the end of a word, use `$`: `\"(e$)(ing$)\"`.",
                                  "type": "string"
                                },
                                "penalty": {
                                  "description": "Add a penalty to the final cost. This is used to discourage certain suggestions.\n\nExample: ```yaml # Match adding/removing `-` to the end of a word. map: \"$(-$)\" replace: 50 penalty: 100 ```\n\nThis makes adding a `-` to the end of a word more expensive.\n\nThink of it as taking the toll way for speed but getting the bill later.",
                                  "type": "number"
                                },
                                "replace": {
                                  "description": "The cost to replace of of the substrings in the map with another substring in the map. Example: Map['a', 'i'] This would be the cost to substitute `a` with `i`: Like `bat` to `bit` or the reverse.",
                                  "type": "number"
                                },
                                "swap": {
                                  "description": "The cost to swap two adjacent substrings found in the map. Example: Map['e', 'i'] This represents the cost to change `ei` to `ie` or the reverse.",
                                  "type": "number"
                                }
                              },
                              "required": [
                                "map",
                                "swap"
                              ],
                              "type": "object"
                            }
                          ],
                          "description": "A WeightedMapDef enables setting weights for edits between related characters and substrings.\n\nMultiple groups can be defined using a `|`. A multi-character substring is defined using `()`.\n\nFor example, in some languages, some letters sound alike.\n\n```yaml   map: 'sc(sh)(sch)(ss)|t(tt)' # two groups.   replace: 50    # Make it 1/2 the cost of a normal edit to replace a `t` with `tt`. ```\n\nThe following could be used to make inserting, removing, or replacing vowels cheaper. ```yaml   map: 'aeiouy'   insDel: 50     # Make it is cheaper to insert or delete a vowel.   replace: 45    # It is even cheaper to replace one with another. ```\n\nNote: the default edit distance is 100."
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                    "type": "string"
                  },
                  "noSuggest": {
                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                    "type": "boolean"
                  },
                  "path": {
                    "description": "Path to the file.",
                    "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                    "type": "string"
                  },
                  "repMap": {
                    "description": "Replacement pairs.",
                    "items": {
                      "items": {
                        "type": "string"
                      },
                      "maxItems": 2,
                      "minItems": 2,
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "type": {
                    "default": "S",
                    "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                    "enum": [
                      "S",
                      "W",
                      "C",
                      "T"
                    ],
                    "type": "string"
                  },
                  "useCompounds": {
                    "description": "Use Compounds.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "path"
                ],
                "type": "object"
              },
              {
                "anyOf": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "description": {
                        "description": "Optional description.",
                        "type": "string"
                      },
                      "flagWords": {
                        "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "ignoreWords": {
                        "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "name": {
                        "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                        "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                        "type": "string"
                      },
                      "noSuggest": {
                        "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                        "type": "boolean"
                      },
                      "repMap": {
                        "description": "Replacement pairs.",
                        "items": {
                          "items": {
                            "type": "string"
                          },
                          "maxItems": 2,
                          "minItems": 2,
                          "type": "array"
                        },
                        "type": "array"
                      },
                      "suggestWords": {
                        "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "type": {
                        "default": "S",
                        "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                        "enum": [
                          "S",
                          "W",
                          "C",
                          "T"
                        ],
                        "type": "string"
                      },
                      "useCompounds": {
                        "description": "Use Compounds.",
                        "type": "boolean"
                      },
                      "words": {
                        "description": "List of words to be considered correct.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "name",
                      "words"
                    ],
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "description": {
                        "description": "Optional description.",
                        "type": "string"
                      },
                      "flagWords": {
                        "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "ignoreWords": {
                        "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "name": {
                        "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                        "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                        "type": "string"
                      },
                      "noSuggest": {
                        "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                        "type": "boolean"
                      },
                      "repMap": {
                        "description": "Replacement pairs.",
                        "items": {
                          "items": {
                            "type": "string"
                          },
                          "maxItems": 2,
                          "minItems": 2,
                          "type": "array"
                        },
                        "type": "array"
                      },
                      "suggestWords": {
                        "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "type": {
                        "default": "S",
                        "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                        "enum": [
                          "S",
                          "W",
                          "C",
                          "T"
                        ],
                        "type": "string"
                      },
                      "useCompounds": {
                        "description": "Use Compounds.",
                        "type": "boolean"
                      },
                      "words": {
                        "description": "List of words to be considered correct.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "ignoreWords",
                      "name"
                    ],
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "description": {
                        "description": "Optional description.",
                        "type": "string"
                      },
                      "flagWords": {
                        "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "ignoreWords": {
                        "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "name": {
                        "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                        "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                        "type": "string"
                      },
                      "noSuggest": {
                        "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                        "type": "boolean"
                      },
                      "repMap": {
                        "description": "Replacement pairs.",
                        "items": {
                          "items": {
                            "type": "string"
                          },
                          "maxItems": 2,
                          "minItems": 2,
                          "type": "array"
                        },
                        "type": "array"
                      },
                      "suggestWords": {
                        "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "type": {
                        "default": "S",
                        "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                        "enum": [
                          "S",
                          "W",
                          "C",
                          "T"
                        ],
                        "type": "string"
                      },
                      "useCompounds": {
                        "description": "Use Compounds.",
                        "type": "boolean"
                      },
                      "words": {
                        "description": "List of words to be considered correct.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "flagWords",
                      "name"
                    ],
                    "type": "object"
                  }
                ],
                "description": "Inline Dictionary Definitions"
              },
              {
                "additionalProperties": false,
                "deprecated": true,
                "description": "Only for legacy dictionary definitions.",
                "properties": {
                  "description": {
                    "description": "Optional description.",
                    "type": "string"
                  },
                  "file": {
                    "deprecated": true,
                    "description": "Path to the file, only for legacy dictionary definitions.",
                    "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                    "type": "string"
                  },
                  "name": {
                    "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                    "type": "string"
                  },
                  "noSuggest": {
                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                    "type": "boolean"
                  },
                  "repMap": {
                    "description": "Replacement pairs.",
                    "items": {
                      "items": {
                        "type": "string"
                      },
                      "maxItems": 2,
                      "minItems": 2,
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "type": {
                    "default": "S",
                    "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                    "enum": [
                      "S",
                      "W",
                      "C",
                      "T"
                    ],
                    "type": "string"
                  },
                  "useCompounds": {
                    "description": "Use Compounds.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "file",
                  "name"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        },
        "enableFiletypes": {
          "items": {
            "description": "This can be '*', 'typescript', 'cpp', 'json', etc.",
            "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
            "type": "string"
          },
          "title": "File Types to Check",
          "type": "array",
          "uniqueItems": true
        },
        "flagWords": {
          "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ignoreWords": {
          "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "languageSettings": {
          "description": "Additional settings for individual languages.\n\nSee [Language Settings](https://cspell.org/configuration/language-settings/) for more details.",
          "items": {
            "additionalProperties": false,
            "properties": {
              "allowCompoundWords": {
                "default": false,
                "description": "True to enable compound word checking. See [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.",
                "type": "boolean"
              },
              "caseSensitive": {
                "default": false,
                "description": "Determines if words must match case and accent rules.\n\n- `false` - Case is ignored and accents can be missing on the entire word.   Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                "type": "boolean"
              },
              "description": {
                "description": "Optional description of configuration.",
                "type": "string"
              },
              "dictionaries": {
                "description": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/) and [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                "items": {
                  "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                  "type": "string"
                },
                "type": "array"
              },
              "dictionaryDefinitions": {
                "description": "Define additional available dictionaries.\n\nFor example, you can use the following to add a custom dictionary:\n\n```json \"dictionaryDefinitions\": [   { \"name\": \"custom-words\", \"path\": \"./custom-words.txt\"} ], \"dictionaries\": [\"custom-words\"] ```",
                "items": {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "description": {
                          "description": "Optional description.",
                          "type": "string"
                        },
                        "name": {
                          "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                          "type": "string"
                        },
                        "noSuggest": {
                          "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                          "type": "boolean"
                        },
                        "path": {
                          "description": "Path to the file.",
                          "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                          "type": "string"
                        },
                        "repMap": {
                          "description": "Replacement pairs.",
                          "items": {
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "default": "S",
                          "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                          "enum": [
                            "S",
                            "W",
                            "C",
                            "T"
                          ],
                          "type": "string"
                        },
                        "useCompounds": {
                          "description": "Use Compounds.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "name",
                        "path"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "For Defining Custom dictionaries. They are generally scoped to a `user`, `workspace`, or `folder`. When `addWords` is true, indicates that the spell checker can add words to the file. Note: only plain text files with one word per line are supported at this moment.",
                      "properties": {
                        "addWords": {
                          "description": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                          "type": "boolean"
                        },
                        "description": {
                          "description": "Optional description.",
                          "type": "string"
                        },
                        "name": {
                          "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                          "type": "string"
                        },
                        "noSuggest": {
                          "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                          "type": "boolean"
                        },
                        "path": {
                          "description": "Path to custom dictionary text file.",
                          "type": "string"
                        },
                        "repMap": {
                          "description": "Replacement pairs.",
                          "items": {
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "scope": {
                          "anyOf": [
                            {
                              "description": "Specifies the scope of a dictionary.",
                              "enum": [
                                "user",
                                "workspace",
                                "folder"
                              ],
                              "type": "string"
                            },
                            {
                              "items": {
                                "description": "Specifies the scope of a dictionary.",
                                "enum": [
                                  "user",
                                  "workspace",
                                  "folder"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            }
                          ],
                          "description": "Defines the scope for when words will be added to the dictionary. Scope values: `user`, `workspace`, `folder`."
                        },
                        "type": {
                          "default": "S",
                          "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                          "enum": [
                            "S",
                            "W",
                            "C",
                            "T"
                          ],
                          "type": "string"
                        },
                        "useCompounds": {
                          "description": "Use Compounds.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "addWords",
                        "name",
                        "path"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Used to provide extra data related to the dictionary",
                      "properties": {
                        "description": {
                          "description": "Optional description.",
                          "type": "string"
                        },
                        "dictionaryInformation": {
                          "additionalProperties": false,
                          "description": "Use by dictionary authors to help improve the quality of suggestions given from the dictionary.\n\nAdded with `v5.16.0`.",
                          "properties": {
                            "accents": {
                              "anyOf": [
                                {
                                  "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                                  "type": "string"
                                },
                                {
                                  "items": {
                                    "additionalProperties": false,
                                    "properties": {
                                      "characters": {
                                        "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                                        "type": "string"
                                      },
                                      "cost": {
                                        "description": "the cost to insert / delete / replace / swap the characters in a group",
                                        "type": "number"
                                      },
                                      "penalty": {
                                        "description": "The penalty cost to apply if the accent is used. This is used to discourage",
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "characters",
                                      "cost"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              ],
                              "description": "The accent characters.\n\nDefault: `\"\\u0300-\\u0341\"`"
                            },
                            "adjustments": {
                              "description": "A collection of patterns to test against the suggested words. If the word matches the pattern, then the penalty is applied.",
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "description": "Id of the Adjustment, i.e. `short-compound`",
                                    "type": "string"
                                  },
                                  "penalty": {
                                    "description": "The amount of penalty to apply.",
                                    "type": "number"
                                  },
                                  "regexp": {
                                    "description": "RegExp pattern to match",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "regexp",
                                  "penalty"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "alphabet": {
                              "anyOf": [
                                {
                                  "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                                  "type": "string"
                                },
                                {
                                  "items": {
                                    "additionalProperties": false,
                                    "properties": {
                                      "characters": {
                                        "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                                        "type": "string"
                                      },
                                      "cost": {
                                        "description": "the cost to insert / delete / replace / swap the characters in a group",
                                        "type": "number"
                                      },
                                      "penalty": {
                                        "description": "The penalty cost to apply if the accent is used. This is used to discourage",
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "characters",
                                      "cost"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              ],
                              "default": "a-zA-Z",
                              "description": "The alphabet to use."
                            },
                            "costs": {
                              "additionalProperties": false,
                              "description": "Define edit costs.",
                              "properties": {
                                "accentCosts": {
                                  "default": 1,
                                  "description": "The cost to add / remove an accent This should be very cheap, it helps with fixing accent issues.",
                                  "type": "number"
                                },
                                "baseCost": {
                                  "default": 100,
                                  "description": "This is the base cost for making an edit.",
                                  "type": "number"
                                },
                                "capsCosts": {
                                  "default": 1,
                                  "description": "The cost to change capitalization. This should be very cheap, it helps with fixing capitalization issues.",
                                  "type": "number"
                                },
                                "firstLetterPenalty": {
                                  "default": 4,
                                  "description": "The extra cost incurred for changing the first letter of a word. This value should be less than `100 - baseCost`.",
                                  "type": "number"
                                },
                                "nonAlphabetCosts": {
                                  "default": 110,
                                  "description": "This is the cost for characters not in the alphabet.",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "hunspellInformation": {
                              "additionalProperties": false,
                              "description": "Used by dictionary authors",
                              "properties": {
                                "aff": {
                                  "description": "Selected Hunspell AFF content. The content must be UTF-8\n\nSections:\n- TRY\n- MAP\n- REP\n- KEY\n- ICONV\n- OCONV\n\nExample: ```hunspell # Comment TRY aeistlunkodmrvpgjhäõbüoöfcwzxðqþ` MAP aàâäAÀÂÄ MAP eéèêëEÉÈÊË MAP iîïyIÎÏY MAP oôöOÔÖ MAP (IJ)(Ĳ) ```",
                                  "type": "string"
                                },
                                "costs": {
                                  "additionalProperties": false,
                                  "description": "The costs to apply when using the hunspell settings",
                                  "properties": {
                                    "accentCosts": {
                                      "default": 1,
                                      "description": "The cost to add / remove an accent This should be very cheap, it helps with fixing accent issues.",
                                      "type": "number"
                                    },
                                    "baseCost": {
                                      "default": 100,
                                      "description": "This is the base cost for making an edit.",
                                      "type": "number"
                                    },
                                    "capsCosts": {
                                      "default": 1,
                                      "description": "The cost to change capitalization. This should be very cheap, it helps with fixing capitalization issues.",
                                      "type": "number"
                                    },
                                    "firstLetterPenalty": {
                                      "default": 4,
                                      "description": "The extra cost incurred for changing the first letter of a word. This value should be less than `100 - baseCost`.",
                                      "type": "number"
                                    },
                                    "ioConvertCost": {
                                      "default": 30,
                                      "description": "The cost to convert between convert pairs.\n\nThe value should be slightly higher than the mapCost.",
                                      "type": "number"
                                    },
                                    "keyboardCost": {
                                      "default": 99,
                                      "description": "The cost of replacing or swapping any adjacent keyboard characters.\n\nThis should be slightly cheaper than `tryCharCost`.",
                                      "type": "number"
                                    },
                                    "mapCost": {
                                      "default": 25,
                                      "description": "mapSet replacement cost is the cost to substitute one character with another from the same set.\n\nMap characters are considered very similar to each other and are often the cause of simple mistakes.",
                                      "type": "number"
                                    },
                                    "nonAlphabetCosts": {
                                      "default": 110,
                                      "description": "This is the cost for characters not in the alphabet.",
                                      "type": "number"
                                    },
                                    "replaceCosts": {
                                      "default": 75,
                                      "description": "The cost to substitute pairs found in the replace settings.",
                                      "type": "number"
                                    },
                                    "tryCharCost": {
                                      "description": "The cost of inserting / deleting / or swapping any `tryChars` Defaults to `baseCosts`",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "required": [
                                "aff"
                              ],
                              "type": "object"
                            },
                            "ignore": {
                              "description": "An optional set of characters that can possibly be removed from a word before checking it.\n\nThis is useful in languages like Arabic where Harakat accents are optional.\n\nNote: All matching characters are removed or none. Partial removal is not supported.",
                              "type": "string"
                            },
                            "locale": {
                              "description": "The locale of the dictionary. Example: `nl,nl-be`",
                              "type": "string"
                            },
                            "suggestionEditCosts": {
                              "description": "Used in making suggestions. The lower the value, the more likely the suggestion will be near the top of the suggestion list.",
                              "items": {
                                "anyOf": [
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "description": {
                                        "description": "A description to describe the purpose of the map.",
                                        "type": "string"
                                      },
                                      "insDel": {
                                        "description": "The cost to insert/delete one of the substrings in the map. Note: insert/delete costs are symmetrical.",
                                        "type": "number"
                                      },
                                      "map": {
                                        "description": "The set of substrings to map, these are generally single character strings.\n\nMultiple sets can be defined by using a `|` to separate them.\n\nExample: `\"eéê|aåá\"` contains two different sets.\n\nTo add a multi-character substring use `()`.\n\nExample: `\"f(ph)(gh)\"` results in the following set: `f`, `ph`, `gh`.\n\n- To match the beginning of a word, use `^`: `\"(^I)\"\"`.\n- To match the end of a word, use `$`: `\"(e$)(ing$)\"`.",
                                        "type": "string"
                                      },
                                      "penalty": {
                                        "description": "Add a penalty to the final cost. This is used to discourage certain suggestions.\n\nExample: ```yaml # Match adding/removing `-` to the end of a word. map: \"$(-$)\" replace: 50 penalty: 100 ```\n\nThis makes adding a `-` to the end of a word more expensive.\n\nThink of it as taking the toll way for speed but getting the bill later.",
                                        "type": "number"
                                      },
                                      "replace": {
                                        "description": "The cost to replace of of the substrings in the map with another substring in the map. Example: Map['a', 'i'] This would be the cost to substitute `a` with `i`: Like `bat` to `bit` or the reverse.",
                                        "type": "number"
                                      },
                                      "swap": {
                                        "description": "The cost to swap two adjacent substrings found in the map. Example: Map['e', 'i'] This represents the cost to change `ei` to `ie` or the reverse.",
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "map",
                                      "replace"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "description": {
                                        "description": "A description to describe the purpose of the map.",
                                        "type": "string"
                                      },
                                      "insDel": {
                                        "description": "The cost to insert/delete one of the substrings in the map. Note: insert/delete costs are symmetrical.",
                                        "type": "number"
                                      },
                                      "map": {
                                        "description": "The set of substrings to map, these are generally single character strings.\n\nMultiple sets can be defined by using a `|` to separate them.\n\nExample: `\"eéê|aåá\"` contains two different sets.\n\nTo add a multi-character substring use `()`.\n\nExample: `\"f(ph)(gh)\"` results in the following set: `f`, `ph`, `gh`.\n\n- To match the beginning of a word, use `^`: `\"(^I)\"\"`.\n- To match the end of a word, use `$`: `\"(e$)(ing$)\"`.",
                                        "type": "string"
                                      },
                                      "penalty": {
                                        "description": "Add a penalty to the final cost. This is used to discourage certain suggestions.\n\nExample: ```yaml # Match adding/removing `-` to the end of a word. map: \"$(-$)\" replace: 50 penalty: 100 ```\n\nThis makes adding a `-` to the end of a word more expensive.\n\nThink of it as taking the toll way for speed but getting the bill later.",
                                        "type": "number"
                                      },
                                      "replace": {
                                        "description": "The cost to replace of of the substrings in the map with another substring in the map. Example: Map['a', 'i'] This would be the cost to substitute `a` with `i`: Like `bat` to `bit` or the reverse.",
                                        "type": "number"
                                      },
                                      "swap": {
                                        "description": "The cost to swap two adjacent substrings found in the map. Example: Map['e', 'i'] This represents the cost to change `ei` to `ie` or the reverse.",
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "insDel",
                                      "map"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "description": {
                                        "description": "A description to describe the purpose of the map.",
                                        "type": "string"
                                      },
                                      "insDel": {
                                        "description": "The cost to insert/delete one of the substrings in the map. Note: insert/delete costs are symmetrical.",
                                        "type": "number"
                                      },
                                      "map": {
                                        "description": "The set of substrings to map, these are generally single character strings.\n\nMultiple sets can be defined by using a `|` to separate them.\n\nExample: `\"eéê|aåá\"` contains two different sets.\n\nTo add a multi-character substring use `()`.\n\nExample: `\"f(ph)(gh)\"` results in the following set: `f`, `ph`, `gh`.\n\n- To match the beginning of a word, use `^`: `\"(^I)\"\"`.\n- To match the end of a word, use `$`: `\"(e$)(ing$)\"`.",
                                        "type": "string"
                                      },
                                      "penalty": {
                                        "description": "Add a penalty to the final cost. This is used to discourage certain suggestions.\n\nExample: ```yaml # Match adding/removing `-` to the end of a word. map: \"$(-$)\" replace: 50 penalty: 100 ```\n\nThis makes adding a `-` to the end of a word more expensive.\n\nThink of it as taking the toll way for speed but getting the bill later.",
                                        "type": "number"
                                      },
                                      "replace": {
                                        "description": "The cost to replace of of the substrings in the map with another substring in the map. Example: Map['a', 'i'] This would be the cost to substitute `a` with `i`: Like `bat` to `bit` or the reverse.",
                                        "type": "number"
                                      },
                                      "swap": {
                                        "description": "The cost to swap two adjacent substrings found in the map. Example: Map['e', 'i'] This represents the cost to change `ei` to `ie` or the reverse.",
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "map",
                                      "swap"
                                    ],
                                    "type": "object"
                                  }
                                ],
                                "description": "A WeightedMapDef enables setting weights for edits between related characters and substrings.\n\nMultiple groups can be defined using a `|`. A multi-character substring is defined using `()`.\n\nFor example, in some languages, some letters sound alike.\n\n```yaml   map: 'sc(sh)(sch)(ss)|t(tt)' # two groups.   replace: 50    # Make it 1/2 the cost of a normal edit to replace a `t` with `tt`. ```\n\nThe following could be used to make inserting, removing, or replacing vowels cheaper. ```yaml   map: 'aeiouy'   insDel: 50     # Make it is cheaper to insert or delete a vowel.   replace: 45    # It is even cheaper to replace one with another. ```\n\nNote: the default edit distance is 100."
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "name": {
                          "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                          "type": "string"
                        },
                        "noSuggest": {
                          "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                          "type": "boolean"
                        },
                        "path": {
                          "description": "Path to the file.",
                          "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                          "type": "string"
                        },
                        "repMap": {
                          "description": "Replacement pairs.",
                          "items": {
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "default": "S",
                          "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                          "enum": [
                            "S",
                            "W",
                            "C",
                            "T"
                          ],
                          "type": "string"
                        },
                        "useCompounds": {
                          "description": "Use Compounds.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "name",
                        "path"
                      ],
                      "type": "object"
                    },
                    {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "description": {
                              "description": "Optional description.",
                              "type": "string"
                            },
                            "flagWords": {
                              "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ignoreWords": {
                              "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "name": {
                              "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                              "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                              "type": "string"
                            },
                            "noSuggest": {
                              "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                              "type": "boolean"
                            },
                            "repMap": {
                              "description": "Replacement pairs.",
                              "items": {
                                "items": {
                                  "type": "string"
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "suggestWords": {
                              "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "type": {
                              "default": "S",
                              "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                              "enum": [
                                "S",
                                "W",
                                "C",
                                "T"
                              ],
                              "type": "string"
                            },
                            "useCompounds": {
                              "description": "Use Compounds.",
                              "type": "boolean"
                            },
                            "words": {
                              "description": "List of words to be considered correct.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "name",
                            "words"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "description": {
                              "description": "Optional description.",
                              "type": "string"
                            },
                            "flagWords": {
                              "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ignoreWords": {
                              "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "name": {
                              "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                              "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                              "type": "string"
                            },
                            "noSuggest": {
                              "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                              "type": "boolean"
                            },
                            "repMap": {
                              "description": "Replacement pairs.",
                              "items": {
                                "items": {
                                  "type": "string"
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "suggestWords": {
                              "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "type": {
                              "default": "S",
                              "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                              "enum": [
                                "S",
                                "W",
                                "C",
                                "T"
                              ],
                              "type": "string"
                            },
                            "useCompounds": {
                              "description": "Use Compounds.",
                              "type": "boolean"
                            },
                            "words": {
                              "description": "List of words to be considered correct.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "ignoreWords",
                            "name"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "description": {
                              "description": "Optional description.",
                              "type": "string"
                            },
                            "flagWords": {
                              "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ignoreWords": {
                              "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "name": {
                              "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                              "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                              "type": "string"
                            },
                            "noSuggest": {
                              "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                              "type": "boolean"
                            },
                            "repMap": {
                              "description": "Replacement pairs.",
                              "items": {
                                "items": {
                                  "type": "string"
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "suggestWords": {
                              "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "type": {
                              "default": "S",
                              "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                              "enum": [
                                "S",
                                "W",
                                "C",
                                "T"
                              ],
                              "type": "string"
                            },
                            "useCompounds": {
                              "description": "Use Compounds.",
                              "type": "boolean"
                            },
                            "words": {
                              "description": "List of words to be considered correct.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "flagWords",
                            "name"
                          ],
                          "type": "object"
                        }
                      ],
                      "description": "Inline Dictionary Definitions"
                    },
                    {
                      "additionalProperties": false,
                      "deprecated": true,
                      "description": "Only for legacy dictionary definitions.",
                      "properties": {
                        "description": {
                          "description": "Optional description.",
                          "type": "string"
                        },
                        "file": {
                          "deprecated": true,
                          "description": "Path to the file, only for legacy dictionary definitions.",
                          "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                          "type": "string"
                        },
                        "name": {
                          "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                          "type": "string"
                        },
                        "noSuggest": {
                          "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                          "type": "boolean"
                        },
                        "repMap": {
                          "description": "Replacement pairs.",
                          "items": {
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "default": "S",
                          "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                          "enum": [
                            "S",
                            "W",
                            "C",
                            "T"
                          ],
                          "type": "string"
                        },
                        "useCompounds": {
                          "description": "Use Compounds.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "file",
                        "name"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              "enabled": {
                "default": true,
                "description": "Is the spell checker enabled.",
                "type": "boolean"
              },
              "flagWords": {
                "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "id": {
                "description": "Optional identifier.",
                "type": "string"
              },
              "ignoreRegExpList": {
                "description": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON ```json \"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"] ```\n\nYAML ```yaml ignoreRegExpList:   - >-    /\\b[A-Z]+\\b/g ```\n\nBy default, several patterns are excluded. See [Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are [built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                "items": {
                  "description": "A PatternRef is a Pattern or PatternId.",
                  "type": "string"
                },
                "type": "array"
              },
              "ignoreWords": {
                "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "includeRegExpList": {
                "description": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are [built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                "items": {
                  "description": "A PatternRef is a Pattern or PatternId.",
                  "type": "string"
                },
                "type": "array"
              },
              "languageId": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ],
                "description": "The language id.  Ex: \"typescript\", \"html\", or \"php\".  \"*\" -- will match all languages."
              },
              "local": {
                "anyOf": [
                  {
                    "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                    "type": "string"
                  },
                  {
                    "items": {
                      "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                ],
                "deprecated": true,
                "description": "Deprecated - The locale filter, matches against the language. This can be a comma separated list. \"*\" will match all locales."
              },
              "locale": {
                "anyOf": [
                  {
                    "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                    "type": "string"
                  },
                  {
                    "items": {
                      "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                ],
                "description": "The locale filter, matches against the language. This can be a comma separated list. \"*\" will match all locales."
              },
              "name": {
                "description": "Optional name of configuration.",
                "type": "string"
              },
              "noSuggestDictionaries": {
                "description": "Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.",
                "items": {
                  "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                  "type": "string"
                },
                "type": "array"
              },
              "patterns": {
                "description": "Defines a list of patterns that can be used with the `ignoreRegExpList` and `includeRegExpList` options.\n\nFor example:\n\n```javascript \"ignoreRegExpList\": [\"comments\"], \"patterns\": [   {     \"name\": \"comment-single-line\",     \"pattern\": \"/#.*​/g\"   },   {     \"name\": \"comment-multi-line\",     \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"   },   // You can also combine multiple named patterns into one single named pattern   {     \"name\": \"comments\",     \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]   } ] ```",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "description": "Description of the pattern.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList. It is possible to redefine one of the predefined patterns to override its value.",
                      "type": "string"
                    },
                    "pattern": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "description": "RegExp pattern or array of RegExp patterns."
                    }
                  },
                  "required": [
                    "name",
                    "pattern"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "suggestWords": {
                "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "words": {
                "description": "List of words to be considered correct.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "languageId"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "overrides": {
          "description": "Overrides are used to apply settings for specific files in your project.\n\nFor example:\n\n```javascript \"overrides\": [   // Force `*.hrr` and `*.crr` files to be treated as `cpp` files:   {     \"filename\": \"**​/{*.hrr,*.crr}\",     \"languageId\": \"cpp\"   },   // Force `*.txt` to use the Dutch dictionary (Dutch dictionary needs to be installed separately):   {     \"language\": \"nl\",     \"filename\": \"**​/dutch/**​/*.txt\"   } ] ```",
          "items": {
            "additionalProperties": false,
            "properties": {
              "allowCompoundWords": {
                "default": false,
                "description": "True to enable compound word checking. See [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.",
                "type": "boolean"
              },
              "caseSensitive": {
                "default": false,
                "description": "Determines if words must match case and accent rules.\n\n- `false` - Case is ignored and accents can be missing on the entire word.   Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                "type": "boolean"
              },
              "description": {
                "description": "Optional description of configuration.",
                "type": "string"
              },
              "dictionaries": {
                "description": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/) and [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                "items": {
                  "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                  "type": "string"
                },
                "type": "array"
              },
              "dictionaryDefinitions": {
                "description": "Define additional available dictionaries.\n\nFor example, you can use the following to add a custom dictionary:\n\n```json \"dictionaryDefinitions\": [   { \"name\": \"custom-words\", \"path\": \"./custom-words.txt\"} ], \"dictionaries\": [\"custom-words\"] ```",
                "items": {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "description": {
                          "description": "Optional description.",
                          "type": "string"
                        },
                        "name": {
                          "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                          "type": "string"
                        },
                        "noSuggest": {
                          "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                          "type": "boolean"
                        },
                        "path": {
                          "description": "Path to the file.",
                          "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                          "type": "string"
                        },
                        "repMap": {
                          "description": "Replacement pairs.",
                          "items": {
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "default": "S",
                          "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                          "enum": [
                            "S",
                            "W",
                            "C",
                            "T"
                          ],
                          "type": "string"
                        },
                        "useCompounds": {
                          "description": "Use Compounds.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "name",
                        "path"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "For Defining Custom dictionaries. They are generally scoped to a `user`, `workspace`, or `folder`. When `addWords` is true, indicates that the spell checker can add words to the file. Note: only plain text files with one word per line are supported at this moment.",
                      "properties": {
                        "addWords": {
                          "description": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                          "type": "boolean"
                        },
                        "description": {
                          "description": "Optional description.",
                          "type": "string"
                        },
                        "name": {
                          "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                          "type": "string"
                        },
                        "noSuggest": {
                          "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                          "type": "boolean"
                        },
                        "path": {
                          "description": "Path to custom dictionary text file.",
                          "type": "string"
                        },
                        "repMap": {
                          "description": "Replacement pairs.",
                          "items": {
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "scope": {
                          "anyOf": [
                            {
                              "description": "Specifies the scope of a dictionary.",
                              "enum": [
                                "user",
                                "workspace",
                                "folder"
                              ],
                              "type": "string"
                            },
                            {
                              "items": {
                                "description": "Specifies the scope of a dictionary.",
                                "enum": [
                                  "user",
                                  "workspace",
                                  "folder"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            }
                          ],
                          "description": "Defines the scope for when words will be added to the dictionary. Scope values: `user`, `workspace`, `folder`."
                        },
                        "type": {
                          "default": "S",
                          "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                          "enum": [
                            "S",
                            "W",
                            "C",
                            "T"
                          ],
                          "type": "string"
                        },
                        "useCompounds": {
                          "description": "Use Compounds.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "addWords",
                        "name",
                        "path"
                      ],
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "description": "Used to provide extra data related to the dictionary",
                      "properties": {
                        "description": {
                          "description": "Optional description.",
                          "type": "string"
                        },
                        "dictionaryInformation": {
                          "additionalProperties": false,
                          "description": "Use by dictionary authors to help improve the quality of suggestions given from the dictionary.\n\nAdded with `v5.16.0`.",
                          "properties": {
                            "accents": {
                              "anyOf": [
                                {
                                  "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                                  "type": "string"
                                },
                                {
                                  "items": {
                                    "additionalProperties": false,
                                    "properties": {
                                      "characters": {
                                        "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                                        "type": "string"
                                      },
                                      "cost": {
                                        "description": "the cost to insert / delete / replace / swap the characters in a group",
                                        "type": "number"
                                      },
                                      "penalty": {
                                        "description": "The penalty cost to apply if the accent is used. This is used to discourage",
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "characters",
                                      "cost"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              ],
                              "description": "The accent characters.\n\nDefault: `\"\\u0300-\\u0341\"`"
                            },
                            "adjustments": {
                              "description": "A collection of patterns to test against the suggested words. If the word matches the pattern, then the penalty is applied.",
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "description": "Id of the Adjustment, i.e. `short-compound`",
                                    "type": "string"
                                  },
                                  "penalty": {
                                    "description": "The amount of penalty to apply.",
                                    "type": "number"
                                  },
                                  "regexp": {
                                    "description": "RegExp pattern to match",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "regexp",
                                  "penalty"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "alphabet": {
                              "anyOf": [
                                {
                                  "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                                  "type": "string"
                                },
                                {
                                  "items": {
                                    "additionalProperties": false,
                                    "properties": {
                                      "characters": {
                                        "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                                        "type": "string"
                                      },
                                      "cost": {
                                        "description": "the cost to insert / delete / replace / swap the characters in a group",
                                        "type": "number"
                                      },
                                      "penalty": {
                                        "description": "The penalty cost to apply if the accent is used. This is used to discourage",
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "characters",
                                      "cost"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              ],
                              "default": "a-zA-Z",
                              "description": "The alphabet to use."
                            },
                            "costs": {
                              "additionalProperties": false,
                              "description": "Define edit costs.",
                              "properties": {
                                "accentCosts": {
                                  "default": 1,
                                  "description": "The cost to add / remove an accent This should be very cheap, it helps with fixing accent issues.",
                                  "type": "number"
                                },
                                "baseCost": {
                                  "default": 100,
                                  "description": "This is the base cost for making an edit.",
                                  "type": "number"
                                },
                                "capsCosts": {
                                  "default": 1,
                                  "description": "The cost to change capitalization. This should be very cheap, it helps with fixing capitalization issues.",
                                  "type": "number"
                                },
                                "firstLetterPenalty": {
                                  "default": 4,
                                  "description": "The extra cost incurred for changing the first letter of a word. This value should be less than `100 - baseCost`.",
                                  "type": "number"
                                },
                                "nonAlphabetCosts": {
                                  "default": 110,
                                  "description": "This is the cost for characters not in the alphabet.",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "hunspellInformation": {
                              "additionalProperties": false,
                              "description": "Used by dictionary authors",
                              "properties": {
                                "aff": {
                                  "description": "Selected Hunspell AFF content. The content must be UTF-8\n\nSections:\n- TRY\n- MAP\n- REP\n- KEY\n- ICONV\n- OCONV\n\nExample: ```hunspell # Comment TRY aeistlunkodmrvpgjhäõbüoöfcwzxðqþ` MAP aàâäAÀÂÄ MAP eéèêëEÉÈÊË MAP iîïyIÎÏY MAP oôöOÔÖ MAP (IJ)(Ĳ) ```",
                                  "type": "string"
                                },
                                "costs": {
                                  "additionalProperties": false,
                                  "description": "The costs to apply when using the hunspell settings",
                                  "properties": {
                                    "accentCosts": {
                                      "default": 1,
                                      "description": "The cost to add / remove an accent This should be very cheap, it helps with fixing accent issues.",
                                      "type": "number"
                                    },
                                    "baseCost": {
                                      "default": 100,
                                      "description": "This is the base cost for making an edit.",
                                      "type": "number"
                                    },
                                    "capsCosts": {
                                      "default": 1,
                                      "description": "The cost to change capitalization. This should be very cheap, it helps with fixing capitalization issues.",
                                      "type": "number"
                                    },
                                    "firstLetterPenalty": {
                                      "default": 4,
                                      "description": "The extra cost incurred for changing the first letter of a word. This value should be less than `100 - baseCost`.",
                                      "type": "number"
                                    },
                                    "ioConvertCost": {
                                      "default": 30,
                                      "description": "The cost to convert between convert pairs.\n\nThe value should be slightly higher than the mapCost.",
                                      "type": "number"
                                    },
                                    "keyboardCost": {
                                      "default": 99,
                                      "description": "The cost of replacing or swapping any adjacent keyboard characters.\n\nThis should be slightly cheaper than `tryCharCost`.",
                                      "type": "number"
                                    },
                                    "mapCost": {
                                      "default": 25,
                                      "description": "mapSet replacement cost is the cost to substitute one character with another from the same set.\n\nMap characters are considered very similar to each other and are often the cause of simple mistakes.",
                                      "type": "number"
                                    },
                                    "nonAlphabetCosts": {
                                      "default": 110,
                                      "description": "This is the cost for characters not in the alphabet.",
                                      "type": "number"
                                    },
                                    "replaceCosts": {
                                      "default": 75,
                                      "description": "The cost to substitute pairs found in the replace settings.",
                                      "type": "number"
                                    },
                                    "tryCharCost": {
                                      "description": "The cost of inserting / deleting / or swapping any `tryChars` Defaults to `baseCosts`",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "required": [
                                "aff"
                              ],
                              "type": "object"
                            },
                            "ignore": {
                              "description": "An optional set of characters that can possibly be removed from a word before checking it.\n\nThis is useful in languages like Arabic where Harakat accents are optional.\n\nNote: All matching characters are removed or none. Partial removal is not supported.",
                              "type": "string"
                            },
                            "locale": {
                              "description": "The locale of the dictionary. Example: `nl,nl-be`",
                              "type": "string"
                            },
                            "suggestionEditCosts": {
                              "description": "Used in making suggestions. The lower the value, the more likely the suggestion will be near the top of the suggestion list.",
                              "items": {
                                "anyOf": [
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "description": {
                                        "description": "A description to describe the purpose of the map.",
                                        "type": "string"
                                      },
                                      "insDel": {
                                        "description": "The cost to insert/delete one of the substrings in the map. Note: insert/delete costs are symmetrical.",
                                        "type": "number"
                                      },
                                      "map": {
                                        "description": "The set of substrings to map, these are generally single character strings.\n\nMultiple sets can be defined by using a `|` to separate them.\n\nExample: `\"eéê|aåá\"` contains two different sets.\n\nTo add a multi-character substring use `()`.\n\nExample: `\"f(ph)(gh)\"` results in the following set: `f`, `ph`, `gh`.\n\n- To match the beginning of a word, use `^`: `\"(^I)\"\"`.\n- To match the end of a word, use `$`: `\"(e$)(ing$)\"`.",
                                        "type": "string"
                                      },
                                      "penalty": {
                                        "description": "Add a penalty to the final cost. This is used to discourage certain suggestions.\n\nExample: ```yaml # Match adding/removing `-` to the end of a word. map: \"$(-$)\" replace: 50 penalty: 100 ```\n\nThis makes adding a `-` to the end of a word more expensive.\n\nThink of it as taking the toll way for speed but getting the bill later.",
                                        "type": "number"
                                      },
                                      "replace": {
                                        "description": "The cost to replace of of the substrings in the map with another substring in the map. Example: Map['a', 'i'] This would be the cost to substitute `a` with `i`: Like `bat` to `bit` or the reverse.",
                                        "type": "number"
                                      },
                                      "swap": {
                                        "description": "The cost to swap two adjacent substrings found in the map. Example: Map['e', 'i'] This represents the cost to change `ei` to `ie` or the reverse.",
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "map",
                                      "replace"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "description": {
                                        "description": "A description to describe the purpose of the map.",
                                        "type": "string"
                                      },
                                      "insDel": {
                                        "description": "The cost to insert/delete one of the substrings in the map. Note: insert/delete costs are symmetrical.",
                                        "type": "number"
                                      },
                                      "map": {
                                        "description": "The set of substrings to map, these are generally single character strings.\n\nMultiple sets can be defined by using a `|` to separate them.\n\nExample: `\"eéê|aåá\"` contains two different sets.\n\nTo add a multi-character substring use `()`.\n\nExample: `\"f(ph)(gh)\"` results in the following set: `f`, `ph`, `gh`.\n\n- To match the beginning of a word, use `^`: `\"(^I)\"\"`.\n- To match the end of a word, use `$`: `\"(e$)(ing$)\"`.",
                                        "type": "string"
                                      },
                                      "penalty": {
                                        "description": "Add a penalty to the final cost. This is used to discourage certain suggestions.\n\nExample: ```yaml # Match adding/removing `-` to the end of a word. map: \"$(-$)\" replace: 50 penalty: 100 ```\n\nThis makes adding a `-` to the end of a word more expensive.\n\nThink of it as taking the toll way for speed but getting the bill later.",
                                        "type": "number"
                                      },
                                      "replace": {
                                        "description": "The cost to replace of of the substrings in the map with another substring in the map. Example: Map['a', 'i'] This would be the cost to substitute `a` with `i`: Like `bat` to `bit` or the reverse.",
                                        "type": "number"
                                      },
                                      "swap": {
                                        "description": "The cost to swap two adjacent substrings found in the map. Example: Map['e', 'i'] This represents the cost to change `ei` to `ie` or the reverse.",
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "insDel",
                                      "map"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "description": {
                                        "description": "A description to describe the purpose of the map.",
                                        "type": "string"
                                      },
                                      "insDel": {
                                        "description": "The cost to insert/delete one of the substrings in the map. Note: insert/delete costs are symmetrical.",
                                        "type": "number"
                                      },
                                      "map": {
                                        "description": "The set of substrings to map, these are generally single character strings.\n\nMultiple sets can be defined by using a `|` to separate them.\n\nExample: `\"eéê|aåá\"` contains two different sets.\n\nTo add a multi-character substring use `()`.\n\nExample: `\"f(ph)(gh)\"` results in the following set: `f`, `ph`, `gh`.\n\n- To match the beginning of a word, use `^`: `\"(^I)\"\"`.\n- To match the end of a word, use `$`: `\"(e$)(ing$)\"`.",
                                        "type": "string"
                                      },
                                      "penalty": {
                                        "description": "Add a penalty to the final cost. This is used to discourage certain suggestions.\n\nExample: ```yaml # Match adding/removing `-` to the end of a word. map: \"$(-$)\" replace: 50 penalty: 100 ```\n\nThis makes adding a `-` to the end of a word more expensive.\n\nThink of it as taking the toll way for speed but getting the bill later.",
                                        "type": "number"
                                      },
                                      "replace": {
                                        "description": "The cost to replace of of the substrings in the map with another substring in the map. Example: Map['a', 'i'] This would be the cost to substitute `a` with `i`: Like `bat` to `bit` or the reverse.",
                                        "type": "number"
                                      },
                                      "swap": {
                                        "description": "The cost to swap two adjacent substrings found in the map. Example: Map['e', 'i'] This represents the cost to change `ei` to `ie` or the reverse.",
                                        "type": "number"
                                      }
                                    },
                                    "required": [
                                      "map",
                                      "swap"
                                    ],
                                    "type": "object"
                                  }
                                ],
                                "description": "A WeightedMapDef enables setting weights for edits between related characters and substrings.\n\nMultiple groups can be defined using a `|`. A multi-character substring is defined using `()`.\n\nFor example, in some languages, some letters sound alike.\n\n```yaml   map: 'sc(sh)(sch)(ss)|t(tt)' # two groups.   replace: 50    # Make it 1/2 the cost of a normal edit to replace a `t` with `tt`. ```\n\nThe following could be used to make inserting, removing, or replacing vowels cheaper. ```yaml   map: 'aeiouy'   insDel: 50     # Make it is cheaper to insert or delete a vowel.   replace: 45    # It is even cheaper to replace one with another. ```\n\nNote: the default edit distance is 100."
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "name": {
                          "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                          "type": "string"
                        },
                        "noSuggest": {
                          "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                          "type": "boolean"
                        },
                        "path": {
                          "description": "Path to the file.",
                          "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                          "type": "string"
                        },
                        "repMap": {
                          "description": "Replacement pairs.",
                          "items": {
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "default": "S",
                          "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                          "enum": [
                            "S",
                            "W",
                            "C",
                            "T"
                          ],
                          "type": "string"
                        },
                        "useCompounds": {
                          "description": "Use Compounds.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "name",
                        "path"
                      ],
                      "type": "object"
                    },
                    {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "description": {
                              "description": "Optional description.",
                              "type": "string"
                            },
                            "flagWords": {
                              "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ignoreWords": {
                              "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "name": {
                              "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                              "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                              "type": "string"
                            },
                            "noSuggest": {
                              "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                              "type": "boolean"
                            },
                            "repMap": {
                              "description": "Replacement pairs.",
                              "items": {
                                "items": {
                                  "type": "string"
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "suggestWords": {
                              "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "type": {
                              "default": "S",
                              "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                              "enum": [
                                "S",
                                "W",
                                "C",
                                "T"
                              ],
                              "type": "string"
                            },
                            "useCompounds": {
                              "description": "Use Compounds.",
                              "type": "boolean"
                            },
                            "words": {
                              "description": "List of words to be considered correct.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "name",
                            "words"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "description": {
                              "description": "Optional description.",
                              "type": "string"
                            },
                            "flagWords": {
                              "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ignoreWords": {
                              "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "name": {
                              "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                              "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                              "type": "string"
                            },
                            "noSuggest": {
                              "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                              "type": "boolean"
                            },
                            "repMap": {
                              "description": "Replacement pairs.",
                              "items": {
                                "items": {
                                  "type": "string"
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "suggestWords": {
                              "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "type": {
                              "default": "S",
                              "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                              "enum": [
                                "S",
                                "W",
                                "C",
                                "T"
                              ],
                              "type": "string"
                            },
                            "useCompounds": {
                              "description": "Use Compounds.",
                              "type": "boolean"
                            },
                            "words": {
                              "description": "List of words to be considered correct.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "ignoreWords",
                            "name"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "description": {
                              "description": "Optional description.",
                              "type": "string"
                            },
                            "flagWords": {
                              "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ignoreWords": {
                              "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "name": {
                              "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                              "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                              "type": "string"
                            },
                            "noSuggest": {
                              "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                              "type": "boolean"
                            },
                            "repMap": {
                              "description": "Replacement pairs.",
                              "items": {
                                "items": {
                                  "type": "string"
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "suggestWords": {
                              "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "type": {
                              "default": "S",
                              "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                              "enum": [
                                "S",
                                "W",
                                "C",
                                "T"
                              ],
                              "type": "string"
                            },
                            "useCompounds": {
                              "description": "Use Compounds.",
                              "type": "boolean"
                            },
                            "words": {
                              "description": "List of words to be considered correct.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "flagWords",
                            "name"
                          ],
                          "type": "object"
                        }
                      ],
                      "description": "Inline Dictionary Definitions"
                    },
                    {
                      "additionalProperties": false,
                      "deprecated": true,
                      "description": "Only for legacy dictionary definitions.",
                      "properties": {
                        "description": {
                          "description": "Optional description.",
                          "type": "string"
                        },
                        "file": {
                          "deprecated": true,
                          "description": "Path to the file, only for legacy dictionary definitions.",
                          "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                          "type": "string"
                        },
                        "name": {
                          "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                          "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                          "type": "string"
                        },
                        "noSuggest": {
                          "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                          "type": "boolean"
                        },
                        "repMap": {
                          "description": "Replacement pairs.",
                          "items": {
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "default": "S",
                          "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                          "enum": [
                            "S",
                            "W",
                            "C",
                            "T"
                          ],
                          "type": "string"
                        },
                        "useCompounds": {
                          "description": "Use Compounds.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "file",
                        "name"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              "enableFiletypes": {
                "items": {
                  "description": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                  "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                  "type": "string"
                },
                "title": "File Types to Check",
                "type": "array",
                "uniqueItems": true
              },
              "enabled": {
                "default": true,
                "description": "Is the spell checker enabled.",
                "type": "boolean"
              },
              "enabledLanguageIds": {
                "description": "languageIds for the files to spell check.",
                "items": {
                  "description": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                  "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                  "type": "string"
                },
                "type": "array"
              },
              "filename": {
                "anyOf": [
                  {
                    "description": "These are glob expressions.",
                    "type": "string"
                  },
                  {
                    "items": {
                      "description": "These are glob expressions.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                ],
                "description": "Glob pattern or patterns to match against."
              },
              "flagWords": {
                "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "id": {
                "description": "Optional identifier.",
                "type": "string"
              },
              "ignoreRegExpList": {
                "description": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON ```json \"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"] ```\n\nYAML ```yaml ignoreRegExpList:   - >-    /\\b[A-Z]+\\b/g ```\n\nBy default, several patterns are excluded. See [Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are [built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                "items": {
                  "description": "A PatternRef is a Pattern or PatternId.",
                  "type": "string"
                },
                "type": "array"
              },
              "ignoreWords": {
                "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "includeRegExpList": {
                "description": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are [built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                "items": {
                  "description": "A PatternRef is a Pattern or PatternId.",
                  "type": "string"
                },
                "type": "array"
              },
              "language": {
                "description": "Sets the locale.",
                "type": "string"
              },
              "languageId": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ],
                "description": "Sets the programming language id to match file type."
              },
              "languageSettings": {
                "description": "Additional settings for individual languages.\n\nSee [Language Settings](https://cspell.org/configuration/language-settings/) for more details.",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "allowCompoundWords": {
                      "default": false,
                      "description": "True to enable compound word checking. See [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.",
                      "type": "boolean"
                    },
                    "caseSensitive": {
                      "default": false,
                      "description": "Determines if words must match case and accent rules.\n\n- `false` - Case is ignored and accents can be missing on the entire word.   Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                      "type": "boolean"
                    },
                    "description": {
                      "description": "Optional description of configuration.",
                      "type": "string"
                    },
                    "dictionaries": {
                      "description": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/) and [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                      "items": {
                        "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "dictionaryDefinitions": {
                      "description": "Define additional available dictionaries.\n\nFor example, you can use the following to add a custom dictionary:\n\n```json \"dictionaryDefinitions\": [   { \"name\": \"custom-words\", \"path\": \"./custom-words.txt\"} ], \"dictionaries\": [\"custom-words\"] ```",
                      "items": {
                        "anyOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "description": {
                                "description": "Optional description.",
                                "type": "string"
                              },
                              "name": {
                                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                                "type": "string"
                              },
                              "noSuggest": {
                                "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                                "type": "boolean"
                              },
                              "path": {
                                "description": "Path to the file.",
                                "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                                "type": "string"
                              },
                              "repMap": {
                                "description": "Replacement pairs.",
                                "items": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "maxItems": 2,
                                  "minItems": 2,
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              "type": {
                                "default": "S",
                                "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                                "enum": [
                                  "S",
                                  "W",
                                  "C",
                                  "T"
                                ],
                                "type": "string"
                              },
                              "useCompounds": {
                                "description": "Use Compounds.",
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "name",
                              "path"
                            ],
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "description": "For Defining Custom dictionaries. They are generally scoped to a `user`, `workspace`, or `folder`. When `addWords` is true, indicates that the spell checker can add words to the file. Note: only plain text files with one word per line are supported at this moment.",
                            "properties": {
                              "addWords": {
                                "description": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                                "type": "boolean"
                              },
                              "description": {
                                "description": "Optional description.",
                                "type": "string"
                              },
                              "name": {
                                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                                "type": "string"
                              },
                              "noSuggest": {
                                "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                                "type": "boolean"
                              },
                              "path": {
                                "description": "Path to custom dictionary text file.",
                                "type": "string"
                              },
                              "repMap": {
                                "description": "Replacement pairs.",
                                "items": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "maxItems": 2,
                                  "minItems": 2,
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              "scope": {
                                "anyOf": [
                                  {
                                    "description": "Specifies the scope of a dictionary.",
                                    "enum": [
                                      "user",
                                      "workspace",
                                      "folder"
                                    ],
                                    "type": "string"
                                  },
                                  {
                                    "items": {
                                      "description": "Specifies the scope of a dictionary.",
                                      "enum": [
                                        "user",
                                        "workspace",
                                        "folder"
                                      ],
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                ],
                                "description": "Defines the scope for when words will be added to the dictionary. Scope values: `user`, `workspace`, `folder`."
                              },
                              "type": {
                                "default": "S",
                                "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                                "enum": [
                                  "S",
                                  "W",
                                  "C",
                                  "T"
                                ],
                                "type": "string"
                              },
                              "useCompounds": {
                                "description": "Use Compounds.",
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "addWords",
                              "name",
                              "path"
                            ],
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "description": "Used to provide extra data related to the dictionary",
                            "properties": {
                              "description": {
                                "description": "Optional description.",
                                "type": "string"
                              },
                              "dictionaryInformation": {
                                "additionalProperties": false,
                                "description": "Use by dictionary authors to help improve the quality of suggestions given from the dictionary.\n\nAdded with `v5.16.0`.",
                                "properties": {
                                  "accents": {
                                    "anyOf": [
                                      {
                                        "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                                        "type": "string"
                                      },
                                      {
                                        "items": {
                                          "additionalProperties": false,
                                          "properties": {
                                            "characters": {
                                              "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                                              "type": "string"
                                            },
                                            "cost": {
                                              "description": "the cost to insert / delete / replace / swap the characters in a group",
                                              "type": "number"
                                            },
                                            "penalty": {
                                              "description": "The penalty cost to apply if the accent is used. This is used to discourage",
                                              "type": "number"
                                            }
                                          },
                                          "required": [
                                            "characters",
                                            "cost"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    ],
                                    "description": "The accent characters.\n\nDefault: `\"\\u0300-\\u0341\"`"
                                  },
                                  "adjustments": {
                                    "description": "A collection of patterns to test against the suggested words. If the word matches the pattern, then the penalty is applied.",
                                    "items": {
                                      "additionalProperties": false,
                                      "properties": {
                                        "id": {
                                          "description": "Id of the Adjustment, i.e. `short-compound`",
                                          "type": "string"
                                        },
                                        "penalty": {
                                          "description": "The amount of penalty to apply.",
                                          "type": "number"
                                        },
                                        "regexp": {
                                          "description": "RegExp pattern to match",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "regexp",
                                        "penalty"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "alphabet": {
                                    "anyOf": [
                                      {
                                        "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                                        "type": "string"
                                      },
                                      {
                                        "items": {
                                          "additionalProperties": false,
                                          "properties": {
                                            "characters": {
                                              "description": "This is a set of characters that can include `-` or `|`\n- `-` - indicates a range of characters: `a-c` => `abc`\n- `|` - is a group separator, indicating that the characters on either side    are not related.",
                                              "type": "string"
                                            },
                                            "cost": {
                                              "description": "the cost to insert / delete / replace / swap the characters in a group",
                                              "type": "number"
                                            },
                                            "penalty": {
                                              "description": "The penalty cost to apply if the accent is used. This is used to discourage",
                                              "type": "number"
                                            }
                                          },
                                          "required": [
                                            "characters",
                                            "cost"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    ],
                                    "default": "a-zA-Z",
                                    "description": "The alphabet to use."
                                  },
                                  "costs": {
                                    "additionalProperties": false,
                                    "description": "Define edit costs.",
                                    "properties": {
                                      "accentCosts": {
                                        "default": 1,
                                        "description": "The cost to add / remove an accent This should be very cheap, it helps with fixing accent issues.",
                                        "type": "number"
                                      },
                                      "baseCost": {
                                        "default": 100,
                                        "description": "This is the base cost for making an edit.",
                                        "type": "number"
                                      },
                                      "capsCosts": {
                                        "default": 1,
                                        "description": "The cost to change capitalization. This should be very cheap, it helps with fixing capitalization issues.",
                                        "type": "number"
                                      },
                                      "firstLetterPenalty": {
                                        "default": 4,
                                        "description": "The extra cost incurred for changing the first letter of a word. This value should be less than `100 - baseCost`.",
                                        "type": "number"
                                      },
                                      "nonAlphabetCosts": {
                                        "default": 110,
                                        "description": "This is the cost for characters not in the alphabet.",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "hunspellInformation": {
                                    "additionalProperties": false,
                                    "description": "Used by dictionary authors",
                                    "properties": {
                                      "aff": {
                                        "description": "Selected Hunspell AFF content. The content must be UTF-8\n\nSections:\n- TRY\n- MAP\n- REP\n- KEY\n- ICONV\n- OCONV\n\nExample: ```hunspell # Comment TRY aeistlunkodmrvpgjhäõbüoöfcwzxðqþ` MAP aàâäAÀÂÄ MAP eéèêëEÉÈÊË MAP iîïyIÎÏY MAP oôöOÔÖ MAP (IJ)(Ĳ) ```",
                                        "type": "string"
                                      },
                                      "costs": {
                                        "additionalProperties": false,
                                        "description": "The costs to apply when using the hunspell settings",
                                        "properties": {
                                          "accentCosts": {
                                            "default": 1,
                                            "description": "The cost to add / remove an accent This should be very cheap, it helps with fixing accent issues.",
                                            "type": "number"
                                          },
                                          "baseCost": {
                                            "default": 100,
                                            "description": "This is the base cost for making an edit.",
                                            "type": "number"
                                          },
                                          "capsCosts": {
                                            "default": 1,
                                            "description": "The cost to change capitalization. This should be very cheap, it helps with fixing capitalization issues.",
                                            "type": "number"
                                          },
                                          "firstLetterPenalty": {
                                            "default": 4,
                                            "description": "The extra cost incurred for changing the first letter of a word. This value should be less than `100 - baseCost`.",
                                            "type": "number"
                                          },
                                          "ioConvertCost": {
                                            "default": 30,
                                            "description": "The cost to convert between convert pairs.\n\nThe value should be slightly higher than the mapCost.",
                                            "type": "number"
                                          },
                                          "keyboardCost": {
                                            "default": 99,
                                            "description": "The cost of replacing or swapping any adjacent keyboard characters.\n\nThis should be slightly cheaper than `tryCharCost`.",
                                            "type": "number"
                                          },
                                          "mapCost": {
                                            "default": 25,
                                            "description": "mapSet replacement cost is the cost to substitute one character with another from the same set.\n\nMap characters are considered very similar to each other and are often the cause of simple mistakes.",
                                            "type": "number"
                                          },
                                          "nonAlphabetCosts": {
                                            "default": 110,
                                            "description": "This is the cost for characters not in the alphabet.",
                                            "type": "number"
                                          },
                                          "replaceCosts": {
                                            "default": 75,
                                            "description": "The cost to substitute pairs found in the replace settings.",
                                            "type": "number"
                                          },
                                          "tryCharCost": {
                                            "description": "The cost of inserting / deleting / or swapping any `tryChars` Defaults to `baseCosts`",
                                            "type": "number"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "aff"
                                    ],
                                    "type": "object"
                                  },
                                  "ignore": {
                                    "description": "An optional set of characters that can possibly be removed from a word before checking it.\n\nThis is useful in languages like Arabic where Harakat accents are optional.\n\nNote: All matching characters are removed or none. Partial removal is not supported.",
                                    "type": "string"
                                  },
                                  "locale": {
                                    "description": "The locale of the dictionary. Example: `nl,nl-be`",
                                    "type": "string"
                                  },
                                  "suggestionEditCosts": {
                                    "description": "Used in making suggestions. The lower the value, the more likely the suggestion will be near the top of the suggestion list.",
                                    "items": {
                                      "anyOf": [
                                        {
                                          "additionalProperties": false,
                                          "properties": {
                                            "description": {
                                              "description": "A description to describe the purpose of the map.",
                                              "type": "string"
                                            },
                                            "insDel": {
                                              "description": "The cost to insert/delete one of the substrings in the map. Note: insert/delete costs are symmetrical.",
                                              "type": "number"
                                            },
                                            "map": {
                                              "description": "The set of substrings to map, these are generally single character strings.\n\nMultiple sets can be defined by using a `|` to separate them.\n\nExample: `\"eéê|aåá\"` contains two different sets.\n\nTo add a multi-character substring use `()`.\n\nExample: `\"f(ph)(gh)\"` results in the following set: `f`, `ph`, `gh`.\n\n- To match the beginning of a word, use `^`: `\"(^I)\"\"`.\n- To match the end of a word, use `$`: `\"(e$)(ing$)\"`.",
                                              "type": "string"
                                            },
                                            "penalty": {
                                              "description": "Add a penalty to the final cost. This is used to discourage certain suggestions.\n\nExample: ```yaml # Match adding/removing `-` to the end of a word. map: \"$(-$)\" replace: 50 penalty: 100 ```\n\nThis makes adding a `-` to the end of a word more expensive.\n\nThink of it as taking the toll way for speed but getting the bill later.",
                                              "type": "number"
                                            },
                                            "replace": {
                                              "description": "The cost to replace of of the substrings in the map with another substring in the map. Example: Map['a', 'i'] This would be the cost to substitute `a` with `i`: Like `bat` to `bit` or the reverse.",
                                              "type": "number"
                                            },
                                            "swap": {
                                              "description": "The cost to swap two adjacent substrings found in the map. Example: Map['e', 'i'] This represents the cost to change `ei` to `ie` or the reverse.",
                                              "type": "number"
                                            }
                                          },
                                          "required": [
                                            "map",
                                            "replace"
                                          ],
                                          "type": "object"
                                        },
                                        {
                                          "additionalProperties": false,
                                          "properties": {
                                            "description": {
                                              "description": "A description to describe the purpose of the map.",
                                              "type": "string"
                                            },
                                            "insDel": {
                                              "description": "The cost to insert/delete one of the substrings in the map. Note: insert/delete costs are symmetrical.",
                                              "type": "number"
                                            },
                                            "map": {
                                              "description": "The set of substrings to map, these are generally single character strings.\n\nMultiple sets can be defined by using a `|` to separate them.\n\nExample: `\"eéê|aåá\"` contains two different sets.\n\nTo add a multi-character substring use `()`.\n\nExample: `\"f(ph)(gh)\"` results in the following set: `f`, `ph`, `gh`.\n\n- To match the beginning of a word, use `^`: `\"(^I)\"\"`.\n- To match the end of a word, use `$`: `\"(e$)(ing$)\"`.",
                                              "type": "string"
                                            },
                                            "penalty": {
                                              "description": "Add a penalty to the final cost. This is used to discourage certain suggestions.\n\nExample: ```yaml # Match adding/removing `-` to the end of a word. map: \"$(-$)\" replace: 50 penalty: 100 ```\n\nThis makes adding a `-` to the end of a word more expensive.\n\nThink of it as taking the toll way for speed but getting the bill later.",
                                              "type": "number"
                                            },
                                            "replace": {
                                              "description": "The cost to replace of of the substrings in the map with another substring in the map. Example: Map['a', 'i'] This would be the cost to substitute `a` with `i`: Like `bat` to `bit` or the reverse.",
                                              "type": "number"
                                            },
                                            "swap": {
                                              "description": "The cost to swap two adjacent substrings found in the map. Example: Map['e', 'i'] This represents the cost to change `ei` to `ie` or the reverse.",
                                              "type": "number"
                                            }
                                          },
                                          "required": [
                                            "insDel",
                                            "map"
                                          ],
                                          "type": "object"
                                        },
                                        {
                                          "additionalProperties": false,
                                          "properties": {
                                            "description": {
                                              "description": "A description to describe the purpose of the map.",
                                              "type": "string"
                                            },
                                            "insDel": {
                                              "description": "The cost to insert/delete one of the substrings in the map. Note: insert/delete costs are symmetrical.",
                                              "type": "number"
                                            },
                                            "map": {
                                              "description": "The set of substrings to map, these are generally single character strings.\n\nMultiple sets can be defined by using a `|` to separate them.\n\nExample: `\"eéê|aåá\"` contains two different sets.\n\nTo add a multi-character substring use `()`.\n\nExample: `\"f(ph)(gh)\"` results in the following set: `f`, `ph`, `gh`.\n\n- To match the beginning of a word, use `^`: `\"(^I)\"\"`.\n- To match the end of a word, use `$`: `\"(e$)(ing$)\"`.",
                                              "type": "string"
                                            },
                                            "penalty": {
                                              "description": "Add a penalty to the final cost. This is used to discourage certain suggestions.\n\nExample: ```yaml # Match adding/removing `-` to the end of a word. map: \"$(-$)\" replace: 50 penalty: 100 ```\n\nThis makes adding a `-` to the end of a word more expensive.\n\nThink of it as taking the toll way for speed but getting the bill later.",
                                              "type": "number"
                                            },
                                            "replace": {
                                              "description": "The cost to replace of of the substrings in the map with another substring in the map. Example: Map['a', 'i'] This would be the cost to substitute `a` with `i`: Like `bat` to `bit` or the reverse.",
                                              "type": "number"
                                            },
                                            "swap": {
                                              "description": "The cost to swap two adjacent substrings found in the map. Example: Map['e', 'i'] This represents the cost to change `ei` to `ie` or the reverse.",
                                              "type": "number"
                                            }
                                          },
                                          "required": [
                                            "map",
                                            "swap"
                                          ],
                                          "type": "object"
                                        }
                                      ],
                                      "description": "A WeightedMapDef enables setting weights for edits between related characters and substrings.\n\nMultiple groups can be defined using a `|`. A multi-character substring is defined using `()`.\n\nFor example, in some languages, some letters sound alike.\n\n```yaml   map: 'sc(sh)(sch)(ss)|t(tt)' # two groups.   replace: 50    # Make it 1/2 the cost of a normal edit to replace a `t` with `tt`. ```\n\nThe following could be used to make inserting, removing, or replacing vowels cheaper. ```yaml   map: 'aeiouy'   insDel: 50     # Make it is cheaper to insert or delete a vowel.   replace: 45    # It is even cheaper to replace one with another. ```\n\nNote: the default edit distance is 100."
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              },
                              "name": {
                                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                                "type": "string"
                              },
                              "noSuggest": {
                                "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                                "type": "boolean"
                              },
                              "path": {
                                "description": "Path to the file.",
                                "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                                "type": "string"
                              },
                              "repMap": {
                                "description": "Replacement pairs.",
                                "items": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "maxItems": 2,
                                  "minItems": 2,
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              "type": {
                                "default": "S",
                                "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                                "enum": [
                                  "S",
                                  "W",
                                  "C",
                                  "T"
                                ],
                                "type": "string"
                              },
                              "useCompounds": {
                                "description": "Use Compounds.",
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "name",
                              "path"
                            ],
                            "type": "object"
                          },
                          {
                            "anyOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "description": {
                                    "description": "Optional description.",
                                    "type": "string"
                                  },
                                  "flagWords": {
                                    "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "ignoreWords": {
                                    "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "name": {
                                    "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                                    "type": "string"
                                  },
                                  "noSuggest": {
                                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                                    "type": "boolean"
                                  },
                                  "repMap": {
                                    "description": "Replacement pairs.",
                                    "items": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "maxItems": 2,
                                      "minItems": 2,
                                      "type": "array"
                                    },
                                    "type": "array"
                                  },
                                  "suggestWords": {
                                    "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "type": {
                                    "default": "S",
                                    "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                                    "enum": [
                                      "S",
                                      "W",
                                      "C",
                                      "T"
                                    ],
                                    "type": "string"
                                  },
                                  "useCompounds": {
                                    "description": "Use Compounds.",
                                    "type": "boolean"
                                  },
                                  "words": {
                                    "description": "List of words to be considered correct.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "name",
                                  "words"
                                ],
                                "type": "object"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "description": {
                                    "description": "Optional description.",
                                    "type": "string"
                                  },
                                  "flagWords": {
                                    "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "ignoreWords": {
                                    "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "name": {
                                    "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                                    "type": "string"
                                  },
                                  "noSuggest": {
                                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                                    "type": "boolean"
                                  },
                                  "repMap": {
                                    "description": "Replacement pairs.",
                                    "items": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "maxItems": 2,
                                      "minItems": 2,
                                      "type": "array"
                                    },
                                    "type": "array"
                                  },
                                  "suggestWords": {
                                    "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "type": {
                                    "default": "S",
                                    "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                                    "enum": [
                                      "S",
                                      "W",
                                      "C",
                                      "T"
                                    ],
                                    "type": "string"
                                  },
                                  "useCompounds": {
                                    "description": "Use Compounds.",
                                    "type": "boolean"
                                  },
                                  "words": {
                                    "description": "List of words to be considered correct.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "ignoreWords",
                                  "name"
                                ],
                                "type": "object"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "description": {
                                    "description": "Optional description.",
                                    "type": "string"
                                  },
                                  "flagWords": {
                                    "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "ignoreWords": {
                                    "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "name": {
                                    "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                                    "type": "string"
                                  },
                                  "noSuggest": {
                                    "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                                    "type": "boolean"
                                  },
                                  "repMap": {
                                    "description": "Replacement pairs.",
                                    "items": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "maxItems": 2,
                                      "minItems": 2,
                                      "type": "array"
                                    },
                                    "type": "array"
                                  },
                                  "suggestWords": {
                                    "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "type": {
                                    "default": "S",
                                    "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                                    "enum": [
                                      "S",
                                      "W",
                                      "C",
                                      "T"
                                    ],
                                    "type": "string"
                                  },
                                  "useCompounds": {
                                    "description": "Use Compounds.",
                                    "type": "boolean"
                                  },
                                  "words": {
                                    "description": "List of words to be considered correct.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "flagWords",
                                  "name"
                                ],
                                "type": "object"
                              }
                            ],
                            "description": "Inline Dictionary Definitions"
                          },
                          {
                            "additionalProperties": false,
                            "deprecated": true,
                            "description": "Only for legacy dictionary definitions.",
                            "properties": {
                              "description": {
                                "description": "Optional description.",
                                "type": "string"
                              },
                              "file": {
                                "deprecated": true,
                                "description": "Path to the file, only for legacy dictionary definitions.",
                                "pattern": "^.*\\.(?:txt|trie)(?:\\.gz)?$",
                                "type": "string"
                              },
                              "name": {
                                "description": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                                "type": "string"
                              },
                              "noSuggest": {
                                "description": "Indicate that suggestions should not come from this dictionary. Words in this dictionary are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in this dictionary, it will be removed from the set of possible suggestions.",
                                "type": "boolean"
                              },
                              "repMap": {
                                "description": "Replacement pairs.",
                                "items": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "maxItems": 2,
                                  "minItems": 2,
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              "type": {
                                "default": "S",
                                "description": "Type of file: S - single word per line, W - each line can contain one or more words separated by space, C - each line is treated like code (Camel Case is allowed). Default is S. C is the slowest to load due to the need to split each line based upon code splitting rules.",
                                "enum": [
                                  "S",
                                  "W",
                                  "C",
                                  "T"
                                ],
                                "type": "string"
                              },
                              "useCompounds": {
                                "description": "Use Compounds.",
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "file",
                              "name"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "enabled": {
                      "default": true,
                      "description": "Is the spell checker enabled.",
                      "type": "boolean"
                    },
                    "flagWords": {
                      "description": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample: ```ts \"flagWords\": [   \"color: colour\",   \"incase: in case, encase\",   \"canot->cannot\",   \"cancelled->canceled\" ] ```",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "id": {
                      "description": "Optional identifier.",
                      "type": "string"
                    },
                    "ignoreRegExpList": {
                      "description": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON ```json \"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"] ```\n\nYAML ```yaml ignoreRegExpList:   - >-    /\\b[A-Z]+\\b/g ```\n\nBy default, several patterns are excluded. See [Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are [built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                      "items": {
                        "description": "A PatternRef is a Pattern or PatternId.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "ignoreWords": {
                      "description": "List of words to be ignored. An ignored word will not show up as an error, even if it is also in the `flagWords`.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "includeRegExpList": {
                      "description": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are [built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                      "items": {
                        "description": "A PatternRef is a Pattern or PatternId.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "languageId": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "description": "The language id.  Ex: \"typescript\", \"html\", or \"php\".  \"*\" -- will match all languages."
                    },
                    "local": {
                      "anyOf": [
                        {
                          "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                          "type": "string"
                        },
                        {
                          "items": {
                            "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "deprecated": true,
                      "description": "Deprecated - The locale filter, matches against the language. This can be a comma separated list. \"*\" will match all locales."
                    },
                    "locale": {
                      "anyOf": [
                        {
                          "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                          "type": "string"
                        },
                        {
                          "items": {
                            "description": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "description": "The locale filter, matches against the language. This can be a comma separated list. \"*\" will match all locales."
                    },
                    "name": {
                      "description": "Optional name of configuration.",
                      "type": "string"
                    },
                    "noSuggestDictionaries": {
                      "description": "Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.",
                      "items": {
                        "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "patterns": {
                      "description": "Defines a list of patterns that can be used with the `ignoreRegExpList` and `includeRegExpList` options.\n\nFor example:\n\n```javascript \"ignoreRegExpList\": [\"comments\"], \"patterns\": [   {     \"name\": \"comment-single-line\",     \"pattern\": \"/#.*​/g\"   },   {     \"name\": \"comment-multi-line\",     \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"   },   // You can also combine multiple named patterns into one single named pattern   {     \"name\": \"comments\",     \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]   } ] ```",
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "description": {
                            "description": "Description of the pattern.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList. It is possible to redefine one of the predefined patterns to override its value.",
                            "type": "string"
                          },
                          "pattern": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            ],
                            "description": "RegExp pattern or array of RegExp patterns."
                          }
                        },
                        "required": [
                          "name",
                          "pattern"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "suggestWords": {
                      "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "words": {
                      "description": "List of words to be considered correct.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "languageId"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "loadDefaultConfiguration": {
                "default": true,
                "description": "By default, the bundled dictionary configurations are loaded. Explicitly setting this to `false` will prevent ALL default configuration from being loaded.",
                "type": "boolean"
              },
              "maxDuplicateProblems": {
                "default": 5,
                "description": "The maximum number of times the same word can be flagged as an error in a file.",
                "type": "number"
              },
              "maxNumberOfProblems": {
                "default": 10000,
                "description": "The maximum number of problems to report in a file.",
                "type": "number"
              },
              "minWordLength": {
                "default": 4,
                "description": "The minimum length of a word before checking it against a dictionary.",
                "type": "number"
              },
              "name": {
                "description": "Optional name of configuration.",
                "type": "string"
              },
              "noSuggestDictionaries": {
                "description": "Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.",
                "items": {
                  "description": "Reference to a dictionary by name. One of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                  "type": "string"
                },
                "type": "array"
              },
              "numSuggestions": {
                "default": 10,
                "description": "Number of suggestions to make.",
                "type": "number"
              },
              "patterns": {
                "description": "Defines a list of patterns that can be used with the `ignoreRegExpList` and `includeRegExpList` options.\n\nFor example:\n\n```javascript \"ignoreRegExpList\": [\"comments\"], \"patterns\": [   {     \"name\": \"comment-single-line\",     \"pattern\": \"/#.*​/g\"   },   {     \"name\": \"comment-multi-line\",     \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"   },   // You can also combine multiple named patterns into one single named pattern   {     \"name\": \"comments\",     \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]   } ] ```",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "description": "Description of the pattern.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList. It is possible to redefine one of the predefined patterns to override its value.",
                      "type": "string"
                    },
                    "pattern": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      ],
                      "description": "RegExp pattern or array of RegExp patterns."
                    }
                  },
                  "required": [
                    "name",
                    "pattern"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "pnpFiles": {
                "default": [
                  ".pnp.js",
                  ".pnp.cjs"
                ],
                "description": "The PnP files to search for. Note: `.mjs` files are not currently supported.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "suggestWords": {
                "description": "A list of suggested replacements for words. Suggested words provide a way to make preferred suggestions on word replacements. To hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)     - `word: suggestion`     - `word->suggestion`\n- Multiple suggestions (not auto fixable)    - `word: first, second, third`    - `word->first, second, third`",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "suggestionNumChanges": {
                "default": 3,
                "description": "The maximum number of changes allowed on a word to be considered a suggestions.\n\nFor example, appending an `s` onto `example` -> `examples` is considered 1 change.\n\nRange: between 1 and 5.",
                "type": "number"
              },
              "suggestionsTimeout": {
                "default": 500,
                "description": "The maximum amount of time in milliseconds to generate suggestions for a word.",
                "type": "number"
              },
              "usePnP": {
                "default": false,
                "description": "Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading packages stored in the repository.\n\nWhen true, the spell checker will search up the directory structure for the existence of a PnP file and load it.",
                "type": "boolean"
              },
              "words": {
                "description": "List of words to be considered correct.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "filename"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "words": {
          "description": "List of words to be considered correct.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "customWordListFile": {
      "anyOf": [
        {
          "description": "Specify a path to a custom word list file",
          "type": "string"
        },
        {
          "additionalProperties": false,
          "properties": {
            "path": {
              "description": "Path to word list file. File format: 1 word per line",
              "type": "string"
            }
          },
          "required": [
            "path"
          ],
          "type": "object"
        }
      ],
      "description": "Specify a path to a custom word list file.\n\nexample: ```js customWordListFile: \"./myWords.txt\" ```"
    },
    "debugMode": {
      "default": false,
      "description": "Output debug logs",
      "type": "boolean"
    },
    "generateSuggestions": {
      "default": true,
      "description": "Generate suggestions",
      "type": "boolean"
    },
    "ignoreImportProperties": {
      "default": true,
      "description": "Ignore the properties of imported variables, structures, and types.\n\nExample: ``` import { example } from 'third-party';\n\nconst msg = example.property; // `property` is not spell checked. ```",
      "type": "boolean"
    },
    "ignoreImports": {
      "default": true,
      "description": "Ignore import and require names",
      "type": "boolean"
    },
    "numSuggestions": {
      "default": 8,
      "description": "Number of spelling suggestions to make.",
      "type": "number"
    }
  },
  "required": [
    "numSuggestions",
    "generateSuggestions",
    "autoFix"
  ],
  "type": "object"
}
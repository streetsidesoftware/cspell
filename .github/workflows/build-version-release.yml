name: " ðŸš€ Publish: 1. Create Version Release"

on:
  workflow_dispatch:
    inputs:
      bump:
        description: "Version Bump"
        type: choice
        options:
          - "patch"
          - "minor"
          - "major"
          - "auto"
        default: "auto"
        required: true
      prerelease:
        type: boolean
        description: Alpha prerelease
      dry_run:
        description: "Dry Run"
        type: boolean
        default: true

  workflow_call:
    secrets:
      token:
        required: true

permissions:
  contents: read

env:
  USE_NEXT: ${{ inputs.prerelease }}
  BUMP: ${{ (inputs.bump != 'auto' && inputs.bump) || '' }}
  DRY_RUN: ${{ (inputs.dry_run && '--dry-run') || '' }}

jobs:
  release_version:
    runs-on: ubuntu-latest
    steps:
      - name: Show Inputs
        env:
          INPUTS: ${{ toJSON(inputs) }}

        run: |
          echo "$INPUTS"
          echo USE_NEXT: "$USE_NEXT"
          echo BUMP: "$BUMP"
          echo DRY_RUN: "$DRY_RUN"

      - uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92 # v1.5 # cspell:ignore tibdex
        if: ${{ !env.DRY_RUN && !inputs.token }}
        id: generate-token
        with:
          app_id: ${{ secrets.AUTOMATION_APP_ID }}
          private_key: ${{ secrets.AUTOMATION_PRIVATE_KEY }}

      - name: Setup Token
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token || secrets.GITHUB_TOKEN }}
        run: echo GITHUB_TOKEN=$GITHUB_TOKEN >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }} # needed to trigger workflows

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: "https://registry.npmjs.org"
          cache: pnpm

      - name: Version
        run: |
          echo VERSION=$(jq -r .version lerna.json) >> $GITHUB_ENV

      - name: Mode
        env:
          MODE: >
            ${{ (env.USE_NEXT == 'true' && '--conventional-prerelease')
            || (contains(env.VERSION, 'alpha') && '--conventional-graduate')
            || ''
            }}
        run: |
          echo MODE=$MODE >> $GITHUB_ENV

      - name: Setup Git
        run: |
          git config user.name streetsidesoftware[bot]
          git config user.email streetsidesoftware[bot]@users.noreply.github.com
          git remote add gh-token "https://${{ env.GITHUB_TOKEN }}@github.com/streetsidesoftware/cspell.git"

      - name: Install
        run: pnpm i

      - name: Push Version
        run: pnpm lerna version --conventional-commits --sync-workspace-lock --yes ${{ env.MODE }} ${{ env.DRY_RUN }} ${{ env.BUMP }}
